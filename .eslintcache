[{"/home/lylepratt/workspace/vida-webrtc-widget/src/index.js":"1","/home/lylepratt/workspace/vida-webrtc-widget/src/App.js":"2","/home/lylepratt/workspace/vida-webrtc-widget/src/components/EmbedVidaAgent.js":"3","/home/lylepratt/workspace/vida-webrtc-widget/src/components/EmbedVidaChat.js":"4","/home/lylepratt/workspace/vida-webrtc-widget/src/components/EmbedSchedulingForm.js":"5","/home/lylepratt/workspace/vida-webrtc-widget/src/components/WebRTCClient.js":"6","/home/lylepratt/workspace/vida-webrtc-widget/src/components/CustomSip.js":"7"},{"size":2000,"mtime":1724081571370,"results":"8","hashOfConfig":"9"},{"size":523,"mtime":1724081568958,"results":"10","hashOfConfig":"9"},{"size":6532,"mtime":1717799242694,"results":"11","hashOfConfig":"9"},{"size":1152,"mtime":1724081568958,"results":"12","hashOfConfig":"9"},{"size":52155,"mtime":1726074126270,"results":"13","hashOfConfig":"9"},{"size":49829,"mtime":1717632541860,"results":"14","hashOfConfig":"9"},{"size":973390,"mtime":1717431904312,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"vqc0f0",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"19"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":61,"fixableErrorCount":0,"fixableWarningCount":1,"source":"32","usedDeprecatedRules":"19"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":251,"fixableErrorCount":0,"fixableWarningCount":113,"source":"35","usedDeprecatedRules":"19"},"/home/lylepratt/workspace/vida-webrtc-widget/src/index.js",["36"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport './index.css';\nimport App from './App';\n\n// Constants\nconst WIDGET_CLASS_NAME = 'vida-webrtc-widget';\nconst DATA_RENDERED_ATTRIBUTE = 'data-rendered';\n\n// Setup Axios once here\naxios.defaults.headers = { Accept: 'application/json' };\nconst axiosInstance = axios.create({\n    baseURL: process.env.REACT_APP_BASE_URL\n});\nexport default axiosInstance;\n\n// Function to render widgets\nconst renderWidgets = (elements) => {\n    elements.forEach(div => {\n        if (!div.getAttribute(DATA_RENDERED_ATTRIBUTE)) { // Check if widget is already rendered\n            ReactDOM.render(\n                <App agent={div.dataset.agent} welcome={div.dataset.welcome} size={div.dataset.size} mode={div.dataset.mode} />,\n                div\n            );\n            div.setAttribute(DATA_RENDERED_ATTRIBUTE, 'true'); // Mark this widget as rendered\n        }\n    });\n};\n\n// Initial render for elements already in the DOM\nrenderWidgets(document.querySelectorAll(`.${WIDGET_CLASS_NAME}`));\n\n// Observe the DOM for changes\nconst observer = new MutationObserver((mutations) => {\n    const newWidgets = [];\n    mutations.forEach((mutation) => {\n        if (mutation.type === 'childList') {\n            mutation.addedNodes.forEach((node) => {\n                if (node.nodeType === 1 && node.classList.contains(WIDGET_CLASS_NAME)) {\n                    newWidgets.push(node);\n                } else if (node.nodeType === 1) {\n                    // Check if any descendants have the target class\n                    node.querySelectorAll(`.${WIDGET_CLASS_NAME}`).forEach((descendant) => {\n                        newWidgets.push(descendant);\n                    });\n                }\n            });\n        }\n    });\n    if (newWidgets.length > 0) {\n        renderWidgets(newWidgets);\n    }\n});\n\n// Configure the observer to watch for additions to the DOM\n//observer.observe(document.body, { childList: true, subtree: true });\n",["37","38"],"/home/lylepratt/workspace/vida-webrtc-widget/src/App.js",[],"/home/lylepratt/workspace/vida-webrtc-widget/src/components/EmbedVidaAgent.js",["39","40","41","42","43","44","45"],"import 'regenerator-runtime/runtime';\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport WebRTCClient from \"./WebRTCClient\";\n\nexport default function EmbedVidaAgent(props) {\n  const [status, setStatus] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [destination, setDestination] = useState(props.agent);\n  const [targetAccount, setTargetAccount] = useState(null);\n  const [hangupCallNow, setHangupCallNow] = useState(false);\n  const [toggleAudioMute, setToggleAudioMute] = useState(false);\n  const [initiateCallNow, setInitiateCallNow] = useState(false);\n  const [showMediaError, setShowMediaError] = useState(false);\n  const [autoRegister, setAutoRegister] = useState(false);\n  const [apiUsername, setApiUsername] = useState(null);\n  const [apiToken, setApiToken] = useState(null);\n\n  const handleFetchTempUser = async () => {\n    return fetch(`https://api.vida.dev/api/v1/allocateTempUserSession`)\n      .then((res) => {\n        if (!res.ok) {\n          console.log(\"Error fetching temp user session!\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        setApiToken(data.token);\n        setApiUsername(data.username);\n        return data;\n      })\n      .catch(function () {\n        console.log(\"Error fetching temp user session\");\n        return false;\n      });\n  }\n\n  const handleFetchAccount = async () => {\n    return fetch(`https://api.vida.dev/api/v1/account/${destination}`)\n      .then((res) => {\n        if (!res.ok) {\n          console.log(\"Error fetching account!\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        setTargetAccount(data);\n        setLoading(false);\n        return data;\n      })\n      .catch(function () {\n        console.log(\"Error fetching temp user session\");\n        setLoading(false);\n        return false;\n      });\n  };\n\n  const handleStartCall = async () => {\n    console.log(\"Starting call...\")\n    if(!apiUsername || !apiToken) {\n      console.log(\"fetching temp account first\")\n      await handleFetchTempUser()\n    }\n    setAutoRegister(true)\n    setStatus(\"CONNECTING\");\n    setTimeout(function() {\n      setInitiateCallNow(true);\n    }, 1000);\n    \n  };\n\n  const handleDisconnect = () => {\n    console.log(\"disconnect\");\n\n    setInitiateCallNow(false);\n    setHangupCallNow(false);\n    setStatus(\"DISCONNECTED\");\n    setTimeout(function() {\n      setStatus(null);\n    }, 3000)\n  };\n\n  const handleHangup = () => {\n    console.log(\"hangup\");\n\n    setHangupCallNow(true);\n    setInitiateCallNow(false);\n    setStatus(\"DISCONNECTED\");\n    setTimeout(function() {\n      setStatus(null);\n    }, 3000)\n  };\n\n  const handleConnected = () => {\n    setStatus(\"CONNECTED\");\n  };\n\n  const handleMediaError = (error) => {\n    console.log(\"MEDIA ACCESS ERROR\");\n    console.log(error);\n    setShowMediaError(true);\n  };\n\n  const handleToggleAudio = async () => {\n    setToggleAudioMute(!toggleAudioMute);\n  };\n\n  \n  useEffect(() => {\n    if((!apiUsername || !apiToken) && autoRegister) {\n      handleFetchTempUser();\n    }\n    //if(!targetAccount) {\n    //  handleFetchAccount();\n    //}    \n  }, [apiUsername, apiToken, targetAccount, autoRegister]);\n\n  return (\n    <> \n      <div className={`main-container flex flex-row gap-4 ${((status && status == \"CONNECTED\") || props.size == \"expanded\") ? \"main-container-expanded\" : \"\"}`}>\n        {destination && \n        <>\n          <div className={`avatar-container flex flex-row items-center gap-1 ${status && status == \"CONNECTING\" ? \"call-loading\" : \"\"}`}>\n            <button\n              className=\"avatar-button curser-pointer\"\n              onClick={() => handleStartCall()}\n              >\n              <img src=\"https://vidapublic.s3.us-east-2.amazonaws.com/vida-icon-blue.png\" className=\"avatar-logo rounded-full\" />\n            </button>\n            {(!status || (status === \"DISCONNECTED\" || status === \"CONNECTING\")) && \n            <div className=\"avatar-text font-bold\">\n              <div className=\"mt-1 text-xs text-center\">\n                {!status  && <div className=\"welcome-text\">{props.welcome || \"Talk to our AI!\"}</div>}\n                {status === \"CONNECTING\" && <div className=\"welcome-text\">calling...</div>}\n                {status === \"DISCONNECTED\" && <div className=\"welcome-text\">ended...</div>}\n              </div>\n            </div>\n            }\n            {(status && status === \"CONNECTED\") && \n            <div className=\"call-buttons flex flex-col content-center place-content-end gap-2 text-xs \">\n              <div className=\"flex items-center\">\n                <button\n                  className=\"rounded-2xl bg-gray py-1 px-2\"\n                  onClick={handleToggleAudio}\n                >\n                  {toggleAudioMute ? \"Unmute\" : \"Mute\"}\n                </button>\n              </div>\n              <div className=\"flex items-center\">\n                <button\n                  className=\"rounded-2xl bg-warning py-1 px-2\"\n                  onClick={handleHangup}\n                >\n                  End\n                </button>\n              </div>\n            </div>\n            }\n          </div>          \n        </>\n        }\n        {!destination && !loading && \n          <div className=\"flex flex-row items-center text-center gap-2\">You must configure a Vida Agent username on your HTML element.</div>\n        }\n      </div>\n      <video id=\"localVideo\" className=\"hidden\" autoPlay playsInline />\n      <video id=\"remoteVideo\" className=\"hidden\" autoPlay playsInline />\n      {apiUsername && apiToken && autoRegister &&\n        <div className=\"hidden\">\n          <WebRTCClient\n            video={false}\n            autoRegister={true}\n            sipDomain={\"sip.vida.dev\"}\n            sipServer={\"sip.vida.dev\"}\n            sipUser={apiUsername}\n            sipPassword={apiToken}\n            iceTransportPolicy={\"relay\"}\n            destination={destination}\n            autoConnect={false}\n            autoAnswer={false}\n            hideControls={true}\n            hideConnectionStatus={true}\n            traceSip={false}\n            alertVideoUrl=\"/alert.mp4\"\n            ringbackVideoUrl=\"/ringback.mp4\"\n            onHangup={handleDisconnect}\n            onDisconnected={handleDisconnect}\n            onConnected={handleConnected}\n            onMediaError={handleMediaError}\n            hangupCallNow={hangupCallNow}\n            toggleAudioNow={toggleAudioMute}\n            initiateCallNow={initiateCallNow}\n          />\n        </div>\n      }      \n    </>\n  );\n}\n","/home/lylepratt/workspace/vida-webrtc-widget/src/components/EmbedVidaChat.js",["46","47"],"import 'regenerator-runtime/runtime';\nimport { useState, useEffect } from \"react\";\n\nexport default function EmbedVidaChat(props) {\n  const [apiUsername, setApiUsername] = useState(null);\n  const [apiToken, setApiToken] = useState(null);\n\n  const handleFetchTempUser = async () => {\n    return fetch(`https://api.vida.dev/api/v1/allocateTempUserSession`)\n      .then((res) => {\n        if (!res.ok) {\n          console.log(\"Error fetching temp user session!\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        setApiToken(data.token);\n        setApiUsername(data.username);\n        return data;\n      })\n      .catch(function () {\n        console.log(\"Error fetching temp user session\");\n        return false;\n      });\n  }\n\n  useEffect(() => {\n    if ((!apiUsername || !apiToken)) {\n      handleFetchTempUser();\n    }\n  }, []);\n\n  if (!apiUsername || !apiToken || !props.agent) {\n    return \"Loading...\";\n  }\n\n  return (\n    <div>\n      <iframe\n        src={`https://vida.io/embedChat?chatTarget=${props.agent}&token=${apiToken}&username=${apiUsername}`}\n        height={640}\n        width={480}\n      />\n    </div>\n  );\n}\n","/home/lylepratt/workspace/vida-webrtc-widget/src/components/EmbedSchedulingForm.js",["48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81"],"/home/lylepratt/workspace/vida-webrtc-widget/src/components/WebRTCClient.js",["82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142"],"/* eslint-disable no-console */\n//\n// Copyright (c) IOT Communications International . All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\n//\n\n/*jslint node: true */\n/*jslint white:true */\n/*jslint for:true */\n\n\"use strict\";\n\nimport React, { Component } from \"react\";\nimport * as SIP from './CustomSip.js'\n\n//import ringback from \"./ringback.mp4\";\n//import alert from \"./alert.mp4\";\nimport PropTypes from \"prop-types\";\nconst {detect} = require(\"detect-browser\");\n\n// eslint-disable-next-line\nconst adapter = require('webrtc-adapter');\n/*\nvar videoResolutionConstraints = {\n  width: {min: 640, max: 1280, ideal: 1280},\n  height: {min: 360, max: 720, ideal: 720},\n  frameRate: {min: 30, max: 60, ideal: 30, exact: 30},\n};\n*/\nvar videoResolutionConstraints = {\n  width: 1280,\n  height: 720\n};\n\nvar audioInputOptions = []\nvar audioOutputOptions = []\nvar videoInputOptions = []\nvar inputOutputSelectors = [audioInputOptions, audioOutputOptions, videoInputOptions];\n//var recordingData = [];\nvar recordingStatus = [];\nvar bwInterval = null;\nvar allMediaStreams = [];\n\nclass WebRTCClient extends Component {\n\n\n\n  constructor(props,context) {\n    super(props,context);\n    var sipServer = props.sipDomain;\n    if(props.sipServer) {\n      sipServer=props.sipServer;\n    }\n\n    var callLabel = \"Call\";\n    if(this.props.callLabel) {\n      callLabel = this.props.callLabel;\n    }\n\n\n    var remoteVideo = \"remoteVideo\";\n    if(props.remoteVideo) {\n      remoteVideo = props.remoteVideo;\n    }\n\n    var localVideo = \"localVideo\";\n    if(props.localVideo) {\n      localVideo = props.localVideo;\n    }\n    this.initialState = {\n      userid:props.sipUser,\n      video:props.video,\n      domain:props.sipDomain,\n      destination: props.destination,\n      sipServer:sipServer,\n      password:props.sipPassword,destination:props.destination,\n      metaData:props.metaData,\n      jwtAuth: props.jwtAuth,\n      autoRegister: props.autoRegister,callState:\"Idle\",\n      enableButtons:true,\n      ringbackVideoUrl:props.ringbackVideoUrl,\n      alertVideoUrl:props.alertVideoUrl,\n      callLabel: callLabel,\n      remoteVideo : remoteVideo,\n      localVideo: localVideo,\n      isAudioMuted: false,\n      isVideoMuted: false,\n      isScreenSharing: false,\n      isRecording: false,\n      mediaTested:false,\n      mediaSupported:false,\n      usingHttps: false,\n      video: props.video,\n      removeCodecs: props.removeCodecs,\n      campaignId: props.campaignId\n    }\n    this.state = this.initialState;\n  }\n\n  componentDidUpdate(prevProps) {\n    // console.log(\"componentDidUpdate prevProps\",prevProps, \"props\",this.props);\n    if(this.props.removeCodecs !== prevProps.removeCodecs) {\n      console.log(\"Setting removeCodecs\")\n      this.setState({\"removeCodecs\": this.props.removeCodecs})\n    }\n    if(this.props.campaignId !== prevProps.campaignId) {\n      console.log(\"Setting campaignId\")\n      this.setState({\"campaignId\": this.props.campaignId})\n    }\n    if(this.props.video !== prevProps.video) {\n      console.log(\"Setting video\")\n      this.setState({\"video\": this.props.video})\n    }\n    if(this.props.testMediaNow != prevProps.testMediaNow) {\n      if(this.props.testMediaNow) {\n        console.log(\"testing media\")\n        this.testMedia();\n      }\n    }\n    if(this.props.hangupCallNow != prevProps.hangupCallNow  && this.state.callState==\"InCall\") {\n      if(this.props.hangupCallNow) {\n        console.log(\"hanging up call\")\n        this.hangupCall();\n      }\n    }\n    if(this.props.answerCallNow != prevProps.answerCallNow && this.state.callState==\"Alerting\") {\n      if(this.props.answerCallNow) {\n        console.log(\"answering call\")\n        var testorstart = function(parent) {\n          if(!parent.state.mediaTested) {\n            console.log(\"waiting for media\")\n            setTimeout(testorstart.bind(null, parent), 2000);\n          }\n          else {\n            var context = this;\n            setTimeout(function() {\n              context.testMedia();  \n            }, 2000);\n            \n            parent.setState({\"video\": parent.props.video})\n            parent.answerCall(parent.props.video);\n          }\n        }\n        this.testMedia();\n        testorstart(this);\n      }\n    }\n    if(this.props.rejectCallNow != prevProps.rejectCallNow && this.state.callState==\"Alerting\") {\n      if(this.props.rejectCallNow) {\n        console.log(\"rejecting call\")\n        this.rejectCall();\n      }\n    }\n    if(this.props.initiateCallNow != prevProps.initiateCallNow && this.state.callState==\"Idle\") {\n      if(this.props.initiateCallNow) {\n        console.log(\"initiating call\")\n        console.log(this.state.destination)\n        console.log(\"video state\")\n        console.log(this.state.video)\n        var testCounter = 0;\n        var errorShown = false;\n        var testorstart = function(parent) {\n          if(!parent.state.mediaTested) {\n            console.log(\"waiting for media\")\n            testCounter = testCounter + 1;\n            setTimeout(testorstart.bind(null, parent), 2000);\n            if(testCounter > 5 && !errorShown) {\n              errorShown = true;\n              console.log(\"invoking onMediaError callback in waiter\");\n              if(parent.props.onMediaError) {\n                parent.props.onMediaError();\n              }\n            }\n          }\n          else {\n            parent.placeCall();\n          }\n        }\n        this.testMedia();\n        testorstart(this);\n      }\n    }\n    if(this.props.reinviteCallNow != prevProps.reinviteCallNow) {\n      if(this.props.reinviteCallNow) {\n        console.log(\"reinviting call\")\n        console.log(this.state.destination)\n        console.log(\"video state\")\n        console.log(this.state.video);\n        this.reinvite();\n      }\n    }\n    if(this.props.destination != prevProps.destination && this.state.callState==\"Idle\") {\n      console.log(\"Setting Destination\")\n      this.setState({\"destination\": this.props.destination})\n    }\n    if(this.props.toggleAudioNow != prevProps.toggleAudioNow && this.state.callState==\"InCall\") {\n      console.log(\"Toggling Audio\")\n      this.toggleMute(\"audio\");\n    }\n    if(this.props.toggleVideoNow != prevProps.toggleVideoNow && this.state.callState==\"InCall\") {\n      console.log(\"Toggling Video\")\n      this.toggleMute(\"video\");\n    }\n    if(this.props.toggleScreenshareNow != prevProps.toggleScreenshareNow && this.state.callState==\"InCall\") {\n\n      if(!this.state.isScreenSharing) {\n        console.log(\"Enabling Screenshare\")\n        this.startScreenShare();\n      }\n      else {\n        console.log(\"Disabling Screenshare\")\n        this.stopScreenShare();\n      }\n    }\n    if(this.props.updateAudioOutputDevice != prevProps.updateAudioOutputDevice) {\n      console.log(\"Updating Audio Output Device ID: \"+this.props.updateAudioOutputDevice)\n      this.props.setDefaultAudioOutputDevice(this.props.updateAudioOutputDevice)\n    }\n    if(this.props.updateAudioInputDevice != prevProps.updateAudioInputDevice) {\n      console.log(\"Updating Audio Input Device ID: \"+this.props.updateAudioInputDevice)\n      this.props.setDefaultAudioInputDevice(this.props.updateAudioInputDevice)\n      this.replaceAudioVideoTrack(this.props.updateAudioInputDevice, this.props.updateVideoInputDevice)\n    }\n    if(this.props.updateVideoInputDevice != prevProps.updateVideoInputDevice) {\n      console.log(\"Updating Video Input Device ID: \"+this.props.updateVideoInputDevice)\n      this.props.setDefaultVideoInputDevice(this.props.updateVideoInputDevice)\n      this.replaceAudioVideoTrack(this.props.updateAudioInputDevice, this.props.updateVideoInputDevice)\n    }\n    if(this.props.toggleRecordingNow != prevProps.toggleRecordingNow && this.state.callState==\"InCall\") {\n\n      if(!this.state.isRecording) {\n        console.log(\"Enabling Recording\")\n        this.startLocalRecording();\n      }\n      else {\n        console.log(\"Disabling Recording\")\n        this.stopLocalRecording();\n      }\n    }\n\n  }\n\n  //UNSAFE_componentWillMount() {\n  //  this.setState(this.initialState);\n  //}\n\n  async componentDidMount() {\n    this.setState(this.initialState);\n    //this.testMedia();\n    var traceSip = false;\n    if(this.props.traceSip) {\n      traceSip = this.props.traceSip;\n    }\n\n    /*\n    {\n        audio: true,\n        video: {\n          width: { exact: 1280 },\n          height: { exact: 720 }\n        }\n      }\n    */    \n\n    var options = {\n      uri: this.state.userid +\"@\" + this.state.domain,\n      transportOptions: {\n        wsServers: [\"wss://\"+this.state.sipServer+\":7443/ws\"],\n        traceSip:traceSip\n      },\n       sessionDescriptionHandlerFactoryOptions: {\n        peerConnectionOptions: {          \n          iceCheckingTimeout: 6000,\n          iceTransportPolicy: (this.props.iceTransportPolicy) ? this.props.iceTransportPolicy : \"all\",\n          iceCandidatePoolSize: 3,\n          rtcConfiguration: {\n            rtcpMuxPolicy: 'negotiate',\n            iceServers: [\n              {\n                urls: 'stun:stun3.l.google.com:19302'\n              },\n              {\n                urls: 'stun:turn.vida.dev:3478'\n              },\n              {\n                urls: 'turn:turn.vida.dev:3478?transport=udp',\n                username: '4ea629e2e2efe065f4ccb3bdfd6b6b083fed0808',\n                credential: '4so7NvXYWsV45T03Errjiap2PJ8'\n              },\n              {\n                urls: 'turn:turn.vida.dev:3478?transport=tcp',\n                username: '4ea629e2e2efe065f4ccb3bdfd6b6b083fed0808',\n                credential: '4so7NvXYWsV45T03Errjiap2PJ8'\n              },\n            ],\n            iceCheckingTimeout: 6000,\n            iceTransportPolicy: (this.props.iceTransportPolicy) ? this.props.iceTransportPolicy : \"all\",\n            iceCandidatePoolSize: 3,\n          }          \n        },\n        constraints: {\n          audio: true,\n          video: (this.state.video) ? videoResolutionConstraints : this.state.video \n        }\n      },\n      log: {\n        builtinEnabled: true\n      },\n      authorizationUser: this.state.userid,\n      password: this.state.password,\n      autostart: false,\n      //hackIpInContact:true,\n      hackWssInTransport:true,\n      register: false\n    };\n\n    this.connectionStateChanged(\"Disconnected\");\n\n\n    this.sipUa = new  SIP.UA(options);\n    console.log(\"SIP UA\")\n    console.log(this.sipUa)\n\n    this.sipUa.once(\"transportCreated\",  (transport) =>  {\n\n      transport.on(\"transportError\", () => {\n        this.setState({error:\"Network connection error\"});\n      });\n\n      transport.on(\"connecting\", () => {\n        this.connectionStateChanged(\"Connecting...\");\n      });\n\n      transport.on(\"connected\", () => {\n        console.log(\"Transport connected, props\",this.props);\n        this.connectionStateChanged(\"Connected\");\n        this.setState({error:\"\"});\n        if(this.props.autoRegister) {\n          this.register();\n        }\n\n        if(this.props.autoConnect) {\n          console.log(\"Auto connecting\");\n          this.placeCall();\n        }\n      });\n\n      transport.on(\"disconnecting\", () => {\n        this.connectionStateChanged(\"Disonnecting...\");\n      });\n\n      transport.on(\"disconnected\", () => {\n        this.connectionStateChanged(\"Disonnected\");\n      });\n\n\n\n\n    });\n\n    this.sipUa.on(\"invite\", (session)=>{\n      this.incomingCall(session);\n    });\n\n\n\n\n    this.sipUa.start();\n\n\n\n\n\n\n    //this.setState({userid: localStorage.getItem('userid'), domain: localStorage.getItem('domain'),websocket: localStorage.getItem('websocket'),routes: localStorage.getItem('routes'), password: localStorage.getItem('password')},()=>{this.updateSIPSettings()});\n  }\n\n  connectionStateChanged(newState) {\n    this.setState({connectionState:newState});\n  }\n\n  handleError(error) {\n    console.log('navigator.MediaDevices.getUserMedia error: ', error.message, error.name);\n  }\n  gotDevices(deviceInfos, context) {\n    // Handles being called several times to update labels. Preserve values.\n    var parent = this;\n\n    /*\n    const values = inputOutputSelectors.map(select => select.value);\n    inputOutputSelectors.forEach(select => {\n      while (select.firstChild) {\n        select.removeChild(select.firstChild);\n      }\n    });\n    */\n\n    //var audioInputOptions = []\n    //var audioOutputOptions = []\n    //var videoInputOptions = []\n    //var inputOutputSelectors =\n    var audioSupported = false;\n    var videoSupported = false;\n    for (let i = 0; i !== deviceInfos.length; ++i) {\n      const deviceInfo = deviceInfos[i];\n      console.log(deviceInfo)\n      //const option = document.createElement('option');\n      var option = {\n        value: \"\",\n        text: \"\"\n      }\n      option.value = deviceInfo.deviceId;\n      if (deviceInfo.kind === 'audioinput') {\n        audioSupported = true;\n        option.text = deviceInfo.label || `microphone ${audioInputOptions.length + 1}`;\n        audioInputOptions.push(option);\n      } else if (deviceInfo.kind === 'audiooutput') {\n        option.text = deviceInfo.label || `speaker ${audioOutputOptions.length + 1}`;\n        audioOutputOptions.push(option);\n      } else if (deviceInfo.kind === 'videoinput') {\n        videoSupported = true;\n        option.text = deviceInfo.label || `camera ${videoInputOptions.length + 1}`;\n        videoInputOptions.push(option);\n      } else {\n        console.log('Some other kind of source/device: ', deviceInfo);\n      }\n    }    \n    console.log(inputOutputSelectors)\n    console.log(\"running device list\")\n    if(context.props.onDeviceOptions) {\n      console.log(\"running device list callback\")\n      context.props.onDeviceOptions(inputOutputSelectors);\n    }\n\n    var usingHttps=false;\n    if (window.location.protocol === \"https:\") {\n      usingHttps=true;\n    }\n    if(!videoSupported) {\n      console.log(\"no camera attached. setting video off.\")\n      if(this.props.onNoCameraDetected) {\n        console.log(\"invoking onNoCameraDetected callback 1\");\n        this.props.onNoCameraDetected();\n      }\n      this.setState({\"video\": false})\n      videoSupported = false;\n      //videoResolutionConstraints = {mediaSource: 'screen'}\n    }\n    navigator.mediaDevices.getUserMedia({ audio: true, video: (this.state.video && videoSupported) ? videoResolutionConstraints : false })\n    //navigator.mediaDevices.getDisplayMedia({ audio: true, video: {mediaSource: 'screen'}})\n      .then( (stream) =>  {\n        console.log(\"adding stream in main getUserMedia\")\n        allMediaStreams.push(stream);\n        console.log(\"getUserMedia stream\")\n        console.log(stream)\n        parent.origStream = stream;\n        this.setState({mediaTested:true,mediaSupported:true,  audioSupported: audioSupported, videoSupported: videoSupported, usingHttps:usingHttps});\n      })\n      .catch((e) => {\n        console.log(e)\n        if(this.props.onMediaError) {\n          console.log(\"invoking onMediaError callback 1\");\n          this.props.onMediaError(e);\n        }\n        this.setState({mediaTested:true,mediaSupported:false, audioSupported: audioSupported, videoSupported: videoSupported, usingHttps:usingHttps});\n      });\n  }\n\n  testMedia() {\n    var usingHttps=false;\n    if (window.location.protocol === \"https:\") {\n      usingHttps=true;\n    }\n    var parent = this;\n    if(navigator.mediaDevices) {\n      console.log(\"RUNNING FETCH DEVICES\")\n      var context = this;\n      try {\n        navigator.mediaDevices.enumerateDevices().then(function(devices) {\n          context.gotDevices(devices, context)\n        })\n      }\n      catch(e) {\n        /*\n        if(this.props.onMediaError) {\n          console.log(\"invoking onMediaError Device Fetch callback\");\n          this.props.onMediaError(e);\n        }\n        */\n        this.handleError(e)\n      }\n\n    } else {\n      var browser = detect();\n      if(this.props.onMediaError) {\n        console.log(\"invoking onMediaError callback 2\");\n        this.props.onMediaError(browser);\n      }\n      this.setState({mediaTested:true,mediaSupported:false, audioSupported: false, videoSupported: false, usingHttps:usingHttps,browser:browser.name, os:browser.os});\n\n    }\n  }\n\n  hangupCall() {\n    console.log(\"hangupCall called\");\n\n    try {\n      this.currentSession.bye();\n    }\n    catch(e) {\n      try {\n        this.currentSession.cancel();\n      }\n      catch(e) {\n        console.log(e)\n      }\n\n    }\n\n    try {\n      this.currentSession.terminate();\n      // eslint-disable-next-line\n    } catch (e) {\n      console.log(e)\n      console.log(\"error ending call\")\n    }\n\n  }\n\n\n  handleCall(session) {\n    var localVideo = document.getElementById(this.state.localVideo);\n    this.currentSession = session;\n    var context = this;\n    setTimeout(function() {\n      console.log(\"getting devices again\")\n      context.testMedia();  \n    }, 2000);\n\n\n    this.currentSession.on(\"terminated\", () => {\n      //alert(\"terminated\")\n      console.log(\"fest -- terminated\")\n\n      //if(this.state.isRecording) {\n      //  this.stopLocalRecording();\n      //}\n\n      if(this.localStream) {\n\n        //alert(\"stop local\")      \n        console.log(\"fest -- stop local\")\n        console.log(this.localStream)\n        //console.log(this.localStream)\n        this.localStream.getTracks().forEach(track => {\n          console.log(\"stopping local stream\")\n          track.stop();\n          track.enabled = false\n        });\n        this.localStream = null;\n      }\n      if(this.remoteStream) {\n        //alert(\"stop remote\")\n        console.log(\"fest -- stop remote\")\n        console.log(this.remoteStream)\n        //console.log(this.remoteStream)\n        this.remoteStream.getTracks().forEach(track => {\n          console.log(\"stopping remote stream\")\n          track.stop();\n          track.enabled = false\n        });\n        this.remoteStream = null;\n      }\n      if(this.screenshareStream) {\n        //alert(\"stop screenshare\")\n        console.log(\"fest -- stop screenshare\")\n        this.screenshareStream.getTracks().forEach(track => {\n          console.log(\"stopping screenshare stream\")\n          track.stop();\n          track.enabled = false\n        });\n        this.screenshareStream = null;\n      }\n      if(this.origStream) {        \n        //alert(\"stop orig\")\n        console.log(\"fest -- stop orig\")\n        console.log(this.origStream)\n        //console.log(this.origStream)\n        this.origStream.getTracks().forEach(track => {\n          console.log(\"stopping orig stream\")\n          track.stop();\n          track.enabled = false\n        });\n        console.log(this.origStream)\n        this.origStream = null;\n      }      \n\n      console.log(\"allMediaStreams\")\n      console.log(allMediaStreams)\n      for(var streamId in allMediaStreams) {\n        var thisStream = allMediaStreams[streamId];\n        console.log(\"fest -- stop stream\" +streamId)\n        console.log(thisStream)\n        //console.log(thisStream)\n        thisStream.getTracks().forEach(track => {\n          console.log(\"stopping stream \"+streamId)\n          track.stop();\n          track.enabled = false\n        });\n        console.log(thisStream)\n        thisStream = null;\n      }\n      allMediaStreams = [];\n\n      var localVideo = document.getElementById(this.state.localVideo);\n      console.log(this.state.localVideo)\n      var remoteVideo = document.getElementById(this.state.remoteVideo);\n      console.log(this.state.remoteVideo)\n      if(localVideo) {\n        //alert(\"killing local\")\n        console.log(\"fest -- killing local\")\n        localVideo.pause();\n        localVideo.src=\"\";\n        localVideo.srcObject = null;\n        localVideo.removeAttribute(\"src\");\n        localVideo.removeAttribute(\"loop\");\n      }\n      if(remoteVideo) {\n        //alert(\"killing remote\")\n        console.log(\"fest -- killing remote\")\n        remoteVideo.pause();\n        remoteVideo.src=\"\";\n        remoteVideo.srcObject = null;\n        remoteVideo.removeAttribute(\"src\");\n        remoteVideo.removeAttribute(\"loop\");\n      }\n      \n      this.setState({callState:\"Idle\"});\n\n      if(this.props.onDisconnected) {\n        console.log(\"invoking onDisconnected callback\");\n        this.props.onDisconnected(this);\n      }\n      if(bwInterval) {\n        clearInterval(bwInterval)  \n      }\n    });\n\n    this.currentSession.on(\"accepted\", () => {\n      this.setState({callState:\"InCall\"});\n      localVideo = document.getElementById(this.state.localVideo);\n      console.log(\"on accepted\")\n      console.log(localVideo)\n      this.callConnected();\n      var parent = this;\n      //setTimeout(function() {parent.reinvite()}, 5000)      \n\n      if(this.props.onConnected) {\n        console.log(\"invoking onConnected callback\");\n        this.props.onConnected(this);\n      }\n\n    });\n\n    this.currentSession.on(\"cancel\", () => {\n      this.setState({callState:\"Canceling\"});\n    });\n\n    this.currentSession.on(\"rejected\", (response,cause) => {\n      this.setState({error:\"Call failed: \" + cause});\n    });\n\n\n    this.currentSession.on(\"SessionDescriptionHandler-created\", () => {\n      //const pc = this.currentSession.sessionDescriptionHandler.peerConnection;\n      //const videoSender = pc.getSenders().find(sender => sender.track.kind === 'video');\n      //pc.removeTrack(videoSender);\n      this.currentSession.sessionDescriptionHandler.on(\"getDescription\", (sdpWrapper)=> {\n        console.log(\"sdpWrapper\")\n        console.log(sdpWrapper)\n      });\n      this.currentSession.sessionDescriptionHandler.on(\"userMediaRequest\", (constraints)=> {\n        console.log(\"user media request\")\n        console.log(constraints)\n      });\n      this.currentSession.sessionDescriptionHandler.on(\"userMediaFailed\", (e)=> {\n        console.log(\"Local User Media Failed!\")\n        console.log(e)\n      });\n    });\n\n    \n    this.currentSession.on(\"trackAdded\", async (event) => {\n      console.log(\"On TrackAdded!!!!!!!!!!!!\")\n      console.log(event)\n      \n      localVideo = document.getElementById(this.state.localVideo);\n      // We need to check the peer connection to determine which track was added\n      if(this.currentSession.sessionDescriptionHandler) {\n        if(this.currentSession.sessionDescriptionHandler.peerConnection) {\n          var parent = this;          \n          var pc = this.currentSession.sessionDescriptionHandler.peerConnection;\n          // Gets remote tracks\n          parent.remoteStream = new MediaStream();\n          parent.receiverStatsTrack = null;\n          parent.senderStatsTrack = null;\n          pc.getReceivers().forEach(function(receiver) {\n            if(receiver.track) {\n              if(receiver.track.kind == \"audio\") {\n                console.log(\"tracking audio receiver track\")\n              }\n              if(receiver.track.kind == \"video\") {\n                console.log(\"tracking video receiver track\")\n                parent.receiverStatsTrack = receiver.track;\n              }\n              parent.remoteStream.addTrack(receiver.track);              \n            }\n          });\n\n          // Gets local tracks\n          parent.localStream = new MediaStream();\n\n          pc.getSenders().forEach(function(sender) {\n            if(sender.track) {\n              parent.localStream.addTrack(sender.track);              \n              console.log(\"Local stream sender track!\")\n              console.log(sender.track)\n              if(sender.track.kind == \"audio\") {\n                console.log(\"setting default audio device ID\")\n                console.log(sender.track.getSettings().deviceId)\n                if(parent?.props?.setDefaultAudioInputDevice) {\n                  parent.props.setDefaultAudioInputDevice(sender.track.getSettings().deviceId)  \n                }                \n              }\n              if(sender.track.kind == \"video\") {\n                console.log(\"setting default video device ID\")\n                console.log(sender.track.getSettings().deviceId)\n                if(parent?.props?.setDefaultVideoInputDevice) {\n                  parent.props.setDefaultVideoInputDevice(sender.track.getSettings().deviceId)\n                }\n                console.log(\"tracking video sender track\")\n                parent.senderStatsTrack = sender.track;\n              }\n\n            }\n          });          \n          if(this.state.video) {\n            this.props.onLocalVideo(parent.localStream);\n            setTimeout(() => {\n              localVideo = document.getElementById(this.state.localVideo);\n              //console.log(\"local video while looping tracks\")\n              //console.log(localVideo)\n              try {\n                localVideo.srcObject = parent.localStream;\n                localVideo.play().catch(()=>{});\n              }\n              catch(e) {\n                console.log(e)\n                console.log(\"problem setting local video\")\n              }\n            }, 2000);\n          }\n          \n          if(parent.receiverStatsTrack && parent.senderStatsTrack && !bwInterval) {\n            console.log(\"setting bw interval!\")\n            parent.restartStatInterval()\n          }\n        }\n      }\n    });\n  }\n\n  restartStatInterval() {\n    if(!this.state.video) {\n      return;\n    }\n    console.log(\"restarting bw stats interval\")\n    var parent = this;\n    var lastRTimestamp = null;\n    var lastRBytesReceived = null;\n    var lastRPacketsLost = null;\n    var lastSTimestamp = null;\n    var lastSBytesSent = null;\n    var lastSPacketsRetry = null;\n    var lastSBytesReceived = null;\n    if(bwInterval) {\n      clearInterval(bwInterval);\n    }\n    bwInterval = setInterval(() => {\n      this.currentSession.sessionDescriptionHandler.peerConnection.getStats(parent.receiverStatsTrack)\n        .then(stats => {\n          var timestamp = null;\n          stats.forEach(report => {\n            if (report.type === 'inbound-rtp' && report.kind == \"video\") {\n              const bytesReceived = report.bytesReceived;\n              const packetsLost = report.packetsLost;\n              //console.log(`packetsLost: ${packetsLost}`)\n              timestamp = report.timestamp;\n              if(lastRBytesReceived !== null && lastRTimestamp !== null) {\n                var downBw = ((bytesReceived - lastRBytesReceived) / (timestamp - lastRTimestamp)) * 8;\n                //console.log(\"==========================\")\n                //console.log(`Receiver Inbound bandwidth: ${downBw} kbps`);\n                if(parent.props.onDownloadBandwidth) {\n                  this.props.onDownloadBandwidth(downBw);\n                }                \n              }\n              if(lastRPacketsLost !== null && lastRTimestamp !== null) {\n                var downPacketsLost = ((packetsLost - lastRPacketsLost) / (timestamp - lastRTimestamp));\n                //console.log(`downPacketsLost: ${downPacketsLost}`)\n                if(parent.props.onDownloadPacketsLost) {\n                  this.props.onDownloadPacketsLost(downPacketsLost);\n                }\n              }\n              lastRBytesReceived = bytesReceived;\n              lastRPacketsLost = packetsLost;\n            }\n          });\n          lastRTimestamp = timestamp;\n        })\n        .catch(error => {\n          console.log(\"errror in receiver Video track stats\")\n          console.error(error);\n        });\n      \n      this.currentSession.sessionDescriptionHandler.peerConnection.getStats(parent.senderStatsTrack)\n        .then(stats => {\n          var timestamp = null;\n          stats.forEach(report => {\n            if (report.type === 'outbound-rtp' && report.kind == \"video\") {\n              const bytesSent = report.bytesSent;\n              const packetsRetry = report.retransmittedPacketsSent;\n              //console.log(`packetsRetry: ${packetsRetry}`)\n              timestamp = report.timestamp;                    \n              if(lastSBytesSent !== null && lastSTimestamp !== null) {\n                var upBw = ((bytesSent - lastSBytesSent) / (timestamp - lastSTimestamp)) * 8;                \n                //console.log(\"==========================\")\n                //console.log(`Sender Upload bandwidth: ${upBw} kbps`);\n                if(parent.props.onUploadBandwidth) {\n                  this.props.onUploadBandwidth(upBw);\n                }                \n              }\n              if(lastSPacketsRetry !== null && lastSTimestamp !== null) {\n                //var upPacketsRetry = ((packetsRetry - lastSPacketsRetry) / (timestamp - lastSTimestamp)) * 8;\n                var upPacketsRetry = ((packetsRetry - lastSPacketsRetry) / (timestamp - lastSTimestamp));\n                //console.log(`upPacketsRetry: ${upPacketsRetry}`)\n                if(parent.props.onUploadPacketsRetry) {\n                  this.props.onUploadPacketsRetry(upPacketsRetry);\n                }\n              }\n              lastSBytesSent = bytesSent;\n              lastSPacketsRetry = packetsRetry;\n            }\n          });\n          lastSTimestamp = timestamp;\n        })\n        .catch(error => {\n          console.log(\"errror in sender Video track stats\")\n          console.error(error);\n        });\n    }, 1000); // Get stats every second\n  }\n\n  answerCall(overrideVideo) {\n    var parent = this;\n    var answerVideo = this.state.video;\n    if(overrideVideo !== undefined) {\n      answerVideo = overrideVideo;\n    }\n    if(this.currentSession) {\n      try {\n        console.log(\"ANSWERING WITH VIDEO ENABLED\")\n        console.log(overrideVideo)\n        this.setState({error:\"\"});\n        var myModifier = function(description) {\n          if(parent.state.removeCodecs) {\n            var codecs = parent.state.removeCodecs.split(\",\")\n            for(var codecIn in codecs) {\n              console.log(\"removing codec from offer: \"+codecs[codecIn])\n              description.sdp = parent.removeCodec(description.sdp, codecs[codecIn])\n            }\n          }\n          return Promise.resolve(description);\n        };\n        this.currentSession.accept({\n          sessionDescriptionHandlerOptions: {\n            constraints: {\n              audio: true,\n              video: (answerVideo) ? videoResolutionConstraints : answerVideo\n            }\n          }\n        }, [myModifier]);\n        // eslint-disable-next-line\n      } catch (e) {\n        console.log(\"Error answering call\")\n        console.log(e);\n      }\n    }\n  }\n\n  rejectCall() {\n    if(this.currentSession) {\n      try {\n        this.setState({error:\"\"});\n        this.currentSession.reject();\n        // eslint-disable-next-line\n      } catch (e) {\n        console.log(\"Error rejecting call\")\n        console.log(e);\n      }\n    }\n  }\n\n  toggleMute(type) {\n    var parentState = this.state;\n    if (this.currentSession.sessionDescriptionHandler.peerConnection.getSenders) {\n      this.currentSession.sessionDescriptionHandler.peerConnection.getSenders().forEach(function(sender) {\n        if (sender.track) {\n          if(sender.track.kind == \"audio\") {\n            if(type == \"audio\" || type == \"both\") {\n                parentState.isAudioMuted = !parentState.isAudioMuted;\n                sender.track.enabled = !parentState.isAudioMuted;\n            }\n          }\n          if(sender.track.kind == \"video\") {\n            if(type == \"video\" || type == \"both\") {\n              parentState.isVideoMuted = !parentState.isVideoMuted;\n              sender.track.enabled = !parentState.isVideoMuted;\n            }\n          }\n        }\n\n      });\n    }\n    else {\n      this.currentSession.sessionDescriptionHandler.peerConnection.getLocalStreams().forEach(function(stream) {\n        if(type == \"audio\" || type == \"both\") {\n          parentState.isAudioMuted = !parentState.isAudioMuted;\n          stream.getAudioTracks().forEach(function(track) {\n            track.enabled = !parentState.isAudioMuted;\n          });\n        }\n        if(type == \"video\" || type == \"both\") {\n          parentState.isVideoMuted = !parentState.isVideoMuted;\n          stream.getVideoTracks().forEach(function(track) {\n            track.enabled = !parentState.isVideoMuted;\n          });\n        }\n      });\n    }\n  }\n  replaceAudioVideoTrack(audioSourceId, videoSourceId) {\n    console.log(\"Updating Audio Video Tracks\")\n    var parent = this;\n    var wasRecording = false;\n    //this.state.isScreenSharing = true;\n    //var option = {video: {mediaSource: 'screen'}, audio: true};\n    const constraints = {\n      audio: {deviceId: audioSourceId ? {exact: audioSourceId} : true},\n      video: {deviceId: videoSourceId ? {exact: videoSourceId} : undefined, width: 1280, height: 720}\n    };\n    console.log(constraints)\n    if(navigator.mediaDevices) {\n      if(parent.localStream) {\n        console.log(\"stopping existing streams\")\n        parent.localStream.getTracks().forEach(track => {\n          track.stop();\n        });\n      }\n      if(this.state.isRecording) {\n        wasRecording = true;\n      }\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(function(streams){\n        console.log(\"adding stream in replaceAudioTrack\")\n        allMediaStreams.push(streams);\n        var videoTrack = streams.getVideoTracks()[0];\n        var sender = parent.currentSession.sessionDescriptionHandler.peerConnection.getSenders().find(function(s) {\n          return s.track.kind == videoTrack.kind;\n        });\n        sender.replaceTrack(videoTrack);\n        parent.senderStatsTrack = videoTrack;\n\n        var audioTrack = streams.getAudioTracks()[0];\n        var sender = parent.currentSession.sessionDescriptionHandler.peerConnection.getSenders().find(function(s) {\n          return s.track.kind == audioTrack.kind;\n        });\n        sender.replaceTrack(audioTrack);\n\n        if(parent.localStream) {\n          var localAudio = parent.localStream.getAudioTracks();\n          if(localAudio) {\n            if (localAudio.length > 0) {\n              parent.localStream.removeTrack(localAudio[0]);\n            }\n          }\n\n          var localVideo = parent.localStream.getVideoTracks();\n          if(localVideo) {\n            if (localVideo.length > 0) {\n              parent.localStream.removeTrack(localVideo[0]);\n            }\n          }\n\n          parent.localStream.addTrack(videoTrack);\n          parent.localStream.addTrack(audioTrack);\n\n        }\n        if(wasRecording) {\n          console.log(\"restarting local recording\")\n          parent.startLocalRecording()\n        }\n        parent.restartStatInterval()\n\n      }, function(error){\n       console.log(\"error \", error);\n      });\n    }\n  }\n\n  startScreenShare() {\n    var parent = this;\n    this.setState({\"isScreenSharing\": true})\n    //this.state.isScreenSharing = true;\n    var option = {video: {mediaSource: 'screen', maxWidth: 1280, maxHeight: 720}, audio: true};\n    if(navigator.mediaDevices) {\n      navigator.mediaDevices.getDisplayMedia(option)\n      .then(function(streams){\n        parent.screenshareStream = streams;\n        var videoTrack = streams.getVideoTracks()[0];\n        var sender = parent.currentSession.sessionDescriptionHandler.peerConnection.getSenders().find(function(s) {\n          console.log(\"sender track\")\n          console.log(s)          \n          return !s.track || s.track && s.track.kind == videoTrack.kind;\n        });\n        console.log('sender')\n        console.log(sender)\n        sender.replaceTrack(videoTrack);          \n        parent.senderStatsTrack = videoTrack;\n        parent.restartStatInterval()\n\n        /*\n        // may need something like this for local recording\n        if(parent.localStream) {\n          var localVideo = parent.localStream.getVideoTracks();\n          if(localVideo) {\n            if (localVideo.length > 0) {\n              parent.localStream.removeTrack(localVideo[0]);\n            }\n          }\n          parent.localStream.addTrack(videoTrack);\n        }\n        */\n\n        parent.props.toggleScreenshareCallback(true)\n      }, function(error){\n        console.log(\"error \", error);\n        parent.props.toggleScreenshareCallback(false)\n      });\n    }\n  }\n\n  stopScreenShare() {\n    var parent = this;\n    //this.state.isScreenSharing = false;\n    this.setState({\"isScreenSharing\": false})\n    if(navigator.mediaDevices) {\n      if(parent.screenshareStream) {\n        console.log(\"stopping screenshare streams\")\n        parent.screenshareStream.getTracks().forEach(track => {\n          track.stop();\n        });\n      }\n      //var option = {video: true, audio: true};\n      //navigator.mediaDevices.getUserMedia(option)\n      //.then(function(streams){\n      var streams = parent.localStream;\n       var videoTrack = streams.getVideoTracks()[0];\n       var sender = parent.currentSession.sessionDescriptionHandler.peerConnection.getSenders().find(function(s) {\n         //return s.track.kind == videoTrack.kind;\n          return !s.track || s.track && s.track.kind == \"video\";\n       });\n       sender.replaceTrack(videoTrack);\n       parent.senderStatsTrack = videoTrack;\n       parent.restartStatInterval()\n       parent.props.toggleScreenshareCallback(false)\n      //}, function(error){\n      // console.log(\"error \", error);\n      // parent.props.toggleScreenshareCallback(false)\n      //});\n    }\n  }\n\n\n  getHeaderValue(header) {\n    if(this.req) {\n      return  this.req.getHeader(header);\n    }\n  }\n\n  incomingCall(session) {\n    this.setState({callState:\"Alerting\"});\n\n    if(this.props.onConnecting) {\n      console.log(\"invoking onConnecting callback\");\n      this.props.onConnecting(this, session);\n    }\n\n\n    var remoteVideo = document.getElementById(this.state.remoteVideo);\n    /*\n    if(this.state.alertVideoUrl) {\n      remoteVideo.src = this.state.alertVideoUrl;\n    }\n\n\n    remoteVideo.setAttribute(\"loop\",true);\n    remoteVideo.play();\n    */\n\n    this.handleCall(session);\n\n    var req = session.request;\n    this.req = req;\n    var encodedMeta = req.getHeader(\"X-MetaData\");\n    if(encodedMeta) {\n      try {\n        this.setState({receivedMeta:JSON.parse(decodeURIComponent(encodedMeta))});\n      } catch(e) {\n        console.warn(\"Could not parse meta data header\");\n      }\n    }\n\n    if(this.props.autoAnswer) {\n      console.log(\"Auto answering\");\n      this.answerCall();\n      return;\n    }\n    if(this.props.onRinging) {\n      console.log(\"invoking onRinging callback\");\n      this.props.onRinging(this, session);\n    }\n    return;\n  }\n\n  register() {\n    var registerOptions = {};\n    registerOptions.extraHeaders = [];\n    if(this.state.jwtAuth) {\n      registerOptions.extraHeaders.push(\"X-JWTAuth:\"+this.state.jwtAuth);\n    }\n\n    this.sipUa.register(registerOptions);\n\n\n  }\n\n  placeCall() {\n    var parent = this;\n    this.setState({callState:\"Calling\", error:\"\"});\n    var inviteOptions = {};\n    inviteOptions.extraHeaders = [];\n    if(this.state.metaData) {\n      var encodedMeta = encodeURIComponent(JSON.stringify(this.state.metaData));\n      inviteOptions.extraHeaders.push(\"X-MetaData:\"+encodedMeta);\n    }\n\n    if(this.state.jwtAuth) {\n      inviteOptions.extraHeaders.push(\"X-JWTAuth:\"+this.state.jwtAuth);\n    }\n    if(this.state.campaignId) {\n      inviteOptions.extraHeaders.push(\"X-ForceCampaignId:\"+this.state.campaignId);\n    }\n    inviteOptions.sessionDescriptionHandlerOptions = {\n      /*\n      RTCOfferOptions: {\n        offerToReceiveAudio: true,\n        offerToReceiveVideo: true,\n        iceRestart: true\n      },\n      */\n      constraints: {\n        audio: true,\n        video: (this.state.video) ? videoResolutionConstraints : this.state.video\n        //video: videoResolutionConstraints\n        //video: {mediaSource: 'screen'}\n      }\n    }\n    if(this.state.video && !inviteOptions.sessionDescriptionHandlerOptions.constraints.video) {\n      inviteOptions.sessionDescriptionHandlerOptions.RTCOfferOptions = {\n        offerToReceiveVideo: true\n      }\n    }\n    var myModifier = function(description) {\n      if(parent.state.removeCodecs) {\n        var codecs = parent.state.removeCodecs.split(\",\")\n        for(var codecIn in codecs) {\n          console.log(\"removing codec from offer: \"+codecs[codecIn])\n          description.sdp = parent.removeCodec(description.sdp, codecs[codecIn])\n        }\n      }\n      return Promise.resolve(description);\n    };\n    var session = this.sipUa.invite(this.state.destination, inviteOptions, [myModifier]);\n    this.handleCall(session);    \n  }\n\n  removeCodec(sdp, codecName) {\n      const lines = sdp.split('\\r\\n');\n      let codecPayloadType = null;\n\n      // First, identify the payload type for the specified codec.\n      for (const line of lines) {\n          const rtpmapMatch = line.match(new RegExp(`a=rtpmap:(\\\\d+) ${codecName}\\\\/`, 'i'));\n          if (rtpmapMatch) {\n              codecPayloadType = rtpmapMatch[1];\n              break;\n          }\n      }\n\n      if (codecPayloadType) {\n          let mAudioLineProcessed = false;\n          const processedLines = lines.map(line => {\n              // Special handling for the m=audio line\n              if (line.startsWith('m=audio ') && !mAudioLineProcessed) {\n                  mAudioLineProcessed = true; // Ensure we only process the m=audio line once\n                  const parts = line.split(' ');\n                  // The first three parts are \"m=audio\", port, and protocol, which should be preserved\n                  const mAudioHeader = parts.slice(0, 3);\n                  const codecList = parts.slice(3);\n                  // Remove only the codec payload type from the list of codecs\n                  const filteredCodecList = codecList.filter(part => part !== codecPayloadType);\n                  return [...mAudioHeader, ...filteredCodecList].join(' ');\n              } else if (line.includes(`a=rtpmap:${codecPayloadType} `) || line.includes(`a=fmtp:${codecPayloadType}`) || line.includes(`a=rtcp-fb:${codecPayloadType}`)) {\n                  // Remove lines defining the codec being removed\n                  return null;\n              }\n              return line; // Preserve all other lines\n          }).filter(line => line !== null); // Remove null entries (lines marked for removal)\n\n          return processedLines.join('\\r\\n');\n      } else {\n          // Codec was not found, return the original SDP unchanged.\n          return sdp;\n      }\n  }\n\n  reinvite() {\n    var parent = this;\n    console.log(\"reinviting\")\n    //this.setState({callState:\"Calling\", error:\"\"});\n    var inviteOptions = {};\n    inviteOptions.extraHeaders = [];\n    inviteOptions.sessionDescriptionHandlerOptions = {      \n      /*\n      RTCOfferOptions: {\n        offerToReceiveAudio: true,\n        offerToReceiveVideo: (this.state.video) ? true : false,\n        iceRestart: true\n      },\n      */\n      constraints: {\n        audio: true,\n        video: (this.state.video) ? videoResolutionConstraints : this.state.video\n        //video: {mediaSource: 'screen'}\n      }\n    }\n    var myModifier = function(description) {\n      if(parent.state.removeCodecs) {\n        var codecs = parent.state.removeCodecs.split(\",\")\n        for(var codecIn in codecs) {\n          console.log(\"removing codec from offer: \"+codecs[codecIn])\n          description.sdp = parent.removeCodec(description.sdp, codecs[codecIn])\n        }\n      }\n      return Promise.resolve(description);\n    };\n    var session = this.currentSession.reinvite(inviteOptions, [myModifier]);\n    //this.handleCall(session);\n  }\n\n\n  callConnected() {\n\n\n    console.log(\"callConnected\");\n\n\n    var remoteStream = this.remoteStream;\n    if(this.remoteStream) {\n      setTimeout(function() {\n        try {\n          try {\n            var remoteVideo = document.getElementById(this.state.remoteVideo);\n          }\n          catch(e) {\n            var remoteVideo = document.getElementById(\"remoteVideo\");\n          }\n\n          remoteVideo.srcObject = remoteStream;\n          remoteVideo.play().catch(()=>{});\n          // eslint-disable-next-line\n        } catch (e) {\n          console.log(\"problem playing remote video\")\n          console.log(e)\n          console.log(remoteVideo)\n        }\n      }, 1000)\n    }\n\n  }\n\n  /*\n  * Local Recording\n  */\n\n  checkCodecsSupported() {\n    let options = {mimeType: 'video/mp4'};\n    if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n      console.log(`${options.mimeType} is not supported`);\n      options = {mimeType: 'video/webm;codecs=vp8,opus'};      \n      if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n        console.log(`${options.mimeType} is not supported`);\n        options = {mimeType: 'video/webm'};\n        if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n          console.log(`${options.mimeType} is not supported`);\n          options = {mimeType: ''};\n        }\n      }\n    }\n    console.log(\"Recording codecs!\")\n    console.log(options)\n    return options;\n  }\n\n  /*\n  downloadLocalRecording() {\n      var blob = new Blob(recordingData, {type: recordingData[0].type});\n      var url = window.URL.createObjectURL(blob);\n      var a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = 'recording.webm';\n      document.body.appendChild(a);\n      a.click();\n      setTimeout(function() {\n          document.body.removeChild(a);\n          window.URL.revokeObjectURL(url);\n      }, 100);\n  }\n  */\n\n  startLocalRecording() {\n    console.log(\"Starting local recording\")\n    const options = this.checkCodecsSupported();\n    if(this.localStream) {\n      const MIN_BLOB_SIZE = 5 * 1024 * 1024;\n      var partSize = 0;\n      var parts = [];\n      this.recorder = new MediaRecorder(this.localStream, options);\n      this.localRecordingStart = Math.floor(new Date().getTime() / 1000);\n      this.localRecordingStop = null;\n      var parent = this;\n      var firstChunk = true;\n\n      this.recorder.ondataavailable = e => {\n        console.log(\"on recording data\")\n        if (e.data && e.data.size > 0) {\n          //recordingData.push(e.data);\n          //console.log(recordingData)\n          const blob = e.data;\n          partSize += blob.size;\n          parts.push(blob);\n          var final = (!parent.state.isRecording || parent.recorder.state == \"inactive\") ? true : false\n          if (partSize > MIN_BLOB_SIZE || final) {\n            let bigBlob = new Blob(parts, { type: blob.type });\n            partSize = 0;\n            parts = [];\n            var reader = new FileReader();\n            //reader.readAsArrayBuffer(e.data);\n            reader.readAsDataURL(bigBlob);\n            reader.onloadend = async function(event) {\n              let base64Data = reader.result;\n              //console.log(base64Data)\n              //let uint8View = new Uint8Array(arrayBuffer);\n              //console.log(\"recorder in onloadend\")\n              //console.log(parent.recorder)\n              if(!parent.localRecordingStop) {\n                parent.localRecordingStop = Math.floor(new Date().getTime() / 1000);  \n              }\n              var resultDict = {\n                first: firstChunk,\n                uploaded: false,\n                recordingStart: parent.localRecordingStart,\n                recordingStop: parent.localRecordingStop,\n                final: final,\n                chunk: base64Data,\n                mimeType: options.mimeType\n              }\n              firstChunk = false;\n              //recordingStatus.push(resultDict)\n              parent.props.recordingChunkCallback(resultDict)\n\n              if(!parent.state.isRecording) {\n                console.log(\"finalized recording\")\n                //parent.downloadLocalRecording()\n                //recordingData = [];\n                //console.log(recordingData)\n              }\n            }\n          }\n        }\n      };\n\n      this.recorder.onStop = () => {\n        console.log(\"recording stopped\")\n        //console.log(\"this recorder in onStop\")\n        //console.log(parent.recorder)\n        //this.localStream.getTracks().forEach(track => track.stop());\n        parent.setState({\"isRecording\": false})\n        parent.localRecordingStop = Math.floor(new Date().getTime() / 1000);\n      };\n\n      this.localStream.addEventListener('inactive', () => {\n        console.log('Recording inactive');\n        this.stopLocalRecording();\n      });\n      this.setState({\"isRecording\": true})\n      this.setState({\"isRecordingUploading\": true})\n      this.recorder.start(15000);\n      console.log(\"started recording\");\n    }\n    else {\n      console.log(\"No local stream to record!\")\n    }\n  }\n  stopLocalRecording() {\n    console.log(\"Stopping local recording\")\n    this.setState({\"isRecording\": false})\n    try {\n      this.recorder.stop();\n      //console.log(\"this recorder\")\n      //console.log(this.recorder)\n    }\n    catch(e) {\n      console.log(\"Recording already stopped\")\n    }\n    \n    //recordingData = [];\n  }\n\n  render() {\n    return (\n      <div className=\"vida-webrtc-agent-sip\"></div>\n    );\n  }\n\n}\n\nWebRTCClient.propTypes = {\n  sipUser: PropTypes.string.isRequired,\n  sipDomain: PropTypes.string.isRequired,\n  sipServer: PropTypes.string,\n  metaData: PropTypes.object,\n  sipPassword: PropTypes.string.isRequired,\n  video: PropTypes.bool,\n  autoRegister: PropTypes.bool,\n  autoConnect: PropTypes.bool,\n  destination: PropTypes.string.isRequired,\n  alertVideoUrl: PropTypes.string,\n  ringbackVideoUrl: PropTypes.string,\n  autoAnswer: PropTypes.bool,\n  hangupCallNow: PropTypes.bool,\n  answerCallNow: PropTypes.bool,\n  rejectCallNow: PropTypes.bool,\n  initiateCallNow: PropTypes.bool,\n  reinviteCallNow: PropTypes.bool,\n  toggleAudioNow: PropTypes.bool,\n  toggleVideoNow: PropTypes.bool,\n  toggleScreenshareNow: PropTypes.bool,\n  toggleRecordingNow: PropTypes.bool,\n  traceSip: PropTypes.bool,\n  callLabel: PropTypes.string,\n  remoteVideo: PropTypes.string,\n  localVideo: PropTypes.string,\n  jwtAuth: PropTypes.object,\n  onConnected : PropTypes.func,\n  onConnecting : PropTypes.func,\n  onRinging : PropTypes.func,\n  onDisconnected: PropTypes.func,\n  onUploadBandwidth: PropTypes.func,\n  onDownloadBandwidth: PropTypes.func,\n  onHangup : PropTypes.func,\n  mediaTested:PropTypes.bool,\n  mediaSupported:PropTypes.bool,\n  usingHttps: PropTypes.bool\n\n};\n\nexport default WebRTCClient;\n","/home/lylepratt/workspace/vida-webrtc-widget/src/components/CustomSip.js",["143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393"],"/*!\n * \n *  SIP version 0.15.11\n *  Copyright (c) 2014-2020 Junction Networks, Inc <http://www.onsip.com>\n *  Homepage: https://sipjs.com\n *  License: https://sipjs.com/license/\n * \n * \n *  ~~~SIP.js contains substantial portions of JsSIP under the following license~~~\n *  Homepage: http://jssip.net\n *  Copyright (c) 2012-2013 José Luis Millán - Versatica <http://www.versatica.com>\n * \n *  Permission is hereby granted, free of charge, to any person obtaining\n *  a copy of this software and associated documentation files (the\n *  \"Software\"), to deal in the Software without restriction, including\n *  without limitation the rights to use, copy, modify, merge, publish,\n *  distribute, sublicense, and/or sell copies of the Software, and to\n *  permit persons to whom the Software is furnished to do so, subject to\n *  the following conditions:\n * \n *  The above copyright notice and this permission notice shall be\n *  included in all copies or substantial portions of the Software.\n * \n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n * \n *  ~~~ end JsSIP license ~~~\n * \n * \n * \n * \n */\n/* eslint no-undef: \"off\"*/\n/* eslint no-unused-expressions: \"off\"*/\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SIP\"] = factory();\n\telse\n\t\troot[\"SIP\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar thisModule = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(thisModule.exports, thisModule, thisModule.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the thisModule as loaded\n/******/ \t\tthisModule.l = true;\n/******/\n/******/ \t\t// Return the exports of the thisModule\n/******/ \t\treturn thisModule.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar core_1 = __webpack_require__(2);\nexports.DigestAuthentication = core_1.DigestAuthentication;\nexports.Grammar = core_1.Grammar;\nexports.IncomingRequest = core_1.IncomingRequestMessage;\nexports.IncomingResponse = core_1.IncomingResponseMessage;\nexports.LoggerFactory = core_1.LoggerFactory;\nexports.NameAddrHeader = core_1.NameAddrHeader;\nexports.OutgoingRequest = core_1.OutgoingRequestMessage;\nexports.Parser = core_1.Parser;\nexports.Timers = core_1.Timers;\nexports.URI = core_1.URI;\nvar ClientContext_1 = __webpack_require__(79);\nexports.ClientContext = ClientContext_1.ClientContext;\nvar Constants_1 = __webpack_require__(80);\nexports.C = Constants_1.C;\nvar Enums_1 = __webpack_require__(82);\nexports.DialogStatus = Enums_1.DialogStatus;\nexports.SessionStatus = Enums_1.SessionStatus;\nexports.TypeStrings = Enums_1.TypeStrings;\nexports.UAStatus = Enums_1.UAStatus;\nvar Exceptions_1 = __webpack_require__(84);\nexports.Exceptions = Exceptions_1.Exceptions;\nvar PublishContext_1 = __webpack_require__(85);\nexports.PublishContext = PublishContext_1.PublishContext;\nvar ReferContext_1 = __webpack_require__(86);\nexports.ReferClientContext = ReferContext_1.ReferClientContext;\nexports.ReferServerContext = ReferContext_1.ReferServerContext;\nvar RegisterContext_1 = __webpack_require__(88);\nexports.RegisterContext = RegisterContext_1.RegisterContext;\nvar ServerContext_1 = __webpack_require__(87);\nexports.ServerContext = ServerContext_1.ServerContext;\nvar Session_1 = __webpack_require__(89);\nexports.InviteClientContext = Session_1.InviteClientContext;\nexports.InviteServerContext = Session_1.InviteServerContext;\nexports.Session = Session_1.Session;\nvar Subscription_1 = __webpack_require__(92);\nexports.Subscription = Subscription_1.Subscription;\nvar Transport_1 = __webpack_require__(93);\nexports.Transport = Transport_1.Transport;\nvar transactions_1 = __webpack_require__(28);\nvar Transactions = {\n    InviteClientTransaction: transactions_1.InviteClientTransaction,\n    InviteServerTransaction: transactions_1.InviteServerTransaction,\n    NonInviteClientTransaction: transactions_1.NonInviteClientTransaction,\n    NonInviteServerTransaction: transactions_1.NonInviteServerTransaction\n};\nexports.Transactions = Transactions;\nvar UA_1 = __webpack_require__(94);\nexports.makeUserAgentCoreConfigurationFromUA = UA_1.makeUserAgentCoreConfigurationFromUA;\nexports.UA = UA_1.UA;\nvar Utils_1 = __webpack_require__(83);\nexports.Utils = Utils_1.Utils;\nvar Web = tslib_1.__importStar(__webpack_require__(113));\nexports.Web = Web;\nvar version = Constants_1.C.version;\nexports.version = version;\nvar name = \"sip.js\";\nexports.name = name;\nvar Core = tslib_1.__importStar(__webpack_require__(2));\nexports.Core = Core;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__extends\", function() { return __extends; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__assign\", function() { return __assign; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__rest\", function() { return __rest; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__decorate\", function() { return __decorate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__param\", function() { return __param; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__metadata\", function() { return __metadata; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__awaiter\", function() { return __awaiter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__generator\", function() { return __generator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__exportStar\", function() { return __exportStar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__values\", function() { return __values; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__read\", function() { return __read; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__spread\", function() { return __spread; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__spreadArrays\", function() { return __spreadArrays; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__await\", function() { return __await; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__asyncGenerator\", function() { return __asyncGenerator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__asyncDelegator\", function() { return __asyncDelegator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__asyncValues\", function() { return __asyncValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__makeTemplateObject\", function() { return __makeTemplateObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__importStar\", function() { return __importStar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__importDefault\", function() { return __importDefault; });\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n    extendStatics(d, b);\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    }\n    return __assign.apply(this, arguments);\n}\n\nfunction __rest(s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n}\n\nfunction __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nfunction __param(paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nfunction __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\n\nfunction __generator(thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n}\n\nfunction __exportStar(m, exports) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n\nfunction __values(o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n}\n\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n}\n\nfunction __spread() {\n    for (var ar = [], i = 0; i < arguments.length; i++)\n        ar = ar.concat(__read(arguments[i]));\n    return ar;\n}\n\nfunction __spreadArrays() {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\n\nfunction __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nfunction __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\n}\n\nfunction __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nfunction __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n    return cooked;\n};\n\nfunction __importStar(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result.default = mod;\n    return result;\n}\n\nfunction __importDefault(mod) {\n    return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * A core library implementing low level SIP protocol elements.\n * @packageDocumentation\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\n// Directories\ntslib_1.__exportStar(__webpack_require__(3), exports);\ntslib_1.__exportStar(__webpack_require__(32), exports);\ntslib_1.__exportStar(__webpack_require__(63), exports);\ntslib_1.__exportStar(__webpack_require__(5), exports);\ntslib_1.__exportStar(__webpack_require__(25), exports);\ntslib_1.__exportStar(__webpack_require__(59), exports);\ntslib_1.__exportStar(__webpack_require__(28), exports);\ntslib_1.__exportStar(__webpack_require__(67), exports);\ntslib_1.__exportStar(__webpack_require__(69), exports);\n// Files\ntslib_1.__exportStar(__webpack_require__(27), exports);\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\ntslib_1.__exportStar(__webpack_require__(4), exports);\ntslib_1.__exportStar(__webpack_require__(24), exports);\ntslib_1.__exportStar(__webpack_require__(58), exports);\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar messages_1 = __webpack_require__(5);\n/**\n * Dialog.\n * @remarks\n * A key concept for a user agent is that of a dialog.  A dialog\n * represents a peer-to-peer SIP relationship between two user agents\n * that persists for some time.  The dialog facilitates sequencing of\n * messages between the user agents and proper routing of requests\n * between both of them.  The dialog represents a context in which to\n * interpret SIP messages.\n * https://tools.ietf.org/html/rfc3261#section-12\n * @public\n */\nvar Dialog = /** @class */ (function () {\n    /**\n     * Dialog constructor.\n     * @param core - User agent core.\n     * @param dialogState - Initial dialog state.\n     */\n    function Dialog(core, dialogState) {\n        this.core = core;\n        this.dialogState = dialogState;\n        this.core.dialogs.set(this.id, this);\n    }\n    /**\n     * When a UAC receives a response that establishes a dialog, it\n     * constructs the state of the dialog.  This state MUST be maintained\n     * for the duration of the dialog.\n     * https://tools.ietf.org/html/rfc3261#section-12.1.2\n     * @param outgoingRequestMessage - Outgoing request message for dialog.\n     * @param incomingResponseMessage - Incoming response message creating dialog.\n     */\n    Dialog.initialDialogStateForUserAgentClient = function (outgoingRequestMessage, incomingResponseMessage) {\n        // If the request was sent over TLS, and the Request-URI contained a\n        // SIPS URI, the \"secure\" flag is set to TRUE.\n        // https://tools.ietf.org/html/rfc3261#section-12.1.2\n        var secure = false; // FIXME: Currently no support for TLS.\n        // The route set MUST be set to the list of URIs in the Record-Route\n        // header field from the response, taken in reverse order and preserving\n        // all URI parameters.  If no Record-Route header field is present in\n        // the response, the route set MUST be set to the empty set.  This route\n        // set, even if empty, overrides any pre-existing route set for future\n        // requests in this dialog.  The remote target MUST be set to the URI\n        // from the Contact header field of the response.\n        // https://tools.ietf.org/html/rfc3261#section-12.1.2\n        var routeSet = incomingResponseMessage.getHeaders(\"record-route\").reverse();\n        var contact = incomingResponseMessage.parseHeader(\"contact\");\n        if (!contact) { // TODO: Review to make sure this will never happen\n            throw new Error(\"Contact undefined.\");\n        }\n        if (!(contact instanceof messages_1.NameAddrHeader)) {\n            throw new Error(\"Contact not instance of NameAddrHeader.\");\n        }\n        var remoteTarget = contact.uri;\n        // The local sequence number MUST be set to the value of the sequence\n        // number in the CSeq header field of the request.  The remote sequence\n        // number MUST be empty (it is established when the remote UA sends a\n        // request within the dialog).  The call identifier component of the\n        // dialog ID MUST be set to the value of the Call-ID in the request.\n        // The local tag component of the dialog ID MUST be set to the tag in\n        // the From field in the request, and the remote tag component of the\n        // dialog ID MUST be set to the tag in the To field of the response.  A\n        // UAC MUST be prepared to receive a response without a tag in the To\n        // field, in which case the tag is considered to have a value of null.\n        //\n        //    This is to maintain backwards compatibility with RFC 2543, which\n        //    did not mandate To tags.\n        //\n        // https://tools.ietf.org/html/rfc3261#section-12.1.2\n        var localSequenceNumber = outgoingRequestMessage.cseq;\n        var remoteSequenceNumber = undefined;\n        var callId = outgoingRequestMessage.callId;\n        var localTag = outgoingRequestMessage.fromTag;\n        var remoteTag = incomingResponseMessage.toTag;\n        if (!callId) { // TODO: Review to make sure this will never happen\n            throw new Error(\"Call id undefined.\");\n        }\n        if (!localTag) { // TODO: Review to make sure this will never happen\n            throw new Error(\"From tag undefined.\");\n        }\n        if (!remoteTag) { // TODO: Review to make sure this will never happen\n            throw new Error(\"To tag undefined.\"); // FIXME: No backwards compatibility with RFC 2543\n        }\n        // The remote URI MUST be set to the URI in the To field, and the local\n        // URI MUST be set to the URI in the From field.\n        // https://tools.ietf.org/html/rfc3261#section-12.1.2\n        if (!outgoingRequestMessage.from) { // TODO: Review to make sure this will never happen\n            throw new Error(\"From undefined.\");\n        }\n        if (!outgoingRequestMessage.to) { // TODO: Review to make sure this will never happen\n            throw new Error(\"To undefined.\");\n        }\n        var localURI = outgoingRequestMessage.from.uri;\n        var remoteURI = outgoingRequestMessage.to.uri;\n        // A dialog can also be in the \"early\" state, which occurs when it is\n        // created with a provisional response, and then transition to the\n        // \"confirmed\" state when a 2xx final response arrives.\n        // https://tools.ietf.org/html/rfc3261#section-12\n        if (!incomingResponseMessage.statusCode) {\n            throw new Error(\"Incoming response status code undefined.\");\n        }\n        var early = incomingResponseMessage.statusCode < 200 ? true : false;\n        var dialogState = {\n            id: callId + localTag + remoteTag,\n            early: early,\n            callId: callId,\n            localTag: localTag,\n            remoteTag: remoteTag,\n            localSequenceNumber: localSequenceNumber,\n            remoteSequenceNumber: remoteSequenceNumber,\n            localURI: localURI,\n            remoteURI: remoteURI,\n            remoteTarget: remoteTarget,\n            routeSet: routeSet,\n            secure: secure\n        };\n        return dialogState;\n    };\n    /**\n     * The UAS then constructs the state of the dialog.  This state MUST be\n     * maintained for the duration of the dialog.\n     * https://tools.ietf.org/html/rfc3261#section-12.1.1\n     * @param incomingRequestMessage - Incoming request message creating dialog.\n     * @param toTag - Tag in the To field in the response to the incoming request.\n     */\n    Dialog.initialDialogStateForUserAgentServer = function (incomingRequestMessage, toTag, early) {\n        if (early === void 0) { early = false; }\n        // If the request arrived over TLS, and the Request-URI contained a SIPS\n        // URI, the \"secure\" flag is set to TRUE.\n        // https://tools.ietf.org/html/rfc3261#section-12.1.1\n        var secure = false; // FIXME: Currently no support for TLS.\n        // The route set MUST be set to the list of URIs in the Record-Route\n        // header field from the request, taken in order and preserving all URI\n        // parameters.  If no Record-Route header field is present in the\n        // request, the route set MUST be set to the empty set.  This route set,\n        // even if empty, overrides any pre-existing route set for future\n        // requests in this dialog.  The remote target MUST be set to the URI\n        // from the Contact header field of the request.\n        // https://tools.ietf.org/html/rfc3261#section-12.1.1\n        var routeSet = incomingRequestMessage.getHeaders(\"record-route\");\n        var contact = incomingRequestMessage.parseHeader(\"contact\");\n        if (!contact) { // TODO: Review to make sure this will never happen\n            throw new Error(\"Contact undefined.\");\n        }\n        if (!(contact instanceof messages_1.NameAddrHeader)) {\n            throw new Error(\"Contact not instance of NameAddrHeader.\");\n        }\n        var remoteTarget = contact.uri;\n        // The remote sequence number MUST be set to the value of the sequence\n        // number in the CSeq header field of the request.  The local sequence\n        // number MUST be empty.  The call identifier component of the dialog ID\n        // MUST be set to the value of the Call-ID in the request.  The local\n        // tag component of the dialog ID MUST be set to the tag in the To field\n        // in the response to the request (which always includes a tag), and the\n        // remote tag component of the dialog ID MUST be set to the tag from the\n        // From field in the request.  A UAS MUST be prepared to receive a\n        // request without a tag in the From field, in which case the tag is\n        // considered to have a value of null.\n        //\n        //    This is to maintain backwards compatibility with RFC 2543, which\n        //    did not mandate From tags.\n        //\n        // https://tools.ietf.org/html/rfc3261#section-12.1.1\n        var remoteSequenceNumber = incomingRequestMessage.cseq;\n        var localSequenceNumber = undefined;\n        var callId = incomingRequestMessage.callId;\n        var localTag = toTag;\n        var remoteTag = incomingRequestMessage.fromTag;\n        // The remote URI MUST be set to the URI in the From field, and the\n        // local URI MUST be set to the URI in the To field.\n        // https://tools.ietf.org/html/rfc3261#section-12.1.1\n        var remoteURI = incomingRequestMessage.from.uri;\n        var localURI = incomingRequestMessage.to.uri;\n        var dialogState = {\n            id: callId + localTag + remoteTag,\n            early: early,\n            callId: callId,\n            localTag: localTag,\n            remoteTag: remoteTag,\n            localSequenceNumber: localSequenceNumber,\n            remoteSequenceNumber: remoteSequenceNumber,\n            localURI: localURI,\n            remoteURI: remoteURI,\n            remoteTarget: remoteTarget,\n            routeSet: routeSet,\n            secure: secure\n        };\n        return dialogState;\n    };\n    /** Destructor. */\n    Dialog.prototype.dispose = function () {\n        this.core.dialogs.delete(this.id);\n    };\n    Object.defineProperty(Dialog.prototype, \"id\", {\n        /**\n         * A dialog is identified at each UA with a dialog ID, which consists of\n         * a Call-ID value, a local tag and a remote tag.  The dialog ID at each\n         * UA involved in the dialog is not the same.  Specifically, the local\n         * tag at one UA is identical to the remote tag at the peer UA.  The\n         * tags are opaque tokens that facilitate the generation of unique\n         * dialog IDs.\n         * https://tools.ietf.org/html/rfc3261#section-12\n         */\n        get: function () {\n            return this.dialogState.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Dialog.prototype, \"early\", {\n        /**\n         * A dialog can also be in the \"early\" state, which occurs when it is\n         * created with a provisional response, and then it transition to the\n         * \"confirmed\" state when a 2xx final response received or is sent.\n         *\n         * Note: RFC 3261 is concise on when a dialog is \"confirmed\", but it\n         * can be a point of confusion if an INVITE dialog is \"confirmed\" after\n         * a 2xx is sent or after receiving the ACK for the 2xx response.\n         * With careful reading it can be inferred a dialog is always is\n         * \"confirmed\" when the 2xx is sent (regardless of type of dialog).\n         * However a INVITE dialog does have additional considerations\n         * when it is confirmed but an ACK has not yet been received (in\n         * particular with regard to a callee sending BYE requests).\n         */\n        get: function () {\n            return this.dialogState.early;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Dialog.prototype, \"callId\", {\n        /** Call identifier component of the dialog id. */\n        get: function () {\n            return this.dialogState.callId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Dialog.prototype, \"localTag\", {\n        /** Local tag component of the dialog id. */\n        get: function () {\n            return this.dialogState.localTag;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Dialog.prototype, \"remoteTag\", {\n        /** Remote tag component of the dialog id. */\n        get: function () {\n            return this.dialogState.remoteTag;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Dialog.prototype, \"localSequenceNumber\", {\n        /** Local sequence number (used to order requests from the UA to its peer). */\n        get: function () {\n            return this.dialogState.localSequenceNumber;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Dialog.prototype, \"remoteSequenceNumber\", {\n        /** Remote sequence number (used to order requests from its peer to the UA). */\n        get: function () {\n            return this.dialogState.remoteSequenceNumber;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Dialog.prototype, \"localURI\", {\n        /** Local URI. */\n        get: function () {\n            return this.dialogState.localURI;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Dialog.prototype, \"remoteURI\", {\n        /** Remote URI. */\n        get: function () {\n            return this.dialogState.remoteURI;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Dialog.prototype, \"remoteTarget\", {\n        /** Remote target. */\n        get: function () {\n            return this.dialogState.remoteTarget;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Dialog.prototype, \"routeSet\", {\n        /**\n         * Route set, which is an ordered list of URIs. The route set is the\n         * list of servers that need to be traversed to send a request to the peer.\n         */\n        get: function () {\n            return this.dialogState.routeSet;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Dialog.prototype, \"secure\", {\n        /**\n         * If the request was sent over TLS, and the Request-URI contained\n         * a SIPS URI, the \"secure\" flag is set to true. *NOT IMPLEMENTED*\n         */\n        get: function () {\n            return this.dialogState.secure;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Dialog.prototype, \"userAgentCore\", {\n        /** The user agent core servicing this dialog. */\n        get: function () {\n            return this.core;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Confirm the dialog. Only matters if dialog is currently early. */\n    Dialog.prototype.confirm = function () {\n        this.dialogState.early = false;\n    };\n    /**\n     * Requests sent within a dialog, as any other requests, are atomic.  If\n     * a particular request is accepted by the UAS, all the state changes\n     * associated with it are performed.  If the request is rejected, none\n     * of the state changes are performed.\n     *\n     *    Note that some requests, such as INVITEs, affect several pieces of\n     *    state.\n     *\n     * https://tools.ietf.org/html/rfc3261#section-12.2.2\n     * @param message - Incoming request message within this dialog.\n     */\n    Dialog.prototype.receiveRequest = function (message) {\n        // ACK guard.\n        // By convention, the handling of ACKs is the responsibility\n        // the particular dialog implementation. For example, see SessionDialog.\n        // Furthermore, ACKs have same sequence number as the associated INVITE.\n        if (message.method === messages_1.C.ACK) {\n            return;\n        }\n        // If the remote sequence number was not empty, but the sequence number\n        // of the request is lower than the remote sequence number, the request\n        // is out of order and MUST be rejected with a 500 (Server Internal\n        // Error) response.  If the remote sequence number was not empty, and\n        // the sequence number of the request is greater than the remote\n        // sequence number, the request is in order.  It is possible for the\n        // CSeq sequence number to be higher than the remote sequence number by\n        // more than one.  This is not an error condition, and a UAS SHOULD be\n        // prepared to receive and process requests with CSeq values more than\n        // one higher than the previous received request.  The UAS MUST then set\n        // the remote sequence number to the value of the sequence number in the\n        // CSeq header field value in the request.\n        //\n        //    If a proxy challenges a request generated by the UAC, the UAC has\n        //    to resubmit the request with credentials.  The resubmitted request\n        //    will have a new CSeq number.  The UAS will never see the first\n        //    request, and thus, it will notice a gap in the CSeq number space.\n        //    Such a gap does not represent any error condition.\n        //\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\n        if (this.remoteSequenceNumber) {\n            if (message.cseq <= this.remoteSequenceNumber) {\n                throw new Error(\"Out of sequence in dialog request. Did you forget to call sequenceGuard()?\");\n            }\n            this.dialogState.remoteSequenceNumber = message.cseq;\n        }\n        // If the remote sequence number is empty, it MUST be set to the value\n        // of the sequence number in the CSeq header field value in the request.\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\n        if (!this.remoteSequenceNumber) {\n            this.dialogState.remoteSequenceNumber = message.cseq;\n        }\n        // When a UAS receives a target refresh request, it MUST replace the\n        // dialog's remote target URI with the URI from the Contact header field\n        // in that request, if present.\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\n        // Note: \"target refresh request\" processing delegated to sub-class.\n    };\n    /**\n     * If the dialog identifier in the 2xx response matches the dialog\n     * identifier of an existing dialog, the dialog MUST be transitioned to\n     * the \"confirmed\" state, and the route set for the dialog MUST be\n     * recomputed based on the 2xx response using the procedures of Section\n     * 12.2.1.2.  Otherwise, a new dialog in the \"confirmed\" state MUST be\n     * constructed using the procedures of Section 12.1.2.\n     *\n     * Note that the only piece of state that is recomputed is the route\n     * set.  Other pieces of state such as the highest sequence numbers\n     * (remote and local) sent within the dialog are not recomputed.  The\n     * route set only is recomputed for backwards compatibility.  RFC\n     * 2543 did not mandate mirroring of the Record-Route header field in\n     * a 1xx, only 2xx.  However, we cannot update the entire state of\n     * the dialog, since mid-dialog requests may have been sent within\n     * the early dialog, modifying the sequence numbers, for example.\n     *\n     *  https://tools.ietf.org/html/rfc3261#section-13.2.2.4\n     */\n    Dialog.prototype.recomputeRouteSet = function (message) {\n        this.dialogState.routeSet = message.getHeaders(\"record-route\").reverse();\n    };\n    /**\n     * A request within a dialog is constructed by using many of the\n     * components of the state stored as part of the dialog.\n     * https://tools.ietf.org/html/rfc3261#section-12.2.1.1\n     * @param method - Outgoing request method.\n     */\n    Dialog.prototype.createOutgoingRequestMessage = function (method, options) {\n        // The URI in the To field of the request MUST be set to the remote URI\n        // from the dialog state.  The tag in the To header field of the request\n        // MUST be set to the remote tag of the dialog ID.  The From URI of the\n        // request MUST be set to the local URI from the dialog state.  The tag\n        // in the From header field of the request MUST be set to the local tag\n        // of the dialog ID.  If the value of the remote or local tags is null,\n        // the tag parameter MUST be omitted from the To or From header fields,\n        // respectively.\n        //\n        //    Usage of the URI from the To and From fields in the original\n        //    request within subsequent requests is done for backwards\n        //    compatibility with RFC 2543, which used the URI for dialog\n        //    identification.  In this specification, only the tags are used for\n        //    dialog identification.  It is expected that mandatory reflection\n        //    of the original To and From URI in mid-dialog requests will be\n        //    deprecated in a subsequent revision of this specification.\n        // https://tools.ietf.org/html/rfc3261#section-12.2.1.1\n        var toUri = this.remoteURI;\n        var toTag = this.remoteTag;\n        var fromUri = this.localURI;\n        var fromTag = this.localTag;\n        // The Call-ID of the request MUST be set to the Call-ID of the dialog.\n        // Requests within a dialog MUST contain strictly monotonically\n        // increasing and contiguous CSeq sequence numbers (increasing-by-one)\n        // in each direction (excepting ACK and CANCEL of course, whose numbers\n        // equal the requests being acknowledged or cancelled).  Therefore, if\n        // the local sequence number is not empty, the value of the local\n        // sequence number MUST be incremented by one, and this value MUST be\n        // placed into the CSeq header field.  If the local sequence number is\n        // empty, an initial value MUST be chosen using the guidelines of\n        // Section 8.1.1.5.  The method field in the CSeq header field value\n        // MUST match the method of the request.\n        // https://tools.ietf.org/html/rfc3261#section-12.2.1.1\n        var callId = this.callId;\n        var cseq;\n        if (options && options.cseq) {\n            cseq = options.cseq;\n        }\n        else if (!this.dialogState.localSequenceNumber) {\n            cseq = this.dialogState.localSequenceNumber = 1; // https://tools.ietf.org/html/rfc3261#section-8.1.1.5\n        }\n        else {\n            cseq = this.dialogState.localSequenceNumber += 1;\n        }\n        // The UAC uses the remote target and route set to build the Request-URI\n        // and Route header field of the request.\n        //\n        // If the route set is empty, the UAC MUST place the remote target URI\n        // into the Request-URI.  The UAC MUST NOT add a Route header field to\n        // the request.\n        //\n        // If the route set is not empty, and the first URI in the route set\n        // contains the lr parameter (see Section 19.1.1), the UAC MUST place\n        // the remote target URI into the Request-URI and MUST include a Route\n        // header field containing the route set values in order, including all\n        // parameters.\n        //\n        // If the route set is not empty, and its first URI does not contain the\n        // lr parameter, the UAC MUST place the first URI from the route set\n        // into the Request-URI, stripping any parameters that are not allowed\n        // in a Request-URI.  The UAC MUST add a Route header field containing\n        // the remainder of the route set values in order, including all\n        // parameters.  The UAC MUST then place the remote target URI into the\n        // Route header field as the last value.\n        // https://tools.ietf.org/html/rfc3261#section-12.2.1.1\n        // The lr parameter, when present, indicates that the element\n        // responsible for this resource implements the routing mechanisms\n        // specified in this document.  This parameter will be used in the\n        // URIs proxies place into Record-Route header field values, and\n        // may appear in the URIs in a pre-existing route set.\n        //\n        // This parameter is used to achieve backwards compatibility with\n        // systems implementing the strict-routing mechanisms of RFC 2543\n        // and the rfc2543bis drafts up to bis-05.  An element preparing\n        // to send a request based on a URI not containing this parameter\n        // can assume the receiving element implements strict-routing and\n        // reformat the message to preserve the information in the\n        // Request-URI.\n        // https://tools.ietf.org/html/rfc3261#section-19.1.1\n        // NOTE: Not backwards compatible with RFC 2543 (no support for strict-routing).\n        var ruri = this.remoteTarget;\n        var routeSet = this.routeSet;\n        var extraHeaders = options && options.extraHeaders;\n        var body = options && options.body;\n        // The relative order of header fields with different field names is not\n        // significant.  However, it is RECOMMENDED that header fields which are\n        // needed for proxy processing (Via, Route, Record-Route, Proxy-Require,\n        // Max-Forwards, and Proxy-Authorization, for example) appear towards\n        // the top of the message to facilitate rapid parsing.\n        // https://tools.ietf.org/html/rfc3261#section-7.3.1\n        var message = this.userAgentCore.makeOutgoingRequestMessage(method, ruri, fromUri, toUri, {\n            callId: callId,\n            cseq: cseq,\n            fromTag: fromTag,\n            toTag: toTag,\n            routeSet: routeSet\n        }, extraHeaders, body);\n        return message;\n    };\n    /**\n     * Increment the local sequence number by one.\n     * It feels like this should be protected, but the current authentication handling currently\n     * needs this to keep the dialog in sync when \"auto re-sends\" request messages.\n     * @internal\n     */\n    Dialog.prototype.incrementLocalSequenceNumber = function () {\n        if (!this.dialogState.localSequenceNumber) {\n            throw new Error(\"Local sequence number undefined.\");\n        }\n        this.dialogState.localSequenceNumber += 1;\n    };\n    /**\n     * If the remote sequence number was not empty, but the sequence number\n     * of the request is lower than the remote sequence number, the request\n     * is out of order and MUST be rejected with a 500 (Server Internal\n     * Error) response.\n     * https://tools.ietf.org/html/rfc3261#section-12.2.2\n     * @param request - Incoming request to guard.\n     * @returns True if the program execution is to continue in the branch in question.\n     *          Otherwise a 500 Server Internal Error was stateless sent and request processing must stop.\n     */\n    Dialog.prototype.sequenceGuard = function (message) {\n        // ACK guard.\n        // By convention, handling of unexpected ACKs is responsibility\n        // the particular dialog implementation. For example, see SessionDialog.\n        // Furthermore, we cannot reply to an \"out of sequence\" ACK.\n        if (message.method === messages_1.C.ACK) {\n            return true;\n        }\n        // Note: We are rejecting on \"less than or equal to\" the remote\n        // sequence number (excepting ACK whose numbers equal the requests\n        // being acknowledged or cancelled), which is the correct thing to\n        // do in our case. The only time a request with the same sequence number\n        // will show up here if is a) it is a very late retransmission of a\n        // request we already handled or b) it is a different request with the\n        // same sequence number which would be violation of the standard.\n        // Request retransmissions are absorbed by the transaction layer,\n        // so any request with a duplicate sequence number getting here\n        // would have to be a retransmission after the transaction terminated\n        // or a broken request (with unique via branch value).\n        // Requests within a dialog MUST contain strictly monotonically\n        // increasing and contiguous CSeq sequence numbers (increasing-by-one)\n        // in each direction (excepting ACK and CANCEL of course, whose numbers\n        // equal the requests being acknowledged or cancelled).  Therefore, if\n        // the local sequence number is not empty, the value of the local\n        // sequence number MUST be incremented by one, and this value MUST be\n        // placed into the CSeq header field.\n        // https://tools.ietf.org/html/rfc3261#section-12.2.1.1\n        if (this.remoteSequenceNumber && message.cseq <= this.remoteSequenceNumber) {\n            this.core.replyStateless(message, { statusCode: 500 });\n            return false;\n        }\n        return true;\n    };\n    return Dialog;\n}());\nexports.Dialog = Dialog;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\n// Directories\ntslib_1.__exportStar(__webpack_require__(6), exports);\n// Files\ntslib_1.__exportStar(__webpack_require__(8), exports);\ntslib_1.__exportStar(__webpack_require__(19), exports);\ntslib_1.__exportStar(__webpack_require__(11), exports);\ntslib_1.__exportStar(__webpack_require__(10), exports);\ntslib_1.__exportStar(__webpack_require__(9), exports);\ntslib_1.__exportStar(__webpack_require__(17), exports);\ntslib_1.__exportStar(__webpack_require__(13), exports);\ntslib_1.__exportStar(__webpack_require__(18), exports);\ntslib_1.__exportStar(__webpack_require__(22), exports);\ntslib_1.__exportStar(__webpack_require__(14), exports);\ntslib_1.__exportStar(__webpack_require__(23), exports);\ntslib_1.__exportStar(__webpack_require__(15), exports);\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\ntslib_1.__exportStar(__webpack_require__(7), exports);\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * SIP Methods\n * @internal\n */\nvar C;\n(function (C) {\n    C.ACK = \"ACK\";\n    C.BYE = \"BYE\";\n    C.CANCEL = \"CANCEL\";\n    C.INFO = \"INFO\";\n    C.INVITE = \"INVITE\";\n    C.MESSAGE = \"MESSAGE\";\n    C.NOTIFY = \"NOTIFY\";\n    C.OPTIONS = \"OPTIONS\";\n    C.REGISTER = \"REGISTER\";\n    C.UPDATE = \"UPDATE\";\n    C.SUBSCRIBE = \"SUBSCRIBE\";\n    C.PUBLISH = \"PUBLISH\";\n    C.REFER = \"REFER\";\n    C.PRACK = \"PRACK\";\n})(C = exports.C || (exports.C = {}));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar incoming_request_message_1 = __webpack_require__(9);\nvar incoming_response_message_1 = __webpack_require__(17);\nvar outgoing_request_message_1 = __webpack_require__(18);\n/**\n * Create a Body given a legacy body type.\n * @param bodyLegacy - Body Object\n * @internal\n */\nfunction fromBodyLegacy(bodyLegacy) {\n    var content = (typeof bodyLegacy === \"string\") ? bodyLegacy : bodyLegacy.body;\n    var contentType = (typeof bodyLegacy === \"string\") ? \"application/sdp\" : bodyLegacy.contentType;\n    var contentDisposition = contentTypeToContentDisposition(contentType);\n    var body = { contentDisposition: contentDisposition, contentType: contentType, content: content };\n    return body;\n}\nexports.fromBodyLegacy = fromBodyLegacy;\n/**\n * Given a message, get a normalized body.\n * The content disposition is inferred if not set.\n * @param message - The message.\n * @internal\n */\nfunction getBody(message) {\n    var contentDisposition;\n    var contentType;\n    var content;\n    // We're in UAS role, receiving incoming request\n    if (message instanceof incoming_request_message_1.IncomingRequestMessage) {\n        if (message.body) {\n            // FIXME: Parsing needs typing\n            var parse = message.parseHeader(\"Content-Disposition\");\n            contentDisposition = parse ? parse.type : undefined;\n            contentType = message.parseHeader(\"Content-Type\");\n            content = message.body;\n        }\n    }\n    // We're in UAC role, receiving incoming response\n    if (message instanceof incoming_response_message_1.IncomingResponseMessage) {\n        if (message.body) {\n            // FIXME: Parsing needs typing\n            var parse = message.parseHeader(\"Content-Disposition\");\n            contentDisposition = parse ? parse.type : undefined;\n            contentType = message.parseHeader(\"Content-Type\");\n            content = message.body;\n        }\n    }\n    // We're in UAC role, sending outgoing request\n    if (message instanceof outgoing_request_message_1.OutgoingRequestMessage) {\n        if (message.body) {\n            contentDisposition = message.getHeader(\"Content-Disposition\");\n            contentType = message.getHeader(\"Content-Type\");\n            if (typeof message.body === \"string\") {\n                // FIXME: OutgoingRequest should not allow a \"string\" body without a \"Content-Type\" header.\n                if (!contentType) {\n                    throw new Error(\"Header content type header does not equal body content type.\");\n                }\n                content = message.body;\n            }\n            else {\n                // FIXME: OutgoingRequest should not allow the \"Content-Type\" header not to match th body content type\n                if (contentType && contentType !== message.body.contentType) {\n                    throw new Error(\"Header content type header does not equal body content type.\");\n                }\n                contentType = message.body.contentType;\n                content = message.body.body;\n            }\n        }\n    }\n    // We're in UAS role, sending outgoing response\n    if (isBody(message)) {\n        contentDisposition = message.contentDisposition;\n        contentType = message.contentType;\n        content = message.content;\n    }\n    // No content, no body.\n    if (!content) {\n        return undefined;\n    }\n    if (contentType && !contentDisposition) {\n        contentDisposition = contentTypeToContentDisposition(contentType);\n    }\n    if (!contentDisposition) {\n        throw new Error(\"Content disposition undefined.\");\n    }\n    if (!contentType) {\n        throw new Error(\"Content type undefined.\");\n    }\n    return {\n        contentDisposition: contentDisposition,\n        contentType: contentType,\n        content: content\n    };\n}\nexports.getBody = getBody;\n/**\n * User-Defined Type Guard for Body.\n * @param body - Body to check.\n * @internal\n */\nfunction isBody(body) {\n    return body &&\n        typeof body.content === \"string\" &&\n        typeof body.contentType === \"string\" &&\n        body.contentDisposition === undefined ? true : typeof body.contentDisposition === \"string\";\n}\nexports.isBody = isBody;\n// If the Content-Disposition header field is missing, bodies of\n// Content-Type application/sdp imply the disposition \"session\", while\n// other content types imply \"render\".\n// https://tools.ietf.org/html/rfc3261#section-13.2.1\nfunction contentTypeToContentDisposition(contentType) {\n    if (contentType === \"application/sdp\") {\n        return \"session\";\n    }\n    else {\n        return \"render\";\n    }\n}\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar incoming_message_1 = __webpack_require__(10);\n/**\n * Incoming request message.\n * @public\n */\nvar IncomingRequestMessage = /** @class */ (function (_super) {\n    tslib_1.__extends(IncomingRequestMessage, _super);\n    function IncomingRequestMessage() {\n        return _super.call(this) || this;\n    }\n    return IncomingRequestMessage;\n}(incoming_message_1.IncomingMessage));\nexports.IncomingRequestMessage = IncomingRequestMessage;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar grammar_1 = __webpack_require__(11);\nvar utils_1 = __webpack_require__(16);\n/**\n * Incoming message.\n * @public\n */\nvar IncomingMessage = /** @class */ (function () {\n    function IncomingMessage() {\n        this.headers = {};\n    }\n    /**\n     * Insert a header of the given name and value into the last position of the\n     * header array.\n     * @param name - header name\n     * @param value - header value\n     */\n    IncomingMessage.prototype.addHeader = function (name, value) {\n        var header = { raw: value };\n        name = utils_1.headerize(name);\n        if (this.headers[name]) {\n            this.headers[name].push(header);\n        }\n        else {\n            this.headers[name] = [header];\n        }\n    };\n    /**\n     * Get the value of the given header name at the given position.\n     * @param name - header name\n     * @returns Returns the specified header, undefined if header doesn't exist.\n     */\n    IncomingMessage.prototype.getHeader = function (name) {\n        var header = this.headers[utils_1.headerize(name)];\n        if (header) {\n            if (header[0]) {\n                return header[0].raw;\n            }\n        }\n        else {\n            return;\n        }\n    };\n    /**\n     * Get the header/s of the given name.\n     * @param name - header name\n     * @returns Array - with all the headers of the specified name.\n     */\n    IncomingMessage.prototype.getHeaders = function (name) {\n        var header = this.headers[utils_1.headerize(name)];\n        var result = [];\n        if (!header) {\n            return [];\n        }\n        for (var _i = 0, header_1 = header; _i < header_1.length; _i++) {\n            var headerPart = header_1[_i];\n            result.push(headerPart.raw);\n        }\n        return result;\n    };\n    /**\n     * Verify the existence of the given header.\n     * @param name - header name\n     * @returns true if header with given name exists, false otherwise\n     */\n    IncomingMessage.prototype.hasHeader = function (name) {\n        return !!this.headers[utils_1.headerize(name)];\n    };\n    /**\n     * Parse the given header on the given index.\n     * @param name - header name\n     * @param idx - header index\n     * @returns Parsed header object, undefined if the\n     *   header is not present or in case of a parsing error.\n     */\n    IncomingMessage.prototype.parseHeader = function (name, idx) {\n        if (idx === void 0) { idx = 0; }\n        name = utils_1.headerize(name);\n        if (!this.headers[name]) {\n            // this.logger.log(\"header '\" + name + \"' not present\");\n            return;\n        }\n        else if (idx >= this.headers[name].length) {\n            // this.logger.log(\"not so many '\" + name + \"' headers present\");\n            return;\n        }\n        var header = this.headers[name][idx];\n        var value = header.raw;\n        if (header.parsed) {\n            return header.parsed;\n        }\n        // substitute '-' by '_' for grammar rule matching.\n        var parsed = grammar_1.Grammar.parse(value, name.replace(/-/g, \"_\"));\n        if (parsed === -1) {\n            this.headers[name].splice(idx, 1); // delete from headers\n            // this.logger.warn('error parsing \"' + name + '\" header field with value \"' + value + '\"');\n            return;\n        }\n        else {\n            header.parsed = parsed;\n            return parsed;\n        }\n    };\n    /**\n     * Message Header attribute selector. Alias of parseHeader.\n     * @param name - header name\n     * @param idx - header index\n     * @returns Parsed header object, undefined if the\n     *   header is not present or in case of a parsing error.\n     *\n     * @example\n     * message.s('via',3).port\n     */\n    IncomingMessage.prototype.s = function (name, idx) {\n        if (idx === void 0) { idx = 0; }\n        return this.parseHeader(name, idx);\n    };\n    /**\n     * Replace the value of the given header by the value.\n     * @param name - header name\n     * @param value - header value\n     */\n    IncomingMessage.prototype.setHeader = function (name, value) {\n        this.headers[utils_1.headerize(name)] = [{ raw: value }];\n    };\n    IncomingMessage.prototype.toString = function () {\n        return this.data;\n    };\n    return IncomingMessage;\n}());\nexports.IncomingMessage = IncomingMessage;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar pegGrammar = tslib_1.__importStar(__webpack_require__(12));\n/**\n * Grammar.\n * @internal\n */\nvar Grammar;\n(function (Grammar) {\n    /**\n     * Parse.\n     * @param input -\n     * @param startRule -\n     */\n    function parse(input, startRule) {\n        var options = { startRule: startRule };\n        try {\n            pegGrammar.parse(input, options);\n        }\n        catch (e) {\n            options.data = -1;\n        }\n        return options.data;\n    }\n    Grammar.parse = parse;\n    /**\n     * Parse the given string and returns a SIP.NameAddrHeader instance or undefined if\n     * it is an invalid NameAddrHeader.\n     * @param name_addr_header -\n     */\n    function nameAddrHeaderParse(nameAddrHeader) {\n        var parsedNameAddrHeader = Grammar.parse(nameAddrHeader, \"Name_Addr_Header\");\n        return parsedNameAddrHeader !== -1 ? parsedNameAddrHeader : undefined;\n    }\n    Grammar.nameAddrHeaderParse = nameAddrHeaderParse;\n    /**\n     * Parse the given string and returns a SIP.URI instance or undefined if\n     * it is an invalid URI.\n     * @param uri -\n     */\n    function URIParse(uri) {\n        var parsedUri = Grammar.parse(uri, \"SIP_URI\");\n        return parsedUri !== -1 ? parsedUri : undefined;\n    }\n    Grammar.URIParse = URIParse;\n})(Grammar = exports.Grammar || (exports.Grammar = {}));\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// tslint:disable:interface-name\n// tslint:disable: trailing-comma\n// tslint:disable: object-literal-sort-keys\n// tslint:disable: max-line-length\n// tslint:disable: only-arrow-functions\n// tslint:disable: one-variable-per-declaration\n// tslint:disable: no-consecutive-blank-lines\n// tslint:disable: align\n// tslint:disable: radix\n// tslint:disable: quotemark\n// tslint:disable: semicolon\n// tslint:disable: object-literal-shorthand\n// tslint:disable: variable-name\n// tslint:disable: no-var-keyword\n// tslint:disable: whitespace\n// tslint:disable: curly\n// tslint:disable: prefer-const\n// tslint:disable: object-literal-key-quotes\n// tslint:disable: no-string-literal\n// tslint:disable: one-line\n// tslint:disable: no-unused-expression\n// tslint:disable: space-before-function-paren\n// tslint:disable: arrow-return-shorthand\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\n// Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.2.6 )\n//\n// https://pegjs.org/   https://github.com/metadevpro/ts-pegjs\nvar name_addr_header_1 = __webpack_require__(13);\nvar uri_1 = __webpack_require__(15);\nvar SyntaxError = /** @class */ (function (_super) {\n    tslib_1.__extends(SyntaxError, _super);\n    function SyntaxError(message, expected, found, location) {\n        var _this = _super.call(this) || this;\n        _this.message = message;\n        _this.expected = expected;\n        _this.found = found;\n        _this.location = location;\n        _this.name = \"SyntaxError\";\n        if (typeof Error.captureStackTrace === \"function\") {\n            Error.captureStackTrace(_this, SyntaxError);\n        }\n        return _this;\n    }\n    SyntaxError.buildMessage = function (expected, found) {\n        function hex(ch) {\n            return ch.charCodeAt(0).toString(16).toUpperCase();\n        }\n        function literalEscape(s) {\n            return s\n                .replace(/\\\\/g, \"\\\\\\\\\")\n                .replace(/\"/g, \"\\\\\\\"\")\n                .replace(/\\0/g, \"\\\\0\")\n                .replace(/\\t/g, \"\\\\t\")\n                .replace(/\\n/g, \"\\\\n\")\n                .replace(/\\r/g, \"\\\\r\")\n                .replace(/[\\x00-\\x0F]/g, function (ch) { return \"\\\\x0\" + hex(ch); })\n                .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return \"\\\\x\" + hex(ch); });\n        }\n        function classEscape(s) {\n            return s\n                .replace(/\\\\/g, \"\\\\\\\\\")\n                .replace(/\\]/g, \"\\\\]\")\n                .replace(/\\^/g, \"\\\\^\")\n                .replace(/-/g, \"\\\\-\")\n                .replace(/\\0/g, \"\\\\0\")\n                .replace(/\\t/g, \"\\\\t\")\n                .replace(/\\n/g, \"\\\\n\")\n                .replace(/\\r/g, \"\\\\r\")\n                .replace(/[\\x00-\\x0F]/g, function (ch) { return \"\\\\x0\" + hex(ch); })\n                .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return \"\\\\x\" + hex(ch); });\n        }\n        function describeExpectation(expectation) {\n            switch (expectation.type) {\n                case \"literal\":\n                    return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n                case \"class\":\n                    var escapedParts = expectation.parts.map(function (part) {\n                        return Array.isArray(part)\n                            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n                            : classEscape(part);\n                    });\n                    return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n                case \"any\":\n                    return \"any character\";\n                case \"end\":\n                    return \"end of input\";\n                case \"other\":\n                    return expectation.description;\n            }\n        }\n        function describeExpected(expected1) {\n            var descriptions = expected1.map(describeExpectation);\n            var i;\n            var j;\n            descriptions.sort();\n            if (descriptions.length > 0) {\n                for (i = 1, j = 1; i < descriptions.length; i++) {\n                    if (descriptions[i - 1] !== descriptions[i]) {\n                        descriptions[j] = descriptions[i];\n                        j++;\n                    }\n                }\n                descriptions.length = j;\n            }\n            switch (descriptions.length) {\n                case 1:\n                    return descriptions[0];\n                case 2:\n                    return descriptions[0] + \" or \" + descriptions[1];\n                default:\n                    return descriptions.slice(0, -1).join(\", \")\n                        + \", or \"\n                        + descriptions[descriptions.length - 1];\n            }\n        }\n        function describeFound(found1) {\n            return found1 ? \"\\\"\" + literalEscape(found1) + \"\\\"\" : \"end of input\";\n        }\n        return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    return SyntaxError;\n}(Error));\nexports.SyntaxError = SyntaxError;\nfunction peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n    var peg$FAILED = {};\n    var peg$startRuleIndices = { Contact: 119, Name_Addr_Header: 156, Record_Route: 176, Request_Response: 81, SIP_URI: 45, Subscription_State: 186, Supported: 191, Require: 182, Via: 194, absoluteURI: 84, Call_ID: 118, Content_Disposition: 130, Content_Length: 135, Content_Type: 136, CSeq: 146, displayName: 122, Event: 149, From: 151, host: 52, Max_Forwards: 154, Min_SE: 213, Proxy_Authenticate: 157, quoted_string: 40, Refer_To: 178, Replaces: 179, Session_Expires: 210, stun_URI: 217, To: 192, turn_URI: 223, uuid: 226, WWW_Authenticate: 209, challenge: 158, sipfrag: 230, Referred_By: 231 };\n    var peg$startRuleIndex = 119;\n    var peg$consts = [\n        \"\\r\\n\",\n        peg$literalExpectation(\"\\r\\n\", false),\n        /^[0-9]/,\n        peg$classExpectation([[\"0\", \"9\"]], false, false),\n        /^[a-zA-Z]/,\n        peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false),\n        /^[0-9a-fA-F]/,\n        peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n        /^[\\0-\\xFF]/,\n        peg$classExpectation([[\"\\0\", \"\\xFF\"]], false, false),\n        /^[\"]/,\n        peg$classExpectation([\"\\\"\"], false, false),\n        \" \",\n        peg$literalExpectation(\" \", false),\n        \"\\t\",\n        peg$literalExpectation(\"\\t\", false),\n        /^[a-zA-Z0-9]/,\n        peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"]], false, false),\n        \";\",\n        peg$literalExpectation(\";\", false),\n        \"/\",\n        peg$literalExpectation(\"/\", false),\n        \"?\",\n        peg$literalExpectation(\"?\", false),\n        \":\",\n        peg$literalExpectation(\":\", false),\n        \"@\",\n        peg$literalExpectation(\"@\", false),\n        \"&\",\n        peg$literalExpectation(\"&\", false),\n        \"=\",\n        peg$literalExpectation(\"=\", false),\n        \"+\",\n        peg$literalExpectation(\"+\", false),\n        \"$\",\n        peg$literalExpectation(\"$\", false),\n        \",\",\n        peg$literalExpectation(\",\", false),\n        \"-\",\n        peg$literalExpectation(\"-\", false),\n        \"_\",\n        peg$literalExpectation(\"_\", false),\n        \".\",\n        peg$literalExpectation(\".\", false),\n        \"!\",\n        peg$literalExpectation(\"!\", false),\n        \"~\",\n        peg$literalExpectation(\"~\", false),\n        \"*\",\n        peg$literalExpectation(\"*\", false),\n        \"'\",\n        peg$literalExpectation(\"'\", false),\n        \"(\",\n        peg$literalExpectation(\"(\", false),\n        \")\",\n        peg$literalExpectation(\")\", false),\n        \"%\",\n        peg$literalExpectation(\"%\", false),\n        function () { return \" \"; },\n        function () { return ':'; },\n        /^[!-~]/,\n        peg$classExpectation([[\"!\", \"~\"]], false, false),\n        /^[\\x80-\\uFFFF]/,\n        peg$classExpectation([[\"\\x80\", \"\\uFFFF\"]], false, false),\n        /^[\\x80-\\xBF]/,\n        peg$classExpectation([[\"\\x80\", \"\\xBF\"]], false, false),\n        /^[a-f]/,\n        peg$classExpectation([[\"a\", \"f\"]], false, false),\n        \"`\",\n        peg$literalExpectation(\"`\", false),\n        \"<\",\n        peg$literalExpectation(\"<\", false),\n        \">\",\n        peg$literalExpectation(\">\", false),\n        \"\\\\\",\n        peg$literalExpectation(\"\\\\\", false),\n        \"[\",\n        peg$literalExpectation(\"[\", false),\n        \"]\",\n        peg$literalExpectation(\"]\", false),\n        \"{\",\n        peg$literalExpectation(\"{\", false),\n        \"}\",\n        peg$literalExpectation(\"}\", false),\n        function () { return \"*\"; },\n        function () { return \"/\"; },\n        function () { return \"=\"; },\n        function () { return \"(\"; },\n        function () { return \")\"; },\n        function () { return \">\"; },\n        function () { return \"<\"; },\n        function () { return \",\"; },\n        function () { return \";\"; },\n        function () { return \":\"; },\n        function () { return \"\\\"\"; },\n        /^[!-']/,\n        peg$classExpectation([[\"!\", \"'\"]], false, false),\n        /^[*-[]/,\n        peg$classExpectation([[\"*\", \"[\"]], false, false),\n        /^[\\]-~]/,\n        peg$classExpectation([[\"]\", \"~\"]], false, false),\n        function (contents) {\n            return contents;\n        },\n        /^[#-[]/,\n        peg$classExpectation([[\"#\", \"[\"]], false, false),\n        /^[\\0-\\t]/,\n        peg$classExpectation([[\"\\0\", \"\\t\"]], false, false),\n        /^[\\x0B-\\f]/,\n        peg$classExpectation([[\"\\x0B\", \"\\f\"]], false, false),\n        /^[\\x0E-\\x7F]/,\n        peg$classExpectation([[\"\\x0E\", \"\\x7F\"]], false, false),\n        function () {\n            options = options || { data: {} };\n            options.data.uri = new uri_1.URI(options.data.scheme, options.data.user, options.data.host, options.data.port);\n            delete options.data.scheme;\n            delete options.data.user;\n            delete options.data.host;\n            delete options.data.host_type;\n            delete options.data.port;\n        },\n        function () {\n            options = options || { data: {} };\n            options.data.uri = new uri_1.URI(options.data.scheme, options.data.user, options.data.host, options.data.port, options.data.uri_params, options.data.uri_headers);\n            delete options.data.scheme;\n            delete options.data.user;\n            delete options.data.host;\n            delete options.data.host_type;\n            delete options.data.port;\n            delete options.data.uri_params;\n            if (options.startRule === 'SIP_URI') {\n                options.data = options.data.uri;\n            }\n        },\n        \"sips\",\n        peg$literalExpectation(\"sips\", true),\n        \"sip\",\n        peg$literalExpectation(\"sip\", true),\n        function (uri_scheme) {\n            options = options || { data: {} };\n            options.data.scheme = uri_scheme;\n        },\n        function () {\n            options = options || { data: {} };\n            options.data.user = decodeURIComponent(text().slice(0, -1));\n        },\n        function () {\n            options = options || { data: {} };\n            options.data.password = text();\n        },\n        function () {\n            options = options || { data: {} };\n            options.data.host = text();\n            return options.data.host;\n        },\n        function () {\n            options = options || { data: {} };\n            options.data.host_type = 'domain';\n            return text();\n        },\n        /^[a-zA-Z0-9_\\-]/,\n        peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \"_\", \"-\"], false, false),\n        /^[a-zA-Z0-9\\-]/,\n        peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \"-\"], false, false),\n        function () {\n            options = options || { data: {} };\n            options.data.host_type = 'IPv6';\n            return text();\n        },\n        \"::\",\n        peg$literalExpectation(\"::\", false),\n        function () {\n            options = options || { data: {} };\n            options.data.host_type = 'IPv6';\n            return text();\n        },\n        function () {\n            options = options || { data: {} };\n            options.data.host_type = 'IPv4';\n            return text();\n        },\n        \"25\",\n        peg$literalExpectation(\"25\", false),\n        /^[0-5]/,\n        peg$classExpectation([[\"0\", \"5\"]], false, false),\n        \"2\",\n        peg$literalExpectation(\"2\", false),\n        /^[0-4]/,\n        peg$classExpectation([[\"0\", \"4\"]], false, false),\n        \"1\",\n        peg$literalExpectation(\"1\", false),\n        /^[1-9]/,\n        peg$classExpectation([[\"1\", \"9\"]], false, false),\n        function (port) {\n            options = options || { data: {} };\n            port = parseInt(port.join(''));\n            options.data.port = port;\n            return port;\n        },\n        \"transport=\",\n        peg$literalExpectation(\"transport=\", true),\n        \"udp\",\n        peg$literalExpectation(\"udp\", true),\n        \"tcp\",\n        peg$literalExpectation(\"tcp\", true),\n        \"sctp\",\n        peg$literalExpectation(\"sctp\", true),\n        \"tls\",\n        peg$literalExpectation(\"tls\", true),\n        function (transport) {\n            options = options || { data: {} };\n            if (!options.data.uri_params)\n                options.data.uri_params = {};\n            options.data.uri_params['transport'] = transport.toLowerCase();\n        },\n        \"user=\",\n        peg$literalExpectation(\"user=\", true),\n        \"phone\",\n        peg$literalExpectation(\"phone\", true),\n        \"ip\",\n        peg$literalExpectation(\"ip\", true),\n        function (user) {\n            options = options || { data: {} };\n            if (!options.data.uri_params)\n                options.data.uri_params = {};\n            options.data.uri_params['user'] = user.toLowerCase();\n        },\n        \"method=\",\n        peg$literalExpectation(\"method=\", true),\n        function (method) {\n            options = options || { data: {} };\n            if (!options.data.uri_params)\n                options.data.uri_params = {};\n            options.data.uri_params['method'] = method;\n        },\n        \"ttl=\",\n        peg$literalExpectation(\"ttl=\", true),\n        function (ttl) {\n            options = options || { data: {} };\n            if (!options.data.params)\n                options.data.params = {};\n            options.data.params['ttl'] = ttl;\n        },\n        \"maddr=\",\n        peg$literalExpectation(\"maddr=\", true),\n        function (maddr) {\n            options = options || { data: {} };\n            if (!options.data.uri_params)\n                options.data.uri_params = {};\n            options.data.uri_params['maddr'] = maddr;\n        },\n        \"lr\",\n        peg$literalExpectation(\"lr\", true),\n        function () {\n            options = options || { data: {} };\n            if (!options.data.uri_params)\n                options.data.uri_params = {};\n            options.data.uri_params['lr'] = undefined;\n        },\n        function (param, value) {\n            options = options || { data: {} };\n            if (!options.data.uri_params)\n                options.data.uri_params = {};\n            if (value === null) {\n                value = undefined;\n            }\n            else {\n                value = value[1];\n            }\n            options.data.uri_params[param.toLowerCase()] = value;\n        },\n        function (hname, hvalue) {\n            hname = hname.join('').toLowerCase();\n            hvalue = hvalue.join('');\n            options = options || { data: {} };\n            if (!options.data.uri_headers)\n                options.data.uri_headers = {};\n            if (!options.data.uri_headers[hname]) {\n                options.data.uri_headers[hname] = [hvalue];\n            }\n            else {\n                options.data.uri_headers[hname].push(hvalue);\n            }\n        },\n        function () {\n            options = options || { data: {} };\n            // lots of tests fail if this isn't guarded...\n            if (options.startRule === 'Refer_To') {\n                options.data.uri = new uri_1.URI(options.data.scheme, options.data.user, options.data.host, options.data.port, options.data.uri_params, options.data.uri_headers);\n                delete options.data.scheme;\n                delete options.data.user;\n                delete options.data.host;\n                delete options.data.host_type;\n                delete options.data.port;\n                delete options.data.uri_params;\n            }\n        },\n        \"//\",\n        peg$literalExpectation(\"//\", false),\n        function () {\n            options = options || { data: {} };\n            options.data.scheme = text();\n        },\n        peg$literalExpectation(\"SIP\", true),\n        function () {\n            options = options || { data: {} };\n            options.data.sip_version = text();\n        },\n        \"INVITE\",\n        peg$literalExpectation(\"INVITE\", false),\n        \"ACK\",\n        peg$literalExpectation(\"ACK\", false),\n        \"VXACH\",\n        peg$literalExpectation(\"VXACH\", false),\n        \"OPTIONS\",\n        peg$literalExpectation(\"OPTIONS\", false),\n        \"BYE\",\n        peg$literalExpectation(\"BYE\", false),\n        \"CANCEL\",\n        peg$literalExpectation(\"CANCEL\", false),\n        \"REGISTER\",\n        peg$literalExpectation(\"REGISTER\", false),\n        \"SUBSCRIBE\",\n        peg$literalExpectation(\"SUBSCRIBE\", false),\n        \"NOTIFY\",\n        peg$literalExpectation(\"NOTIFY\", false),\n        \"REFER\",\n        peg$literalExpectation(\"REFER\", false),\n        \"PUBLISH\",\n        peg$literalExpectation(\"PUBLISH\", false),\n        function () {\n            options = options || { data: {} };\n            options.data.method = text();\n            return options.data.method;\n        },\n        function (status_code) {\n            options = options || { data: {} };\n            options.data.status_code = parseInt(status_code.join(''));\n        },\n        function () {\n            options = options || { data: {} };\n            options.data.reason_phrase = text();\n        },\n        function () {\n            options = options || { data: {} };\n            options.data = text();\n        },\n        function () {\n            var idx, length;\n            options = options || { data: {} };\n            length = options.data.multi_header.length;\n            for (idx = 0; idx < length; idx++) {\n                if (options.data.multi_header[idx].parsed === null) {\n                    options.data = null;\n                    break;\n                }\n            }\n            if (options.data !== null) {\n                options.data = options.data.multi_header;\n            }\n            else {\n                options.data = -1;\n            }\n        },\n        function () {\n            var header;\n            options = options || { data: {} };\n            if (!options.data.multi_header)\n                options.data.multi_header = [];\n            try {\n                header = new name_addr_header_1.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);\n                delete options.data.uri;\n                delete options.data.displayName;\n                delete options.data.params;\n            }\n            catch (e) {\n                header = null;\n            }\n            options.data.multi_header.push({ 'position': peg$currPos,\n                'offset': location().start.offset,\n                'parsed': header\n            });\n        },\n        function (displayName) {\n            displayName = text().trim();\n            if (displayName[0] === '\\\"') {\n                displayName = displayName.substring(1, displayName.length - 1);\n            }\n            options = options || { data: {} };\n            options.data.displayName = displayName;\n        },\n        \"q\",\n        peg$literalExpectation(\"q\", true),\n        function (q) {\n            options = options || { data: {} };\n            if (!options.data.params)\n                options.data.params = {};\n            options.data.params['q'] = q;\n        },\n        \"expires\",\n        peg$literalExpectation(\"expires\", true),\n        function (expires) {\n            options = options || { data: {} };\n            if (!options.data.params)\n                options.data.params = {};\n            options.data.params['expires'] = expires;\n        },\n        function (delta_seconds) {\n            return parseInt(delta_seconds.join(''));\n        },\n        \"0\",\n        peg$literalExpectation(\"0\", false),\n        function () {\n            return parseFloat(text());\n        },\n        function (param, value) {\n            options = options || { data: {} };\n            if (!options.data.params)\n                options.data.params = {};\n            if (value === null) {\n                value = undefined;\n            }\n            else {\n                value = value[1];\n            }\n            options.data.params[param.toLowerCase()] = value;\n        },\n        \"render\",\n        peg$literalExpectation(\"render\", true),\n        \"session\",\n        peg$literalExpectation(\"session\", true),\n        \"icon\",\n        peg$literalExpectation(\"icon\", true),\n        \"alert\",\n        peg$literalExpectation(\"alert\", true),\n        function () {\n            options = options || { data: {} };\n            if (options.startRule === 'Content_Disposition') {\n                options.data.type = text().toLowerCase();\n            }\n        },\n        \"handling\",\n        peg$literalExpectation(\"handling\", true),\n        \"optional\",\n        peg$literalExpectation(\"optional\", true),\n        \"required\",\n        peg$literalExpectation(\"required\", true),\n        function (length) {\n            options = options || { data: {} };\n            options.data = parseInt(length.join(''));\n        },\n        function () {\n            options = options || { data: {} };\n            options.data = text();\n        },\n        \"text\",\n        peg$literalExpectation(\"text\", true),\n        \"image\",\n        peg$literalExpectation(\"image\", true),\n        \"audio\",\n        peg$literalExpectation(\"audio\", true),\n        \"video\",\n        peg$literalExpectation(\"video\", true),\n        \"application\",\n        peg$literalExpectation(\"application\", true),\n        \"message\",\n        peg$literalExpectation(\"message\", true),\n        \"multipart\",\n        peg$literalExpectation(\"multipart\", true),\n        \"x-\",\n        peg$literalExpectation(\"x-\", true),\n        function (cseq_value) {\n            options = options || { data: {} };\n            options.data.value = parseInt(cseq_value.join(''));\n        },\n        function (expires) { options = options || { data: {} }; options.data = expires; },\n        function (event_type) {\n            options = options || { data: {} };\n            options.data.event = event_type.toLowerCase();\n        },\n        function () {\n            options = options || { data: {} };\n            var tag = options.data.tag;\n            options.data = new name_addr_header_1.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);\n            if (tag) {\n                options.data.setParam('tag', tag);\n            }\n        },\n        \"tag\",\n        peg$literalExpectation(\"tag\", true),\n        function (tag) { options = options || { data: {} }; options.data.tag = tag; },\n        function (forwards) {\n            options = options || { data: {} };\n            options.data = parseInt(forwards.join(''));\n        },\n        function (min_expires) { options = options || { data: {} }; options.data = min_expires; },\n        function () {\n            options = options || { data: {} };\n            options.data = new name_addr_header_1.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);\n        },\n        \"digest\",\n        peg$literalExpectation(\"Digest\", true),\n        \"realm\",\n        peg$literalExpectation(\"realm\", true),\n        function (realm) { options = options || { data: {} }; options.data.realm = realm; },\n        \"domain\",\n        peg$literalExpectation(\"domain\", true),\n        \"nonce\",\n        peg$literalExpectation(\"nonce\", true),\n        function (nonce) { options = options || { data: {} }; options.data.nonce = nonce; },\n        \"opaque\",\n        peg$literalExpectation(\"opaque\", true),\n        function (opaque) { options = options || { data: {} }; options.data.opaque = opaque; },\n        \"stale\",\n        peg$literalExpectation(\"stale\", true),\n        \"true\",\n        peg$literalExpectation(\"true\", true),\n        function () { options = options || { data: {} }; options.data.stale = true; },\n        \"false\",\n        peg$literalExpectation(\"false\", true),\n        function () { options = options || { data: {} }; options.data.stale = false; },\n        \"algorithm\",\n        peg$literalExpectation(\"algorithm\", true),\n        \"md5\",\n        peg$literalExpectation(\"MD5\", true),\n        \"md5-sess\",\n        peg$literalExpectation(\"MD5-sess\", true),\n        function (algorithm) {\n            options = options || { data: {} };\n            options.data.algorithm = algorithm.toUpperCase();\n        },\n        \"qop\",\n        peg$literalExpectation(\"qop\", true),\n        \"auth-int\",\n        peg$literalExpectation(\"auth-int\", true),\n        \"auth\",\n        peg$literalExpectation(\"auth\", true),\n        function (qop_value) {\n            options = options || { data: {} };\n            options.data.qop || (options.data.qop = []);\n            options.data.qop.push(qop_value.toLowerCase());\n        },\n        function (rack_value) {\n            options = options || { data: {} };\n            options.data.value = parseInt(rack_value.join(''));\n        },\n        function () {\n            var idx, length;\n            options = options || { data: {} };\n            length = options.data.multi_header.length;\n            for (idx = 0; idx < length; idx++) {\n                if (options.data.multi_header[idx].parsed === null) {\n                    options.data = null;\n                    break;\n                }\n            }\n            if (options.data !== null) {\n                options.data = options.data.multi_header;\n            }\n            else {\n                options.data = -1;\n            }\n        },\n        function () {\n            var header;\n            options = options || { data: {} };\n            if (!options.data.multi_header)\n                options.data.multi_header = [];\n            try {\n                header = new name_addr_header_1.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);\n                delete options.data.uri;\n                delete options.data.displayName;\n                delete options.data.params;\n            }\n            catch (e) {\n                header = null;\n            }\n            options.data.multi_header.push({ 'position': peg$currPos,\n                'offset': location().start.offset,\n                'parsed': header\n            });\n        },\n        function () {\n            options = options || { data: {} };\n            options.data = new name_addr_header_1.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);\n        },\n        function () {\n            options = options || { data: {} };\n            if (!(options.data.replaces_from_tag && options.data.replaces_to_tag)) {\n                options.data = -1;\n            }\n        },\n        function () {\n            options = options || { data: {} };\n            options.data = {\n                call_id: options.data\n            };\n        },\n        \"from-tag\",\n        peg$literalExpectation(\"from-tag\", true),\n        function (from_tag) {\n            options = options || { data: {} };\n            options.data.replaces_from_tag = from_tag;\n        },\n        \"to-tag\",\n        peg$literalExpectation(\"to-tag\", true),\n        function (to_tag) {\n            options = options || { data: {} };\n            options.data.replaces_to_tag = to_tag;\n        },\n        \"early-only\",\n        peg$literalExpectation(\"early-only\", true),\n        function () {\n            options = options || { data: {} };\n            options.data.early_only = true;\n        },\n        function (head, r) { return r; },\n        function (head, tail) { return list(head, tail); },\n        function (value) {\n            options = options || { data: {} };\n            if (options.startRule === 'Require') {\n                options.data = value || [];\n            }\n        },\n        function (rseq_value) {\n            options = options || { data: {} };\n            options.data.value = parseInt(rseq_value.join(''));\n        },\n        \"active\",\n        peg$literalExpectation(\"active\", true),\n        \"pending\",\n        peg$literalExpectation(\"pending\", true),\n        \"terminated\",\n        peg$literalExpectation(\"terminated\", true),\n        function () {\n            options = options || { data: {} };\n            options.data.state = text();\n        },\n        \"reason\",\n        peg$literalExpectation(\"reason\", true),\n        function (reason) {\n            options = options || { data: {} };\n            if (typeof reason !== 'undefined')\n                options.data.reason = reason;\n        },\n        function (expires) {\n            options = options || { data: {} };\n            if (typeof expires !== 'undefined')\n                options.data.expires = expires;\n        },\n        \"retry_after\",\n        peg$literalExpectation(\"retry_after\", true),\n        function (retry_after) {\n            options = options || { data: {} };\n            if (typeof retry_after !== 'undefined')\n                options.data.retry_after = retry_after;\n        },\n        \"deactivated\",\n        peg$literalExpectation(\"deactivated\", true),\n        \"probation\",\n        peg$literalExpectation(\"probation\", true),\n        \"rejected\",\n        peg$literalExpectation(\"rejected\", true),\n        \"timeout\",\n        peg$literalExpectation(\"timeout\", true),\n        \"giveup\",\n        peg$literalExpectation(\"giveup\", true),\n        \"noresource\",\n        peg$literalExpectation(\"noresource\", true),\n        \"invariant\",\n        peg$literalExpectation(\"invariant\", true),\n        function (value) {\n            options = options || { data: {} };\n            if (options.startRule === 'Supported') {\n                options.data = value || [];\n            }\n        },\n        function () {\n            options = options || { data: {} };\n            var tag = options.data.tag;\n            options.data = new name_addr_header_1.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);\n            if (tag) {\n                options.data.setParam('tag', tag);\n            }\n        },\n        \"ttl\",\n        peg$literalExpectation(\"ttl\", true),\n        function (via_ttl_value) {\n            options = options || { data: {} };\n            options.data.ttl = via_ttl_value;\n        },\n        \"maddr\",\n        peg$literalExpectation(\"maddr\", true),\n        function (via_maddr) {\n            options = options || { data: {} };\n            options.data.maddr = via_maddr;\n        },\n        \"received\",\n        peg$literalExpectation(\"received\", true),\n        function (via_received) {\n            options = options || { data: {} };\n            options.data.received = via_received;\n        },\n        \"branch\",\n        peg$literalExpectation(\"branch\", true),\n        function (via_branch) {\n            options = options || { data: {} };\n            options.data.branch = via_branch;\n        },\n        \"rport\",\n        peg$literalExpectation(\"rport\", true),\n        function (response_port) {\n            options = options || { data: {} };\n            if (typeof response_port !== 'undefined')\n                options.data.rport = response_port.join('');\n        },\n        function (via_protocol) {\n            options = options || { data: {} };\n            options.data.protocol = via_protocol;\n        },\n        peg$literalExpectation(\"UDP\", true),\n        peg$literalExpectation(\"TCP\", true),\n        peg$literalExpectation(\"TLS\", true),\n        peg$literalExpectation(\"SCTP\", true),\n        function (via_transport) {\n            options = options || { data: {} };\n            options.data.transport = via_transport;\n        },\n        function () {\n            options = options || { data: {} };\n            options.data.host = text();\n        },\n        function (via_sent_by_port) {\n            options = options || { data: {} };\n            options.data.port = parseInt(via_sent_by_port.join(''));\n        },\n        function (ttl) {\n            return parseInt(ttl.join(''));\n        },\n        function (deltaSeconds) {\n            options = options || { data: {} };\n            if (options.startRule === 'Session_Expires') {\n                options.data.deltaSeconds = deltaSeconds;\n            }\n        },\n        \"refresher\",\n        peg$literalExpectation(\"refresher\", false),\n        \"uas\",\n        peg$literalExpectation(\"uas\", false),\n        \"uac\",\n        peg$literalExpectation(\"uac\", false),\n        function (endpoint) {\n            options = options || { data: {} };\n            if (options.startRule === 'Session_Expires') {\n                options.data.refresher = endpoint;\n            }\n        },\n        function (deltaSeconds) {\n            options = options || { data: {} };\n            if (options.startRule === 'Min_SE') {\n                options.data = deltaSeconds;\n            }\n        },\n        \"stuns\",\n        peg$literalExpectation(\"stuns\", true),\n        \"stun\",\n        peg$literalExpectation(\"stun\", true),\n        function (scheme) {\n            options = options || { data: {} };\n            options.data.scheme = scheme;\n        },\n        function (host) {\n            options = options || { data: {} };\n            options.data.host = host;\n        },\n        \"?transport=\",\n        peg$literalExpectation(\"?transport=\", false),\n        \"turns\",\n        peg$literalExpectation(\"turns\", true),\n        \"turn\",\n        peg$literalExpectation(\"turn\", true),\n        function (transport) {\n            options = options || { data: {} };\n            options.data.transport = transport;\n        },\n        function () {\n            options = options || { data: {} };\n            options.data = text();\n        },\n        \"Referred-By\",\n        peg$literalExpectation(\"Referred-By\", false),\n        \"b\",\n        peg$literalExpectation(\"b\", false),\n        \"cid\",\n        peg$literalExpectation(\"cid\", false)\n    ];\n    var peg$bytecode = [\n        peg$decode(\"2 \\\"\\\"6 7!\"),\n        peg$decode(\"4\\\"\\\"\\\"5!7#\"),\n        peg$decode(\"4$\\\"\\\"5!7%\"),\n        peg$decode(\"4&\\\"\\\"5!7'\"),\n        peg$decode(\";'.# &;(\"),\n        peg$decode(\"4(\\\"\\\"5!7)\"),\n        peg$decode(\"4*\\\"\\\"5!7+\"),\n        peg$decode(\"2,\\\"\\\"6,7-\"),\n        peg$decode(\"2.\\\"\\\"6.7/\"),\n        peg$decode(\"40\\\"\\\"5!71\"),\n        peg$decode(\"22\\\"\\\"6273.\\x89 &24\\\"\\\"6475.} &26\\\"\\\"6677.q &28\\\"\\\"6879.e &2:\\\"\\\"6:7;.Y &2<\\\"\\\"6<7=.M &2>\\\"\\\"6>7?.A &2@\\\"\\\"6@7A.5 &2B\\\"\\\"6B7C.) &2D\\\"\\\"6D7E\"),\n        peg$decode(\";).# &;,\"),\n        peg$decode(\"2F\\\"\\\"6F7G.} &2H\\\"\\\"6H7I.q &2J\\\"\\\"6J7K.e &2L\\\"\\\"6L7M.Y &2N\\\"\\\"6N7O.M &2P\\\"\\\"6P7Q.A &2R\\\"\\\"6R7S.5 &2T\\\"\\\"6T7U.) &2V\\\"\\\"6V7W\"),\n        peg$decode(\"%%2X\\\"\\\"6X7Y/5#;#/,$;#/#$+#)(#'#(\\\"'#&'#/\\\"!&,)\"),\n        peg$decode(\"%%$;$0#*;$&/,#; /#$+\\\")(\\\"'#&'#.\\\" &\\\"/=#$;$/&#0#*;$&&&#/'$8\\\":Z\\\" )(\\\"'#&'#\"),\n        peg$decode(\";..\\\" &\\\"\"),\n        peg$decode(\"%$;'.# &;(0)*;'.# &;(&/?#28\\\"\\\"6879/0$;//'$8#:[# )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%%$;2/&#0#*;2&&&#/g#$%$;.0#*;.&/,#;2/#$+\\\")(\\\"'#&'#0=*%$;.0#*;.&/,#;2/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#/\\\"!&,)\"),\n        peg$decode(\"4\\\\\\\"\\\"5!7].# &;3\"),\n        peg$decode(\"4^\\\"\\\"5!7_\"),\n        peg$decode(\"4`\\\"\\\"5!7a\"),\n        peg$decode(\";!.) &4b\\\"\\\"5!7c\"),\n        peg$decode(\"%$;).\\x95 &2F\\\"\\\"6F7G.\\x89 &2J\\\"\\\"6J7K.} &2L\\\"\\\"6L7M.q &2X\\\"\\\"6X7Y.e &2P\\\"\\\"6P7Q.Y &2H\\\"\\\"6H7I.M &2@\\\"\\\"6@7A.A &2d\\\"\\\"6d7e.5 &2R\\\"\\\"6R7S.) &2N\\\"\\\"6N7O/\\x9E#0\\x9B*;).\\x95 &2F\\\"\\\"6F7G.\\x89 &2J\\\"\\\"6J7K.} &2L\\\"\\\"6L7M.q &2X\\\"\\\"6X7Y.e &2P\\\"\\\"6P7Q.Y &2H\\\"\\\"6H7I.M &2@\\\"\\\"6@7A.A &2d\\\"\\\"6d7e.5 &2R\\\"\\\"6R7S.) &2N\\\"\\\"6N7O&&&#/\\\"!&,)\"),\n        peg$decode(\"%$;).\\x89 &2F\\\"\\\"6F7G.} &2L\\\"\\\"6L7M.q &2X\\\"\\\"6X7Y.e &2P\\\"\\\"6P7Q.Y &2H\\\"\\\"6H7I.M &2@\\\"\\\"6@7A.A &2d\\\"\\\"6d7e.5 &2R\\\"\\\"6R7S.) &2N\\\"\\\"6N7O/\\x92#0\\x8F*;).\\x89 &2F\\\"\\\"6F7G.} &2L\\\"\\\"6L7M.q &2X\\\"\\\"6X7Y.e &2P\\\"\\\"6P7Q.Y &2H\\\"\\\"6H7I.M &2@\\\"\\\"6@7A.A &2d\\\"\\\"6d7e.5 &2R\\\"\\\"6R7S.) &2N\\\"\\\"6N7O&&&#/\\\"!&,)\"),\n        peg$decode(\"2T\\\"\\\"6T7U.\\xE3 &2V\\\"\\\"6V7W.\\xD7 &2f\\\"\\\"6f7g.\\xCB &2h\\\"\\\"6h7i.\\xBF &2:\\\"\\\"6:7;.\\xB3 &2D\\\"\\\"6D7E.\\xA7 &22\\\"\\\"6273.\\x9B &28\\\"\\\"6879.\\x8F &2j\\\"\\\"6j7k.\\x83 &;&.} &24\\\"\\\"6475.q &2l\\\"\\\"6l7m.e &2n\\\"\\\"6n7o.Y &26\\\"\\\"6677.M &2>\\\"\\\"6>7?.A &2p\\\"\\\"6p7q.5 &2r\\\"\\\"6r7s.) &;'.# &;(\"),\n        peg$decode(\"%$;).\\u012B &2F\\\"\\\"6F7G.\\u011F &2J\\\"\\\"6J7K.\\u0113 &2L\\\"\\\"6L7M.\\u0107 &2X\\\"\\\"6X7Y.\\xFB &2P\\\"\\\"6P7Q.\\xEF &2H\\\"\\\"6H7I.\\xE3 &2@\\\"\\\"6@7A.\\xD7 &2d\\\"\\\"6d7e.\\xCB &2R\\\"\\\"6R7S.\\xBF &2N\\\"\\\"6N7O.\\xB3 &2T\\\"\\\"6T7U.\\xA7 &2V\\\"\\\"6V7W.\\x9B &2f\\\"\\\"6f7g.\\x8F &2h\\\"\\\"6h7i.\\x83 &28\\\"\\\"6879.w &2j\\\"\\\"6j7k.k &;&.e &24\\\"\\\"6475.Y &2l\\\"\\\"6l7m.M &2n\\\"\\\"6n7o.A &26\\\"\\\"6677.5 &2p\\\"\\\"6p7q.) &2r\\\"\\\"6r7s/\\u0134#0\\u0131*;).\\u012B &2F\\\"\\\"6F7G.\\u011F &2J\\\"\\\"6J7K.\\u0113 &2L\\\"\\\"6L7M.\\u0107 &2X\\\"\\\"6X7Y.\\xFB &2P\\\"\\\"6P7Q.\\xEF &2H\\\"\\\"6H7I.\\xE3 &2@\\\"\\\"6@7A.\\xD7 &2d\\\"\\\"6d7e.\\xCB &2R\\\"\\\"6R7S.\\xBF &2N\\\"\\\"6N7O.\\xB3 &2T\\\"\\\"6T7U.\\xA7 &2V\\\"\\\"6V7W.\\x9B &2f\\\"\\\"6f7g.\\x8F &2h\\\"\\\"6h7i.\\x83 &28\\\"\\\"6879.w &2j\\\"\\\"6j7k.k &;&.e &24\\\"\\\"6475.Y &2l\\\"\\\"6l7m.M &2n\\\"\\\"6n7o.A &26\\\"\\\"6677.5 &2p\\\"\\\"6p7q.) &2r\\\"\\\"6r7s&&&#/\\\"!&,)\"),\n        peg$decode(\"%;//?#2P\\\"\\\"6P7Q/0$;//'$8#:t# )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;//?#24\\\"\\\"6475/0$;//'$8#:u# )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;//?#2>\\\"\\\"6>7?/0$;//'$8#:v# )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;//?#2T\\\"\\\"6T7U/0$;//'$8#:w# )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;//?#2V\\\"\\\"6V7W/0$;//'$8#:x# )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%2h\\\"\\\"6h7i/0#;//'$8\\\":y\\\" )(\\\"'#&'#\"),\n        peg$decode(\"%;//6#2f\\\"\\\"6f7g/'$8\\\":z\\\" )(\\\"'#&'#\"),\n        peg$decode(\"%;//?#2D\\\"\\\"6D7E/0$;//'$8#:{# )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;//?#22\\\"\\\"6273/0$;//'$8#:|# )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;//?#28\\\"\\\"6879/0$;//'$8#:}# )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;//0#;&/'$8\\\":~\\\" )(\\\"'#&'#\"),\n        peg$decode(\"%;&/0#;//'$8\\\":~\\\" )(\\\"'#&'#\"),\n        peg$decode(\"%;=/T#$;G.) &;K.# &;F0/*;G.) &;K.# &;F&/,$;>/#$+#)(#'#(\\\"'#&'#\"),\n        peg$decode(\"4\\x7F\\\"\\\"5!7\\x80.A &4\\x81\\\"\\\"5!7\\x82.5 &4\\x83\\\"\\\"5!7\\x84.) &;3.# &;.\"),\n        peg$decode(\"%%;//Q#;&/H$$;J.# &;K0)*;J.# &;K&/,$;&/#$+$)($'#(#'#(\\\"'#&'#/\\\"!&,)\"),\n        peg$decode(\"%;//]#;&/T$%$;J.# &;K0)*;J.# &;K&/\\\"!&,)/1$;&/($8$:\\x85$!!)($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\";..G &2L\\\"\\\"6L7M.; &4\\x86\\\"\\\"5!7\\x87./ &4\\x83\\\"\\\"5!7\\x84.# &;3\"),\n        peg$decode(\"%2j\\\"\\\"6j7k/J#4\\x88\\\"\\\"5!7\\x89.5 &4\\x8A\\\"\\\"5!7\\x8B.) &4\\x8C\\\"\\\"5!7\\x8D/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\"%;N/M#28\\\"\\\"6879/>$;O.\\\" &\\\"/0$;S/'$8$:\\x8E$ )($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;N/d#28\\\"\\\"6879/U$;O.\\\" &\\\"/G$;S/>$;_/5$;l.\\\" &\\\"/'$8&:\\x8F& )(&'#(%'#($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\"%3\\x90\\\"\\\"5$7\\x91.) &3\\x92\\\"\\\"5#7\\x93/' 8!:\\x94!! )\"),\n        peg$decode(\"%;P/]#%28\\\"\\\"6879/,#;R/#$+\\\")(\\\"'#&'#.\\\" &\\\"/6$2:\\\"\\\"6:7;/'$8#:\\x95# )(#'#(\\\"'#&'#\"),\n        peg$decode(\"$;+.) &;-.# &;Q/2#0/*;+.) &;-.# &;Q&&&#\"),\n        peg$decode(\"2<\\\"\\\"6<7=.q &2>\\\"\\\"6>7?.e &2@\\\"\\\"6@7A.Y &2B\\\"\\\"6B7C.M &2D\\\"\\\"6D7E.A &22\\\"\\\"6273.5 &26\\\"\\\"6677.) &24\\\"\\\"6475\"),\n        peg$decode(\"%$;+._ &;-.Y &2<\\\"\\\"6<7=.M &2>\\\"\\\"6>7?.A &2@\\\"\\\"6@7A.5 &2B\\\"\\\"6B7C.) &2D\\\"\\\"6D7E0e*;+._ &;-.Y &2<\\\"\\\"6<7=.M &2>\\\"\\\"6>7?.A &2@\\\"\\\"6@7A.5 &2B\\\"\\\"6B7C.) &2D\\\"\\\"6D7E&/& 8!:\\x96! )\"),\n        peg$decode(\"%;T/J#%28\\\"\\\"6879/,#;^/#$+\\\")(\\\"'#&'#.\\\" &\\\"/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\"%;U.) &;\\\\.# &;X/& 8!:\\x97! )\"),\n        peg$decode(\"%$%;V/2#2J\\\"\\\"6J7K/#$+\\\")(\\\"'#&'#0<*%;V/2#2J\\\"\\\"6J7K/#$+\\\")(\\\"'#&'#&/D#;W/;$2J\\\"\\\"6J7K.\\\" &\\\"/'$8#:\\x98# )(#'#(\\\"'#&'#\"),\n        peg$decode(\"$4\\x99\\\"\\\"5!7\\x9A/,#0)*4\\x99\\\"\\\"5!7\\x9A&&&#\"),\n        peg$decode(\"%4$\\\"\\\"5!7%/?#$4\\x9B\\\"\\\"5!7\\x9C0)*4\\x9B\\\"\\\"5!7\\x9C&/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\"%2l\\\"\\\"6l7m/?#;Y/6$2n\\\"\\\"6n7o/'$8#:\\x9D# )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%%;Z/\\xB3#28\\\"\\\"6879/\\xA4$;Z/\\x9B$28\\\"\\\"6879/\\x8C$;Z/\\x83$28\\\"\\\"6879/t$;Z/k$28\\\"\\\"6879/\\\\$;Z/S$28\\\"\\\"6879/D$;Z/;$28\\\"\\\"6879/,$;[/#$+-)(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u0790 &%2\\x9E\\\"\\\"6\\x9E7\\x9F/\\xA4#;Z/\\x9B$28\\\"\\\"6879/\\x8C$;Z/\\x83$28\\\"\\\"6879/t$;Z/k$28\\\"\\\"6879/\\\\$;Z/S$28\\\"\\\"6879/D$;Z/;$28\\\"\\\"6879/,$;[/#$+,)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u06F9 &%2\\x9E\\\"\\\"6\\x9E7\\x9F/\\x8C#;Z/\\x83$28\\\"\\\"6879/t$;Z/k$28\\\"\\\"6879/\\\\$;Z/S$28\\\"\\\"6879/D$;Z/;$28\\\"\\\"6879/,$;[/#$+*)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u067A &%2\\x9E\\\"\\\"6\\x9E7\\x9F/t#;Z/k$28\\\"\\\"6879/\\\\$;Z/S$28\\\"\\\"6879/D$;Z/;$28\\\"\\\"6879/,$;[/#$+()(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u0613 &%2\\x9E\\\"\\\"6\\x9E7\\x9F/\\\\#;Z/S$28\\\"\\\"6879/D$;Z/;$28\\\"\\\"6879/,$;[/#$+&)(&'#(%'#($'#(#'#(\\\"'#&'#.\\u05C4 &%2\\x9E\\\"\\\"6\\x9E7\\x9F/D#;Z/;$28\\\"\\\"6879/,$;[/#$+$)($'#(#'#(\\\"'#&'#.\\u058D &%2\\x9E\\\"\\\"6\\x9E7\\x9F/,#;[/#$+\\\")(\\\"'#&'#.\\u056E &%2\\x9E\\\"\\\"6\\x9E7\\x9F/,#;Z/#$+\\\")(\\\"'#&'#.\\u054F &%;Z/\\x9B#2\\x9E\\\"\\\"6\\x9E7\\x9F/\\x8C$;Z/\\x83$28\\\"\\\"6879/t$;Z/k$28\\\"\\\"6879/\\\\$;Z/S$28\\\"\\\"6879/D$;Z/;$28\\\"\\\"6879/,$;[/#$++)(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u04C7 &%;Z/\\xAA#%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\x83$2\\x9E\\\"\\\"6\\x9E7\\x9F/t$;Z/k$28\\\"\\\"6879/\\\\$;Z/S$28\\\"\\\"6879/D$;Z/;$28\\\"\\\"6879/,$;[/#$+*)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u0430 &%;Z/\\xB9#%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\x92$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/k$2\\x9E\\\"\\\"6\\x9E7\\x9F/\\\\$;Z/S$28\\\"\\\"6879/D$;Z/;$28\\\"\\\"6879/,$;[/#$+))()'#(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u038A &%;Z/\\xC8#%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\xA1$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/z$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/S$2\\x9E\\\"\\\"6\\x9E7\\x9F/D$;Z/;$28\\\"\\\"6879/,$;[/#$+()(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u02D5 &%;Z/\\xD7#%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\xB0$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\x89$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/b$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/;$2\\x9E\\\"\\\"6\\x9E7\\x9F/,$;[/#$+')(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u0211 &%;Z/\\xFE#%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\xD7$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\xB0$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\x89$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/b$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/;$2\\x9E\\\"\\\"6\\x9E7\\x9F/,$;Z/#$+()(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u0126 &%;Z/\\u011C#%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\xF5$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\xCE$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\xA7$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\x80$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/Y$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/2$2\\x9E\\\"\\\"6\\x9E7\\x9F/#$+()(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#/& 8!:\\xA0! )\"),\n        peg$decode(\"%;#/M#;#.\\\" &\\\"/?$;#.\\\" &\\\"/1$;#.\\\" &\\\"/#$+$)($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;Z/;#28\\\"\\\"6879/,$;Z/#$+#)(#'#(\\\"'#&'#.# &;\\\\\"),\n        peg$decode(\"%;]/o#2J\\\"\\\"6J7K/`$;]/W$2J\\\"\\\"6J7K/H$;]/?$2J\\\"\\\"6J7K/0$;]/'$8':\\xA1' )(''#(&'#(%'#($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\"%2\\xA2\\\"\\\"6\\xA27\\xA3/2#4\\xA4\\\"\\\"5!7\\xA5/#$+\\\")(\\\"'#&'#.\\x98 &%2\\xA6\\\"\\\"6\\xA67\\xA7/;#4\\xA8\\\"\\\"5!7\\xA9/,$;!/#$+#)(#'#(\\\"'#&'#.j &%2\\xAA\\\"\\\"6\\xAA7\\xAB/5#;!/,$;!/#$+#)(#'#(\\\"'#&'#.B &%4\\xAC\\\"\\\"5!7\\xAD/,#;!/#$+\\\")(\\\"'#&'#.# &;!\"),\n        peg$decode(\"%%;!.\\\" &\\\"/[#;!.\\\" &\\\"/M$;!.\\\" &\\\"/?$;!.\\\" &\\\"/1$;!.\\\" &\\\"/#$+%)(%'#($'#(#'#(\\\"'#&'#/' 8!:\\xAE!! )\"),\n        peg$decode(\"$%22\\\"\\\"6273/,#;`/#$+\\\")(\\\"'#&'#0<*%22\\\"\\\"6273/,#;`/#$+\\\")(\\\"'#&'#&\"),\n        peg$decode(\";a.A &;b.; &;c.5 &;d./ &;e.) &;f.# &;g\"),\n        peg$decode(\"%3\\xAF\\\"\\\"5*7\\xB0/a#3\\xB1\\\"\\\"5#7\\xB2.G &3\\xB3\\\"\\\"5#7\\xB4.; &3\\xB5\\\"\\\"5$7\\xB6./ &3\\xB7\\\"\\\"5#7\\xB8.# &;6/($8\\\":\\xB9\\\"! )(\\\"'#&'#\"),\n        peg$decode(\"%3\\xBA\\\"\\\"5%7\\xBB/I#3\\xBC\\\"\\\"5%7\\xBD./ &3\\xBE\\\"\\\"5\\\"7\\xBF.# &;6/($8\\\":\\xC0\\\"! )(\\\"'#&'#\"),\n        peg$decode(\"%3\\xC1\\\"\\\"5'7\\xC2/1#;\\x90/($8\\\":\\xC3\\\"! )(\\\"'#&'#\"),\n        peg$decode(\"%3\\xC4\\\"\\\"5$7\\xC5/1#;\\xF0/($8\\\":\\xC6\\\"! )(\\\"'#&'#\"),\n        peg$decode(\"%3\\xC7\\\"\\\"5&7\\xC8/1#;T/($8\\\":\\xC9\\\"! )(\\\"'#&'#\"),\n        peg$decode(\"%3\\xCA\\\"\\\"5\\\"7\\xCB/N#%2>\\\"\\\"6>7?/,#;6/#$+\\\")(\\\"'#&'#.\\\" &\\\"/'$8\\\":\\xCC\\\" )(\\\"'#&'#\"),\n        peg$decode(\"%;h/P#%2>\\\"\\\"6>7?/,#;i/#$+\\\")(\\\"'#&'#.\\\" &\\\"/)$8\\\":\\xCD\\\"\\\"! )(\\\"'#&'#\"),\n        peg$decode(\"%$;j/&#0#*;j&&&#/\\\"!&,)\"),\n        peg$decode(\"%$;j/&#0#*;j&&&#/\\\"!&,)\"),\n        peg$decode(\";k.) &;+.# &;-\"),\n        peg$decode(\"2l\\\"\\\"6l7m.e &2n\\\"\\\"6n7o.Y &24\\\"\\\"6475.M &28\\\"\\\"6879.A &2<\\\"\\\"6<7=.5 &2@\\\"\\\"6@7A.) &2B\\\"\\\"6B7C\"),\n        peg$decode(\"%26\\\"\\\"6677/n#;m/e$$%2<\\\"\\\"6<7=/,#;m/#$+\\\")(\\\"'#&'#0<*%2<\\\"\\\"6<7=/,#;m/#$+\\\")(\\\"'#&'#&/#$+#)(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;n/A#2>\\\"\\\"6>7?/2$;o/)$8#:\\xCE#\\\"\\\" )(#'#(\\\"'#&'#\"),\n        peg$decode(\"$;p.) &;+.# &;-/2#0/*;p.) &;+.# &;-&&&#\"),\n        peg$decode(\"$;p.) &;+.# &;-0/*;p.) &;+.# &;-&\"),\n        peg$decode(\"2l\\\"\\\"6l7m.e &2n\\\"\\\"6n7o.Y &24\\\"\\\"6475.M &26\\\"\\\"6677.A &28\\\"\\\"6879.5 &2@\\\"\\\"6@7A.) &2B\\\"\\\"6B7C\"),\n        peg$decode(\";\\x91.# &;r\"),\n        peg$decode(\"%;\\x90/G#;'/>$;s/5$;'/,$;\\x84/#$+%)(%'#($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\";M.# &;t\"),\n        peg$decode(\"%;\\x7F/E#28\\\"\\\"6879/6$;u.# &;x/'$8#:\\xCF# )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;v.# &;w/J#%26\\\"\\\"6677/,#;\\x83/#$+\\\")(\\\"'#&'#.\\\" &\\\"/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\"%2\\xD0\\\"\\\"6\\xD07\\xD1/:#;\\x80/1$;w.\\\" &\\\"/#$+#)(#'#(\\\"'#&'#\"),\n        peg$decode(\"%24\\\"\\\"6475/,#;{/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\"%;z/3#$;y0#*;y&/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\";*.) &;+.# &;-\"),\n        peg$decode(\";+.\\x8F &;-.\\x89 &22\\\"\\\"6273.} &26\\\"\\\"6677.q &28\\\"\\\"6879.e &2:\\\"\\\"6:7;.Y &2<\\\"\\\"6<7=.M &2>\\\"\\\"6>7?.A &2@\\\"\\\"6@7A.5 &2B\\\"\\\"6B7C.) &2D\\\"\\\"6D7E\"),\n        peg$decode(\"%;|/e#$%24\\\"\\\"6475/,#;|/#$+\\\")(\\\"'#&'#0<*%24\\\"\\\"6475/,#;|/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\"%$;~0#*;~&/e#$%22\\\"\\\"6273/,#;}/#$+\\\")(\\\"'#&'#0<*%22\\\"\\\"6273/,#;}/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\"$;~0#*;~&\"),\n        peg$decode(\";+.w &;-.q &28\\\"\\\"6879.e &2:\\\"\\\"6:7;.Y &2<\\\"\\\"6<7=.M &2>\\\"\\\"6>7?.A &2@\\\"\\\"6@7A.5 &2B\\\"\\\"6B7C.) &2D\\\"\\\"6D7E\"),\n        peg$decode(\"%%;\\\"/\\x87#$;\\\".G &;!.A &2@\\\"\\\"6@7A.5 &2F\\\"\\\"6F7G.) &2J\\\"\\\"6J7K0M*;\\\".G &;!.A &2@\\\"\\\"6@7A.5 &2F\\\"\\\"6F7G.) &2J\\\"\\\"6J7K&/#$+\\\")(\\\"'#&'#/& 8!:\\xD2! )\"),\n        peg$decode(\";\\x81.# &;\\x82\"),\n        peg$decode(\"%%;O/2#2:\\\"\\\"6:7;/#$+\\\")(\\\"'#&'#.\\\" &\\\"/,#;S/#$+\\\")(\\\"'#&'#.\\\" &\\\"\"),\n        peg$decode(\"$;+.\\x83 &;-.} &2B\\\"\\\"6B7C.q &2D\\\"\\\"6D7E.e &22\\\"\\\"6273.Y &28\\\"\\\"6879.M &2:\\\"\\\"6:7;.A &2<\\\"\\\"6<7=.5 &2>\\\"\\\"6>7?.) &2@\\\"\\\"6@7A/\\x8C#0\\x89*;+.\\x83 &;-.} &2B\\\"\\\"6B7C.q &2D\\\"\\\"6D7E.e &22\\\"\\\"6273.Y &28\\\"\\\"6879.M &2:\\\"\\\"6:7;.A &2<\\\"\\\"6<7=.5 &2>\\\"\\\"6>7?.) &2@\\\"\\\"6@7A&&&#\"),\n        peg$decode(\"$;y0#*;y&\"),\n        peg$decode(\"%3\\x92\\\"\\\"5#7\\xD3/q#24\\\"\\\"6475/b$$;!/&#0#*;!&&&#/L$2J\\\"\\\"6J7K/=$$;!/&#0#*;!&&&#/'$8%:\\xD4% )(%'#($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\"2\\xD5\\\"\\\"6\\xD57\\xD6\"),\n        peg$decode(\"2\\xD7\\\"\\\"6\\xD77\\xD8\"),\n        peg$decode(\"2\\xD9\\\"\\\"6\\xD97\\xDA\"),\n        peg$decode(\"2\\xDB\\\"\\\"6\\xDB7\\xDC\"),\n        peg$decode(\"2\\xDD\\\"\\\"6\\xDD7\\xDE\"),\n        peg$decode(\"2\\xDF\\\"\\\"6\\xDF7\\xE0\"),\n        peg$decode(\"2\\xE1\\\"\\\"6\\xE17\\xE2\"),\n        peg$decode(\"2\\xE3\\\"\\\"6\\xE37\\xE4\"),\n        peg$decode(\"2\\xE5\\\"\\\"6\\xE57\\xE6\"),\n        peg$decode(\"2\\xE7\\\"\\\"6\\xE77\\xE8\"),\n        peg$decode(\"2\\xE9\\\"\\\"6\\xE97\\xEA\"),\n        peg$decode(\"%;\\x85.Y &;\\x86.S &;\\x88.M &;\\x89.G &;\\x8A.A &;\\x8B.; &;\\x8C.5 &;\\x8F./ &;\\x8D.) &;\\x8E.# &;6/& 8!:\\xEB! )\"),\n        peg$decode(\"%;\\x84/G#;'/>$;\\x92/5$;'/,$;\\x94/#$+%)(%'#($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;\\x93/' 8!:\\xEC!! )\"),\n        peg$decode(\"%;!/5#;!/,$;!/#$+#)(#'#(\\\"'#&'#\"),\n        peg$decode(\"%$;*.A &;+.; &;-.5 &;3./ &;4.) &;'.# &;(0G*;*.A &;+.; &;-.5 &;3./ &;4.) &;'.# &;(&/& 8!:\\xED! )\"),\n        peg$decode(\"%;\\xB6/Y#$%;A/,#;\\xB6/#$+\\\")(\\\"'#&'#06*%;A/,#;\\xB6/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\"%;9/N#%2:\\\"\\\"6:7;/,#;9/#$+\\\")(\\\"'#&'#.\\\" &\\\"/'$8\\\":\\xEE\\\" )(\\\"'#&'#\"),\n        peg$decode(\"%;:.c &%;\\x98/Y#$%;A/,#;\\x98/#$+\\\")(\\\"'#&'#06*%;A/,#;\\x98/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#/& 8!:\\xEF! )\"),\n        peg$decode(\"%;L.# &;\\x99/]#$%;B/,#;\\x9B/#$+\\\")(\\\"'#&'#06*%;B/,#;\\x9B/#$+\\\")(\\\"'#&'#&/'$8\\\":\\xF0\\\" )(\\\"'#&'#\"),\n        peg$decode(\"%;\\x9A.\\\" &\\\"/>#;@/5$;M/,$;?/#$+$)($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\"%%;6/Y#$%;./,#;6/#$+\\\")(\\\"'#&'#06*%;./,#;6/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#.# &;H/' 8!:\\xF1!! )\"),\n        peg$decode(\";\\x9C.) &;\\x9D.# &;\\xA0\"),\n        peg$decode(\"%3\\xF2\\\"\\\"5!7\\xF3/:#;</1$;\\x9F/($8#:\\xF4#! )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%3\\xF5\\\"\\\"5'7\\xF6/:#;</1$;\\x9E/($8#:\\xF7#! )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%$;!/&#0#*;!&&&#/' 8!:\\xF8!! )\"),\n        peg$decode(\"%2\\xF9\\\"\\\"6\\xF97\\xFA/o#%2J\\\"\\\"6J7K/M#;!.\\\" &\\\"/?$;!.\\\" &\\\"/1$;!.\\\" &\\\"/#$+$)($'#(#'#(\\\"'#&'#.\\\" &\\\"/'$8\\\":\\xFB\\\" )(\\\"'#&'#\"),\n        peg$decode(\"%;6/J#%;</,#;\\xA1/#$+\\\")(\\\"'#&'#.\\\" &\\\"/)$8\\\":\\xFC\\\"\\\"! )(\\\"'#&'#\"),\n        peg$decode(\";6.) &;T.# &;H\"),\n        peg$decode(\"%;\\xA3/Y#$%;B/,#;\\xA4/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xA4/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\"%3\\xFD\\\"\\\"5&7\\xFE.G &3\\xFF\\\"\\\"5'7\\u0100.; &3\\u0101\\\"\\\"5$7\\u0102./ &3\\u0103\\\"\\\"5%7\\u0104.# &;6/& 8!:\\u0105! )\"),\n        peg$decode(\";\\xA5.# &;\\xA0\"),\n        peg$decode(\"%3\\u0106\\\"\\\"5(7\\u0107/M#;</D$3\\u0108\\\"\\\"5(7\\u0109./ &3\\u010A\\\"\\\"5(7\\u010B.# &;6/#$+#)(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;6/Y#$%;A/,#;6/#$+\\\")(\\\"'#&'#06*%;A/,#;6/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\"%$;!/&#0#*;!&&&#/' 8!:\\u010C!! )\"),\n        peg$decode(\"%;\\xA9/& 8!:\\u010D! )\"),\n        peg$decode(\"%;\\xAA/k#;;/b$;\\xAF/Y$$%;B/,#;\\xB0/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xB0/#$+\\\")(\\\"'#&'#&/#$+$)($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\";\\xAB.# &;\\xAC\"),\n        peg$decode(\"3\\u010E\\\"\\\"5$7\\u010F.S &3\\u0110\\\"\\\"5%7\\u0111.G &3\\u0112\\\"\\\"5%7\\u0113.; &3\\u0114\\\"\\\"5%7\\u0115./ &3\\u0116\\\"\\\"5+7\\u0117.# &;\\xAD\"),\n        peg$decode(\"3\\u0118\\\"\\\"5'7\\u0119./ &3\\u011A\\\"\\\"5)7\\u011B.# &;\\xAD\"),\n        peg$decode(\";6.# &;\\xAE\"),\n        peg$decode(\"%3\\u011C\\\"\\\"5\\\"7\\u011D/,#;6/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\";\\xAD.# &;6\"),\n        peg$decode(\"%;6/5#;</,$;\\xB1/#$+#)(#'#(\\\"'#&'#\"),\n        peg$decode(\";6.# &;H\"),\n        peg$decode(\"%;\\xB3/5#;./,$;\\x90/#$+#)(#'#(\\\"'#&'#\"),\n        peg$decode(\"%$;!/&#0#*;!&&&#/' 8!:\\u011E!! )\"),\n        peg$decode(\"%;\\x9E/' 8!:\\u011F!! )\"),\n        peg$decode(\"%;\\xB6/^#$%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#&/($8\\\":\\u0120\\\"!!)(\\\"'#&'#\"),\n        peg$decode(\"%%;7/e#$%2J\\\"\\\"6J7K/,#;7/#$+\\\")(\\\"'#&'#0<*%2J\\\"\\\"6J7K/,#;7/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#/\\\"!&,)\"),\n        peg$decode(\"%;L.# &;\\x99/]#$%;B/,#;\\xB8/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xB8/#$+\\\")(\\\"'#&'#&/'$8\\\":\\u0121\\\" )(\\\"'#&'#\"),\n        peg$decode(\";\\xB9.# &;\\xA0\"),\n        peg$decode(\"%3\\u0122\\\"\\\"5#7\\u0123/:#;</1$;6/($8#:\\u0124#! )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%$;!/&#0#*;!&&&#/' 8!:\\u0125!! )\"),\n        peg$decode(\"%;\\x9E/' 8!:\\u0126!! )\"),\n        peg$decode(\"%$;\\x9A0#*;\\x9A&/x#;@/o$;M/f$;?/]$$%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#&/'$8%:\\u0127% )(%'#($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\";\\xBE\"),\n        peg$decode(\"%3\\u0128\\\"\\\"5&7\\u0129/k#;./b$;\\xC1/Y$$%;A/,#;\\xC1/#$+\\\")(\\\"'#&'#06*%;A/,#;\\xC1/#$+\\\")(\\\"'#&'#&/#$+$)($'#(#'#(\\\"'#&'#.# &;\\xBF\"),\n        peg$decode(\"%;6/k#;./b$;\\xC0/Y$$%;A/,#;\\xC0/#$+\\\")(\\\"'#&'#06*%;A/,#;\\xC0/#$+\\\")(\\\"'#&'#&/#$+$)($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;6/;#;</2$;6.# &;H/#$+#)(#'#(\\\"'#&'#\"),\n        peg$decode(\";\\xC2.G &;\\xC4.A &;\\xC6.; &;\\xC8.5 &;\\xC9./ &;\\xCA.) &;\\xCB.# &;\\xC0\"),\n        peg$decode(\"%3\\u012A\\\"\\\"5%7\\u012B/5#;</,$;\\xC3/#$+#)(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;I/' 8!:\\u012C!! )\"),\n        peg$decode(\"%3\\u012D\\\"\\\"5&7\\u012E/\\x97#;</\\x8E$;D/\\x85$;\\xC5/|$$%$;'/&#0#*;'&&&#/,#;\\xC5/#$+\\\")(\\\"'#&'#0C*%$;'/&#0#*;'&&&#/,#;\\xC5/#$+\\\")(\\\"'#&'#&/,$;E/#$+&)(&'#(%'#($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\";t.# &;w\"),\n        peg$decode(\"%3\\u012F\\\"\\\"5%7\\u0130/5#;</,$;\\xC7/#$+#)(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;I/' 8!:\\u0131!! )\"),\n        peg$decode(\"%3\\u0132\\\"\\\"5&7\\u0133/:#;</1$;I/($8#:\\u0134#! )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%3\\u0135\\\"\\\"5%7\\u0136/]#;</T$%3\\u0137\\\"\\\"5$7\\u0138/& 8!:\\u0139! ).4 &%3\\u013A\\\"\\\"5%7\\u013B/& 8!:\\u013C! )/#$+#)(#'#(\\\"'#&'#\"),\n        peg$decode(\"%3\\u013D\\\"\\\"5)7\\u013E/R#;</I$3\\u013F\\\"\\\"5#7\\u0140./ &3\\u0141\\\"\\\"5(7\\u0142.# &;6/($8#:\\u0143#! )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%3\\u0144\\\"\\\"5#7\\u0145/\\x93#;</\\x8A$;D/\\x81$%;\\xCC/e#$%2D\\\"\\\"6D7E/,#;\\xCC/#$+\\\")(\\\"'#&'#0<*%2D\\\"\\\"6D7E/,#;\\xCC/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#/,$;E/#$+%)(%'#($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\"%3\\u0146\\\"\\\"5(7\\u0147./ &3\\u0148\\\"\\\"5$7\\u0149.# &;6/' 8!:\\u014A!! )\"),\n        peg$decode(\"%;6/Y#$%;A/,#;6/#$+\\\")(\\\"'#&'#06*%;A/,#;6/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\"%;\\xCF/G#;./>$;\\xCF/5$;./,$;\\x90/#$+%)(%'#($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\"%$;!/&#0#*;!&&&#/' 8!:\\u014B!! )\"),\n        peg$decode(\"%;\\xD1/]#$%;A/,#;\\xD1/#$+\\\")(\\\"'#&'#06*%;A/,#;\\xD1/#$+\\\")(\\\"'#&'#&/'$8\\\":\\u014C\\\" )(\\\"'#&'#\"),\n        peg$decode(\"%;\\x99/]#$%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#&/'$8\\\":\\u014D\\\" )(\\\"'#&'#\"),\n        peg$decode(\"%;L.O &;\\x99.I &%;@.\\\" &\\\"/:#;t/1$;?.\\\" &\\\"/#$+#)(#'#(\\\"'#&'#/]#$%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#&/'$8\\\":\\u014E\\\" )(\\\"'#&'#\"),\n        peg$decode(\"%;\\xD4/]#$%;B/,#;\\xD5/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xD5/#$+\\\")(\\\"'#&'#&/'$8\\\":\\u014F\\\" )(\\\"'#&'#\"),\n        peg$decode(\"%;\\x96/& 8!:\\u0150! )\"),\n        peg$decode(\"%3\\u0151\\\"\\\"5(7\\u0152/:#;</1$;6/($8#:\\u0153#! )(#'#(\\\"'#&'#.g &%3\\u0154\\\"\\\"5&7\\u0155/:#;</1$;6/($8#:\\u0156#! )(#'#(\\\"'#&'#.: &%3\\u0157\\\"\\\"5*7\\u0158/& 8!:\\u0159! ).# &;\\xA0\"),\n        peg$decode(\"%%;6/k#$%;A/2#;6/)$8\\\":\\u015A\\\"\\\"$ )(\\\"'#&'#0<*%;A/2#;6/)$8\\\":\\u015A\\\"\\\"$ )(\\\"'#&'#&/)$8\\\":\\u015B\\\"\\\"! )(\\\"'#&'#.\\\" &\\\"/' 8!:\\u015C!! )\"),\n        peg$decode(\"%;\\xD8/Y#$%;A/,#;\\xD8/#$+\\\")(\\\"'#&'#06*%;A/,#;\\xD8/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\"%;\\x99/Y#$%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\"%$;!/&#0#*;!&&&#/' 8!:\\u015D!! )\"),\n        peg$decode(\"%;\\xDB/Y#$%;B/,#;\\xDC/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xDC/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\"%3\\u015E\\\"\\\"5&7\\u015F.; &3\\u0160\\\"\\\"5'7\\u0161./ &3\\u0162\\\"\\\"5*7\\u0163.# &;6/& 8!:\\u0164! )\"),\n        peg$decode(\"%3\\u0165\\\"\\\"5&7\\u0166/:#;</1$;\\xDD/($8#:\\u0167#! )(#'#(\\\"'#&'#.} &%3\\xF5\\\"\\\"5'7\\xF6/:#;</1$;\\x9E/($8#:\\u0168#! )(#'#(\\\"'#&'#.P &%3\\u0169\\\"\\\"5+7\\u016A/:#;</1$;\\x9E/($8#:\\u016B#! )(#'#(\\\"'#&'#.# &;\\xA0\"),\n        peg$decode(\"3\\u016C\\\"\\\"5+7\\u016D.k &3\\u016E\\\"\\\"5)7\\u016F._ &3\\u0170\\\"\\\"5(7\\u0171.S &3\\u0172\\\"\\\"5'7\\u0173.G &3\\u0174\\\"\\\"5&7\\u0175.; &3\\u0176\\\"\\\"5*7\\u0177./ &3\\u0178\\\"\\\"5)7\\u0179.# &;6\"),\n        peg$decode(\";1.\\\" &\\\"\"),\n        peg$decode(\"%%;6/k#$%;A/2#;6/)$8\\\":\\u015A\\\"\\\"$ )(\\\"'#&'#0<*%;A/2#;6/)$8\\\":\\u015A\\\"\\\"$ )(\\\"'#&'#&/)$8\\\":\\u015B\\\"\\\"! )(\\\"'#&'#.\\\" &\\\"/' 8!:\\u017A!! )\"),\n        peg$decode(\"%;L.# &;\\x99/]#$%;B/,#;\\xE1/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xE1/#$+\\\")(\\\"'#&'#&/'$8\\\":\\u017B\\\" )(\\\"'#&'#\"),\n        peg$decode(\";\\xB9.# &;\\xA0\"),\n        peg$decode(\"%;\\xE3/Y#$%;A/,#;\\xE3/#$+\\\")(\\\"'#&'#06*%;A/,#;\\xE3/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\"%;\\xEA/k#;./b$;\\xED/Y$$%;B/,#;\\xE4/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xE4/#$+\\\")(\\\"'#&'#&/#$+$)($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\";\\xE5.; &;\\xE6.5 &;\\xE7./ &;\\xE8.) &;\\xE9.# &;\\xA0\"),\n        peg$decode(\"%3\\u017C\\\"\\\"5#7\\u017D/:#;</1$;\\xF0/($8#:\\u017E#! )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%3\\u017F\\\"\\\"5%7\\u0180/:#;</1$;T/($8#:\\u0181#! )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%3\\u0182\\\"\\\"5(7\\u0183/F#;</=$;\\\\.) &;Y.# &;X/($8#:\\u0184#! )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%3\\u0185\\\"\\\"5&7\\u0186/:#;</1$;6/($8#:\\u0187#! )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%3\\u0188\\\"\\\"5%7\\u0189/A#;</8$$;!0#*;!&/($8#:\\u018A#! )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;\\xEB/G#;;/>$;6/5$;;/,$;\\xEC/#$+%)(%'#($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\"%3\\x92\\\"\\\"5#7\\xD3.# &;6/' 8!:\\u018B!! )\"),\n        peg$decode(\"%3\\xB1\\\"\\\"5#7\\u018C.G &3\\xB3\\\"\\\"5#7\\u018D.; &3\\xB7\\\"\\\"5#7\\u018E./ &3\\xB5\\\"\\\"5$7\\u018F.# &;6/' 8!:\\u0190!! )\"),\n        peg$decode(\"%;\\xEE/D#%;C/,#;\\xEF/#$+\\\")(\\\"'#&'#.\\\" &\\\"/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\"%;U.) &;\\\\.# &;X/& 8!:\\u0191! )\"),\n        peg$decode(\"%%;!.\\\" &\\\"/[#;!.\\\" &\\\"/M$;!.\\\" &\\\"/?$;!.\\\" &\\\"/1$;!.\\\" &\\\"/#$+%)(%'#($'#(#'#(\\\"'#&'#/' 8!:\\u0192!! )\"),\n        peg$decode(\"%%;!/?#;!.\\\" &\\\"/1$;!.\\\" &\\\"/#$+#)(#'#(\\\"'#&'#/' 8!:\\u0193!! )\"),\n        peg$decode(\";\\xBE\"),\n        peg$decode(\"%;\\x9E/^#$%;B/,#;\\xF3/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xF3/#$+\\\")(\\\"'#&'#&/($8\\\":\\u0194\\\"!!)(\\\"'#&'#\"),\n        peg$decode(\";\\xF4.# &;\\xA0\"),\n        peg$decode(\"%2\\u0195\\\"\\\"6\\u01957\\u0196/L#;</C$2\\u0197\\\"\\\"6\\u01977\\u0198.) &2\\u0199\\\"\\\"6\\u01997\\u019A/($8#:\\u019B#! )(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;\\x9E/^#$%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#&/($8\\\":\\u019C\\\"!!)(\\\"'#&'#\"),\n        peg$decode(\"%;6/5#;0/,$;\\xF7/#$+#)(#'#(\\\"'#&'#\"),\n        peg$decode(\"$;2.) &;4.# &;.0/*;2.) &;4.# &;.&\"),\n        peg$decode(\"$;%0#*;%&\"),\n        peg$decode(\"%;\\xFA/;#28\\\"\\\"6879/,$;\\xFB/#$+#)(#'#(\\\"'#&'#\"),\n        peg$decode(\"%3\\u019D\\\"\\\"5%7\\u019E.) &3\\u019F\\\"\\\"5$7\\u01A0/' 8!:\\u01A1!! )\"),\n        peg$decode(\"%;\\xFC/J#%28\\\"\\\"6879/,#;^/#$+\\\")(\\\"'#&'#.\\\" &\\\"/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\"%;\\\\.) &;X.# &;\\x82/' 8!:\\u01A2!! )\"),\n        peg$decode(\";\\\".S &;!.M &2F\\\"\\\"6F7G.A &2J\\\"\\\"6J7K.5 &2H\\\"\\\"6H7I.) &2N\\\"\\\"6N7O\"),\n        peg$decode(\"2L\\\"\\\"6L7M.\\x95 &2B\\\"\\\"6B7C.\\x89 &2<\\\"\\\"6<7=.} &2R\\\"\\\"6R7S.q &2T\\\"\\\"6T7U.e &2V\\\"\\\"6V7W.Y &2P\\\"\\\"6P7Q.M &2@\\\"\\\"6@7A.A &2D\\\"\\\"6D7E.5 &22\\\"\\\"6273.) &2>\\\"\\\"6>7?\"),\n        peg$decode(\"%;\\u0100/b#28\\\"\\\"6879/S$;\\xFB/J$%2\\u01A3\\\"\\\"6\\u01A37\\u01A4/,#;\\xEC/#$+\\\")(\\\"'#&'#.\\\" &\\\"/#$+$)($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\"%3\\u01A5\\\"\\\"5%7\\u01A6.) &3\\u01A7\\\"\\\"5$7\\u01A8/' 8!:\\u01A1!! )\"),\n        peg$decode(\"%3\\xB1\\\"\\\"5#7\\xB2.6 &3\\xB3\\\"\\\"5#7\\xB4.* &$;+0#*;+&/' 8!:\\u01A9!! )\"),\n        peg$decode(\"%;\\u0104/\\x87#2F\\\"\\\"6F7G/x$;\\u0103/o$2F\\\"\\\"6F7G/`$;\\u0103/W$2F\\\"\\\"6F7G/H$;\\u0103/?$2F\\\"\\\"6F7G/0$;\\u0105/'$8):\\u01AA) )()'#(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;#/>#;#/5$;#/,$;#/#$+$)($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;\\u0103/,#;\\u0103/#$+\\\")(\\\"'#&'#\"),\n        peg$decode(\"%;\\u0103/5#;\\u0103/,$;\\u0103/#$+#)(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;q/T#$;m0#*;m&/D$%; /,#;\\xF8/#$+\\\")(\\\"'#&'#.\\\" &\\\"/#$+#)(#'#(\\\"'#&'#\"),\n        peg$decode(\"%2\\u01AB\\\"\\\"6\\u01AB7\\u01AC.) &2\\u01AD\\\"\\\"6\\u01AD7\\u01AE/w#;0/n$;\\u0108/e$$%;B/2#;\\u0109.# &;\\xA0/#$+\\\")(\\\"'#&'#0<*%;B/2#;\\u0109.# &;\\xA0/#$+\\\")(\\\"'#&'#&/#$+$)($'#(#'#(\\\"'#&'#\"),\n        peg$decode(\";\\x99.# &;L\"),\n        peg$decode(\"%2\\u01AF\\\"\\\"6\\u01AF7\\u01B0/5#;</,$;\\u010A/#$+#)(#'#(\\\"'#&'#\"),\n        peg$decode(\"%;D/S#;,/J$2:\\\"\\\"6:7;/;$;,.# &;T/,$;E/#$+%)(%'#($'#(#'#(\\\"'#&'#\")\n    ];\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n    var peg$result;\n    if (options.startRule !== undefined) {\n        if (!(options.startRule in peg$startRuleIndices)) {\n            throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n        }\n        peg$startRuleIndex = peg$startRuleIndices[options.startRule];\n    }\n    function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n    }\n    function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n    function expected(description, location1) {\n        location1 = location1 !== undefined\n            ? location1\n            : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location1);\n    }\n    function error(message, location1) {\n        location1 = location1 !== undefined\n            ? location1\n            : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location1);\n    }\n    function peg$literalExpectation(text1, ignoreCase) {\n        return { type: \"literal\", text: text1, ignoreCase: ignoreCase };\n    }\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n    function peg$anyExpectation() {\n        return { type: \"any\" };\n    }\n    function peg$endExpectation() {\n        return { type: \"end\" };\n    }\n    function peg$otherExpectation(description) {\n        return { type: \"other\", description: description };\n    }\n    function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n            return details;\n        }\n        else {\n            p = pos - 1;\n            while (!peg$posDetailsCache[p]) {\n                p--;\n            }\n            details = peg$posDetailsCache[p];\n            details = {\n                line: details.line,\n                column: details.column\n            };\n            while (p < pos) {\n                if (input.charCodeAt(p) === 10) {\n                    details.line++;\n                    details.column = 1;\n                }\n                else {\n                    details.column++;\n                }\n                p++;\n            }\n            peg$posDetailsCache[pos] = details;\n            return details;\n        }\n    }\n    function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n        return {\n            start: {\n                offset: startPos,\n                line: startPosDetails.line,\n                column: startPosDetails.column\n            },\n            end: {\n                offset: endPos,\n                line: endPosDetails.line,\n                column: endPosDetails.column\n            }\n        };\n    }\n    function peg$fail(expected1) {\n        if (peg$currPos < peg$maxFailPos) {\n            return;\n        }\n        if (peg$currPos > peg$maxFailPos) {\n            peg$maxFailPos = peg$currPos;\n            peg$maxFailExpected = [];\n        }\n        peg$maxFailExpected.push(expected1);\n    }\n    function peg$buildSimpleError(message, location1) {\n        return new SyntaxError(message, [], \"\", location1);\n    }\n    function peg$buildStructuredError(expected1, found, location1) {\n        return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);\n    }\n    function peg$decode(s) {\n        return s.split(\"\").map(function (ch) { return ch.charCodeAt(0) - 32; });\n    }\n    function peg$parseRule(index) {\n        var bc = peg$bytecode[index];\n        var ip = 0;\n        var ips = [];\n        var end = bc.length;\n        var ends = [];\n        var stack = [];\n        var params;\n        while (true) {\n            while (ip < end) {\n                switch (bc[ip]) {\n                    case 0:\n                        stack.push(peg$consts[bc[ip + 1]]);\n                        ip += 2;\n                        break;\n                    case 1:\n                        stack.push(undefined);\n                        ip++;\n                        break;\n                    case 2:\n                        stack.push(null);\n                        ip++;\n                        break;\n                    case 3:\n                        stack.push(peg$FAILED);\n                        ip++;\n                        break;\n                    case 4:\n                        stack.push([]);\n                        ip++;\n                        break;\n                    case 5:\n                        stack.push(peg$currPos);\n                        ip++;\n                        break;\n                    case 6:\n                        stack.pop();\n                        ip++;\n                        break;\n                    case 7:\n                        peg$currPos = stack.pop();\n                        ip++;\n                        break;\n                    case 8:\n                        stack.length -= bc[ip + 1];\n                        ip += 2;\n                        break;\n                    case 9:\n                        stack.splice(-2, 1);\n                        ip++;\n                        break;\n                    case 10:\n                        stack[stack.length - 2].push(stack.pop());\n                        ip++;\n                        break;\n                    case 11:\n                        stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));\n                        ip += 2;\n                        break;\n                    case 12:\n                        stack.push(input.substring(stack.pop(), peg$currPos));\n                        ip++;\n                        break;\n                    case 13:\n                        ends.push(end);\n                        ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n                        if (stack[stack.length - 1]) {\n                            end = ip + 3 + bc[ip + 1];\n                            ip += 3;\n                        }\n                        else {\n                            end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                            ip += 3 + bc[ip + 1];\n                        }\n                        break;\n                    case 14:\n                        ends.push(end);\n                        ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n                        if (stack[stack.length - 1] === peg$FAILED) {\n                            end = ip + 3 + bc[ip + 1];\n                            ip += 3;\n                        }\n                        else {\n                            end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                            ip += 3 + bc[ip + 1];\n                        }\n                        break;\n                    case 15:\n                        ends.push(end);\n                        ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n                        if (stack[stack.length - 1] !== peg$FAILED) {\n                            end = ip + 3 + bc[ip + 1];\n                            ip += 3;\n                        }\n                        else {\n                            end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                            ip += 3 + bc[ip + 1];\n                        }\n                        break;\n                    case 16:\n                        if (stack[stack.length - 1] !== peg$FAILED) {\n                            ends.push(end);\n                            ips.push(ip);\n                            end = ip + 2 + bc[ip + 1];\n                            ip += 2;\n                        }\n                        else {\n                            ip += 2 + bc[ip + 1];\n                        }\n                        break;\n                    case 17:\n                        ends.push(end);\n                        ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n                        if (input.length > peg$currPos) {\n                            end = ip + 3 + bc[ip + 1];\n                            ip += 3;\n                        }\n                        else {\n                            end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                            ip += 3 + bc[ip + 1];\n                        }\n                        break;\n                    case 18:\n                        ends.push(end);\n                        ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n                        if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {\n                            end = ip + 4 + bc[ip + 2];\n                            ip += 4;\n                        }\n                        else {\n                            end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                            ip += 4 + bc[ip + 2];\n                        }\n                        break;\n                    case 19:\n                        ends.push(end);\n                        ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n                        if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {\n                            end = ip + 4 + bc[ip + 2];\n                            ip += 4;\n                        }\n                        else {\n                            end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                            ip += 4 + bc[ip + 2];\n                        }\n                        break;\n                    case 20:\n                        ends.push(end);\n                        ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n                        if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {\n                            end = ip + 4 + bc[ip + 2];\n                            ip += 4;\n                        }\n                        else {\n                            end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                            ip += 4 + bc[ip + 2];\n                        }\n                        break;\n                    case 21:\n                        stack.push(input.substr(peg$currPos, bc[ip + 1]));\n                        peg$currPos += bc[ip + 1];\n                        ip += 2;\n                        break;\n                    case 22:\n                        stack.push(peg$consts[bc[ip + 1]]);\n                        peg$currPos += peg$consts[bc[ip + 1]].length;\n                        ip += 2;\n                        break;\n                    case 23:\n                        stack.push(peg$FAILED);\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$consts[bc[ip + 1]]);\n                        }\n                        ip += 2;\n                        break;\n                    case 24:\n                        peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];\n                        ip += 2;\n                        break;\n                    case 25:\n                        peg$savedPos = peg$currPos;\n                        ip++;\n                        break;\n                    case 26:\n                        params = bc.slice(ip + 4, ip + 4 + bc[ip + 3])\n                            .map(function (p) { return stack[stack.length - 1 - p]; });\n                        stack.splice(stack.length - bc[ip + 2], bc[ip + 2], peg$consts[bc[ip + 1]].apply(null, params));\n                        ip += 4 + bc[ip + 3];\n                        break;\n                    case 27:\n                        stack.push(peg$parseRule(bc[ip + 1]));\n                        ip += 2;\n                        break;\n                    case 28:\n                        peg$silentFails++;\n                        ip++;\n                        break;\n                    case 29:\n                        peg$silentFails--;\n                        ip++;\n                        break;\n                    default:\n                        throw new Error(\"Invalid opcode: \" + bc[ip] + \".\");\n                }\n            }\n            if (ends.length > 0) {\n                end = ends.pop();\n                ip = ips.pop();\n            }\n            else {\n                break;\n            }\n        }\n        return stack[0];\n    }\n    options.data = {}; // Object to which header attributes will be assigned during parsing\n    function list(head, tail) {\n        return [head].concat(tail);\n    }\n    peg$result = peg$parseRule(peg$startRuleIndex);\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n    }\n    else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n            peg$fail(peg$endExpectation());\n        }\n        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length\n            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n    }\n}\nexports.parse = peg$parse;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar parameters_1 = __webpack_require__(14);\n/**\n * Name Address SIP header.\n * @public\n */\nvar NameAddrHeader = /** @class */ (function (_super) {\n    tslib_1.__extends(NameAddrHeader, _super);\n    /**\n     * Constructor\n     * @param uri -\n     * @param displayName -\n     * @param parameters -\n     */\n    function NameAddrHeader(uri, displayName, parameters) {\n        var _this = _super.call(this, parameters) || this;\n        _this.uri = uri;\n        _this._displayName = displayName;\n        return _this;\n    }\n    Object.defineProperty(NameAddrHeader.prototype, \"friendlyName\", {\n        get: function () {\n            return this.displayName || this.uri.aor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NameAddrHeader.prototype, \"displayName\", {\n        get: function () { return this._displayName; },\n        set: function (value) {\n            this._displayName = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NameAddrHeader.prototype.clone = function () {\n        return new NameAddrHeader(this.uri.clone(), this._displayName, JSON.parse(JSON.stringify(this.parameters)));\n    };\n    NameAddrHeader.prototype.toString = function () {\n        var body = (this.displayName || this.displayName === \"0\") ? '\"' + this.displayName + '\" ' : \"\";\n        body += \"<\" + this.uri.toString() + \">\";\n        for (var parameter in this.parameters) {\n            if (this.parameters.hasOwnProperty(parameter)) {\n                body += \";\" + parameter;\n                if (this.parameters[parameter] !== null) {\n                    body += \"=\" + this.parameters[parameter];\n                }\n            }\n        }\n        return body;\n    };\n    return NameAddrHeader;\n}(parameters_1.Parameters));\nexports.NameAddrHeader = NameAddrHeader;\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @internal\n */\nvar Parameters = /** @class */ (function () {\n    function Parameters(parameters) {\n        this.parameters = {};\n        for (var param in parameters) {\n            if (parameters.hasOwnProperty(param)) {\n                this.setParam(param, parameters[param]);\n            }\n        }\n    }\n    Parameters.prototype.setParam = function (key, value) {\n        if (key) {\n            this.parameters[key.toLowerCase()] = (typeof value === \"undefined\" || value === null) ? null : value.toString();\n        }\n    };\n    Parameters.prototype.getParam = function (key) {\n        if (key) {\n            return this.parameters[key.toLowerCase()];\n        }\n    };\n    Parameters.prototype.hasParam = function (key) {\n        if (key) {\n            return !!this.parameters.hasOwnProperty(key.toLowerCase());\n        }\n        return false;\n    };\n    Parameters.prototype.deleteParam = function (parameter) {\n        parameter = parameter.toLowerCase();\n        if (this.parameters.hasOwnProperty(parameter)) {\n            var value = this.parameters[parameter];\n            delete this.parameters[parameter];\n            return value;\n        }\n    };\n    Parameters.prototype.clearParams = function () {\n        this.parameters = {};\n    };\n    return Parameters;\n}());\nexports.Parameters = Parameters;\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar parameters_1 = __webpack_require__(14);\n/**\n * URI.\n * @public\n */\nvar URI = /** @class */ (function (_super) {\n    tslib_1.__extends(URI, _super);\n    /**\n     * Constructor\n     * @param scheme -\n     * @param user -\n     * @param host -\n     * @param port -\n     * @param parameters -\n     * @param headers -\n     */\n    function URI(scheme, user, host, port, parameters, headers) {\n        var _this = _super.call(this, parameters) || this;\n        _this.headers = {};\n        // Checks\n        if (!host) {\n            throw new TypeError('missing or invalid \"host\" parameter');\n        }\n        // Initialize parameters\n        scheme = scheme || \"sip\";\n        for (var header in headers) {\n            if (headers.hasOwnProperty(header)) {\n                _this.setHeader(header, headers[header]);\n            }\n        }\n        // Raw URI\n        _this.raw = {\n            scheme: scheme,\n            user: user,\n            host: host,\n            port: port\n        };\n        // Normalized URI\n        _this.normal = {\n            scheme: scheme.toLowerCase(),\n            user: user,\n            host: host.toLowerCase(),\n            port: port\n        };\n        return _this;\n    }\n    Object.defineProperty(URI.prototype, \"scheme\", {\n        get: function () { return this.normal.scheme; },\n        set: function (value) {\n            this.raw.scheme = value;\n            this.normal.scheme = value.toLowerCase();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(URI.prototype, \"user\", {\n        get: function () { return this.normal.user; },\n        set: function (value) {\n            this.normal.user = this.raw.user = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(URI.prototype, \"host\", {\n        get: function () { return this.normal.host; },\n        set: function (value) {\n            this.raw.host = value;\n            this.normal.host = value.toLowerCase();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(URI.prototype, \"aor\", {\n        get: function () { return this.normal.user + \"@\" + this.normal.host; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(URI.prototype, \"port\", {\n        get: function () { return this.normal.port; },\n        set: function (value) {\n            this.normal.port = this.raw.port = value === 0 ? value : value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    URI.prototype.setHeader = function (name, value) {\n        this.headers[this.headerize(name)] = (value instanceof Array) ? value : [value];\n    };\n    URI.prototype.getHeader = function (name) {\n        if (name) {\n            return this.headers[this.headerize(name)];\n        }\n    };\n    URI.prototype.hasHeader = function (name) {\n        return !!name && !!this.headers.hasOwnProperty(this.headerize(name));\n    };\n    URI.prototype.deleteHeader = function (header) {\n        header = this.headerize(header);\n        if (this.headers.hasOwnProperty(header)) {\n            var value = this.headers[header];\n            delete this.headers[header];\n            return value;\n        }\n    };\n    URI.prototype.clearHeaders = function () {\n        this.headers = {};\n    };\n    URI.prototype.clone = function () {\n        return new URI(this._raw.scheme, this._raw.user || \"\", this._raw.host, this._raw.port, JSON.parse(JSON.stringify(this.parameters)), JSON.parse(JSON.stringify(this.headers)));\n    };\n    URI.prototype.toRaw = function () {\n        return this._toString(this._raw);\n    };\n    URI.prototype.toString = function () {\n        return this._toString(this._normal);\n    };\n    Object.defineProperty(URI.prototype, \"_normal\", {\n        get: function () { return this.normal; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(URI.prototype, \"_raw\", {\n        get: function () { return this.raw; },\n        enumerable: true,\n        configurable: true\n    });\n    URI.prototype._toString = function (uri) {\n        var uriString = uri.scheme + \":\";\n        // add slashes if it's not a sip(s) URI\n        if (!uri.scheme.toLowerCase().match(\"^sips?$\")) {\n            uriString += \"//\";\n        }\n        if (uri.user) {\n            uriString += this.escapeUser(uri.user) + \"@\";\n        }\n        uriString += uri.host;\n        if (uri.port || uri.port === 0) {\n            uriString += \":\" + uri.port;\n        }\n        for (var parameter in this.parameters) {\n            if (this.parameters.hasOwnProperty(parameter)) {\n                uriString += \";\" + parameter;\n                if (this.parameters[parameter] !== null) {\n                    uriString += \"=\" + this.parameters[parameter];\n                }\n            }\n        }\n        var headers = [];\n        for (var header in this.headers) {\n            if (this.headers.hasOwnProperty(header)) {\n                for (var idx in this.headers[header]) {\n                    if (this.headers[header].hasOwnProperty(idx)) {\n                        headers.push(header + \"=\" + this.headers[header][idx]);\n                    }\n                }\n            }\n        }\n        if (headers.length > 0) {\n            uriString += \"?\" + headers.join(\"&\");\n        }\n        return uriString;\n    };\n    /*\n     * Hex-escape a SIP URI user.\n     * @private\n     * @param {String} user\n     */\n    URI.prototype.escapeUser = function (user) {\n        var decodedUser;\n        // FIXME: This is called by toString above which should never throw, but\n        // decodeURIComponent can throw and I've seen one case in production where\n        // it did throw resulting in a cascading failure. This class should be\n        // fixed so that decodeURIComponent is not called at this point (in toString).\n        // The user should be decoded when the URI is constructor or some other\n        // place where we can catch the error before the URI is created or somesuch.\n        try {\n            decodedUser = decodeURIComponent(user);\n        }\n        catch (error) {\n            throw error;\n        }\n        // Don't hex-escape ':' (%3A), '+' (%2B), '?' (%3F\"), '/' (%2F).\n        return encodeURIComponent(decodedUser)\n            .replace(/%3A/ig, \":\")\n            .replace(/%2B/ig, \"+\")\n            .replace(/%3F/ig, \"?\")\n            .replace(/%2F/ig, \"/\");\n    };\n    URI.prototype.headerize = function (str) {\n        var exceptions = {\n            \"Call-Id\": \"Call-ID\",\n            \"Cseq\": \"CSeq\",\n            \"Min-Se\": \"Min-SE\",\n            \"Rack\": \"RAck\",\n            \"Rseq\": \"RSeq\",\n            \"Www-Authenticate\": \"WWW-Authenticate\",\n        };\n        var name = str.toLowerCase().replace(/_/g, \"-\").split(\"-\");\n        var parts = name.length;\n        var hname = \"\";\n        for (var part = 0; part < parts; part++) {\n            if (part !== 0) {\n                hname += \"-\";\n            }\n            hname += name[part].charAt(0).toUpperCase() + name[part].substring(1);\n        }\n        if (exceptions[hname]) {\n            hname = exceptions[hname];\n        }\n        return hname;\n    };\n    return URI;\n}(parameters_1.Parameters));\nexports.URI = URI;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @param size -\n * @param base -\n * @internal\n */\nfunction createRandomToken(size, base) {\n    if (base === void 0) { base = 32; }\n    var token = \"\";\n    for (var i = 0; i < size; i++) {\n        var r = Math.floor(Math.random() * base);\n        token += r.toString(base);\n    }\n    return token;\n}\nexports.createRandomToken = createRandomToken;\n/**\n * @internal\n */\nfunction getReasonPhrase(code) {\n    return REASON_PHRASE[code] || \"\";\n}\nexports.getReasonPhrase = getReasonPhrase;\n/**\n * @internal\n */\nfunction newTag() {\n    return createRandomToken(10);\n}\nexports.newTag = newTag;\n/**\n * @param str -\n * @internal\n */\nfunction headerize(str) {\n    var exceptions = {\n        \"Call-Id\": \"Call-ID\",\n        \"Cseq\": \"CSeq\",\n        \"Min-Se\": \"Min-SE\",\n        \"Rack\": \"RAck\",\n        \"Rseq\": \"RSeq\",\n        \"Www-Authenticate\": \"WWW-Authenticate\",\n    };\n    var name = str.toLowerCase().replace(/_/g, \"-\").split(\"-\");\n    var parts = name.length;\n    var hname = \"\";\n    for (var part = 0; part < parts; part++) {\n        if (part !== 0) {\n            hname += \"-\";\n        }\n        hname += name[part].charAt(0).toUpperCase() + name[part].substring(1);\n    }\n    if (exceptions[hname]) {\n        hname = exceptions[hname];\n    }\n    return hname;\n}\nexports.headerize = headerize;\n/**\n * @param str -\n * @internal\n */\nfunction str_utf8_length(str) {\n    return encodeURIComponent(str).replace(/%[A-F\\d]{2}/g, \"U\").length;\n}\nexports.str_utf8_length = str_utf8_length;\n/**\n * SIP Response Reasons\n * DOC: http://www.iana.org/assignments/sip-parameters\n * @internal\n */\nvar REASON_PHRASE = {\n    100: \"Trying\",\n    180: \"Ringing\",\n    181: \"Call Is Being Forwarded\",\n    182: \"Queued\",\n    183: \"Session Progress\",\n    199: \"Early Dialog Terminated\",\n    200: \"OK\",\n    202: \"Accepted\",\n    204: \"No Notification\",\n    300: \"Multiple Choices\",\n    301: \"Moved Permanently\",\n    302: \"Moved Temporarily\",\n    305: \"Use Proxy\",\n    380: \"Alternative Service\",\n    400: \"Bad Request\",\n    401: \"Unauthorized\",\n    402: \"Payment Required\",\n    403: \"Forbidden\",\n    404: \"Not Found\",\n    405: \"Method Not Allowed\",\n    406: \"Not Acceptable\",\n    407: \"Proxy Authentication Required\",\n    408: \"Request Timeout\",\n    410: \"Gone\",\n    412: \"Conditional Request Failed\",\n    413: \"Request Entity Too Large\",\n    414: \"Request-URI Too Long\",\n    415: \"Unsupported Media Type\",\n    416: \"Unsupported URI Scheme\",\n    417: \"Unknown Resource-Priority\",\n    420: \"Bad Extension\",\n    421: \"Extension Required\",\n    422: \"Session Interval Too Small\",\n    423: \"Interval Too Brief\",\n    428: \"Use Identity Header\",\n    429: \"Provide Referrer Identity\",\n    430: \"Flow Failed\",\n    433: \"Anonymity Disallowed\",\n    436: \"Bad Identity-Info\",\n    437: \"Unsupported Certificate\",\n    438: \"Invalid Identity Header\",\n    439: \"First Hop Lacks Outbound Support\",\n    440: \"Max-Breadth Exceeded\",\n    469: \"Bad Info Package\",\n    470: \"Consent Needed\",\n    478: \"Unresolvable Destination\",\n    480: \"Temporarily Unavailable\",\n    481: \"Call/Transaction Does Not Exist\",\n    482: \"Loop Detected\",\n    483: \"Too Many Hops\",\n    484: \"Address Incomplete\",\n    485: \"Ambiguous\",\n    486: \"Busy Here\",\n    487: \"Request Terminated\",\n    488: \"Not Acceptable Here\",\n    489: \"Bad Event\",\n    491: \"Request Pending\",\n    493: \"Undecipherable\",\n    494: \"Security Agreement Required\",\n    500: \"Internal Server Error\",\n    501: \"Not Implemented\",\n    502: \"Bad Gateway\",\n    503: \"Service Unavailable\",\n    504: \"Server Time-out\",\n    505: \"Version Not Supported\",\n    513: \"Message Too Large\",\n    580: \"Precondition Failure\",\n    600: \"Busy Everywhere\",\n    603: \"Decline\",\n    604: \"Does Not Exist Anywhere\",\n    606: \"Not Acceptable\"\n};\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar incoming_message_1 = __webpack_require__(10);\n/**\n * Incoming response message.\n * @public\n */\nvar IncomingResponseMessage = /** @class */ (function (_super) {\n    tslib_1.__extends(IncomingResponseMessage, _super);\n    function IncomingResponseMessage() {\n        return _super.call(this) || this;\n    }\n    return IncomingResponseMessage;\n}(incoming_message_1.IncomingMessage));\nexports.IncomingResponseMessage = IncomingResponseMessage;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar name_addr_header_1 = __webpack_require__(13);\nvar utils_1 = __webpack_require__(16);\n/**\n * Outgoing SIP request message.\n * @public\n */\nvar OutgoingRequestMessage = /** @class */ (function () {\n    function OutgoingRequestMessage(method, ruri, fromURI, toURI, options, extraHeaders, body) {\n        this.headers = {};\n        this.extraHeaders = [];\n        this.options = OutgoingRequestMessage.getDefaultOptions();\n        // Options - merge a deep copy\n        if (options) {\n            this.options = tslib_1.__assign(tslib_1.__assign({}, this.options), options);\n            if (this.options.optionTags && this.options.optionTags.length) {\n                this.options.optionTags = this.options.optionTags.slice();\n            }\n            if (this.options.routeSet && this.options.routeSet.length) {\n                this.options.routeSet = this.options.routeSet.slice();\n            }\n        }\n        // Extra headers - deep copy\n        if (extraHeaders && extraHeaders.length) {\n            this.extraHeaders = extraHeaders.slice();\n        }\n        // Body - deep copy\n        if (body) {\n            // TODO: internal representation should be Body\n            // this.body = { ...body };\n            this.body = {\n                body: body.content,\n                contentType: body.contentType\n            };\n        }\n        // Method\n        this.method = method;\n        // RURI\n        this.ruri = ruri.clone();\n        // From\n        this.fromURI = fromURI.clone();\n        this.fromTag = this.options.fromTag ? this.options.fromTag : utils_1.newTag();\n        this.from = OutgoingRequestMessage.makeNameAddrHeader(this.fromURI, this.options.fromDisplayName, this.fromTag);\n        // To\n        this.toURI = toURI.clone();\n        this.toTag = this.options.toTag;\n        this.to = OutgoingRequestMessage.makeNameAddrHeader(this.toURI, this.options.toDisplayName, this.toTag);\n        // Call-ID\n        this.callId = this.options.callId ? this.options.callId : this.options.callIdPrefix + utils_1.createRandomToken(15);\n        // CSeq\n        this.cseq = this.options.cseq;\n        // The relative order of header fields with different field names is not\n        // significant.  However, it is RECOMMENDED that header fields which are\n        // needed for proxy processing (Via, Route, Record-Route, Proxy-Require,\n        // Max-Forwards, and Proxy-Authorization, for example) appear towards\n        // the top of the message to facilitate rapid parsing.\n        // https://tools.ietf.org/html/rfc3261#section-7.3.1\n        this.setHeader(\"route\", this.options.routeSet);\n        this.setHeader(\"via\", \"\");\n        this.setHeader(\"to\", this.to.toString());\n        this.setHeader(\"from\", this.from.toString());\n        this.setHeader(\"cseq\", this.cseq + \" \" + this.method);\n        this.setHeader(\"call-id\", this.callId);\n        this.setHeader(\"max-forwards\", \"70\");\n    }\n    /** Get a copy of the default options. */\n    OutgoingRequestMessage.getDefaultOptions = function () {\n        return {\n            callId: \"\",\n            callIdPrefix: \"\",\n            cseq: 1,\n            toDisplayName: \"\",\n            toTag: \"\",\n            fromDisplayName: \"\",\n            fromTag: \"\",\n            forceRport: false,\n            hackViaTcp: false,\n            optionTags: [\"outbound\"],\n            routeSet: [],\n            userAgentString: \"sip.js\",\n            viaHost: \"\"\n        };\n    };\n    OutgoingRequestMessage.makeNameAddrHeader = function (uri, displayName, tag) {\n        var parameters = {};\n        if (tag) {\n            parameters.tag = tag;\n        }\n        return new name_addr_header_1.NameAddrHeader(uri, displayName, parameters);\n    };\n    /**\n     * Get the value of the given header name at the given position.\n     * @param name - header name\n     * @returns Returns the specified header, undefined if header doesn't exist.\n     */\n    OutgoingRequestMessage.prototype.getHeader = function (name) {\n        var header = this.headers[utils_1.headerize(name)];\n        if (header) {\n            if (header[0]) {\n                return header[0];\n            }\n        }\n        else {\n            var regexp = new RegExp(\"^\\\\s*\" + name + \"\\\\s*:\", \"i\");\n            for (var _i = 0, _a = this.extraHeaders; _i < _a.length; _i++) {\n                var exHeader = _a[_i];\n                if (regexp.test(exHeader)) {\n                    return exHeader.substring(exHeader.indexOf(\":\") + 1).trim();\n                }\n            }\n        }\n        return;\n    };\n    /**\n     * Get the header/s of the given name.\n     * @param name - header name\n     * @returns Array with all the headers of the specified name.\n     */\n    OutgoingRequestMessage.prototype.getHeaders = function (name) {\n        var result = [];\n        var headerArray = this.headers[utils_1.headerize(name)];\n        if (headerArray) {\n            for (var _i = 0, headerArray_1 = headerArray; _i < headerArray_1.length; _i++) {\n                var headerPart = headerArray_1[_i];\n                result.push(headerPart);\n            }\n        }\n        else {\n            var regexp = new RegExp(\"^\\\\s*\" + name + \"\\\\s*:\", \"i\");\n            for (var _a = 0, _b = this.extraHeaders; _a < _b.length; _a++) {\n                var exHeader = _b[_a];\n                if (regexp.test(exHeader)) {\n                    result.push(exHeader.substring(exHeader.indexOf(\":\") + 1).trim());\n                }\n            }\n        }\n        return result;\n    };\n    /**\n     * Verify the existence of the given header.\n     * @param name - header name\n     * @returns true if header with given name exists, false otherwise\n     */\n    OutgoingRequestMessage.prototype.hasHeader = function (name) {\n        if (this.headers[utils_1.headerize(name)]) {\n            return true;\n        }\n        else {\n            var regexp = new RegExp(\"^\\\\s*\" + name + \"\\\\s*:\", \"i\");\n            for (var _i = 0, _a = this.extraHeaders; _i < _a.length; _i++) {\n                var extraHeader = _a[_i];\n                if (regexp.test(extraHeader)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    /**\n     * Replace the the given header by the given value.\n     * @param name - header name\n     * @param value - header value\n     */\n    OutgoingRequestMessage.prototype.setHeader = function (name, value) {\n        this.headers[utils_1.headerize(name)] = (value instanceof Array) ? value : [value];\n    };\n    /**\n     * The Via header field indicates the transport used for the transaction\n     * and identifies the location where the response is to be sent.  A Via\n     * header field value is added only after the transport that will be\n     * used to reach the next hop has been selected (which may involve the\n     * usage of the procedures in [4]).\n     *\n     * When the UAC creates a request, it MUST insert a Via into that\n     * request.  The protocol name and protocol version in the header field\n     * MUST be SIP and 2.0, respectively.  The Via header field value MUST\n     * contain a branch parameter.  This parameter is used to identify the\n     * transaction created by that request.  This parameter is used by both\n     * the client and the server.\n     * https://tools.ietf.org/html/rfc3261#section-8.1.1.7\n     * @param branchParameter - The branch parameter.\n     * @param transport - The sent protocol transport.\n     */\n    OutgoingRequestMessage.prototype.setViaHeader = function (branch, transport) {\n        // FIXME: Hack\n        if (this.options.hackViaTcp) {\n            transport = \"TCP\";\n        }\n        var via = \"SIP/2.0/\" + transport;\n        via += \" \" + this.options.viaHost + \";branch=\" + branch;\n        if (this.options.forceRport) {\n            via += \";rport\";\n        }\n        this.setHeader(\"via\", via);\n        this.branch = branch;\n    };\n    OutgoingRequestMessage.prototype.toString = function () {\n        var msg = \"\";\n        msg += this.method + \" \" + this.ruri.toRaw() + \" SIP/2.0\\r\\n\";\n        for (var header in this.headers) {\n            if (this.headers[header]) {\n                for (var _i = 0, _a = this.headers[header]; _i < _a.length; _i++) {\n                    var headerPart = _a[_i];\n                    msg += header + \": \" + headerPart + \"\\r\\n\";\n                }\n            }\n        }\n        for (var _b = 0, _c = this.extraHeaders; _b < _c.length; _b++) {\n            var header = _c[_b];\n            msg += header.trim() + \"\\r\\n\";\n        }\n        msg += \"Supported: \" + this.options.optionTags.join(\", \") + \"\\r\\n\";\n        msg += \"User-Agent: \" + this.options.userAgentString + \"\\r\\n\";\n        if (this.body) {\n            if (typeof this.body === \"string\") {\n                msg += \"Content-Length: \" + utils_1.str_utf8_length(this.body) + \"\\r\\n\\r\\n\";\n                msg += this.body;\n            }\n            else {\n                if (this.body.body && this.body.contentType) {\n                    msg += \"Content-Type: \" + this.body.contentType + \"\\r\\n\";\n                    msg += \"Content-Length: \" + utils_1.str_utf8_length(this.body.body) + \"\\r\\n\\r\\n\";\n                    msg += this.body.body;\n                }\n                else {\n                    msg += \"Content-Length: \" + 0 + \"\\r\\n\\r\\n\";\n                }\n            }\n        }\n        else {\n            msg += \"Content-Length: \" + 0 + \"\\r\\n\\r\\n\";\n        }\n        return msg;\n    };\n    return OutgoingRequestMessage;\n}());\nexports.OutgoingRequestMessage = OutgoingRequestMessage;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar md5_1 = tslib_1.__importDefault(__webpack_require__(20));\nvar utils_1 = __webpack_require__(16);\n/**\n * Digest Authentication.\n * @internal\n */\nvar DigestAuthentication = /** @class */ (function () {\n    /**\n     * Constructor.\n     * @param loggerFactory - LoggerFactory.\n     * @param username - Username.\n     * @param password - Password.\n     */\n    function DigestAuthentication(loggerFactory, username, password) {\n        this.logger = loggerFactory.getLogger(\"sipjs.digestauthentication\");\n        this.username = username;\n        this.password = password;\n        this.nc = 0;\n        this.ncHex = \"00000000\";\n    }\n    /**\n     * Performs Digest authentication given a SIP request and the challenge\n     * received in a response to that request.\n     * @param request -\n     * @param challenge -\n     * @returns true if credentials were successfully generated, false otherwise.\n     */\n    DigestAuthentication.prototype.authenticate = function (request, challenge, body) {\n        // Inspect and validate the challenge.\n        this.algorithm = challenge.algorithm;\n        this.realm = challenge.realm;\n        this.nonce = challenge.nonce;\n        this.opaque = challenge.opaque;\n        this.stale = challenge.stale;\n        if (this.algorithm) {\n            if (this.algorithm !== \"MD5\") {\n                this.logger.warn(\"challenge with Digest algorithm different than 'MD5', authentication aborted\");\n                return false;\n            }\n        }\n        else {\n            this.algorithm = \"MD5\";\n        }\n        if (!this.realm) {\n            this.logger.warn(\"challenge without Digest realm, authentication aborted\");\n            return false;\n        }\n        if (!this.nonce) {\n            this.logger.warn(\"challenge without Digest nonce, authentication aborted\");\n            return false;\n        }\n        // 'qop' can contain a list of values (Array). Let's choose just one.\n        if (challenge.qop) {\n            if (challenge.qop.indexOf(\"auth\") > -1) {\n                this.qop = \"auth\";\n            }\n            else if (challenge.qop.indexOf(\"auth-int\") > -1) {\n                this.qop = \"auth-int\";\n            }\n            else {\n                // Otherwise 'qop' is present but does not contain 'auth' or 'auth-int', so abort here.\n                this.logger.warn(\"challenge without Digest qop different than 'auth' or 'auth-int', authentication aborted\");\n                return false;\n            }\n        }\n        else {\n            this.qop = undefined;\n        }\n        // Fill other attributes.\n        this.method = request.method;\n        this.uri = request.ruri;\n        this.cnonce = utils_1.createRandomToken(12);\n        this.nc += 1;\n        this.updateNcHex();\n        // nc-value = 8LHEX. Max value = 'FFFFFFFF'.\n        if (this.nc === 4294967296) {\n            this.nc = 1;\n            this.ncHex = \"00000001\";\n        }\n        // Calculate the Digest \"response\" value.\n        this.calculateResponse(body);\n        return true;\n    };\n    /**\n     * Return the Proxy-Authorization or WWW-Authorization header value.\n     */\n    DigestAuthentication.prototype.toString = function () {\n        var authParams = [];\n        if (!this.response) {\n            throw new Error(\"response field does not exist, cannot generate Authorization header\");\n        }\n        authParams.push(\"algorithm=\" + this.algorithm);\n        authParams.push('username=\"' + this.username + '\"');\n        authParams.push('realm=\"' + this.realm + '\"');\n        authParams.push('nonce=\"' + this.nonce + '\"');\n        authParams.push('uri=\"' + this.uri + '\"');\n        authParams.push('response=\"' + this.response + '\"');\n        if (this.opaque) {\n            authParams.push('opaque=\"' + this.opaque + '\"');\n        }\n        if (this.qop) {\n            authParams.push(\"qop=\" + this.qop);\n            authParams.push('cnonce=\"' + this.cnonce + '\"');\n            authParams.push(\"nc=\" + this.ncHex);\n        }\n        return \"Digest \" + authParams.join(\", \");\n    };\n    /**\n     * Generate the 'nc' value as required by Digest in this.ncHex by reading this.nc.\n     */\n    DigestAuthentication.prototype.updateNcHex = function () {\n        var hex = Number(this.nc).toString(16);\n        this.ncHex = \"00000000\".substr(0, 8 - hex.length) + hex;\n    };\n    /**\n     * Generate Digest 'response' value.\n     */\n    DigestAuthentication.prototype.calculateResponse = function (body) {\n        var ha2;\n        // HA1 = MD5(A1) = MD5(username:realm:password)\n        var ha1 = md5_1.default(this.username + \":\" + this.realm + \":\" + this.password);\n        if (this.qop === \"auth\") {\n            // HA2 = MD5(A2) = MD5(method:digestURI)\n            ha2 = md5_1.default(this.method + \":\" + this.uri);\n            // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)\n            this.response = md5_1.default(ha1 + \":\" + this.nonce + \":\" + this.ncHex + \":\" + this.cnonce + \":auth:\" + ha2);\n        }\n        else if (this.qop === \"auth-int\") {\n            // HA2 = MD5(A2) = MD5(method:digestURI:MD5(entityBody))\n            ha2 = md5_1.default(this.method + \":\" + this.uri + \":\" + md5_1.default(body ? body : \"\"));\n            // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)\n            this.response = md5_1.default(ha1 + \":\" + this.nonce + \":\" + this.ncHex + \":\" + this.cnonce + \":auth-int:\" + ha2);\n        }\n        else if (this.qop === undefined) {\n            // HA2 = MD5(A2) = MD5(method:digestURI)\n            ha2 = md5_1.default(this.method + \":\" + this.uri);\n            // response = MD5(HA1:nonce:HA2)\n            this.response = md5_1.default(ha1 + \":\" + this.nonce + \":\" + ha2);\n        }\n    };\n    return DigestAuthentication;\n}());\nexports.DigestAuthentication = DigestAuthentication;\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n;(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(21));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Constants table\n\t    var T = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        for (var i = 0; i < 64; i++) {\n\t            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;\n\t        }\n\t    }());\n\n\t    /**\n\t     * MD5 hash algorithm.\n\t     */\n\t    var MD5 = C_algo.MD5 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Swap endian\n\t            for (var i = 0; i < 16; i++) {\n\t                // Shortcuts\n\t                var offset_i = offset + i;\n\t                var M_offset_i = M[offset_i];\n\n\t                M[offset_i] = (\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t                );\n\t            }\n\n\t            // Shortcuts\n\t            var H = this._hash.words;\n\n\t            var M_offset_0  = M[offset + 0];\n\t            var M_offset_1  = M[offset + 1];\n\t            var M_offset_2  = M[offset + 2];\n\t            var M_offset_3  = M[offset + 3];\n\t            var M_offset_4  = M[offset + 4];\n\t            var M_offset_5  = M[offset + 5];\n\t            var M_offset_6  = M[offset + 6];\n\t            var M_offset_7  = M[offset + 7];\n\t            var M_offset_8  = M[offset + 8];\n\t            var M_offset_9  = M[offset + 9];\n\t            var M_offset_10 = M[offset + 10];\n\t            var M_offset_11 = M[offset + 11];\n\t            var M_offset_12 = M[offset + 12];\n\t            var M_offset_13 = M[offset + 13];\n\t            var M_offset_14 = M[offset + 14];\n\t            var M_offset_15 = M[offset + 15];\n\n\t            // Working varialbes\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\n\t            // Computation\n\t            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);\n\t            d = FF(d, a, b, c, M_offset_1,  12, T[1]);\n\t            c = FF(c, d, a, b, M_offset_2,  17, T[2]);\n\t            b = FF(b, c, d, a, M_offset_3,  22, T[3]);\n\t            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);\n\t            d = FF(d, a, b, c, M_offset_5,  12, T[5]);\n\t            c = FF(c, d, a, b, M_offset_6,  17, T[6]);\n\t            b = FF(b, c, d, a, M_offset_7,  22, T[7]);\n\t            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);\n\t            d = FF(d, a, b, c, M_offset_9,  12, T[9]);\n\t            c = FF(c, d, a, b, M_offset_10, 17, T[10]);\n\t            b = FF(b, c, d, a, M_offset_11, 22, T[11]);\n\t            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);\n\t            d = FF(d, a, b, c, M_offset_13, 12, T[13]);\n\t            c = FF(c, d, a, b, M_offset_14, 17, T[14]);\n\t            b = FF(b, c, d, a, M_offset_15, 22, T[15]);\n\n\t            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);\n\t            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);\n\t            c = GG(c, d, a, b, M_offset_11, 14, T[18]);\n\t            b = GG(b, c, d, a, M_offset_0,  20, T[19]);\n\t            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);\n\t            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);\n\t            c = GG(c, d, a, b, M_offset_15, 14, T[22]);\n\t            b = GG(b, c, d, a, M_offset_4,  20, T[23]);\n\t            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);\n\t            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);\n\t            c = GG(c, d, a, b, M_offset_3,  14, T[26]);\n\t            b = GG(b, c, d, a, M_offset_8,  20, T[27]);\n\t            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);\n\t            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);\n\t            c = GG(c, d, a, b, M_offset_7,  14, T[30]);\n\t            b = GG(b, c, d, a, M_offset_12, 20, T[31]);\n\n\t            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);\n\t            d = HH(d, a, b, c, M_offset_8,  11, T[33]);\n\t            c = HH(c, d, a, b, M_offset_11, 16, T[34]);\n\t            b = HH(b, c, d, a, M_offset_14, 23, T[35]);\n\t            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);\n\t            d = HH(d, a, b, c, M_offset_4,  11, T[37]);\n\t            c = HH(c, d, a, b, M_offset_7,  16, T[38]);\n\t            b = HH(b, c, d, a, M_offset_10, 23, T[39]);\n\t            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);\n\t            d = HH(d, a, b, c, M_offset_0,  11, T[41]);\n\t            c = HH(c, d, a, b, M_offset_3,  16, T[42]);\n\t            b = HH(b, c, d, a, M_offset_6,  23, T[43]);\n\t            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);\n\t            d = HH(d, a, b, c, M_offset_12, 11, T[45]);\n\t            c = HH(c, d, a, b, M_offset_15, 16, T[46]);\n\t            b = HH(b, c, d, a, M_offset_2,  23, T[47]);\n\n\t            a = II(a, b, c, d, M_offset_0,  6,  T[48]);\n\t            d = II(d, a, b, c, M_offset_7,  10, T[49]);\n\t            c = II(c, d, a, b, M_offset_14, 15, T[50]);\n\t            b = II(b, c, d, a, M_offset_5,  21, T[51]);\n\t            a = II(a, b, c, d, M_offset_12, 6,  T[52]);\n\t            d = II(d, a, b, c, M_offset_3,  10, T[53]);\n\t            c = II(c, d, a, b, M_offset_10, 15, T[54]);\n\t            b = II(b, c, d, a, M_offset_1,  21, T[55]);\n\t            a = II(a, b, c, d, M_offset_8,  6,  T[56]);\n\t            d = II(d, a, b, c, M_offset_15, 10, T[57]);\n\t            c = II(c, d, a, b, M_offset_6,  15, T[58]);\n\t            b = II(b, c, d, a, M_offset_13, 21, T[59]);\n\t            a = II(a, b, c, d, M_offset_4,  6,  T[60]);\n\t            d = II(d, a, b, c, M_offset_11, 10, T[61]);\n\t            c = II(c, d, a, b, M_offset_2,  15, T[62]);\n\t            b = II(b, c, d, a, M_offset_9,  21, T[63]);\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\n\t            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\n\t            var nBitsTotalL = nBitsTotal;\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (\n\t                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)\n\t            );\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)\n\t            );\n\n\t            data.sigBytes = (dataWords.length + 1) * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var hash = this._hash;\n\t            var H = hash.words;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 4; i++) {\n\t                // Shortcut\n\t                var H_i = H[i];\n\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    function FF(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & c) | (~b & d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function GG(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & d) | (c & ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function HH(a, b, c, d, x, s, t) {\n\t        var n = a + (b ^ c ^ d) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function II(a, b, c, d, x, s, t) {\n\t        var n = a + (c ^ (b | ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.MD5('message');\n\t     *     var hash = CryptoJS.MD5(wordArray);\n\t     */\n\t    C.MD5 = Hasher._createHelper(MD5);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacMD5(message, key);\n\t     */\n\t    C.HmacMD5 = Hasher._createHmacHelper(MD5);\n\t}(Math));\n\n\n\treturn CryptoJS.MD5;\n\n}));\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n;(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse {}\n}(this, function () {\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\t    /*\n\t     * Local polyfil of Object.create\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {};\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }())\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var i = 0; i < thatSigBytes; i += 4) {\n\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            var r = (function (m_w) {\n\t                var m_w = m_w;\n\t                var m_z = 0x3ade68b1;\n\t                var mask = 0xffffffff;\n\n\t                return function () {\n\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\n\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\n\t                    var result = ((m_z << 0x10) + m_w) & mask;\n\t                    result /= 0x100000000;\n\t                    result += 0.5;\n\t                    return result * (Math.random() > .5 ? 1 : -1);\n\t                }\n\t            });\n\n\t            for (var i = 0, rcache; i < nBytes; i += 4) {\n\t                var _r = r((rcache || Math.random()) * 0x100000000);\n\n\t                rcache = _r() * 0x3ade67b7;\n\t                words.push((_r() * 0x100000000) | 0);\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                var processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = __webpack_require__(16);\n/**\n * When a UAS wishes to construct a response to a request, it follows\n * the general procedures detailed in the following subsections.\n * Additional behaviors specific to the response code in question, which\n * are not detailed in this section, may also be required.\n * https://tools.ietf.org/html/rfc3261#section-8.2.6\n * @internal\n */\nfunction constructOutgoingResponse(message, options) {\n    var CRLF = \"\\r\\n\";\n    if (options.statusCode < 100 || options.statusCode > 699) {\n        throw new TypeError(\"Invalid statusCode: \" + options.statusCode);\n    }\n    var reasonPhrase = options.reasonPhrase ? options.reasonPhrase : utils_1.getReasonPhrase(options.statusCode);\n    // SIP responses are distinguished from requests by having a Status-Line\n    // as their start-line.  A Status-Line consists of the protocol version\n    // followed by a numeric Status-Code and its associated textual phrase,\n    // with each element separated by a single SP character.\n    // https://tools.ietf.org/html/rfc3261#section-7.2\n    var response = \"SIP/2.0 \" + options.statusCode + \" \" + reasonPhrase + CRLF;\n    // One largely non-method-specific guideline for the generation of\n    // responses is that UASs SHOULD NOT issue a provisional response for a\n    // non-INVITE request.  Rather, UASs SHOULD generate a final response to\n    // a non-INVITE request as soon as possible.\n    // https://tools.ietf.org/html/rfc3261#section-8.2.6.1\n    if (options.statusCode >= 100 && options.statusCode < 200) {\n        // TODO\n    }\n    // When a 100 (Trying) response is generated, any Timestamp header field\n    // present in the request MUST be copied into this 100 (Trying)\n    // response.  If there is a delay in generating the response, the UAS\n    // SHOULD add a delay value into the Timestamp value in the response.\n    // This value MUST contain the difference between the time of sending of\n    // the response and receipt of the request, measured in seconds.\n    // https://tools.ietf.org/html/rfc3261#section-8.2.6.1\n    if (options.statusCode === 100) {\n        // TODO\n    }\n    // The From field of the response MUST equal the From header field of\n    // the request.  The Call-ID header field of the response MUST equal the\n    // Call-ID header field of the request.  The CSeq header field of the\n    // response MUST equal the CSeq field of the request.  The Via header\n    // field values in the response MUST equal the Via header field values\n    // in the request and MUST maintain the same ordering.\n    // https://tools.ietf.org/html/rfc3261#section-8.2.6.2\n    var fromHeader = \"From: \" + message.getHeader(\"From\") + CRLF;\n    var callIdHeader = \"Call-ID: \" + message.callId + CRLF;\n    var cSeqHeader = \"CSeq: \" + message.cseq + \" \" + message.method + CRLF;\n    var viaHeaders = message.getHeaders(\"via\").reduce(function (previous, current) {\n        return previous + \"Via: \" + current + CRLF;\n    }, \"\");\n    // If a request contained a To tag in the request, the To header field\n    // in the response MUST equal that of the request.  However, if the To\n    // header field in the request did not contain a tag, the URI in the To\n    // header field in the response MUST equal the URI in the To header\n    // field; additionally, the UAS MUST add a tag to the To header field in\n    // the response (with the exception of the 100 (Trying) response, in\n    // which a tag MAY be present).  This serves to identify the UAS that is\n    // responding, possibly resulting in a component of a dialog ID.  The\n    // same tag MUST be used for all responses to that request, both final\n    // and provisional (again excepting the 100 (Trying)).\n    // https://tools.ietf.org/html/rfc3261#section-8.2.6.2\n    var toHeader = \"To: \" + message.getHeader(\"to\");\n    if (options.statusCode > 100 && !message.parseHeader(\"to\").hasParam(\"tag\")) {\n        var toTag = options.toTag;\n        if (!toTag) {\n            // Stateless UAS Behavior...\n            // o  To header tags MUST be generated for responses in a stateless\n            //    manner - in a manner that will generate the same tag for the\n            //    same request consistently.  For information on tag construction\n            //    see Section 19.3.\n            // https://tools.ietf.org/html/rfc3261#section-8.2.7\n            toTag = utils_1.newTag(); // FIXME: newTag() currently generates random tags\n        }\n        toHeader += \";tag=\" + toTag;\n    }\n    toHeader += CRLF;\n    // FIXME: TODO: needs review... moved to InviteUserAgentServer (as it is specific to that)\n    // let recordRouteHeaders = \"\";\n    // if (request.method === C.INVITE && statusCode > 100 && statusCode <= 200) {\n    //   recordRouteHeaders = request.getHeaders(\"record-route\").reduce((previous, current) => {\n    //     return previous + \"Record-Route: \" + current + CRLF;\n    //   }, \"\");\n    // }\n    // FIXME: TODO: needs review...\n    var supportedHeader = \"\";\n    if (options.supported) {\n        supportedHeader = \"Supported: \" + options.supported.join(\", \") + CRLF;\n    }\n    // FIXME: TODO: needs review...\n    var userAgentHeader = \"\";\n    if (options.userAgent) {\n        userAgentHeader = \"User-Agent: \" + options.userAgent + CRLF;\n    }\n    var extensionHeaders = \"\";\n    if (options.extraHeaders) {\n        extensionHeaders = options.extraHeaders.reduce(function (previous, current) {\n            return previous + current.trim() + CRLF;\n        }, \"\");\n    }\n    // The relative order of header fields with different field names is not\n    // significant.  However, it is RECOMMENDED that header fields which are\n    // needed for proxy processing (Via, Route, Record-Route, Proxy-Require,\n    // Max-Forwards, and Proxy-Authorization, for example) appear towards\n    // the top of the message to facilitate rapid parsing.\n    // https://tools.ietf.org/html/rfc3261#section-7.3.1\n    // response += recordRouteHeaders;\n    response += viaHeaders;\n    response += fromHeader;\n    response += toHeader;\n    response += cSeqHeader;\n    response += callIdHeader;\n    response += supportedHeader;\n    response += userAgentHeader;\n    response += extensionHeaders;\n    if (options.body) {\n        response += \"Content-Type: \" + options.body.contentType + CRLF;\n        response += \"Content-Length: \" + utils_1.str_utf8_length(options.body.content) + CRLF + CRLF;\n        response += options.body.content;\n    }\n    else {\n        response += \"Content-Length: \" + 0 + CRLF + CRLF;\n    }\n    return { message: response };\n}\nexports.constructOutgoingResponse = constructOutgoingResponse;\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar grammar_1 = __webpack_require__(11);\nvar incoming_request_message_1 = __webpack_require__(9);\nvar incoming_response_message_1 = __webpack_require__(17);\n/**\n * Extract and parse every header of a SIP message.\n * @internal\n */\nvar Parser;\n(function (Parser) {\n    function getHeader(data, headerStart) {\n        // 'start' position of the header.\n        var start = headerStart;\n        // 'end' position of the header.\n        var end = 0;\n        // 'partial end' position of the header.\n        var partialEnd = 0;\n        // End of message.\n        if (data.substring(start, start + 2).match(/(^\\r\\n)/)) {\n            return -2;\n        }\n        while (end === 0) {\n            // Partial End of Header.\n            partialEnd = data.indexOf(\"\\r\\n\", start);\n            // 'indexOf' returns -1 if the value to be found never occurs.\n            if (partialEnd === -1) {\n                return partialEnd;\n            }\n            if (!data.substring(partialEnd + 2, partialEnd + 4).match(/(^\\r\\n)/) &&\n                data.charAt(partialEnd + 2).match(/(^\\s+)/)) {\n                // Not the end of the message. Continue from the next position.\n                start = partialEnd + 2;\n            }\n            else {\n                end = partialEnd;\n            }\n        }\n        return end;\n    }\n    Parser.getHeader = getHeader;\n    function parseHeader(message, data, headerStart, headerEnd) {\n        var hcolonIndex = data.indexOf(\":\", headerStart);\n        var headerName = data.substring(headerStart, hcolonIndex).trim();\n        var headerValue = data.substring(hcolonIndex + 1, headerEnd).trim();\n        var parsed;\n        // If header-field is well-known, parse it.\n        switch (headerName.toLowerCase()) {\n            case \"via\":\n            case \"v\":\n                message.addHeader(\"via\", headerValue);\n                if (message.getHeaders(\"via\").length === 1) {\n                    parsed = message.parseHeader(\"Via\");\n                    if (parsed) {\n                        message.via = parsed;\n                        message.viaBranch = parsed.branch;\n                    }\n                }\n                else {\n                    parsed = 0;\n                }\n                break;\n            case \"from\":\n            case \"f\":\n                message.setHeader(\"from\", headerValue);\n                parsed = message.parseHeader(\"from\");\n                if (parsed) {\n                    message.from = parsed;\n                    message.fromTag = parsed.getParam(\"tag\");\n                }\n                break;\n            case \"to\":\n            case \"t\":\n                message.setHeader(\"to\", headerValue);\n                parsed = message.parseHeader(\"to\");\n                if (parsed) {\n                    message.to = parsed;\n                    message.toTag = parsed.getParam(\"tag\");\n                }\n                break;\n            case \"record-route\":\n                parsed = grammar_1.Grammar.parse(headerValue, \"Record_Route\");\n                if (parsed === -1) {\n                    parsed = undefined;\n                    break;\n                }\n                if (!(parsed instanceof Array)) {\n                    parsed = undefined;\n                    break;\n                }\n                parsed.forEach(function (header) {\n                    message.addHeader(\"record-route\", headerValue.substring(header.position, header.offset));\n                    message.headers[\"Record-Route\"][message.getHeaders(\"record-route\").length - 1].parsed = header.parsed;\n                });\n                break;\n            case \"call-id\":\n            case \"i\":\n                message.setHeader(\"call-id\", headerValue);\n                parsed = message.parseHeader(\"call-id\");\n                if (parsed) {\n                    message.callId = headerValue;\n                }\n                break;\n            case \"contact\":\n            case \"m\":\n                parsed = grammar_1.Grammar.parse(headerValue, \"Contact\");\n                if (parsed === -1) {\n                    parsed = undefined;\n                    break;\n                }\n                if (!(parsed instanceof Array)) {\n                    parsed = undefined;\n                    break;\n                }\n                parsed.forEach(function (header) {\n                    message.addHeader(\"contact\", headerValue.substring(header.position, header.offset));\n                    message.headers.Contact[message.getHeaders(\"contact\").length - 1].parsed = header.parsed;\n                });\n                break;\n            case \"content-length\":\n            case \"l\":\n                message.setHeader(\"content-length\", headerValue);\n                parsed = message.parseHeader(\"content-length\");\n                break;\n            case \"content-type\":\n            case \"c\":\n                message.setHeader(\"content-type\", headerValue);\n                parsed = message.parseHeader(\"content-type\");\n                break;\n            case \"cseq\":\n                message.setHeader(\"cseq\", headerValue);\n                parsed = message.parseHeader(\"cseq\");\n                if (parsed) {\n                    message.cseq = parsed.value;\n                }\n                if (message instanceof incoming_response_message_1.IncomingResponseMessage) {\n                    message.method = parsed.method;\n                }\n                break;\n            case \"max-forwards\":\n                message.setHeader(\"max-forwards\", headerValue);\n                parsed = message.parseHeader(\"max-forwards\");\n                break;\n            case \"www-authenticate\":\n                message.setHeader(\"www-authenticate\", headerValue);\n                parsed = message.parseHeader(\"www-authenticate\");\n                break;\n            case \"proxy-authenticate\":\n                message.setHeader(\"proxy-authenticate\", headerValue);\n                parsed = message.parseHeader(\"proxy-authenticate\");\n                break;\n            case \"refer-to\":\n            case \"r\":\n                message.setHeader(\"refer-to\", headerValue);\n                parsed = message.parseHeader(\"refer-to\");\n                if (parsed) {\n                    message.referTo = parsed;\n                }\n                break;\n            default:\n                // Do not parse this header.\n                message.addHeader(headerName.toLowerCase(), headerValue);\n                parsed = 0;\n        }\n        if (parsed === undefined) {\n            return {\n                error: \"error parsing header '\" + headerName + \"'\"\n            };\n        }\n        else {\n            return true;\n        }\n    }\n    Parser.parseHeader = parseHeader;\n    function parseMessage(data, logger) {\n        var headerStart = 0;\n        var headerEnd = data.indexOf(\"\\r\\n\");\n        if (headerEnd === -1) {\n            logger.warn(\"no CRLF found, not a SIP message, discarded\");\n            return;\n        }\n        // Parse first line. Check if it is a Request or a Reply.\n        var firstLine = data.substring(0, headerEnd);\n        var parsed = grammar_1.Grammar.parse(firstLine, \"Request_Response\");\n        var message;\n        if (parsed === -1) {\n            logger.warn('error parsing first line of SIP message: \"' + firstLine + '\"');\n            return;\n        }\n        else if (!parsed.status_code) {\n            message = new incoming_request_message_1.IncomingRequestMessage();\n            message.method = parsed.method;\n            message.ruri = parsed.uri;\n        }\n        else {\n            message = new incoming_response_message_1.IncomingResponseMessage();\n            message.statusCode = parsed.status_code;\n            message.reasonPhrase = parsed.reason_phrase;\n        }\n        message.data = data;\n        headerStart = headerEnd + 2;\n        // Loop over every line in data. Detect the end of each header and parse\n        // it or simply add to the headers collection.\n        var bodyStart;\n        while (true) {\n            headerEnd = getHeader(data, headerStart);\n            // The SIP message has normally finished.\n            if (headerEnd === -2) {\n                bodyStart = headerStart + 2;\n                break;\n            }\n            else if (headerEnd === -1) {\n                // data.indexOf returned -1 due to a malformed message.\n                logger.error(\"malformed message\");\n                return;\n            }\n            var parsedHeader = parseHeader(message, data, headerStart, headerEnd);\n            if (parsedHeader !== true) {\n                logger.error(parsed.error);\n                return;\n            }\n            headerStart = headerEnd + 2;\n        }\n        // RFC3261 18.3.\n        // If there are additional bytes in the transport packet\n        // beyond the end of the body, they MUST be discarded.\n        if (message.hasHeader(\"content-length\")) {\n            message.body = data.substr(bodyStart, Number(message.getHeader(\"content-length\")));\n        }\n        else {\n            message.body = data.substring(bodyStart);\n        }\n        return message;\n    }\n    Parser.parseMessage = parseMessage;\n})(Parser = exports.Parser || (exports.Parser = {}));\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar messages_1 = __webpack_require__(5);\nvar session_1 = __webpack_require__(25);\nvar timers_1 = __webpack_require__(27);\nvar transactions_1 = __webpack_require__(28);\nvar bye_user_agent_client_1 = __webpack_require__(42);\nvar bye_user_agent_server_1 = __webpack_require__(44);\nvar info_user_agent_client_1 = __webpack_require__(46);\nvar info_user_agent_server_1 = __webpack_require__(47);\nvar message_user_agent_client_1 = __webpack_require__(48);\nvar message_user_agent_server_1 = __webpack_require__(49);\nvar notify_user_agent_client_1 = __webpack_require__(50);\nvar notify_user_agent_server_1 = __webpack_require__(51);\nvar prack_user_agent_client_1 = __webpack_require__(52);\nvar prack_user_agent_server_1 = __webpack_require__(53);\nvar re_invite_user_agent_client_1 = __webpack_require__(54);\nvar re_invite_user_agent_server_1 = __webpack_require__(55);\nvar refer_user_agent_client_1 = __webpack_require__(56);\nvar refer_user_agent_server_1 = __webpack_require__(57);\nvar dialog_1 = __webpack_require__(4);\n/**\n * Session Dialog.\n * @public\n */\nvar SessionDialog = /** @class */ (function (_super) {\n    tslib_1.__extends(SessionDialog, _super);\n    function SessionDialog(initialTransaction, core, state, delegate) {\n        var _this = _super.call(this, core, state) || this;\n        _this.initialTransaction = initialTransaction;\n        /** The state of the offer/answer exchange. */\n        _this._signalingState = session_1.SignalingState.Initial;\n        /** True if waiting for an ACK to the initial transaction 2xx (UAS only). */\n        _this.ackWait = false;\n        _this.delegate = delegate;\n        if (initialTransaction instanceof transactions_1.InviteServerTransaction) {\n            // If we're created by an invite server transaction, we're\n            // going to be waiting for an ACK if are to be confirmed.\n            _this.ackWait = true;\n        }\n        // If we're confirmed upon creation start the retransmitting whatever\n        // the 2xx final response was that confirmed us into existence.\n        if (!_this.early) {\n            _this.start2xxRetransmissionTimer();\n        }\n        _this.signalingStateTransition(initialTransaction.request);\n        _this.logger = core.loggerFactory.getLogger(\"sip.invite-dialog\");\n        _this.logger.log(\"INVITE dialog \" + _this.id + \" constructed\");\n        return _this;\n    }\n    SessionDialog.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._signalingState = session_1.SignalingState.Closed;\n        this._offer = undefined;\n        this._answer = undefined;\n        if (this.invite2xxTimer) {\n            clearTimeout(this.invite2xxTimer);\n            this.invite2xxTimer = undefined;\n        }\n        // The UAS MUST still respond to any pending requests received for that\n        // dialog.  It is RECOMMENDED that a 487 (Request Terminated) response\n        // be generated to those pending requests.\n        // https://tools.ietf.org/html/rfc3261#section-15.1.2\n        // TODO:\n        // this.userAgentServers.forEach((uas) => uas.reply(487));\n        this.logger.log(\"INVITE dialog \" + this.id + \" destroyed\");\n    };\n    Object.defineProperty(SessionDialog.prototype, \"sessionState\", {\n        // FIXME: Need real state machine\n        get: function () {\n            if (this.early) {\n                return session_1.SessionState.Early;\n            }\n            else if (this.ackWait) {\n                return session_1.SessionState.AckWait;\n            }\n            else if (this._signalingState === session_1.SignalingState.Closed) {\n                return session_1.SessionState.Terminated;\n            }\n            else {\n                return session_1.SessionState.Confirmed;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SessionDialog.prototype, \"signalingState\", {\n        /** The state of the offer/answer exchange. */\n        get: function () {\n            return this._signalingState;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SessionDialog.prototype, \"offer\", {\n        /** The current offer. Undefined unless signaling state HaveLocalOffer, HaveRemoteOffer, of Stable. */\n        get: function () {\n            return this._offer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SessionDialog.prototype, \"answer\", {\n        /** The current answer. Undefined unless signaling state Stable. */\n        get: function () {\n            return this._answer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Confirm the dialog. Only matters if dialog is currently early. */\n    SessionDialog.prototype.confirm = function () {\n        // When we're confirmed start the retransmitting whatever\n        // the 2xx final response that may have confirmed us.\n        if (this.early) {\n            this.start2xxRetransmissionTimer();\n        }\n        _super.prototype.confirm.call(this);\n    };\n    /** Re-confirm the dialog. Only matters if handling re-INVITE request. */\n    SessionDialog.prototype.reConfirm = function () {\n        // When we're confirmed start the retransmitting whatever\n        // the 2xx final response that may have confirmed us.\n        if (this.reinviteUserAgentServer) {\n            this.startReInvite2xxRetransmissionTimer();\n        }\n    };\n    /**\n     * The UAC core MUST generate an ACK request for each 2xx received from\n     * the transaction layer.  The header fields of the ACK are constructed\n     * in the same way as for any request sent within a dialog (see Section\n     * 12) with the exception of the CSeq and the header fields related to\n     * authentication.  The sequence number of the CSeq header field MUST be\n     * the same as the INVITE being acknowledged, but the CSeq method MUST\n     * be ACK.  The ACK MUST contain the same credentials as the INVITE.  If\n     * the 2xx contains an offer (based on the rules above), the ACK MUST\n     * carry an answer in its body.  If the offer in the 2xx response is not\n     * acceptable, the UAC core MUST generate a valid answer in the ACK and\n     * then send a BYE immediately.\n     * https://tools.ietf.org/html/rfc3261#section-13.2.2.4\n     * @param options - ACK options bucket.\n     */\n    SessionDialog.prototype.ack = function (options) {\n        if (options === void 0) { options = {}; }\n        this.logger.log(\"INVITE dialog \" + this.id + \" sending ACK request\");\n        var transaction;\n        if (this.reinviteUserAgentClient) {\n            // We're sending ACK for a re-INVITE\n            if (!(this.reinviteUserAgentClient.transaction instanceof transactions_1.InviteClientTransaction)) {\n                throw new Error(\"Transaction not instance of InviteClientTransaction.\");\n            }\n            transaction = this.reinviteUserAgentClient.transaction;\n            this.reinviteUserAgentClient = undefined;\n        }\n        else {\n            // We're sending ACK for the initial INVITE\n            if (!(this.initialTransaction instanceof transactions_1.InviteClientTransaction)) {\n                throw new Error(\"Initial transaction not instance of InviteClientTransaction.\");\n            }\n            transaction = this.initialTransaction;\n        }\n        options.cseq = transaction.request.cseq; // ACK cseq is INVITE cseq\n        var message = this.createOutgoingRequestMessage(messages_1.C.ACK, options);\n        transaction.ackResponse(message); // See InviteClientTransaction for details.\n        this.signalingStateTransition(message);\n        return { message: message };\n    };\n    /**\n     * Terminating a Session\n     *\n     * This section describes the procedures for terminating a session\n     * established by SIP.  The state of the session and the state of the\n     * dialog are very closely related.  When a session is initiated with an\n     * INVITE, each 1xx or 2xx response from a distinct UAS creates a\n     * dialog, and if that response completes the offer/answer exchange, it\n     * also creates a session.  As a result, each session is \"associated\"\n     * with a single dialog - the one which resulted in its creation.  If an\n     * initial INVITE generates a non-2xx final response, that terminates\n     * all sessions (if any) and all dialogs (if any) that were created\n     * through responses to the request.  By virtue of completing the\n     * transaction, a non-2xx final response also prevents further sessions\n     * from being created as a result of the INVITE.  The BYE request is\n     * used to terminate a specific session or attempted session.  In this\n     * case, the specific session is the one with the peer UA on the other\n     * side of the dialog.  When a BYE is received on a dialog, any session\n     * associated with that dialog SHOULD terminate.  A UA MUST NOT send a\n     * BYE outside of a dialog.  The caller's UA MAY send a BYE for either\n     * confirmed or early dialogs, and the callee's UA MAY send a BYE on\n     * confirmed dialogs, but MUST NOT send a BYE on early dialogs.\n     *\n     * However, the callee's UA MUST NOT send a BYE on a confirmed dialog\n     * until it has received an ACK for its 2xx response or until the server\n     * transaction times out.  If no SIP extensions have defined other\n     * application layer states associated with the dialog, the BYE also\n     * terminates the dialog.\n     *\n     * https://tools.ietf.org/html/rfc3261#section-15\n     * FIXME: Make these proper Exceptions...\n     * @param options - BYE options bucket.\n     * @returns\n     * Throws `Error` if callee's UA attempts a BYE on an early dialog.\n     * Throws `Error` if callee's UA attempts a BYE on a confirmed dialog\n     *                while it's waiting on the ACK for its 2xx response.\n     */\n    SessionDialog.prototype.bye = function (delegate, options) {\n        this.logger.log(\"INVITE dialog \" + this.id + \" sending BYE request\");\n        // The caller's UA MAY send a BYE for either\n        // confirmed or early dialogs, and the callee's UA MAY send a BYE on\n        // confirmed dialogs, but MUST NOT send a BYE on early dialogs.\n        //\n        // However, the callee's UA MUST NOT send a BYE on a confirmed dialog\n        // until it has received an ACK for its 2xx response or until the server\n        // transaction times out.\n        // https://tools.ietf.org/html/rfc3261#section-15\n        if (this.initialTransaction instanceof transactions_1.InviteServerTransaction) {\n            if (this.early) {\n                // FIXME: TODO: This should throw a proper exception.\n                throw new Error(\"UAS MUST NOT send a BYE on early dialogs.\");\n            }\n            if (this.ackWait && this.initialTransaction.state !== transactions_1.TransactionState.Terminated) {\n                // FIXME: TODO: This should throw a proper exception.\n                throw new Error(\"UAS MUST NOT send a BYE on a confirmed dialog \" +\n                    \"until it has received an ACK for its 2xx response \" +\n                    \"or until the server transaction times out.\");\n            }\n        }\n        // A BYE request is constructed as would any other request within a\n        // dialog, as described in Section 12.\n        //\n        // Once the BYE is constructed, the UAC core creates a new non-INVITE\n        // client transaction, and passes it the BYE request.  The UAC MUST\n        // consider the session terminated (and therefore stop sending or\n        // listening for media) as soon as the BYE request is passed to the\n        // client transaction.  If the response for the BYE is a 481\n        // (Call/Transaction Does Not Exist) or a 408 (Request Timeout) or no\n        // response at all is received for the BYE (that is, a timeout is\n        // returned by the client transaction), the UAC MUST consider the\n        // session and the dialog terminated.\n        // https://tools.ietf.org/html/rfc3261#section-15.1.1\n        return new bye_user_agent_client_1.ByeUserAgentClient(this, delegate, options);\n    };\n    /**\n     * An INFO request can be associated with an Info Package (see\n     * Section 5), or associated with a legacy INFO usage (see Section 2).\n     *\n     * The construction of the INFO request is the same as any other\n     * non-target refresh request within an existing invite dialog usage as\n     * described in Section 12.2 of RFC 3261.\n     * https://tools.ietf.org/html/rfc6086#section-4.2.1\n     * @param options - Options bucket.\n     */\n    SessionDialog.prototype.info = function (delegate, options) {\n        this.logger.log(\"INVITE dialog \" + this.id + \" sending INFO request\");\n        if (this.early) {\n            // FIXME: TODO: This should throw a proper exception.\n            throw new Error(\"Dialog not confirmed.\");\n        }\n        return new info_user_agent_client_1.InfoUserAgentClient(this, delegate, options);\n    };\n    /**\n     * Modifying an Existing Session\n     *\n     * A successful INVITE request (see Section 13) establishes both a\n     * dialog between two user agents and a session using the offer-answer\n     * model.  Section 12 explains how to modify an existing dialog using a\n     * target refresh request (for example, changing the remote target URI\n     * of the dialog).  This section describes how to modify the actual\n     * session.  This modification can involve changing addresses or ports,\n     * adding a media stream, deleting a media stream, and so on.  This is\n     * accomplished by sending a new INVITE request within the same dialog\n     * that established the session.  An INVITE request sent within an\n     * existing dialog is known as a re-INVITE.\n     *\n     *    Note that a single re-INVITE can modify the dialog and the\n     *    parameters of the session at the same time.\n     *\n     * Either the caller or callee can modify an existing session.\n     * https://tools.ietf.org/html/rfc3261#section-14\n     * @param options - Options bucket\n     */\n    SessionDialog.prototype.invite = function (delegate, options) {\n        this.logger.log(\"INVITE dialog \" + this.id + \" sending INVITE request\");\n        if (this.early) {\n            // FIXME: TODO: This should throw a proper exception.\n            throw new Error(\"Dialog not confirmed.\");\n        }\n        // Note that a UAC MUST NOT initiate a new INVITE transaction within a\n        // dialog while another INVITE transaction is in progress in either\n        // direction.\n        //\n        //    1. If there is an ongoing INVITE client transaction, the TU MUST\n        //       wait until the transaction reaches the completed or terminated\n        //       state before initiating the new INVITE.\n        //\n        //    2. If there is an ongoing INVITE server transaction, the TU MUST\n        //       wait until the transaction reaches the confirmed or terminated\n        //       state before initiating the new INVITE.\n        //\n        // However, a UA MAY initiate a regular transaction while an INVITE\n        // transaction is in progress.  A UA MAY also initiate an INVITE\n        // transaction while a regular transaction is in progress.\n        // https://tools.ietf.org/html/rfc3261#section-14.1\n        if (this.reinviteUserAgentClient) {\n            // FIXME: TODO: This should throw a proper exception.\n            throw new Error(\"There is an ongoing re-INVITE client transaction.\");\n        }\n        if (this.reinviteUserAgentServer) {\n            // FIXME: TODO: This should throw a proper exception.\n            throw new Error(\"There is an ongoing re-INVITE server transaction.\");\n        }\n        return new re_invite_user_agent_client_1.ReInviteUserAgentClient(this, delegate, options);\n    };\n    /**\n     * A UAC MAY associate a MESSAGE request with an existing dialog.  If a\n     * MESSAGE request is sent within a dialog, it is \"associated\" with any\n     * media session or sessions associated with that dialog.\n     * https://tools.ietf.org/html/rfc3428#section-4\n     * @param options - Options bucket.\n     */\n    SessionDialog.prototype.message = function (delegate, options) {\n        this.logger.log(\"INVITE dialog \" + this.id + \" sending MESSAGE request\");\n        if (this.early) {\n            // FIXME: TODO: This should throw a proper exception.\n            throw new Error(\"Dialog not confirmed.\");\n        }\n        var message = this.createOutgoingRequestMessage(messages_1.C.MESSAGE, options);\n        return new message_user_agent_client_1.MessageUserAgentClient(this.core, message, delegate);\n    };\n    /**\n     * The NOTIFY mechanism defined in [2] MUST be used to inform the agent\n     * sending the REFER of the status of the reference.\n     * https://tools.ietf.org/html/rfc3515#section-2.4.4\n     * @param options - Options bucket.\n     */\n    SessionDialog.prototype.notify = function (delegate, options) {\n        this.logger.log(\"INVITE dialog \" + this.id + \" sending NOTIFY request\");\n        if (this.early) {\n            // FIXME: TODO: This should throw a proper exception.\n            throw new Error(\"Dialog not confirmed.\");\n        }\n        return new notify_user_agent_client_1.NotifyUserAgentClient(this, delegate, options);\n    };\n    /**\n     * Assuming the response is to be transmitted reliably, the UAC MUST\n     * create a new request with method PRACK.  This request is sent within\n     * the dialog associated with the provisional response (indeed, the\n     * provisional response may have created the dialog).  PRACK requests\n     * MAY contain bodies, which are interpreted according to their type and\n     * disposition.\n     * https://tools.ietf.org/html/rfc3262#section-4\n     * @param options - Options bucket.\n     */\n    SessionDialog.prototype.prack = function (delegate, options) {\n        this.logger.log(\"INVITE dialog \" + this.id + \" sending PRACK request\");\n        return new prack_user_agent_client_1.PrackUserAgentClient(this, delegate, options);\n    };\n    /**\n     * REFER is a SIP request and is constructed as defined in [1].  A REFER\n     * request MUST contain exactly one Refer-To header field value.\n     * https://tools.ietf.org/html/rfc3515#section-2.4.1\n     * @param options - Options bucket.\n     */\n    SessionDialog.prototype.refer = function (delegate, options) {\n        this.logger.log(\"INVITE dialog \" + this.id + \" sending REFER request\");\n        if (this.early) {\n            // FIXME: TODO: This should throw a proper exception.\n            throw new Error(\"Dialog not confirmed.\");\n        }\n        // FIXME: TODO: Validate Refer-To header field value.\n        return new refer_user_agent_client_1.ReferUserAgentClient(this, delegate, options);\n    };\n    /**\n     * Requests sent within a dialog, as any other requests, are atomic.  If\n     * a particular request is accepted by the UAS, all the state changes\n     * associated with it are performed.  If the request is rejected, none\n     * of the state changes are performed.\n     * https://tools.ietf.org/html/rfc3261#section-12.2.2\n     * @param message - Incoming request message within this dialog.\n     */\n    SessionDialog.prototype.receiveRequest = function (message) {\n        this.logger.log(\"INVITE dialog \" + this.id + \" received \" + message.method + \" request\");\n        // Response retransmissions cease when an ACK request for the\n        // response is received.  This is independent of whatever transport\n        // protocols are used to send the response.\n        // https://tools.ietf.org/html/rfc6026#section-8.1\n        if (message.method === messages_1.C.ACK) {\n            // If ackWait is true, then this is the ACK to the initial INVITE,\n            // otherwise this is an ACK to an in dialog INVITE. In either case,\n            // guard to make sure the sequence number of the ACK matches the INVITE.\n            if (this.ackWait) {\n                if (this.initialTransaction instanceof transactions_1.InviteClientTransaction) {\n                    this.logger.warn(\"INVITE dialog \" + this.id + \" received unexpected \" + message.method + \" request, dropping.\");\n                    return;\n                }\n                if (this.initialTransaction.request.cseq !== message.cseq) {\n                    this.logger.warn(\"INVITE dialog \" + this.id + \" received unexpected \" + message.method + \" request, dropping.\");\n                    return;\n                }\n                // Update before the delegate has a chance to handle the\n                // message as delegate may callback into this dialog.\n                this.ackWait = false;\n            }\n            else {\n                if (!this.reinviteUserAgentServer) {\n                    this.logger.warn(\"INVITE dialog \" + this.id + \" received unexpected \" + message.method + \" request, dropping.\");\n                    return;\n                }\n                if (this.reinviteUserAgentServer.transaction.request.cseq !== message.cseq) {\n                    this.logger.warn(\"INVITE dialog \" + this.id + \" received unexpected \" + message.method + \" request, dropping.\");\n                    return;\n                }\n                this.reinviteUserAgentServer = undefined;\n            }\n            this.signalingStateTransition(message);\n            if (this.delegate && this.delegate.onAck) {\n                this.delegate.onAck({ message: message });\n            }\n            return;\n        }\n        // Request within a dialog out of sequence guard.\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\n        if (!this.sequenceGuard(message)) {\n            this.logger.log(\"INVITE dialog \" + this.id + \" rejected out of order \" + message.method + \" request.\");\n            return;\n        }\n        if (message.method === messages_1.C.INVITE) {\n            // A UAS that receives a second INVITE before it sends the final\n            // response to a first INVITE with a lower CSeq sequence number on the\n            // same dialog MUST return a 500 (Server Internal Error) response to the\n            // second INVITE and MUST include a Retry-After header field with a\n            // randomly chosen value of between 0 and 10 seconds.\n            // https://tools.ietf.org/html/rfc3261#section-14.2\n            if (this.reinviteUserAgentServer) {\n                // https://tools.ietf.org/html/rfc3261#section-20.33\n                var retryAfter = Math.floor((Math.random() * 10)) + 1;\n                var extraHeaders = [\"Retry-After: \" + retryAfter];\n                this.core.replyStateless(message, { statusCode: 500, extraHeaders: extraHeaders });\n                return;\n            }\n            // A UAS that receives an INVITE on a dialog while an INVITE it had sent\n            // on that dialog is in progress MUST return a 491 (Request Pending)\n            // response to the received INVITE.\n            // https://tools.ietf.org/html/rfc3261#section-14.2\n            if (this.reinviteUserAgentClient) {\n                this.core.replyStateless(message, { statusCode: 491 });\n                return;\n            }\n        }\n        // Request within a dialog common processing.\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\n        _super.prototype.receiveRequest.call(this, message);\n        // Requests within a dialog MAY contain Record-Route and Contact header\n        // fields.  However, these requests do not cause the dialog's route set\n        // to be modified, although they may modify the remote target URI.\n        // Specifically, requests that are not target refresh requests do not\n        // modify the dialog's remote target URI, and requests that are target\n        // refresh requests do.  For dialogs that have been established with an\n        // INVITE, the only target refresh request defined is re-INVITE (see\n        // Section 14).  Other extensions may define different target refresh\n        // requests for dialogs established in other ways.\n        //\n        //    Note that an ACK is NOT a target refresh request.\n        //\n        // Target refresh requests only update the dialog's remote target URI,\n        // and not the route set formed from the Record-Route.  Updating the\n        // latter would introduce severe backwards compatibility problems with\n        // RFC 2543-compliant systems.\n        // https://tools.ietf.org/html/rfc3261#section-15\n        if (message.method === messages_1.C.INVITE) {\n            // FIXME: parser needs to be typed...\n            var contact = message.parseHeader(\"contact\");\n            if (!contact) { // TODO: Review to make sure this will never happen\n                throw new Error(\"Contact undefined.\");\n            }\n            if (!(contact instanceof messages_1.NameAddrHeader)) {\n                throw new Error(\"Contact not instance of NameAddrHeader.\");\n            }\n            this.dialogState.remoteTarget = contact.uri;\n        }\n        // Switch on method and then delegate.\n        switch (message.method) {\n            case messages_1.C.BYE:\n                // A UAS core receiving a BYE request for an existing dialog MUST follow\n                // the procedures of Section 12.2.2 to process the request.  Once done,\n                // the UAS SHOULD terminate the session (and therefore stop sending and\n                // listening for media).  The only case where it can elect not to are\n                // multicast sessions, where participation is possible even if the other\n                // participant in the dialog has terminated its involvement in the\n                // session.  Whether or not it ends its participation on the session,\n                // the UAS core MUST generate a 2xx response to the BYE, and MUST pass\n                // that to the server transaction for transmission.\n                //\n                // The UAS MUST still respond to any pending requests received for that\n                // dialog.  It is RECOMMENDED that a 487 (Request Terminated) response\n                // be generated to those pending requests.\n                // https://tools.ietf.org/html/rfc3261#section-15.1.2\n                {\n                    var uas = new bye_user_agent_server_1.ByeUserAgentServer(this, message);\n                    this.delegate && this.delegate.onBye ?\n                        this.delegate.onBye(uas) :\n                        uas.accept();\n                    this.dispose();\n                }\n                break;\n            case messages_1.C.INFO:\n                // If a UA receives an INFO request associated with an Info Package that\n                // the UA has not indicated willingness to receive, the UA MUST send a\n                // 469 (Bad Info Package) response (see Section 11.6), which contains a\n                // Recv-Info header field with Info Packages for which the UA is willing\n                // to receive INFO requests.\n                {\n                    var uas = new info_user_agent_server_1.InfoUserAgentServer(this, message);\n                    this.delegate && this.delegate.onInfo ?\n                        this.delegate.onInfo(uas) :\n                        uas.reject({\n                            statusCode: 469,\n                            extraHeaders: [\"Recv-Info :\"]\n                        });\n                }\n                break;\n            case messages_1.C.INVITE:\n                // If the new session description is not acceptable, the UAS can reject\n                // it by returning a 488 (Not Acceptable Here) response for the re-\n                // INVITE.  This response SHOULD include a Warning header field.\n                // https://tools.ietf.org/html/rfc3261#section-14.2\n                {\n                    var uas = new re_invite_user_agent_server_1.ReInviteUserAgentServer(this, message);\n                    this.signalingStateTransition(message);\n                    this.delegate && this.delegate.onInvite ?\n                        this.delegate.onInvite(uas) :\n                        uas.reject({ statusCode: 488 }); // TODO: Warning header field.\n                }\n                break;\n            case messages_1.C.MESSAGE:\n                {\n                    var uas = new message_user_agent_server_1.MessageUserAgentServer(this.core, message);\n                    this.delegate && this.delegate.onMessage ?\n                        this.delegate.onMessage(uas) :\n                        uas.accept();\n                }\n                break;\n            case messages_1.C.NOTIFY:\n                // https://tools.ietf.org/html/rfc3515#section-2.4.4\n                {\n                    var uas = new notify_user_agent_server_1.NotifyUserAgentServer(this, message);\n                    this.delegate && this.delegate.onNotify ?\n                        this.delegate.onNotify(uas) :\n                        uas.accept();\n                }\n                break;\n            case messages_1.C.PRACK:\n                // https://tools.ietf.org/html/rfc3262#section-4\n                {\n                    var uas = new prack_user_agent_server_1.PrackUserAgentServer(this, message);\n                    this.delegate && this.delegate.onPrack ?\n                        this.delegate.onPrack(uas) :\n                        uas.accept();\n                }\n                break;\n            case messages_1.C.REFER:\n                // https://tools.ietf.org/html/rfc3515#section-2.4.2\n                {\n                    var uas = new refer_user_agent_server_1.ReferUserAgentServer(this, message);\n                    this.delegate && this.delegate.onRefer ?\n                        this.delegate.onRefer(uas) :\n                        uas.reject();\n                }\n                break;\n            default:\n                {\n                    this.logger.log(\"INVITE dialog \" + this.id + \" received unimplemented \" + message.method + \" request\");\n                    this.core.replyStateless(message, { statusCode: 501 });\n                }\n                break;\n        }\n    };\n    SessionDialog.prototype.reliableSequenceGuard = function (message) {\n        var statusCode = message.statusCode;\n        if (!statusCode) {\n            throw new Error(\"Status code undefined\");\n        }\n        if (statusCode > 100 && statusCode < 200) {\n            // If a provisional response is received for an initial request, and\n            // that response contains a Require header field containing the option\n            // tag 100rel, the response is to be sent reliably.  If the response is\n            // a 100 (Trying) (as opposed to 101 to 199), this option tag MUST be\n            // ignored, and the procedures below MUST NOT be used.\n            // https://tools.ietf.org/html/rfc3262#section-4\n            var requireHeader = message.getHeader(\"require\");\n            var rseqHeader = message.getHeader(\"rseq\");\n            var rseq = requireHeader && requireHeader.includes(\"100rel\") && rseqHeader ? Number(rseqHeader) : undefined;\n            if (rseq) {\n                // Handling of subsequent reliable provisional responses for the same\n                // initial request follows the same rules as above, with the following\n                // difference: reliable provisional responses are guaranteed to be in\n                // order.  As a result, if the UAC receives another reliable provisional\n                // response to the same request, and its RSeq value is not one higher\n                // than the value of the sequence number, that response MUST NOT be\n                // acknowledged with a PRACK, and MUST NOT be processed further by the\n                // UAC.  An implementation MAY discard the response, or MAY cache the\n                // response in the hopes of receiving the missing responses.\n                // https://tools.ietf.org/html/rfc3262#section-4\n                if (this.rseq && this.rseq + 1 !== rseq) {\n                    return false;\n                }\n                // Once a reliable provisional response is received, retransmissions of\n                // that response MUST be discarded.  A response is a retransmission when\n                // its dialog ID, CSeq, and RSeq match the original response.  The UAC\n                // MUST maintain a sequence number that indicates the most recently\n                // received in-order reliable provisional response for the initial\n                // request.  This sequence number MUST be maintained until a final\n                // response is received for the initial request.  Its value MUST be\n                // initialized to the RSeq header field in the first reliable\n                // provisional response received for the initial request.\n                // https://tools.ietf.org/html/rfc3262#section-4\n                if (!this.rseq) {\n                    this.rseq = rseq;\n                }\n            }\n        }\n        return true;\n    };\n    /**\n     * If not in a stable signaling state, rollback to prior stable signaling state.\n     */\n    SessionDialog.prototype.signalingStateRollback = function () {\n        if (this._signalingState === session_1.SignalingState.HaveLocalOffer ||\n            this.signalingState === session_1.SignalingState.HaveRemoteOffer) {\n            if (this._rollbackOffer && this._rollbackAnswer) {\n                this._signalingState = session_1.SignalingState.Stable;\n                this._offer = this._rollbackOffer;\n                this._answer = this._rollbackAnswer;\n            }\n        }\n    };\n    /**\n     * Update the signaling state of the dialog.\n     * @param message - The message to base the update off of.\n     */\n    SessionDialog.prototype.signalingStateTransition = function (message) {\n        var body = messages_1.getBody(message);\n        // No body, no session. No, woman, no cry.\n        if (!body || body.contentDisposition !== \"session\") {\n            return;\n        }\n        // We've got an existing offer and answer which we may wish to rollback to\n        if (this._signalingState === session_1.SignalingState.Stable) {\n            this._rollbackOffer = this._offer;\n            this._rollbackAnswer = this._answer;\n        }\n        // We're in UAS role, receiving incoming request with session description\n        if (message instanceof messages_1.IncomingRequestMessage) {\n            switch (this._signalingState) {\n                case session_1.SignalingState.Initial:\n                case session_1.SignalingState.Stable:\n                    this._signalingState = session_1.SignalingState.HaveRemoteOffer;\n                    this._offer = body;\n                    this._answer = undefined;\n                    break;\n                case session_1.SignalingState.HaveLocalOffer:\n                    this._signalingState = session_1.SignalingState.Stable;\n                    this._answer = body;\n                    break;\n                case session_1.SignalingState.HaveRemoteOffer:\n                    // You cannot make a new offer while one is in progress.\n                    // https://tools.ietf.org/html/rfc3261#section-13.2.1\n                    // FIXME: What to do here?\n                    break;\n                case session_1.SignalingState.Closed:\n                    break;\n                default:\n                    throw new Error(\"Unexpected signaling state.\");\n            }\n        }\n        // We're in UAC role, receiving incoming response with session description\n        if (message instanceof messages_1.IncomingResponseMessage) {\n            switch (this._signalingState) {\n                case session_1.SignalingState.Initial:\n                case session_1.SignalingState.Stable:\n                    this._signalingState = session_1.SignalingState.HaveRemoteOffer;\n                    this._offer = body;\n                    this._answer = undefined;\n                    break;\n                case session_1.SignalingState.HaveLocalOffer:\n                    this._signalingState = session_1.SignalingState.Stable;\n                    this._answer = body;\n                    break;\n                case session_1.SignalingState.HaveRemoteOffer:\n                    // You cannot make a new offer while one is in progress.\n                    // https://tools.ietf.org/html/rfc3261#section-13.2.1\n                    // FIXME: What to do here?\n                    break;\n                case session_1.SignalingState.Closed:\n                    break;\n                default:\n                    throw new Error(\"Unexpected signaling state.\");\n            }\n        }\n        // We're in UAC role, sending outgoing request with session description\n        if (message instanceof messages_1.OutgoingRequestMessage) {\n            switch (this._signalingState) {\n                case session_1.SignalingState.Initial:\n                case session_1.SignalingState.Stable:\n                    this._signalingState = session_1.SignalingState.HaveLocalOffer;\n                    this._offer = body;\n                    this._answer = undefined;\n                    break;\n                case session_1.SignalingState.HaveLocalOffer:\n                    // You cannot make a new offer while one is in progress.\n                    // https://tools.ietf.org/html/rfc3261#section-13.2.1\n                    // FIXME: What to do here?\n                    break;\n                case session_1.SignalingState.HaveRemoteOffer:\n                    this._signalingState = session_1.SignalingState.Stable;\n                    this._answer = body;\n                    break;\n                case session_1.SignalingState.Closed:\n                    break;\n                default:\n                    throw new Error(\"Unexpected signaling state.\");\n            }\n        }\n        // We're in UAS role, sending outgoing response with session description\n        if (messages_1.isBody(message)) {\n            switch (this._signalingState) {\n                case session_1.SignalingState.Initial:\n                case session_1.SignalingState.Stable:\n                    this._signalingState = session_1.SignalingState.HaveLocalOffer;\n                    this._offer = body;\n                    this._answer = undefined;\n                    break;\n                case session_1.SignalingState.HaveLocalOffer:\n                    // You cannot make a new offer while one is in progress.\n                    // https://tools.ietf.org/html/rfc3261#section-13.2.1\n                    // FIXME: What to do here?\n                    break;\n                case session_1.SignalingState.HaveRemoteOffer:\n                    this._signalingState = session_1.SignalingState.Stable;\n                    this._answer = body;\n                    break;\n                case session_1.SignalingState.Closed:\n                    break;\n                default:\n                    throw new Error(\"Unexpected signaling state.\");\n            }\n        }\n    };\n    SessionDialog.prototype.start2xxRetransmissionTimer = function () {\n        var _this = this;\n        if (this.initialTransaction instanceof transactions_1.InviteServerTransaction) {\n            var transaction_1 = this.initialTransaction;\n            // Once the response has been constructed, it is passed to the INVITE\n            // server transaction.  In order to ensure reliable end-to-end\n            // transport of the response, it is necessary to periodically pass\n            // the response directly to the transport until the ACK arrives.  The\n            // 2xx response is passed to the transport with an interval that\n            // starts at T1 seconds and doubles for each retransmission until it\n            // reaches T2 seconds (T1 and T2 are defined in Section 17).\n            // Response retransmissions cease when an ACK request for the\n            // response is received.  This is independent of whatever transport\n            // protocols are used to send the response.\n            // https://tools.ietf.org/html/rfc6026#section-8.1\n            var timeout_1 = timers_1.Timers.T1;\n            var retransmission_1 = function () {\n                if (!_this.ackWait) {\n                    _this.invite2xxTimer = undefined;\n                    return;\n                }\n                _this.logger.log(\"No ACK for 2xx response received, attempting retransmission\");\n                transaction_1.retransmitAcceptedResponse();\n                timeout_1 = Math.min(timeout_1 * 2, timers_1.Timers.T2);\n                _this.invite2xxTimer = setTimeout(retransmission_1, timeout_1);\n            };\n            this.invite2xxTimer = setTimeout(retransmission_1, timeout_1);\n            // If the server retransmits the 2xx response for 64*T1 seconds without\n            // receiving an ACK, the dialog is confirmed, but the session SHOULD be\n            // terminated.  This is accomplished with a BYE, as described in Section 15.\n            // https://tools.ietf.org/html/rfc3261#section-13.3.1.4\n            var stateChanged_1 = function () {\n                if (transaction_1.state === transactions_1.TransactionState.Terminated) {\n                    transaction_1.removeListener(\"stateChanged\", stateChanged_1);\n                    if (_this.invite2xxTimer) {\n                        clearTimeout(_this.invite2xxTimer);\n                        _this.invite2xxTimer = undefined;\n                    }\n                    if (_this.ackWait) {\n                        if (_this.delegate && _this.delegate.onAckTimeout) {\n                            _this.delegate.onAckTimeout();\n                        }\n                        else {\n                            _this.bye();\n                        }\n                    }\n                }\n            };\n            transaction_1.addListener(\"stateChanged\", stateChanged_1);\n        }\n    };\n    // FIXME: Refactor\n    SessionDialog.prototype.startReInvite2xxRetransmissionTimer = function () {\n        var _this = this;\n        if (this.reinviteUserAgentServer && this.reinviteUserAgentServer.transaction instanceof transactions_1.InviteServerTransaction) {\n            var transaction_2 = this.reinviteUserAgentServer.transaction;\n            // Once the response has been constructed, it is passed to the INVITE\n            // server transaction.  In order to ensure reliable end-to-end\n            // transport of the response, it is necessary to periodically pass\n            // the response directly to the transport until the ACK arrives.  The\n            // 2xx response is passed to the transport with an interval that\n            // starts at T1 seconds and doubles for each retransmission until it\n            // reaches T2 seconds (T1 and T2 are defined in Section 17).\n            // Response retransmissions cease when an ACK request for the\n            // response is received.  This is independent of whatever transport\n            // protocols are used to send the response.\n            // https://tools.ietf.org/html/rfc6026#section-8.1\n            var timeout_2 = timers_1.Timers.T1;\n            var retransmission_2 = function () {\n                if (!_this.reinviteUserAgentServer) {\n                    _this.invite2xxTimer = undefined;\n                    return;\n                }\n                _this.logger.log(\"No ACK for 2xx response received, attempting retransmission\");\n                transaction_2.retransmitAcceptedResponse();\n                timeout_2 = Math.min(timeout_2 * 2, timers_1.Timers.T2);\n                _this.invite2xxTimer = setTimeout(retransmission_2, timeout_2);\n            };\n            this.invite2xxTimer = setTimeout(retransmission_2, timeout_2);\n            // If the server retransmits the 2xx response for 64*T1 seconds without\n            // receiving an ACK, the dialog is confirmed, but the session SHOULD be\n            // terminated.  This is accomplished with a BYE, as described in Section 15.\n            // https://tools.ietf.org/html/rfc3261#section-13.3.1.4\n            var stateChanged_2 = function () {\n                if (transaction_2.state === transactions_1.TransactionState.Terminated) {\n                    transaction_2.removeListener(\"stateChanged\", stateChanged_2);\n                    if (_this.invite2xxTimer) {\n                        clearTimeout(_this.invite2xxTimer);\n                        _this.invite2xxTimer = undefined;\n                    }\n                    if (_this.reinviteUserAgentServer) {\n                        // FIXME: TODO: What to do here\n                    }\n                }\n            };\n            transaction_2.addListener(\"stateChanged\", stateChanged_2);\n        }\n    };\n    return SessionDialog;\n}(dialog_1.Dialog));\nexports.SessionDialog = SessionDialog;\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\ntslib_1.__exportStar(__webpack_require__(26), exports);\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Session state.\n * @remarks\n * https://tools.ietf.org/html/rfc3261#section-13\n * @public\n */\nvar SessionState;\n(function (SessionState) {\n    SessionState[\"Initial\"] = \"Initial\";\n    SessionState[\"Early\"] = \"Early\";\n    SessionState[\"AckWait\"] = \"AckWait\";\n    SessionState[\"Confirmed\"] = \"Confirmed\";\n    SessionState[\"Terminated\"] = \"Terminated\";\n})(SessionState = exports.SessionState || (exports.SessionState = {}));\n/**\n * Offer/Answer state.\n * @remarks\n * ```txt\n *         Offer                Answer             RFC    Ini Est Early\n *  -------------------------------------------------------------------\n *  1. INVITE Req.          2xx INVITE Resp.     RFC 3261  Y   Y    N\n *  2. 2xx INVITE Resp.     ACK Req.             RFC 3261  Y   Y    N\n *  3. INVITE Req.          1xx-rel INVITE Resp. RFC 3262  Y   Y    N\n *  4. 1xx-rel INVITE Resp. PRACK Req.           RFC 3262  Y   Y    N\n *  5. PRACK Req.           200 PRACK Resp.      RFC 3262  N   Y    Y\n *  6. UPDATE Req.          2xx UPDATE Resp.     RFC 3311  N   Y    Y\n *\n *       Table 1: Summary of SIP Usage of the Offer/Answer Model\n * ```\n * https://tools.ietf.org/html/rfc6337#section-2.2\n * @public\n */\nvar SignalingState;\n(function (SignalingState) {\n    SignalingState[\"Initial\"] = \"Initial\";\n    SignalingState[\"HaveLocalOffer\"] = \"HaveLocalOffer\";\n    SignalingState[\"HaveRemoteOffer\"] = \"HaveRemoteOffer\";\n    SignalingState[\"Stable\"] = \"Stable\";\n    SignalingState[\"Closed\"] = \"Closed\";\n})(SignalingState = exports.SignalingState || (exports.SignalingState = {}));\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar T1 = 500;\nvar T2 = 4000;\nvar T4 = 5000;\n/**\n * Timers.\n * @public\n */\nexports.Timers = {\n    T1: T1,\n    T2: T2,\n    T4: T4,\n    TIMER_B: 64 * T1,\n    TIMER_D: 0 * T1,\n    TIMER_F: 64 * T1,\n    TIMER_H: 64 * T1,\n    TIMER_I: 0 * T4,\n    TIMER_J: 0 * T1,\n    TIMER_K: 0 * T4,\n    TIMER_L: 64 * T1,\n    TIMER_M: 64 * T1,\n    TIMER_N: 64 * T1,\n    PROVISIONAL_RESPONSE_INTERVAL: 60000 // See RFC 3261 Section 13.3.1.1\n};\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\ntslib_1.__exportStar(__webpack_require__(29), exports);\ntslib_1.__exportStar(__webpack_require__(36), exports);\ntslib_1.__exportStar(__webpack_require__(38), exports);\ntslib_1.__exportStar(__webpack_require__(40), exports);\ntslib_1.__exportStar(__webpack_require__(41), exports);\ntslib_1.__exportStar(__webpack_require__(36), exports);\ntslib_1.__exportStar(__webpack_require__(39), exports);\ntslib_1.__exportStar(__webpack_require__(37), exports);\ntslib_1.__exportStar(__webpack_require__(30), exports);\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar transaction_1 = __webpack_require__(30);\n/**\n * Client Transaction.\n * @remarks\n * The client transaction provides its functionality through the\n * maintenance of a state machine.\n *\n * The TU communicates with the client transaction through a simple\n * interface.  When the TU wishes to initiate a new transaction, it\n * creates a client transaction and passes it the SIP request to send\n * and an IP address, port, and transport to which to send it.  The\n * client transaction begins execution of its state machine.  Valid\n * responses are passed up to the TU from the client transaction.\n * https://tools.ietf.org/html/rfc3261#section-17.1\n * @public\n */\nvar ClientTransaction = /** @class */ (function (_super) {\n    tslib_1.__extends(ClientTransaction, _super);\n    function ClientTransaction(_request, transport, user, state, loggerCategory) {\n        var _this = _super.call(this, transport, user, ClientTransaction.makeId(_request), state, loggerCategory) || this;\n        _this._request = _request;\n        _this.user = user;\n        // The Via header field indicates the transport used for the transaction\n        // and identifies the location where the response is to be sent.  A Via\n        // header field value is added only after the transport that will be\n        // used to reach the next hop has been selected (which may involve the\n        // usage of the procedures in [4]).\n        // https://tools.ietf.org/html/rfc3261#section-8.1.1.7\n        _request.setViaHeader(_this.id, transport.protocol);\n        return _this;\n    }\n    ClientTransaction.makeId = function (request) {\n        if (request.method === \"CANCEL\") {\n            if (!request.branch) {\n                throw new Error(\"Outgoing CANCEL request without a branch.\");\n            }\n            return request.branch;\n        }\n        else {\n            return \"z9hG4bK\" + Math.floor(Math.random() * 10000000);\n        }\n    };\n    Object.defineProperty(ClientTransaction.prototype, \"request\", {\n        /** The outgoing request the transaction handling. */\n        get: function () {\n            return this._request;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * A 408 to non-INVITE will always arrive too late to be useful ([3]),\n     * The client already has full knowledge of the timeout. The only\n     * information this message would convey is whether or not the server\n     * believed the transaction timed out. However, with the current design\n     * of the NIT, a client cannot do anything with this knowledge. Thus,\n     * the 408 is simply wasting network resources and contributes to the\n     * response bombardment illustrated in [3].\n     * https://tools.ietf.org/html/rfc4320#section-4.1\n     */\n    ClientTransaction.prototype.onRequestTimeout = function () {\n        if (this.user.onRequestTimeout) {\n            this.user.onRequestTimeout();\n        }\n    };\n    return ClientTransaction;\n}(transaction_1.Transaction));\nexports.ClientTransaction = ClientTransaction;\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar events_1 = __webpack_require__(31);\nvar exceptions_1 = __webpack_require__(32);\n/**\n * Transaction.\n * @remarks\n * SIP is a transactional protocol: interactions between components take\n * place in a series of independent message exchanges.  Specifically, a\n * SIP transaction consists of a single request and any responses to\n * that request, which include zero or more provisional responses and\n * one or more final responses.  In the case of a transaction where the\n * request was an INVITE (known as an INVITE transaction), the\n * transaction also includes the ACK only if the final response was not\n * a 2xx response.  If the response was a 2xx, the ACK is not considered\n * part of the transaction.\n * https://tools.ietf.org/html/rfc3261#section-17\n * @public\n */\nvar Transaction = /** @class */ (function (_super) {\n    tslib_1.__extends(Transaction, _super);\n    function Transaction(_transport, _user, _id, _state, loggerCategory) {\n        var _this = _super.call(this) || this;\n        _this._transport = _transport;\n        _this._user = _user;\n        _this._id = _id;\n        _this._state = _state;\n        _this.logger = _user.loggerFactory.getLogger(loggerCategory, _id);\n        _this.logger.debug(\"Constructing \" + _this.typeToString() + \" with id \" + _this.id + \".\");\n        return _this;\n    }\n    /**\n     * Destructor.\n     * Once the transaction is in the \"terminated\" state, it is destroyed\n     * immediately and there is no need to call `dispose`. However, if a\n     * transaction needs to be ended prematurely, the transaction user may\n     * do so by calling this method (for example, perhaps the UA is shutting down).\n     * No state transition will occur upon calling this method, all outstanding\n     * transmission timers will be cancelled, and use of the transaction after\n     * calling `dispose` is undefined.\n     */\n    Transaction.prototype.dispose = function () {\n        this.logger.debug(\"Destroyed \" + this.typeToString() + \" with id \" + this.id + \".\");\n    };\n    Object.defineProperty(Transaction.prototype, \"id\", {\n        /** Transaction id. */\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Transaction.prototype, \"kind\", {\n        /** Transaction kind. Deprecated. */\n        get: function () {\n            throw new Error(\"Invalid kind.\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Transaction.prototype, \"state\", {\n        /** Transaction state. */\n        get: function () {\n            return this._state;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Transaction.prototype, \"transport\", {\n        /** Transaction transport. */\n        get: function () {\n            return this._transport;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Transaction.prototype.on = function (name, callback) { return _super.prototype.on.call(this, name, callback); };\n    Transaction.prototype.logTransportError = function (error, message) {\n        this.logger.error(error.message);\n        this.logger.error(\"Transport error occurred in \" + this.typeToString() + \" with id \" + this.id + \".\");\n        this.logger.error(message);\n    };\n    /**\n     * Pass message to transport for transmission. If transport fails,\n     * the transaction user is notified by callback to onTransportError().\n     * @returns\n     * Rejects with `TransportError` if transport fails.\n     */\n    Transaction.prototype.send = function (message) {\n        var _this = this;\n        return this.transport.send(message).catch(function (error) {\n            // If the transport rejects, it SHOULD reject with a TransportError.\n            // But the transport may be external code, so we are careful\n            // make sure we convert it to a TransportError if need be.\n            if (error instanceof exceptions_1.TransportError) {\n                _this.onTransportError(error);\n                throw error;\n            }\n            var transportError;\n            if (error && typeof error.message === \"string\") {\n                transportError = new exceptions_1.TransportError(error.message);\n            }\n            else {\n                transportError = new exceptions_1.TransportError();\n            }\n            _this.onTransportError(transportError);\n            throw transportError;\n        });\n    };\n    Transaction.prototype.setState = function (state) {\n        this.logger.debug(\"State change to \\\"\" + state + \"\\\" on \" + this.typeToString() + \" with id \" + this.id + \".\");\n        this._state = state;\n        if (this._user.onStateChange) {\n            this._user.onStateChange(state);\n        }\n        this.emit(\"stateChanged\");\n    };\n    Transaction.prototype.typeToString = function () {\n        return \"UnknownType\";\n    };\n    return Transaction;\n}(events_1.EventEmitter));\nexports.Transaction = Transaction;\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\ntslib_1.__exportStar(__webpack_require__(33), exports);\ntslib_1.__exportStar(__webpack_require__(34), exports);\ntslib_1.__exportStar(__webpack_require__(35), exports);\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\n/**\n * An Exception is considered a condition that a reasonable application may wish to catch.\n * An Error indicates serious problems that a reasonable application should not try to catch.\n * @public\n */\nvar Exception = /** @class */ (function (_super) {\n    tslib_1.__extends(Exception, _super);\n    function Exception(message) {\n        var _newTarget = this.constructor;\n        var _this = _super.call(this, message) || this;\n        Object.setPrototypeOf(_this, _newTarget.prototype); // restore prototype chain\n        return _this;\n    }\n    return Exception;\n}(Error));\nexports.Exception = Exception;\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar exception_1 = __webpack_require__(33);\n/**\n * Indicates that the operation could not be completed given the current transaction state.\n * @public\n */\nvar TransactionStateError = /** @class */ (function (_super) {\n    tslib_1.__extends(TransactionStateError, _super);\n    function TransactionStateError(message) {\n        return _super.call(this, message ? message : \"Transaction state error.\") || this;\n    }\n    return TransactionStateError;\n}(exception_1.Exception));\nexports.TransactionStateError = TransactionStateError;\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar exception_1 = __webpack_require__(33);\n/**\n * Transport error.\n * @public\n */\nvar TransportError = /** @class */ (function (_super) {\n    tslib_1.__extends(TransportError, _super);\n    function TransportError(message) {\n        return _super.call(this, message ? message : \"Unspecified transport error.\") || this;\n    }\n    return TransportError;\n}(exception_1.Exception));\nexports.TransportError = TransportError;\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar timers_1 = __webpack_require__(27);\nvar client_transaction_1 = __webpack_require__(29);\nvar transaction_state_1 = __webpack_require__(37);\n/**\n * INVITE Client Transaction.\n * @remarks\n * The INVITE transaction consists of a three-way handshake.  The client\n * transaction sends an INVITE, the server transaction sends responses,\n * and the client transaction sends an ACK.\n * https://tools.ietf.org/html/rfc3261#section-17.1.1\n * @public\n */\nvar InviteClientTransaction = /** @class */ (function (_super) {\n    tslib_1.__extends(InviteClientTransaction, _super);\n    /**\n     * Constructor.\n     * Upon construction, the outgoing request's Via header is updated by calling `setViaHeader`.\n     * Then `toString` is called on the outgoing request and the message is sent via the transport.\n     * After construction the transaction will be in the \"calling\" state and the transaction id\n     * will equal the branch parameter set in the Via header of the outgoing request.\n     * https://tools.ietf.org/html/rfc3261#section-17.1.1\n     * @param request - The outgoing INVITE request.\n     * @param transport - The transport.\n     * @param user - The transaction user.\n     */\n    function InviteClientTransaction(request, transport, user) {\n        var _this = _super.call(this, request, transport, user, transaction_state_1.TransactionState.Calling, \"sip.transaction.ict\") || this;\n        /**\n         * Map of 2xx to-tag to ACK.\n         * If value is not undefined, value is the ACK which was sent.\n         * If key exists but value is undefined, a 2xx was received but the ACK not yet sent.\n         * Otherwise, a 2xx was not (yet) received for this transaction.\n         */\n        _this.ackRetransmissionCache = new Map();\n        // FIXME: Timer A for unreliable transport not implemented\n        //\n        // If an unreliable transport is being used, the client transaction\n        // MUST start timer A with a value of T1. If a reliable transport is being used,\n        // the client transaction SHOULD NOT start timer A (Timer A controls request retransmissions).\n        // For any transport, the client transaction MUST start timer B with a value\n        // of 64*T1 seconds (Timer B controls transaction timeouts).\n        // https://tools.ietf.org/html/rfc3261#section-17.1.1.2\n        //\n        // While not spelled out in the RFC, Timer B is the maximum amount of time that a sender\n        // will wait for an INVITE message to be acknowledged (a SIP response message is received).\n        // So Timer B should be cleared when the transaction state proceeds from \"Calling\".\n        _this.B = setTimeout(function () { return _this.timer_B(); }, timers_1.Timers.TIMER_B);\n        _this.send(request.toString()).catch(function (error) {\n            _this.logTransportError(error, \"Failed to send initial outgoing request.\");\n        });\n        return _this;\n    }\n    /**\n     * Destructor.\n     */\n    InviteClientTransaction.prototype.dispose = function () {\n        if (this.B) {\n            clearTimeout(this.B);\n            this.B = undefined;\n        }\n        if (this.D) {\n            clearTimeout(this.D);\n            this.D = undefined;\n        }\n        if (this.M) {\n            clearTimeout(this.M);\n            this.M = undefined;\n        }\n        _super.prototype.dispose.call(this);\n    };\n    Object.defineProperty(InviteClientTransaction.prototype, \"kind\", {\n        /** Transaction kind. Deprecated. */\n        get: function () {\n            return \"ict\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * ACK a 2xx final response.\n     *\n     * The transaction includes the ACK only if the final response was not a 2xx response (the\n     * transaction will generate and send the ACK to the transport automagically). If the\n     * final response was a 2xx, the ACK is not considered part of the transaction (the\n     * transaction user needs to generate and send the ACK).\n     *\n     * This library is not strictly RFC compliant with regard to ACK handling for 2xx final\n     * responses. Specifically, retransmissions of ACKs to a 2xx final responses is handled\n     * by the transaction layer (instead of the UAC core). The \"standard\" approach is for\n     * the UAC core to receive all 2xx responses and manage sending ACK retransmissions to\n     * the transport directly. Herein the transaction layer manages sending ACKs to 2xx responses\n     * and any retransmissions of those ACKs as needed.\n     *\n     * @param ack - The outgoing ACK request.\n     */\n    InviteClientTransaction.prototype.ackResponse = function (ack) {\n        var _this = this;\n        var toTag = ack.toTag;\n        if (!toTag) {\n            throw new Error(\"To tag undefined.\");\n        }\n        var id = \"z9hG4bK\" + Math.floor(Math.random() * 10000000);\n        ack.setViaHeader(id, this.transport.protocol);\n        this.ackRetransmissionCache.set(toTag, ack); // Add to ACK retransmission cache\n        this.send(ack.toString()).catch(function (error) {\n            _this.logTransportError(error, \"Failed to send ACK to 2xx response.\");\n        });\n    };\n    /**\n     * Handler for incoming responses from the transport which match this transaction.\n     * @param response - The incoming response.\n     */\n    InviteClientTransaction.prototype.receiveResponse = function (response) {\n        var _this = this;\n        var statusCode = response.statusCode;\n        if (!statusCode || statusCode < 100 || statusCode > 699) {\n            throw new Error(\"Invalid status code \" + statusCode);\n        }\n        switch (this.state) {\n            case transaction_state_1.TransactionState.Calling:\n                // If the client transaction receives a provisional response while in\n                // the \"Calling\" state, it transitions to the \"Proceeding\" state. In the\n                // \"Proceeding\" state, the client transaction SHOULD NOT retransmit the\n                // request any longer. Furthermore, the provisional response MUST be\n                // passed to the TU.  Any further provisional responses MUST be passed\n                // up to the TU while in the \"Proceeding\" state.\n                // https://tools.ietf.org/html/rfc3261#section-17.1.1.2\n                if (statusCode >= 100 && statusCode <= 199) {\n                    this.stateTransition(transaction_state_1.TransactionState.Proceeding);\n                    if (this.user.receiveResponse) {\n                        this.user.receiveResponse(response);\n                    }\n                    return;\n                }\n                // When a 2xx response is received while in either the \"Calling\" or\n                // \"Proceeding\" states, the client transaction MUST transition to\n                // the \"Accepted\" state... The 2xx response MUST be passed up to the TU.\n                // The client transaction MUST NOT generate an ACK to the 2xx response -- its\n                // handling is delegated to the TU. A UAC core will send an ACK to\n                // the 2xx response using a new transaction.\n                // https://tools.ietf.org/html/rfc6026#section-8.4\n                if (statusCode >= 200 && statusCode <= 299) {\n                    this.ackRetransmissionCache.set(response.toTag, undefined); // Prime the ACK cache\n                    this.stateTransition(transaction_state_1.TransactionState.Accepted);\n                    if (this.user.receiveResponse) {\n                        this.user.receiveResponse(response);\n                    }\n                    return;\n                }\n                // When in either the \"Calling\" or \"Proceeding\" states, reception of\n                // a response with status code from 300-699 MUST cause the client\n                // transaction to transition to \"Completed\". The client transaction\n                // MUST pass the received response up to the TU, and the client\n                // transaction MUST generate an ACK request, even if the transport is\n                // reliable (guidelines for constructing the ACK from the response\n                // are given in Section 17.1.1.3), and then pass the ACK to the\n                // transport layer for transmission. The ACK MUST be sent to the\n                // same address, port, and transport to which the original request was sent.\n                // https://tools.ietf.org/html/rfc6026#section-8.4\n                if (statusCode >= 300 && statusCode <= 699) {\n                    this.stateTransition(transaction_state_1.TransactionState.Completed);\n                    this.ack(response);\n                    if (this.user.receiveResponse) {\n                        this.user.receiveResponse(response);\n                    }\n                    return;\n                }\n                break;\n            case transaction_state_1.TransactionState.Proceeding:\n                // In the \"Proceeding\" state, the client transaction SHOULD NOT retransmit the\n                // request any longer. Furthermore, the provisional response MUST be\n                // passed to the TU.  Any further provisional responses MUST be passed\n                // up to the TU while in the \"Proceeding\" state.\n                // https://tools.ietf.org/html/rfc3261#section-17.1.1.2\n                if (statusCode >= 100 && statusCode <= 199) {\n                    if (this.user.receiveResponse) {\n                        this.user.receiveResponse(response);\n                    }\n                    return;\n                }\n                // When a 2xx response is received while in either the \"Calling\" or \"Proceeding\" states,\n                // the client transaction MUST transition to the \"Accepted\" state...\n                // The 2xx response MUST be passed up to the TU. The client\n                // transaction MUST NOT generate an ACK to the 2xx response -- its\n                // handling is delegated to the TU. A UAC core will send an ACK to\n                // the 2xx response using a new transaction.\n                // https://tools.ietf.org/html/rfc6026#section-8.4\n                if (statusCode >= 200 && statusCode <= 299) {\n                    this.ackRetransmissionCache.set(response.toTag, undefined); // Prime the ACK cache\n                    this.stateTransition(transaction_state_1.TransactionState.Accepted);\n                    if (this.user.receiveResponse) {\n                        this.user.receiveResponse(response);\n                    }\n                    return;\n                }\n                // When in either the \"Calling\" or \"Proceeding\" states, reception of\n                // a response with status code from 300-699 MUST cause the client\n                // transaction to transition to \"Completed\". The client transaction\n                // MUST pass the received response up to the TU, and the client\n                // transaction MUST generate an ACK request, even if the transport is\n                // reliable (guidelines for constructing the ACK from the response\n                // are given in Section 17.1.1.3), and then pass the ACK to the\n                // transport layer for transmission. The ACK MUST be sent to the\n                // same address, port, and transport to which the original request was sent.\n                // https://tools.ietf.org/html/rfc6026#section-8.4\n                if (statusCode >= 300 && statusCode <= 699) {\n                    this.stateTransition(transaction_state_1.TransactionState.Completed);\n                    this.ack(response);\n                    if (this.user.receiveResponse) {\n                        this.user.receiveResponse(response);\n                    }\n                    return;\n                }\n                break;\n            case transaction_state_1.TransactionState.Accepted:\n                // The purpose of the \"Accepted\" state is to allow the client\n                // transaction to continue to exist to receive, and pass to the TU,\n                // any retransmissions of the 2xx response and any additional 2xx\n                // responses from other branches of the INVITE if it forked\n                // downstream. Timer M reflects the amount of time that the\n                // transaction user will wait for such messages.\n                //\n                // Any 2xx responses that match this client transaction and that are\n                // received while in the \"Accepted\" state MUST be passed up to the\n                // TU. The client transaction MUST NOT generate an ACK to the 2xx\n                // response. The client transaction takes no further action.\n                // https://tools.ietf.org/html/rfc6026#section-8.4\n                if (statusCode >= 200 && statusCode <= 299) {\n                    // NOTE: This implementation herein is intentionally not RFC compliant.\n                    // While the first 2xx response for a given branch is passed up to the TU,\n                    // retransmissions of 2xx responses are absorbed and the ACK associated\n                    // with the original response is resent. This approach is taken because\n                    // our current transaction users are not currently in a good position to\n                    // deal with 2xx retransmission. This SHOULD NOT cause any compliance issues - ;)\n                    //\n                    // If we don't have a cache hit, pass the response to the TU.\n                    if (!this.ackRetransmissionCache.has(response.toTag)) {\n                        this.ackRetransmissionCache.set(response.toTag, undefined); // Prime the ACK cache\n                        if (this.user.receiveResponse) {\n                            this.user.receiveResponse(response);\n                        }\n                        return;\n                    }\n                    // If we have a cache hit, try pulling the ACK from cache and retransmitting it.\n                    var ack = this.ackRetransmissionCache.get(response.toTag);\n                    if (ack) {\n                        this.send(ack.toString()).catch(function (error) {\n                            _this.logTransportError(error, \"Failed to send retransmission of ACK to 2xx response.\");\n                        });\n                        return;\n                    }\n                    // If an ACK was not found in cache then we have received a retransmitted 2xx\n                    // response before the TU responded to the original response (we don't have an ACK yet).\n                    // So discard this response under the assumption that the TU will eventually\n                    // get us a ACK for the original response.\n                    return;\n                }\n                break;\n            case transaction_state_1.TransactionState.Completed:\n                // Any retransmissions of a response with status code 300-699 that\n                // are received while in the \"Completed\" state MUST cause the ACK to\n                // be re-passed to the transport layer for retransmission, but the\n                // newly received response MUST NOT be passed up to the TU.\n                // https://tools.ietf.org/html/rfc6026#section-8.4\n                if (statusCode >= 300 && statusCode <= 699) {\n                    this.ack(response);\n                    return;\n                }\n                break;\n            case transaction_state_1.TransactionState.Terminated:\n                break;\n            default:\n                throw new Error(\"Invalid state \" + this.state);\n        }\n        // Any response received that does not match an existing client\n        // transaction state machine is simply dropped. (Implementations are,\n        // of course, free to log or do other implementation-specific things\n        // with such responses, but the implementer should be sure to consider\n        // the impact of large numbers of malicious stray responses.)\n        // https://tools.ietf.org/html/rfc6026#section-7.2\n        var message = \"Received unexpected \" + statusCode + \" response while in state \" + this.state + \".\";\n        this.logger.warn(message);\n        return;\n    };\n    /**\n     * The client transaction SHOULD inform the TU that a transport failure\n     * has occurred, and the client transaction SHOULD transition directly\n     * to the \"Terminated\" state.  The TU will handle the failover\n     * mechanisms described in [4].\n     * https://tools.ietf.org/html/rfc3261#section-17.1.4\n     * @param error - The error.\n     */\n    InviteClientTransaction.prototype.onTransportError = function (error) {\n        if (this.user.onTransportError) {\n            this.user.onTransportError(error);\n        }\n        this.stateTransition(transaction_state_1.TransactionState.Terminated, true);\n    };\n    /** For logging. */\n    InviteClientTransaction.prototype.typeToString = function () {\n        return \"INVITE client transaction\";\n    };\n    InviteClientTransaction.prototype.ack = function (response) {\n        var _this = this;\n        // The ACK request constructed by the client transaction MUST contain\n        // values for the Call-ID, From, and Request-URI that are equal to the\n        // values of those header fields in the request passed to the transport\n        // by the client transaction (call this the \"original request\"). The To\n        // header field in the ACK MUST equal the To header field in the\n        // response being acknowledged, and therefore will usually differ from\n        // the To header field in the original request by the addition of the\n        // tag parameter. The ACK MUST contain a single Via header field, and\n        // this MUST be equal to the top Via header field of the original\n        // request. The CSeq header field in the ACK MUST contain the same\n        // value for the sequence number as was present in the original request,\n        // but the method parameter MUST be equal to \"ACK\".\n        //\n        // If the INVITE request whose response is being acknowledged had Route\n        // header fields, those header fields MUST appear in the ACK. This is\n        // to ensure that the ACK can be routed properly through any downstream\n        // stateless proxies.\n        // https://tools.ietf.org/html/rfc3261#section-17.1.1.3\n        var ruri = this.request.ruri;\n        var callId = this.request.callId;\n        var cseq = this.request.cseq;\n        var from = this.request.getHeader(\"from\");\n        var to = response.getHeader(\"to\");\n        var via = this.request.getHeader(\"via\");\n        var route = this.request.getHeader(\"route\");\n        if (!from) {\n            throw new Error(\"From undefined.\");\n        }\n        if (!to) {\n            throw new Error(\"To undefined.\");\n        }\n        if (!via) {\n            throw new Error(\"Via undefined.\");\n        }\n        var ack = \"ACK \" + ruri + \" SIP/2.0\\r\\n\";\n        if (route) {\n            ack += \"Route: \" + route + \"\\r\\n\";\n        }\n        ack += \"Via: \" + via + \"\\r\\n\";\n        ack += \"To: \" + to + \"\\r\\n\";\n        ack += \"From: \" + from + \"\\r\\n\";\n        ack += \"Call-ID: \" + callId + \"\\r\\n\";\n        ack += \"CSeq: \" + cseq + \" ACK\\r\\n\";\n        ack += \"Max-Forwards: 70\\r\\n\";\n        ack += \"Content-Length: 0\\r\\n\\r\\n\";\n        // TOOO: \"User-Agent\" header\n        this.send(ack).catch(function (error) {\n            _this.logTransportError(error, \"Failed to send ACK to non-2xx response.\");\n        });\n        return;\n    };\n    /**\n     * Execute a state transition.\n     * @param newState - New state.\n     */\n    InviteClientTransaction.prototype.stateTransition = function (newState, dueToTransportError) {\n        var _this = this;\n        if (dueToTransportError === void 0) { dueToTransportError = false; }\n        // Assert valid state transitions.\n        var invalidStateTransition = function () {\n            throw new Error(\"Invalid state transition from \" + _this.state + \" to \" + newState);\n        };\n        switch (newState) {\n            case transaction_state_1.TransactionState.Calling:\n                invalidStateTransition();\n                break;\n            case transaction_state_1.TransactionState.Proceeding:\n                if (this.state !== transaction_state_1.TransactionState.Calling) {\n                    invalidStateTransition();\n                }\n                break;\n            case transaction_state_1.TransactionState.Accepted:\n            case transaction_state_1.TransactionState.Completed:\n                if (this.state !== transaction_state_1.TransactionState.Calling &&\n                    this.state !== transaction_state_1.TransactionState.Proceeding) {\n                    invalidStateTransition();\n                }\n                break;\n            case transaction_state_1.TransactionState.Terminated:\n                if (this.state !== transaction_state_1.TransactionState.Calling &&\n                    this.state !== transaction_state_1.TransactionState.Accepted &&\n                    this.state !== transaction_state_1.TransactionState.Completed) {\n                    if (!dueToTransportError) {\n                        invalidStateTransition();\n                    }\n                }\n                break;\n            default:\n                invalidStateTransition();\n        }\n        // While not spelled out in the RFC, Timer B is the maximum amount of time that a sender\n        // will wait for an INVITE message to be acknowledged (a SIP response message is received).\n        // So Timer B should be cleared when the transaction state proceeds from \"Calling\".\n        if (this.B) {\n            clearTimeout(this.B);\n            this.B = undefined;\n        }\n        if (newState === transaction_state_1.TransactionState.Proceeding) {\n            // Timers have no effect on \"Proceeding\" state.\n            // In the \"Proceeding\" state, the client transaction\n            // SHOULD NOT retransmit the request any longer.\n            // https://tools.ietf.org/html/rfc3261#section-17.1.1.2\n        }\n        // The client transaction MUST start Timer D when it enters the \"Completed\" state\n        // for any reason, with a value of at least 32 seconds for unreliable transports,\n        // and a value of zero seconds for reliable transports.\n        // https://tools.ietf.org/html/rfc6026#section-8.4\n        if (newState === transaction_state_1.TransactionState.Completed) {\n            this.D = setTimeout(function () { return _this.timer_D(); }, timers_1.Timers.TIMER_D);\n        }\n        // The client transaction MUST transition to the \"Accepted\" state,\n        // and Timer M MUST be started with a value of 64*T1.\n        // https://tools.ietf.org/html/rfc6026#section-8.4\n        if (newState === transaction_state_1.TransactionState.Accepted) {\n            this.M = setTimeout(function () { return _this.timer_M(); }, timers_1.Timers.TIMER_M);\n        }\n        // Once the transaction is in the \"Terminated\" state, it MUST be destroyed immediately.\n        // https://tools.ietf.org/html/rfc6026#section-8.7\n        if (newState === transaction_state_1.TransactionState.Terminated) {\n            this.dispose();\n        }\n        // Update state.\n        this.setState(newState);\n    };\n    /**\n     * When timer A fires, the client transaction MUST retransmit the\n     * request by passing it to the transport layer, and MUST reset the\n     * timer with a value of 2*T1.\n     * When timer A fires 2*T1 seconds later, the request MUST be\n     * retransmitted again (assuming the client transaction is still in this\n     * state). This process MUST continue so that the request is\n     * retransmitted with intervals that double after each transmission.\n     * These retransmissions SHOULD only be done while the client\n     * transaction is in the \"Calling\" state.\n     * https://tools.ietf.org/html/rfc3261#section-17.1.1.2\n     */\n    InviteClientTransaction.prototype.timer_A = function () {\n        // TODO\n    };\n    /**\n     * If the client transaction is still in the \"Calling\" state when timer\n     * B fires, the client transaction SHOULD inform the TU that a timeout\n     * has occurred.  The client transaction MUST NOT generate an ACK.\n     * https://tools.ietf.org/html/rfc3261#section-17.1.1.2\n     */\n    InviteClientTransaction.prototype.timer_B = function () {\n        this.logger.debug(\"Timer B expired for INVITE client transaction \" + this.id + \".\");\n        if (this.state === transaction_state_1.TransactionState.Calling) {\n            this.onRequestTimeout();\n            this.stateTransition(transaction_state_1.TransactionState.Terminated);\n        }\n    };\n    /**\n     * If Timer D fires while the client transaction is in the \"Completed\" state,\n     * the client transaction MUST move to the \"Terminated\" state.\n     * https://tools.ietf.org/html/rfc6026#section-8.4\n     */\n    InviteClientTransaction.prototype.timer_D = function () {\n        this.logger.debug(\"Timer D expired for INVITE client transaction \" + this.id + \".\");\n        if (this.state === transaction_state_1.TransactionState.Completed) {\n            this.stateTransition(transaction_state_1.TransactionState.Terminated);\n        }\n    };\n    /**\n     * If Timer M fires while the client transaction is in the \"Accepted\"\n     * state, the client transaction MUST move to the \"Terminated\" state.\n     * https://tools.ietf.org/html/rfc6026#section-8.4\n     */\n    InviteClientTransaction.prototype.timer_M = function () {\n        this.logger.debug(\"Timer M expired for INVITE client transaction \" + this.id + \".\");\n        if (this.state === transaction_state_1.TransactionState.Accepted) {\n            this.stateTransition(transaction_state_1.TransactionState.Terminated);\n        }\n    };\n    return InviteClientTransaction;\n}(client_transaction_1.ClientTransaction));\nexports.InviteClientTransaction = InviteClientTransaction;\n\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Transaction state.\n * @public\n */\nvar TransactionState;\n(function (TransactionState) {\n    TransactionState[\"Accepted\"] = \"Accepted\";\n    TransactionState[\"Calling\"] = \"Calling\";\n    TransactionState[\"Completed\"] = \"Completed\";\n    TransactionState[\"Confirmed\"] = \"Confirmed\";\n    TransactionState[\"Proceeding\"] = \"Proceeding\";\n    TransactionState[\"Terminated\"] = \"Terminated\";\n    TransactionState[\"Trying\"] = \"Trying\";\n})(TransactionState = exports.TransactionState || (exports.TransactionState = {}));\n\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar messages_1 = __webpack_require__(5);\nvar timers_1 = __webpack_require__(27);\nvar server_transaction_1 = __webpack_require__(39);\nvar transaction_state_1 = __webpack_require__(37);\n/**\n * INVITE Server Transaction.\n * @remarks\n * https://tools.ietf.org/html/rfc3261#section-17.2.1\n * @public\n */\nvar InviteServerTransaction = /** @class */ (function (_super) {\n    tslib_1.__extends(InviteServerTransaction, _super);\n    /**\n     * Constructor.\n     * Upon construction, a \"100 Trying\" reply will be immediately sent.\n     * After construction the transaction will be in the \"proceeding\" state and the transaction\n     * `id` will equal the branch parameter set in the Via header of the incoming request.\n     * https://tools.ietf.org/html/rfc3261#section-17.2.1\n     * @param request - Incoming INVITE request from the transport.\n     * @param transport - The transport.\n     * @param user - The transaction user.\n     */\n    function InviteServerTransaction(request, transport, user) {\n        return _super.call(this, request, transport, user, transaction_state_1.TransactionState.Proceeding, \"sip.transaction.ist\") || this;\n    }\n    /**\n     * Destructor.\n     */\n    InviteServerTransaction.prototype.dispose = function () {\n        this.stopProgressExtensionTimer();\n        if (this.H) {\n            clearTimeout(this.H);\n            this.H = undefined;\n        }\n        if (this.I) {\n            clearTimeout(this.I);\n            this.I = undefined;\n        }\n        if (this.L) {\n            clearTimeout(this.L);\n            this.L = undefined;\n        }\n        _super.prototype.dispose.call(this);\n    };\n    Object.defineProperty(InviteServerTransaction.prototype, \"kind\", {\n        /** Transaction kind. Deprecated. */\n        get: function () {\n            return \"ist\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Receive requests from transport matching this transaction.\n     * @param request - Request matching this transaction.\n     */\n    InviteServerTransaction.prototype.receiveRequest = function (request) {\n        var _this = this;\n        switch (this.state) {\n            case transaction_state_1.TransactionState.Proceeding:\n                // If a request retransmission is received while in the \"Proceeding\" state, the most\n                // recent provisional response that was received from the TU MUST be passed to the\n                // transport layer for retransmission.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.1\n                if (request.method === messages_1.C.INVITE) {\n                    if (this.lastProvisionalResponse) {\n                        this.send(this.lastProvisionalResponse).catch(function (error) {\n                            _this.logTransportError(error, \"Failed to send retransmission of provisional response.\");\n                        });\n                    }\n                    return;\n                }\n                break;\n            case transaction_state_1.TransactionState.Accepted:\n                // While in the \"Accepted\" state, any retransmissions of the INVITE\n                // received will match this transaction state machine and will be\n                // absorbed by the machine without changing its state. These\n                // retransmissions are not passed onto the TU.\n                // https://tools.ietf.org/html/rfc6026#section-7.1\n                if (request.method === messages_1.C.INVITE) {\n                    return;\n                }\n                break;\n            case transaction_state_1.TransactionState.Completed:\n                // Furthermore, while in the \"Completed\" state, if a request retransmission is\n                // received, the server SHOULD pass the response to the transport for retransmission.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.1\n                if (request.method === messages_1.C.INVITE) {\n                    if (!this.lastFinalResponse) {\n                        throw new Error(\"Last final response undefined.\");\n                    }\n                    this.send(this.lastFinalResponse).catch(function (error) {\n                        _this.logTransportError(error, \"Failed to send retransmission of final response.\");\n                    });\n                    return;\n                }\n                // If an ACK is received while the server transaction is in the \"Completed\" state,\n                // the server transaction MUST transition to the \"Confirmed\" state.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.1\n                if (request.method === messages_1.C.ACK) {\n                    this.stateTransition(transaction_state_1.TransactionState.Confirmed);\n                    return;\n                }\n                break;\n            case transaction_state_1.TransactionState.Confirmed:\n                // The purpose of the \"Confirmed\" state is to absorb any additional ACK messages that arrive,\n                // triggered from retransmissions of the final response.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.1\n                if (request.method === messages_1.C.INVITE || request.method === messages_1.C.ACK) {\n                    return;\n                }\n                break;\n            case transaction_state_1.TransactionState.Terminated:\n                // For good measure absorb any additional messages that arrive (should not happen).\n                if (request.method === messages_1.C.INVITE || request.method === messages_1.C.ACK) {\n                    return;\n                }\n                break;\n            default:\n                throw new Error(\"Invalid state \" + this.state);\n        }\n        var message = \"INVITE server transaction received unexpected \" + request.method + \" request while in state \" + this.state + \".\";\n        this.logger.warn(message);\n        return;\n    };\n    /**\n     * Receive responses from TU for this transaction.\n     * @param statusCode - Status code of response.\n     * @param response - Response.\n     */\n    InviteServerTransaction.prototype.receiveResponse = function (statusCode, response) {\n        var _this = this;\n        if (statusCode < 100 || statusCode > 699) {\n            throw new Error(\"Invalid status code \" + statusCode);\n        }\n        switch (this.state) {\n            case transaction_state_1.TransactionState.Proceeding:\n                // The TU passes any number of provisional responses to the server\n                // transaction. So long as the server transaction is in the\n                // \"Proceeding\" state, each of these MUST be passed to the transport\n                // layer for transmission. They are not sent reliably by the\n                // transaction layer (they are not retransmitted by it) and do not cause\n                // a change in the state of the server transaction.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.1\n                if (statusCode >= 100 && statusCode <= 199) {\n                    this.lastProvisionalResponse = response;\n                    // Start the progress extension timer only for a non-100 provisional response.\n                    if (statusCode > 100) {\n                        this.startProgressExtensionTimer(); // FIXME: remove\n                    }\n                    this.send(response).catch(function (error) {\n                        _this.logTransportError(error, \"Failed to send 1xx response.\");\n                    });\n                    return;\n                }\n                // If, while in the \"Proceeding\" state, the TU passes a 2xx response\n                // to the server transaction, the server transaction MUST pass this\n                // response to the transport layer for transmission. It is not\n                // retransmitted by the server transaction; retransmissions of 2xx\n                // responses are handled by the TU. The server transaction MUST then\n                // transition to the \"Accepted\" state.\n                // https://tools.ietf.org/html/rfc6026#section-8.5\n                if (statusCode >= 200 && statusCode <= 299) {\n                    this.lastFinalResponse = response;\n                    this.stateTransition(transaction_state_1.TransactionState.Accepted);\n                    this.send(response).catch(function (error) {\n                        _this.logTransportError(error, \"Failed to send 2xx response.\");\n                    });\n                    return;\n                }\n                // While in the \"Proceeding\" state, if the TU passes a response with\n                // status code from 300 to 699 to the server transaction, the response\n                // MUST be passed to the transport layer for transmission, and the state\n                // machine MUST enter the \"Completed\" state.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.1\n                if (statusCode >= 300 && statusCode <= 699) {\n                    this.lastFinalResponse = response;\n                    this.stateTransition(transaction_state_1.TransactionState.Completed);\n                    this.send(response).catch(function (error) {\n                        _this.logTransportError(error, \"Failed to send non-2xx final response.\");\n                    });\n                    return;\n                }\n                break;\n            case transaction_state_1.TransactionState.Accepted:\n                // While in the \"Accepted\" state, if the TU passes a 2xx response,\n                // the server transaction MUST pass the response to the transport layer for transmission.\n                // https://tools.ietf.org/html/rfc6026#section-8.7\n                if (statusCode >= 200 && statusCode <= 299) {\n                    this.send(response).catch(function (error) {\n                        _this.logTransportError(error, \"Failed to send 2xx response.\");\n                    });\n                    return;\n                }\n                break;\n            case transaction_state_1.TransactionState.Completed:\n                break;\n            case transaction_state_1.TransactionState.Confirmed:\n                break;\n            case transaction_state_1.TransactionState.Terminated:\n                break;\n            default:\n                throw new Error(\"Invalid state \" + this.state);\n        }\n        var message = \"INVITE server transaction received unexpected \" + statusCode + \" response from TU while in state \" + this.state + \".\";\n        this.logger.error(message);\n        throw new Error(message);\n    };\n    /**\n     * Retransmit the last 2xx response. This is a noop if not in the \"accepted\" state.\n     */\n    InviteServerTransaction.prototype.retransmitAcceptedResponse = function () {\n        var _this = this;\n        if (this.state === transaction_state_1.TransactionState.Accepted && this.lastFinalResponse) {\n            this.send(this.lastFinalResponse).catch(function (error) {\n                _this.logTransportError(error, \"Failed to send 2xx response.\");\n            });\n        }\n    };\n    /**\n     * First, the procedures in [4] are followed, which attempt to deliver the response to a backup.\n     * If those should all fail, based on the definition of failure in [4], the server transaction SHOULD\n     * inform the TU that a failure has occurred, and MUST remain in the current state.\n     * https://tools.ietf.org/html/rfc6026#section-8.8\n     */\n    InviteServerTransaction.prototype.onTransportError = function (error) {\n        if (this.user.onTransportError) {\n            this.user.onTransportError(error);\n        }\n    };\n    /** For logging. */\n    InviteServerTransaction.prototype.typeToString = function () {\n        return \"INVITE server transaction\";\n    };\n    /**\n     * Execute a state transition.\n     * @param newState - New state.\n     */\n    InviteServerTransaction.prototype.stateTransition = function (newState) {\n        var _this = this;\n        // Assert valid state transitions.\n        var invalidStateTransition = function () {\n            throw new Error(\"Invalid state transition from \" + _this.state + \" to \" + newState);\n        };\n        switch (newState) {\n            case transaction_state_1.TransactionState.Proceeding:\n                invalidStateTransition();\n                break;\n            case transaction_state_1.TransactionState.Accepted:\n            case transaction_state_1.TransactionState.Completed:\n                if (this.state !== transaction_state_1.TransactionState.Proceeding) {\n                    invalidStateTransition();\n                }\n                break;\n            case transaction_state_1.TransactionState.Confirmed:\n                if (this.state !== transaction_state_1.TransactionState.Completed) {\n                    invalidStateTransition();\n                }\n                break;\n            case transaction_state_1.TransactionState.Terminated:\n                if (this.state !== transaction_state_1.TransactionState.Accepted &&\n                    this.state !== transaction_state_1.TransactionState.Completed &&\n                    this.state !== transaction_state_1.TransactionState.Confirmed) {\n                    invalidStateTransition();\n                }\n                break;\n            default:\n                invalidStateTransition();\n        }\n        // On any state transition, stop resending provisional responses\n        this.stopProgressExtensionTimer();\n        // The purpose of the \"Accepted\" state is to absorb retransmissions of an accepted INVITE request.\n        // Any such retransmissions are absorbed entirely within the server transaction.\n        // They are not passed up to the TU since any downstream UAS cores that accepted the request have\n        // taken responsibility for reliability and will already retransmit their 2xx responses if necessary.\n        // https://tools.ietf.org/html/rfc6026#section-8.7\n        if (newState === transaction_state_1.TransactionState.Accepted) {\n            this.L = setTimeout(function () { return _this.timer_L(); }, timers_1.Timers.TIMER_L);\n        }\n        // When the \"Completed\" state is entered, timer H MUST be set to fire in 64*T1 seconds for all transports.\n        // Timer H determines when the server transaction abandons retransmitting the response.\n        // If an ACK is received while the server transaction is in the \"Completed\" state,\n        // the server transaction MUST transition to the \"Confirmed\" state.\n        // https://tools.ietf.org/html/rfc3261#section-17.2.1\n        if (newState === transaction_state_1.TransactionState.Completed) {\n            // FIXME: Missing timer G for unreliable transports.\n            this.H = setTimeout(function () { return _this.timer_H(); }, timers_1.Timers.TIMER_H);\n        }\n        // The purpose of the \"Confirmed\" state is to absorb any additional ACK messages that arrive,\n        // triggered from retransmissions of the final response. When this state is entered, timer I\n        // is set to fire in T4 seconds for unreliable transports, and zero seconds for reliable\n        // transports. Once timer I fires, the server MUST transition to the \"Terminated\" state.\n        // https://tools.ietf.org/html/rfc3261#section-17.2.1\n        if (newState === transaction_state_1.TransactionState.Confirmed) {\n            // FIXME: This timer is not getting set correctly for unreliable transports.\n            this.I = setTimeout(function () { return _this.timer_I(); }, timers_1.Timers.TIMER_I);\n        }\n        // Once the transaction is in the \"Terminated\" state, it MUST be destroyed immediately.\n        // https://tools.ietf.org/html/rfc6026#section-8.7\n        if (newState === transaction_state_1.TransactionState.Terminated) {\n            this.dispose();\n        }\n        // Update state.\n        this.setState(newState);\n    };\n    /**\n     * FIXME: UAS Provisional Retransmission Timer. See RFC 3261 Section 13.3.1.1\n     * This is in the wrong place. This is not a transaction level thing. It's a UAS level thing.\n     */\n    InviteServerTransaction.prototype.startProgressExtensionTimer = function () {\n        var _this = this;\n        // Start the progress extension timer only for the first non-100 provisional response.\n        if (this.progressExtensionTimer === undefined) {\n            this.progressExtensionTimer = setInterval(function () {\n                _this.logger.debug(\"Progress extension timer expired for INVITE server transaction \" + _this.id + \".\");\n                if (!_this.lastProvisionalResponse) {\n                    throw new Error(\"Last provisional response undefined.\");\n                }\n                _this.send(_this.lastProvisionalResponse).catch(function (error) {\n                    _this.logTransportError(error, \"Failed to send retransmission of provisional response.\");\n                });\n            }, timers_1.Timers.PROVISIONAL_RESPONSE_INTERVAL);\n        }\n    };\n    /**\n     * FIXME: UAS Provisional Retransmission Timer id. See RFC 3261 Section 13.3.1.1\n     * This is in the wrong place. This is not a transaction level thing. It's a UAS level thing.\n     */\n    InviteServerTransaction.prototype.stopProgressExtensionTimer = function () {\n        if (this.progressExtensionTimer !== undefined) {\n            clearInterval(this.progressExtensionTimer);\n            this.progressExtensionTimer = undefined;\n        }\n    };\n    /**\n     * While in the \"Proceeding\" state, if the TU passes a response with status code\n     * from 300 to 699 to the server transaction, the response MUST be passed to the\n     * transport layer for transmission, and the state machine MUST enter the \"Completed\" state.\n     * For unreliable transports, timer G is set to fire in T1 seconds, and is not set to fire for\n     * reliable transports. If timer G fires, the response is passed to the transport layer once\n     * more for retransmission, and timer G is set to fire in MIN(2*T1, T2) seconds. From then on,\n     * when timer G fires, the response is passed to the transport again for transmission, and\n     * timer G is reset with a value that doubles, unless that value exceeds T2, in which case\n     * it is reset with the value of T2.\n     * https://tools.ietf.org/html/rfc3261#section-17.2.1\n     */\n    InviteServerTransaction.prototype.timer_G = function () {\n        // TODO\n    };\n    /**\n     * If timer H fires while in the \"Completed\" state, it implies that the ACK was never received.\n     * In this case, the server transaction MUST transition to the \"Terminated\" state, and MUST\n     * indicate to the TU that a transaction failure has occurred.\n     * https://tools.ietf.org/html/rfc3261#section-17.2.1\n     */\n    InviteServerTransaction.prototype.timer_H = function () {\n        this.logger.debug(\"Timer H expired for INVITE server transaction \" + this.id + \".\");\n        if (this.state === transaction_state_1.TransactionState.Completed) {\n            this.logger.warn(\"ACK to negative final response was never received, terminating transaction.\");\n            this.stateTransition(transaction_state_1.TransactionState.Terminated);\n        }\n    };\n    /**\n     * Once timer I fires, the server MUST transition to the \"Terminated\" state.\n     * https://tools.ietf.org/html/rfc3261#section-17.2.1\n     */\n    InviteServerTransaction.prototype.timer_I = function () {\n        this.logger.debug(\"Timer I expired for INVITE server transaction \" + this.id + \".\");\n        this.stateTransition(transaction_state_1.TransactionState.Terminated);\n    };\n    /**\n     * When Timer L fires and the state machine is in the \"Accepted\" state, the machine MUST\n     * transition to the \"Terminated\" state. Once the transaction is in the \"Terminated\" state,\n     * it MUST be destroyed immediately. Timer L reflects the amount of time the server\n     * transaction could receive 2xx responses for retransmission from the\n     * TU while it is waiting to receive an ACK.\n     * https://tools.ietf.org/html/rfc6026#section-7.1\n     * https://tools.ietf.org/html/rfc6026#section-8.7\n     */\n    InviteServerTransaction.prototype.timer_L = function () {\n        this.logger.debug(\"Timer L expired for INVITE server transaction \" + this.id + \".\");\n        if (this.state === transaction_state_1.TransactionState.Accepted) {\n            this.stateTransition(transaction_state_1.TransactionState.Terminated);\n        }\n    };\n    return InviteServerTransaction;\n}(server_transaction_1.ServerTransaction));\nexports.InviteServerTransaction = InviteServerTransaction;\n\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar transaction_1 = __webpack_require__(30);\n/**\n * Server Transaction.\n * @remarks\n * The server transaction is responsible for the delivery of requests to\n * the TU and the reliable transmission of responses.  It accomplishes\n * this through a state machine.  Server transactions are created by the\n * core when a request is received, and transaction handling is desired\n * for that request (this is not always the case).\n * https://tools.ietf.org/html/rfc3261#section-17.2\n * @public\n */\nvar ServerTransaction = /** @class */ (function (_super) {\n    tslib_1.__extends(ServerTransaction, _super);\n    function ServerTransaction(_request, transport, user, state, loggerCategory) {\n        var _this = _super.call(this, transport, user, _request.viaBranch, state, loggerCategory) || this;\n        _this._request = _request;\n        _this.user = user;\n        return _this;\n    }\n    Object.defineProperty(ServerTransaction.prototype, \"request\", {\n        /** The incoming request the transaction handling. */\n        get: function () {\n            return this._request;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ServerTransaction;\n}(transaction_1.Transaction));\nexports.ServerTransaction = ServerTransaction;\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar timers_1 = __webpack_require__(27);\nvar client_transaction_1 = __webpack_require__(29);\nvar transaction_state_1 = __webpack_require__(37);\n/**\n * Non-INVITE Client Transaction.\n * @remarks\n * Non-INVITE transactions do not make use of ACK.\n * They are simple request-response interactions.\n * https://tools.ietf.org/html/rfc3261#section-17.1.2\n * @public\n */\nvar NonInviteClientTransaction = /** @class */ (function (_super) {\n    tslib_1.__extends(NonInviteClientTransaction, _super);\n    /**\n     * Constructor\n     * Upon construction, the outgoing request's Via header is updated by calling `setViaHeader`.\n     * Then `toString` is called on the outgoing request and the message is sent via the transport.\n     * After construction the transaction will be in the \"calling\" state and the transaction id\n     * will equal the branch parameter set in the Via header of the outgoing request.\n     * https://tools.ietf.org/html/rfc3261#section-17.1.2\n     * @param request - The outgoing Non-INVITE request.\n     * @param transport - The transport.\n     * @param user - The transaction user.\n     */\n    function NonInviteClientTransaction(request, transport, user) {\n        var _this = _super.call(this, request, transport, user, transaction_state_1.TransactionState.Trying, \"sip.transaction.nict\") || this;\n        // FIXME: Timer E for unreliable transports not implemented.\n        //\n        // The \"Trying\" state is entered when the TU initiates a new client\n        // transaction with a request.  When entering this state, the client\n        // transaction SHOULD set timer F to fire in 64*T1 seconds. The request\n        // MUST be passed to the transport layer for transmission.\n        // https://tools.ietf.org/html/rfc3261#section-17.1.2.2\n        _this.F = setTimeout(function () { return _this.timer_F(); }, timers_1.Timers.TIMER_F);\n        _this.send(request.toString()).catch(function (error) {\n            _this.logTransportError(error, \"Failed to send initial outgoing request.\");\n        });\n        return _this;\n    }\n    /**\n     * Destructor.\n     */\n    NonInviteClientTransaction.prototype.dispose = function () {\n        if (this.F) {\n            clearTimeout(this.F);\n            this.F = undefined;\n        }\n        if (this.K) {\n            clearTimeout(this.K);\n            this.K = undefined;\n        }\n        _super.prototype.dispose.call(this);\n    };\n    Object.defineProperty(NonInviteClientTransaction.prototype, \"kind\", {\n        /** Transaction kind. Deprecated. */\n        get: function () {\n            return \"nict\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Handler for incoming responses from the transport which match this transaction.\n     * @param response - The incoming response.\n     */\n    NonInviteClientTransaction.prototype.receiveResponse = function (response) {\n        var statusCode = response.statusCode;\n        if (!statusCode || statusCode < 100 || statusCode > 699) {\n            throw new Error(\"Invalid status code \" + statusCode);\n        }\n        switch (this.state) {\n            case transaction_state_1.TransactionState.Trying:\n                // If a provisional response is received while in the \"Trying\" state, the\n                // response MUST be passed to the TU, and then the client transaction\n                // SHOULD move to the \"Proceeding\" state.\n                // https://tools.ietf.org/html/rfc3261#section-17.1.2.2\n                if (statusCode >= 100 && statusCode <= 199) {\n                    this.stateTransition(transaction_state_1.TransactionState.Proceeding);\n                    if (this.user.receiveResponse) {\n                        this.user.receiveResponse(response);\n                    }\n                    return;\n                }\n                // If a final response (status codes 200-699) is received while in the\n                // \"Trying\" state, the response MUST be passed to the TU, and the\n                // client transaction MUST transition to the \"Completed\" state.\n                // https://tools.ietf.org/html/rfc3261#section-17.1.2.2\n                if (statusCode >= 200 && statusCode <= 699) {\n                    this.stateTransition(transaction_state_1.TransactionState.Completed);\n                    if (statusCode === 408) {\n                        this.onRequestTimeout();\n                        return;\n                    }\n                    if (this.user.receiveResponse) {\n                        this.user.receiveResponse(response);\n                    }\n                    return;\n                }\n                break;\n            case transaction_state_1.TransactionState.Proceeding:\n                // If a provisional response is received while in the \"Proceeding\" state,\n                // the response MUST be passed to the TU. (From Figure 6)\n                // https://tools.ietf.org/html/rfc3261#section-17.1.2.2\n                if (statusCode >= 100 && statusCode <= 199) {\n                    if (this.user.receiveResponse) {\n                        return this.user.receiveResponse(response);\n                    }\n                }\n                // If a final response (status codes 200-699) is received while in the\n                // \"Proceeding\" state, the response MUST be passed to the TU, and the\n                // client transaction MUST transition to the \"Completed\" state.\n                // https://tools.ietf.org/html/rfc3261#section-17.1.2.2\n                if (statusCode >= 200 && statusCode <= 699) {\n                    this.stateTransition(transaction_state_1.TransactionState.Completed);\n                    if (statusCode === 408) {\n                        this.onRequestTimeout();\n                        return;\n                    }\n                    if (this.user.receiveResponse) {\n                        this.user.receiveResponse(response);\n                    }\n                    return;\n                }\n            case transaction_state_1.TransactionState.Completed:\n                // The \"Completed\" state exists to buffer any additional response\n                // retransmissions that may be received (which is why the client\n                // transaction remains there only for unreliable transports).\n                // https://tools.ietf.org/html/rfc3261#section-17.1.2.2\n                return;\n            case transaction_state_1.TransactionState.Terminated:\n                // For good measure just absorb additional response retransmissions.\n                return;\n            default:\n                throw new Error(\"Invalid state \" + this.state);\n        }\n        var message = \"Non-INVITE client transaction received unexpected \" + statusCode + \" response while in state \" + this.state + \".\";\n        this.logger.warn(message);\n        return;\n    };\n    /**\n     * The client transaction SHOULD inform the TU that a transport failure has occurred,\n     * and the client transaction SHOULD transition directly to the \"Terminated\" state.\n     * The TU will handle the fail over mechanisms described in [4].\n     * https://tools.ietf.org/html/rfc3261#section-17.1.4\n     * @param error - Transport error\n     */\n    NonInviteClientTransaction.prototype.onTransportError = function (error) {\n        if (this.user.onTransportError) {\n            this.user.onTransportError(error);\n        }\n        this.stateTransition(transaction_state_1.TransactionState.Terminated, true);\n    };\n    /** For logging. */\n    NonInviteClientTransaction.prototype.typeToString = function () {\n        return \"non-INVITE client transaction\";\n    };\n    /**\n     * Execute a state transition.\n     * @param newState - New state.\n     */\n    NonInviteClientTransaction.prototype.stateTransition = function (newState, dueToTransportError) {\n        var _this = this;\n        if (dueToTransportError === void 0) { dueToTransportError = false; }\n        // Assert valid state transitions.\n        var invalidStateTransition = function () {\n            throw new Error(\"Invalid state transition from \" + _this.state + \" to \" + newState);\n        };\n        switch (newState) {\n            case transaction_state_1.TransactionState.Trying:\n                invalidStateTransition();\n                break;\n            case transaction_state_1.TransactionState.Proceeding:\n                if (this.state !== transaction_state_1.TransactionState.Trying) {\n                    invalidStateTransition();\n                }\n                break;\n            case transaction_state_1.TransactionState.Completed:\n                if (this.state !== transaction_state_1.TransactionState.Trying &&\n                    this.state !== transaction_state_1.TransactionState.Proceeding) {\n                    invalidStateTransition();\n                }\n                break;\n            case transaction_state_1.TransactionState.Terminated:\n                if (this.state !== transaction_state_1.TransactionState.Trying &&\n                    this.state !== transaction_state_1.TransactionState.Proceeding &&\n                    this.state !== transaction_state_1.TransactionState.Completed) {\n                    if (!dueToTransportError) {\n                        invalidStateTransition();\n                    }\n                }\n                break;\n            default:\n                invalidStateTransition();\n        }\n        // Once the client transaction enters the \"Completed\" state, it MUST set\n        // Timer K to fire in T4 seconds for unreliable transports, and zero\n        // seconds for reliable transports  The \"Completed\" state exists to\n        // buffer any additional response retransmissions that may be received\n        // (which is why the client transaction remains there only for unreliable transports).\n        // https://tools.ietf.org/html/rfc3261#section-17.1.2.2\n        if (newState === transaction_state_1.TransactionState.Completed) {\n            if (this.F) {\n                clearTimeout(this.F);\n                this.F = undefined;\n            }\n            this.K = setTimeout(function () { return _this.timer_K(); }, timers_1.Timers.TIMER_K);\n        }\n        // Once the transaction is in the terminated state, it MUST be destroyed immediately.\n        // https://tools.ietf.org/html/rfc3261#section-17.1.2.2\n        if (newState === transaction_state_1.TransactionState.Terminated) {\n            this.dispose();\n        }\n        // Update state.\n        this.setState(newState);\n    };\n    /**\n     * If Timer F fires while the client transaction is still in the\n     * \"Trying\" state, the client transaction SHOULD inform the TU about the\n     * timeout, and then it SHOULD enter the \"Terminated\" state.\n     * If timer F fires while in the \"Proceeding\" state, the TU MUST be informed of\n     * a timeout, and the client transaction MUST transition to the terminated state.\n     * https://tools.ietf.org/html/rfc3261#section-17.1.2.2\n     */\n    NonInviteClientTransaction.prototype.timer_F = function () {\n        this.logger.debug(\"Timer F expired for non-INVITE client transaction \" + this.id + \".\");\n        if (this.state === transaction_state_1.TransactionState.Trying || this.state === transaction_state_1.TransactionState.Proceeding) {\n            this.onRequestTimeout();\n            this.stateTransition(transaction_state_1.TransactionState.Terminated);\n        }\n    };\n    /**\n     * If Timer K fires while in this (COMPLETED) state, the client transaction\n     * MUST transition to the \"Terminated\" state.\n     * https://tools.ietf.org/html/rfc3261#section-17.1.2.2\n     */\n    NonInviteClientTransaction.prototype.timer_K = function () {\n        if (this.state === transaction_state_1.TransactionState.Completed) {\n            this.stateTransition(transaction_state_1.TransactionState.Terminated);\n        }\n    };\n    return NonInviteClientTransaction;\n}(client_transaction_1.ClientTransaction));\nexports.NonInviteClientTransaction = NonInviteClientTransaction;\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar timers_1 = __webpack_require__(27);\nvar server_transaction_1 = __webpack_require__(39);\nvar transaction_state_1 = __webpack_require__(37);\n/**\n * Non-INVITE Server Transaction.\n * @remarks\n * https://tools.ietf.org/html/rfc3261#section-17.2.2\n * @public\n */\nvar NonInviteServerTransaction = /** @class */ (function (_super) {\n    tslib_1.__extends(NonInviteServerTransaction, _super);\n    /**\n     * Constructor.\n     * After construction the transaction will be in the \"trying\": state and the transaction\n     * `id` will equal the branch parameter set in the Via header of the incoming request.\n     * https://tools.ietf.org/html/rfc3261#section-17.2.2\n     * @param request - Incoming Non-INVITE request from the transport.\n     * @param transport - The transport.\n     * @param user - The transaction user.\n     */\n    function NonInviteServerTransaction(request, transport, user) {\n        return _super.call(this, request, transport, user, transaction_state_1.TransactionState.Trying, \"sip.transaction.nist\") || this;\n    }\n    /**\n     * Destructor.\n     */\n    NonInviteServerTransaction.prototype.dispose = function () {\n        if (this.J) {\n            clearTimeout(this.J);\n            this.J = undefined;\n        }\n        _super.prototype.dispose.call(this);\n    };\n    Object.defineProperty(NonInviteServerTransaction.prototype, \"kind\", {\n        /** Transaction kind. Deprecated. */\n        get: function () {\n            return \"nist\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Receive requests from transport matching this transaction.\n     * @param request - Request matching this transaction.\n     */\n    NonInviteServerTransaction.prototype.receiveRequest = function (request) {\n        var _this = this;\n        switch (this.state) {\n            case transaction_state_1.TransactionState.Trying:\n                // Once in the \"Trying\" state, any further request retransmissions are discarded.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\n                break;\n            case transaction_state_1.TransactionState.Proceeding:\n                // If a retransmission of the request is received while in the \"Proceeding\" state,\n                // the most recently sent provisional response MUST be passed to the transport layer for retransmission.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\n                if (!this.lastResponse) {\n                    throw new Error(\"Last response undefined.\");\n                }\n                this.send(this.lastResponse).catch(function (error) {\n                    _this.logTransportError(error, \"Failed to send retransmission of provisional response.\");\n                });\n                break;\n            case transaction_state_1.TransactionState.Completed:\n                // While in the \"Completed\" state, the server transaction MUST pass the final response to the transport\n                // layer for retransmission whenever a retransmission of the request is received. Any other final responses\n                // passed by the TU to the server transaction MUST be discarded while in the \"Completed\" state.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\n                if (!this.lastResponse) {\n                    throw new Error(\"Last response undefined.\");\n                }\n                this.send(this.lastResponse).catch(function (error) {\n                    _this.logTransportError(error, \"Failed to send retransmission of final response.\");\n                });\n                break;\n            case transaction_state_1.TransactionState.Terminated:\n                break;\n            default:\n                throw new Error(\"Invalid state \" + this.state);\n        }\n    };\n    /**\n     * Receive responses from TU for this transaction.\n     * @param statusCode - Status code of response. 101-199 not allowed per RFC 4320.\n     * @param response - Response to send.\n     */\n    NonInviteServerTransaction.prototype.receiveResponse = function (statusCode, response) {\n        var _this = this;\n        if (statusCode < 100 || statusCode > 699) {\n            throw new Error(\"Invalid status code \" + statusCode);\n        }\n        // An SIP element MUST NOT send any provisional response with a\n        // Status-Code other than 100 to a non-INVITE request.\n        // An SIP element MUST NOT respond to a non-INVITE request with a\n        // Status-Code of 100 over any unreliable transport, such as UDP,\n        // before the amount of time it takes a client transaction's Timer E to be reset to T2.\n        // An SIP element MAY respond to a non-INVITE request with a\n        // Status-Code of 100 over a reliable transport at any time.\n        // https://tools.ietf.org/html/rfc4320#section-4.1\n        if (statusCode > 100 && statusCode <= 199) {\n            throw new Error(\"Provisional response other than 100 not allowed.\");\n        }\n        switch (this.state) {\n            case transaction_state_1.TransactionState.Trying:\n                // While in the \"Trying\" state, if the TU passes a provisional response\n                // to the server transaction, the server transaction MUST enter the \"Proceeding\" state.\n                // The response MUST be passed to the transport layer for transmission.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\n                this.lastResponse = response;\n                if (statusCode >= 100 && statusCode < 200) {\n                    this.stateTransition(transaction_state_1.TransactionState.Proceeding);\n                    this.send(response).catch(function (error) {\n                        _this.logTransportError(error, \"Failed to send provisional response.\");\n                    });\n                    return;\n                }\n                if (statusCode >= 200 && statusCode <= 699) {\n                    this.stateTransition(transaction_state_1.TransactionState.Completed);\n                    this.send(response).catch(function (error) {\n                        _this.logTransportError(error, \"Failed to send final response.\");\n                    });\n                    return;\n                }\n                break;\n            case transaction_state_1.TransactionState.Proceeding:\n                // Any further provisional responses that are received from the TU while\n                // in the \"Proceeding\" state MUST be passed to the transport layer for transmission.\n                // If the TU passes a final response (status codes 200-699) to the server while in\n                // the \"Proceeding\" state, the transaction MUST enter the \"Completed\" state, and\n                // the response MUST be passed to the transport layer for transmission.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\n                this.lastResponse = response;\n                if (statusCode >= 200 && statusCode <= 699) {\n                    this.stateTransition(transaction_state_1.TransactionState.Completed);\n                    this.send(response).catch(function (error) {\n                        _this.logTransportError(error, \"Failed to send final response.\");\n                    });\n                    return;\n                }\n                break;\n            case transaction_state_1.TransactionState.Completed:\n                // Any other final responses passed by the TU to the server\n                // transaction MUST be discarded while in the \"Completed\" state.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\n                return;\n            case transaction_state_1.TransactionState.Terminated:\n                break;\n            default:\n                throw new Error(\"Invalid state \" + this.state);\n        }\n        var message = \"Non-INVITE server transaction received unexpected \" + statusCode + \" response from TU while in state \" + this.state + \".\";\n        this.logger.error(message);\n        throw new Error(message);\n    };\n    /**\n     * First, the procedures in [4] are followed, which attempt to deliver the response to a backup.\n     * If those should all fail, based on the definition of failure in [4], the server transaction SHOULD\n     * inform the TU that a failure has occurred, and SHOULD transition to the terminated state.\n     * https://tools.ietf.org/html/rfc3261#section-17.2.4\n     */\n    NonInviteServerTransaction.prototype.onTransportError = function (error) {\n        if (this.user.onTransportError) {\n            this.user.onTransportError(error);\n        }\n        this.stateTransition(transaction_state_1.TransactionState.Terminated, true);\n    };\n    /** For logging. */\n    NonInviteServerTransaction.prototype.typeToString = function () {\n        return \"non-INVITE server transaction\";\n    };\n    NonInviteServerTransaction.prototype.stateTransition = function (newState, dueToTransportError) {\n        var _this = this;\n        if (dueToTransportError === void 0) { dueToTransportError = false; }\n        // Assert valid state transitions.\n        var invalidStateTransition = function () {\n            throw new Error(\"Invalid state transition from \" + _this.state + \" to \" + newState);\n        };\n        switch (newState) {\n            case transaction_state_1.TransactionState.Trying:\n                invalidStateTransition();\n                break;\n            case transaction_state_1.TransactionState.Proceeding:\n                if (this.state !== transaction_state_1.TransactionState.Trying) {\n                    invalidStateTransition();\n                }\n                break;\n            case transaction_state_1.TransactionState.Completed:\n                if (this.state !== transaction_state_1.TransactionState.Trying && this.state !== transaction_state_1.TransactionState.Proceeding) {\n                    invalidStateTransition();\n                }\n                break;\n            case transaction_state_1.TransactionState.Terminated:\n                if (this.state !== transaction_state_1.TransactionState.Proceeding && this.state !== transaction_state_1.TransactionState.Completed) {\n                    if (!dueToTransportError) {\n                        invalidStateTransition();\n                    }\n                }\n                break;\n            default:\n                invalidStateTransition();\n        }\n        // When the server transaction enters the \"Completed\" state, it MUST set Timer J to fire\n        // in 64*T1 seconds for unreliable transports, and zero seconds for reliable transports.\n        // https://tools.ietf.org/html/rfc3261#section-17.2.2\n        if (newState === transaction_state_1.TransactionState.Completed) {\n            this.J = setTimeout(function () { return _this.timer_J(); }, timers_1.Timers.TIMER_J);\n        }\n        // The server transaction MUST be destroyed the instant it enters the \"Terminated\" state.\n        // https://tools.ietf.org/html/rfc3261#section-17.2.2\n        if (newState === transaction_state_1.TransactionState.Terminated) {\n            this.dispose();\n        }\n        this.setState(newState);\n    };\n    /**\n     * The server transaction remains in this state until Timer J fires,\n     * at which point it MUST transition to the \"Terminated\" state.\n     * https://tools.ietf.org/html/rfc3261#section-17.2.2\n     */\n    NonInviteServerTransaction.prototype.timer_J = function () {\n        this.logger.debug(\"Timer J expired for NON-INVITE server transaction \" + this.id + \".\");\n        if (this.state === transaction_state_1.TransactionState.Completed) {\n            this.stateTransition(transaction_state_1.TransactionState.Terminated);\n        }\n    };\n    return NonInviteServerTransaction;\n}(server_transaction_1.ServerTransaction));\nexports.NonInviteServerTransaction = NonInviteServerTransaction;\n\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar messages_1 = __webpack_require__(5);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_client_1 = __webpack_require__(43);\n/**\n * BYE UAC.\n * @public\n */\nvar ByeUserAgentClient = /** @class */ (function (_super) {\n    tslib_1.__extends(ByeUserAgentClient, _super);\n    function ByeUserAgentClient(dialog, delegate, options) {\n        var _this = this;\n        var message = dialog.createOutgoingRequestMessage(messages_1.C.BYE, options);\n        _this = _super.call(this, transactions_1.NonInviteClientTransaction, dialog.userAgentCore, message, delegate) || this;\n        dialog.dispose();\n        return _this;\n    }\n    return ByeUserAgentClient;\n}(user_agent_client_1.UserAgentClient));\nexports.ByeUserAgentClient = ByeUserAgentClient;\n\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar messages_1 = __webpack_require__(5);\nvar transactions_1 = __webpack_require__(28);\n/**\n * User Agent Client (UAC).\n * @remarks\n * A user agent client is a logical entity\n * that creates a new request, and then uses the client\n * transaction state machinery to send it.  The role of UAC lasts\n * only for the duration of that transaction.  In other words, if\n * a piece of software initiates a request, it acts as a UAC for\n * the duration of that transaction.  If it receives a request\n * later, it assumes the role of a user agent server for the\n * processing of that transaction.\n * https://tools.ietf.org/html/rfc3261#section-6\n * @public\n */\nvar UserAgentClient = /** @class */ (function () {\n    function UserAgentClient(transactionConstructor, core, message, delegate) {\n        this.transactionConstructor = transactionConstructor;\n        this.core = core;\n        this.message = message;\n        this.delegate = delegate;\n        this.challenged = false;\n        this.stale = false;\n        this.logger = this.loggerFactory.getLogger(\"sip.user-agent-client\");\n        this.init();\n    }\n    UserAgentClient.prototype.dispose = function () {\n        this.transaction.dispose();\n    };\n    Object.defineProperty(UserAgentClient.prototype, \"loggerFactory\", {\n        get: function () {\n            return this.core.loggerFactory;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UserAgentClient.prototype, \"transaction\", {\n        /** The transaction associated with this request. */\n        get: function () {\n            if (!this._transaction) {\n                throw new Error(\"Transaction undefined.\");\n            }\n            return this._transaction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Since requests other than INVITE are responded to immediately, sending a\n     * CANCEL for a non-INVITE request would always create a race condition.\n     * A CANCEL request SHOULD NOT be sent to cancel a request other than INVITE.\n     * https://tools.ietf.org/html/rfc3261#section-9.1\n     * @param options - Cancel options bucket.\n     */\n    UserAgentClient.prototype.cancel = function (reason, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        if (!this.transaction) {\n            throw new Error(\"Transaction undefined.\");\n        }\n        if (!this.message.to) {\n            throw new Error(\"To undefined.\");\n        }\n        if (!this.message.from) {\n            throw new Error(\"From undefined.\");\n        }\n        // The following procedures are used to construct a CANCEL request.  The\n        // Request-URI, Call-ID, To, the numeric part of CSeq, and From header\n        // fields in the CANCEL request MUST be identical to those in the\n        // request being cancelled, including tags.  A CANCEL constructed by a\n        // client MUST have only a single Via header field value matching the\n        // top Via value in the request being cancelled.  Using the same values\n        // for these header fields allows the CANCEL to be matched with the\n        // request it cancels (Section 9.2 indicates how such matching occurs).\n        // However, the method part of the CSeq header field MUST have a value\n        // of CANCEL.  This allows it to be identified and processed as a\n        // transaction in its own right (See Section 17).\n        // https://tools.ietf.org/html/rfc3261#section-9.1\n        var message = this.core.makeOutgoingRequestMessage(messages_1.C.CANCEL, this.message.ruri, this.message.from.uri, this.message.to.uri, {\n            toTag: this.message.toTag,\n            fromTag: this.message.fromTag,\n            callId: this.message.callId,\n            cseq: this.message.cseq\n        }, options.extraHeaders);\n        // TODO: Revisit this.\n        // The CANCEL needs to use the same branch parameter so that\n        // it matches the INVITE transaction, but this is a hacky way to do this.\n        // Or at the very least not well documented. If the the branch parameter\n        // is set on the outgoing request, the transaction will use it.\n        // Otherwise the transaction will make a new one.\n        message.branch = this.message.branch;\n        if (this.message.headers.Route) {\n            message.headers.Route = this.message.headers.Route;\n        }\n        if (reason) {\n            message.setHeader(\"Reason\", reason);\n        }\n        // If no provisional response has been received, the CANCEL request MUST\n        // NOT be sent; rather, the client MUST wait for the arrival of a\n        // provisional response before sending the request. If the original\n        // request has generated a final response, the CANCEL SHOULD NOT be\n        // sent, as it is an effective no-op, since CANCEL has no effect on\n        // requests that have already generated a final response.\n        // https://tools.ietf.org/html/rfc3261#section-9.1\n        if (this.transaction.state === transactions_1.TransactionState.Proceeding) {\n            var uac = new UserAgentClient(transactions_1.NonInviteClientTransaction, this.core, message);\n        }\n        else {\n            this.transaction.once(\"stateChanged\", function () {\n                if (_this.transaction && _this.transaction.state === transactions_1.TransactionState.Proceeding) {\n                    var uac = new UserAgentClient(transactions_1.NonInviteClientTransaction, _this.core, message);\n                }\n            });\n        }\n        return message;\n    };\n    /**\n     * If a 401 (Unauthorized) or 407 (Proxy Authentication Required)\n     * response is received, the UAC SHOULD follow the authorization\n     * procedures of Section 22.2 and Section 22.3 to retry the request with\n     * credentials.\n     * https://tools.ietf.org/html/rfc3261#section-8.1.3.5\n     * 22 Usage of HTTP Authentication\n     * https://tools.ietf.org/html/rfc3261#section-22\n     * 22.1 Framework\n     * https://tools.ietf.org/html/rfc3261#section-22.1\n     * 22.2 User-to-User Authentication\n     * https://tools.ietf.org/html/rfc3261#section-22.2\n     * 22.3 Proxy-to-User Authentication\n     * https://tools.ietf.org/html/rfc3261#section-22.3\n     *\n     * FIXME: This \"guard for and retry the request with credentials\"\n     * implementation is not complete and at best minimally passable.\n     * @param response - The incoming response to guard.\n     * @param dialog - If defined, the dialog within which the response was received.\n     * @returns True if the program execution is to continue in the branch in question.\n     *          Otherwise the request is retried with credentials and current request processing must stop.\n     */\n    UserAgentClient.prototype.authenticationGuard = function (message, dialog) {\n        var statusCode = message.statusCode;\n        if (!statusCode) {\n            throw new Error(\"Response status code undefined.\");\n        }\n        // If a 401 (Unauthorized) or 407 (Proxy Authentication Required)\n        // response is received, the UAC SHOULD follow the authorization\n        // procedures of Section 22.2 and Section 22.3 to retry the request with\n        // credentials.\n        // https://tools.ietf.org/html/rfc3261#section-8.1.3.5\n        if (statusCode !== 401 && statusCode !== 407) {\n            return true;\n        }\n        // Get and parse the appropriate WWW-Authenticate or Proxy-Authenticate header.\n        var challenge;\n        var authorizationHeaderName;\n        if (statusCode === 401) {\n            challenge = message.parseHeader(\"www-authenticate\");\n            authorizationHeaderName = \"authorization\";\n        }\n        else {\n            challenge = message.parseHeader(\"proxy-authenticate\");\n            authorizationHeaderName = \"proxy-authorization\";\n        }\n        // Verify it seems a valid challenge.\n        if (!challenge) {\n            this.logger.warn(statusCode + \" with wrong or missing challenge, cannot authenticate\");\n            return true;\n        }\n        // Avoid infinite authentications.\n        if (this.challenged && (this.stale || challenge.stale !== true)) {\n            this.logger.warn(statusCode + \" apparently in authentication loop, cannot authenticate\");\n            return true;\n        }\n        // Get credentials.\n        if (!this.credentials) {\n            this.credentials = this.core.configuration.authenticationFactory();\n            if (!this.credentials) {\n                this.logger.warn(\"Unable to obtain credentials, cannot authenticate\");\n                return true;\n            }\n        }\n        // Verify that the challenge is really valid.\n        if (!this.credentials.authenticate(this.message, challenge)) {\n            return true;\n        }\n        this.challenged = true;\n        if (challenge.stale) {\n            this.stale = true;\n        }\n        // If response to out of dialog request, assume incrementing the CSeq will suffice.\n        var cseq = this.message.cseq += 1;\n        // If response to in dialog request, get a valid next CSeq number.\n        if (dialog && dialog.localSequenceNumber) {\n            dialog.incrementLocalSequenceNumber();\n            cseq = this.message.cseq = dialog.localSequenceNumber;\n        }\n        this.message.setHeader(\"cseq\", cseq + \" \" + this.message.method);\n        this.message.setHeader(authorizationHeaderName, this.credentials.toString());\n        // Calling init (again) will swap out our existing client transaction with a new one.\n        // FIXME: HACK: An assumption is being made here that there is nothing that needs to\n        // be cleaned up beyond the client transaction which is being replaced. For example,\n        // it is assumed that no early dialogs have been created.\n        this.init();\n        return false;\n    };\n    /**\n     * 8.1.3.1 Transaction Layer Errors\n     * In some cases, the response returned by the transaction layer will\n     * not be a SIP message, but rather a transaction layer error.  When a\n     * timeout error is received from the transaction layer, it MUST be\n     * treated as if a 408 (Request Timeout) status code has been received.\n     * If a fatal transport error is reported by the transport layer\n     * (generally, due to fatal ICMP errors in UDP or connection failures in\n     * TCP), the condition MUST be treated as a 503 (Service Unavailable)\n     * status code.\n     * https://tools.ietf.org/html/rfc3261#section-8.1.3.1\n     */\n    UserAgentClient.prototype.onRequestTimeout = function () {\n        this.logger.warn(\"User agent client request timed out. Generating internal 408 Request Timeout.\");\n        var message = new messages_1.IncomingResponseMessage();\n        message.statusCode = 408;\n        message.reasonPhrase = \"Request Timeout\";\n        this.receiveResponse(message);\n        return;\n    };\n    /**\n     * 8.1.3.1 Transaction Layer Errors\n     * In some cases, the response returned by the transaction layer will\n     * not be a SIP message, but rather a transaction layer error.  When a\n     * timeout error is received from the transaction layer, it MUST be\n     * treated as if a 408 (Request Timeout) status code has been received.\n     * If a fatal transport error is reported by the transport layer\n     * (generally, due to fatal ICMP errors in UDP or connection failures in\n     * TCP), the condition MUST be treated as a 503 (Service Unavailable)\n     * status code.\n     * https://tools.ietf.org/html/rfc3261#section-8.1.3.1\n     * @param error - Transport error\n     */\n    UserAgentClient.prototype.onTransportError = function (error) {\n        this.logger.error(error.message);\n        this.logger.error(\"User agent client request transport error. Generating internal 503 Service Unavailable.\");\n        var message = new messages_1.IncomingResponseMessage();\n        message.statusCode = 503;\n        message.reasonPhrase = \"Service Unavailable\";\n        this.receiveResponse(message);\n    };\n    /**\n     * Receive a response from the transaction layer.\n     * @param message - Incoming response message.\n     */\n    UserAgentClient.prototype.receiveResponse = function (message) {\n        if (!this.authenticationGuard(message)) {\n            return;\n        }\n        var statusCode = message.statusCode ? message.statusCode.toString() : \"\";\n        if (!statusCode) {\n            throw new Error(\"Response status code undefined.\");\n        }\n        switch (true) {\n            case /^100$/.test(statusCode):\n                if (this.delegate && this.delegate.onTrying) {\n                    this.delegate.onTrying({ message: message });\n                }\n                break;\n            case /^1[0-9]{2}$/.test(statusCode):\n                if (this.delegate && this.delegate.onProgress) {\n                    this.delegate.onProgress({ message: message });\n                }\n                break;\n            case /^2[0-9]{2}$/.test(statusCode):\n                if (this.delegate && this.delegate.onAccept) {\n                    this.delegate.onAccept({ message: message });\n                }\n                break;\n            case /^3[0-9]{2}$/.test(statusCode):\n                if (this.delegate && this.delegate.onRedirect) {\n                    this.delegate.onRedirect({ message: message });\n                }\n                break;\n            case /^[4-6][0-9]{2}$/.test(statusCode):\n                if (this.delegate && this.delegate.onReject) {\n                    this.delegate.onReject({ message: message });\n                }\n                break;\n            default:\n                throw new Error(\"Invalid status code \" + statusCode);\n        }\n    };\n    UserAgentClient.prototype.init = function () {\n        var _this = this;\n        // We are the transaction user.\n        var user = {\n            loggerFactory: this.loggerFactory,\n            onRequestTimeout: function () { return _this.onRequestTimeout(); },\n            onStateChange: function (newState) {\n                if (newState === transactions_1.TransactionState.Terminated) {\n                    // Remove the terminated transaction from the core.\n                    _this.core.userAgentClients.delete(userAgentClientId);\n                    // FIXME: HACK: Our transaction may have been swapped out with a new one\n                    // post authentication (see above), so make sure to only to dispose of\n                    // ourselves if this terminating transaction is our current transaction.\n                    if (transaction === _this._transaction) {\n                        _this.dispose();\n                    }\n                }\n            },\n            onTransportError: function (error) { return _this.onTransportError(error); },\n            receiveResponse: function (message) { return _this.receiveResponse(message); }\n        };\n        // Create a new transaction with us as the user.\n        var transaction = new this.transactionConstructor(this.message, this.core.transport, user);\n        this._transaction = transaction;\n        // Add the new transaction to the core.\n        var userAgentClientId = transaction.id + transaction.request.method;\n        this.core.userAgentClients.set(userAgentClientId, this);\n    };\n    return UserAgentClient;\n}());\nexports.UserAgentClient = UserAgentClient;\n\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_server_1 = __webpack_require__(45);\n/**\n * BYE UAS.\n * @public\n */\nvar ByeUserAgentServer = /** @class */ (function (_super) {\n    tslib_1.__extends(ByeUserAgentServer, _super);\n    function ByeUserAgentServer(dialog, message, delegate) {\n        return _super.call(this, transactions_1.NonInviteServerTransaction, dialog.userAgentCore, message, delegate) || this;\n    }\n    return ByeUserAgentServer;\n}(user_agent_server_1.UserAgentServer));\nexports.ByeUserAgentServer = ByeUserAgentServer;\n\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar exceptions_1 = __webpack_require__(32);\nvar messages_1 = __webpack_require__(5);\nvar utils_1 = __webpack_require__(16);\nvar transactions_1 = __webpack_require__(28);\n/**\n * User Agent Server (UAS).\n * @remarks\n * A user agent server is a logical entity\n * that generates a response to a SIP request.  The response\n * accepts, rejects, or redirects the request.  This role lasts\n * only for the duration of that transaction.  In other words, if\n * a piece of software responds to a request, it acts as a UAS for\n * the duration of that transaction.  If it generates a request\n * later, it assumes the role of a user agent client for the\n * processing of that transaction.\n * https://tools.ietf.org/html/rfc3261#section-6\n * @public\n */\nvar UserAgentServer = /** @class */ (function () {\n    function UserAgentServer(transactionConstructor, core, message, delegate) {\n        this.transactionConstructor = transactionConstructor;\n        this.core = core;\n        this.message = message;\n        this.delegate = delegate;\n        this.logger = this.loggerFactory.getLogger(\"sip.user-agent-server\");\n        this.toTag = message.toTag ? message.toTag : utils_1.newTag();\n        this.init();\n    }\n    UserAgentServer.prototype.dispose = function () {\n        this.transaction.dispose();\n    };\n    Object.defineProperty(UserAgentServer.prototype, \"loggerFactory\", {\n        get: function () {\n            return this.core.loggerFactory;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UserAgentServer.prototype, \"transaction\", {\n        /** The transaction associated with this request. */\n        get: function () {\n            if (!this._transaction) {\n                throw new Error(\"Transaction undefined.\");\n            }\n            return this._transaction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    UserAgentServer.prototype.accept = function (options) {\n        if (options === void 0) { options = { statusCode: 200 }; }\n        if (!this.acceptable) {\n            throw new exceptions_1.TransactionStateError(this.message.method + \" not acceptable in state \" + this.transaction.state + \".\");\n        }\n        var statusCode = options.statusCode;\n        if (statusCode < 200 || statusCode > 299) {\n            throw new TypeError(\"Invalid statusCode: \" + statusCode);\n        }\n        var response = this.reply(options);\n        return response;\n    };\n    UserAgentServer.prototype.progress = function (options) {\n        if (options === void 0) { options = { statusCode: 180 }; }\n        if (!this.progressable) {\n            throw new exceptions_1.TransactionStateError(this.message.method + \" not progressable in state \" + this.transaction.state + \".\");\n        }\n        var statusCode = options.statusCode;\n        if (statusCode < 101 || statusCode > 199) {\n            throw new TypeError(\"Invalid statusCode: \" + statusCode);\n        }\n        var response = this.reply(options);\n        return response;\n    };\n    UserAgentServer.prototype.redirect = function (contacts, options) {\n        if (options === void 0) { options = { statusCode: 302 }; }\n        if (!this.redirectable) {\n            throw new exceptions_1.TransactionStateError(this.message.method + \" not redirectable in state \" + this.transaction.state + \".\");\n        }\n        var statusCode = options.statusCode;\n        if (statusCode < 300 || statusCode > 399) {\n            throw new TypeError(\"Invalid statusCode: \" + statusCode);\n        }\n        var contactHeaders = new Array();\n        contacts.forEach(function (contact) { return contactHeaders.push(\"Contact: \" + contact.toString()); });\n        options.extraHeaders = (options.extraHeaders || []).concat(contactHeaders);\n        var response = this.reply(options);\n        return response;\n    };\n    UserAgentServer.prototype.reject = function (options) {\n        if (options === void 0) { options = { statusCode: 480 }; }\n        if (!this.rejectable) {\n            throw new exceptions_1.TransactionStateError(this.message.method + \" not rejectable in state \" + this.transaction.state + \".\");\n        }\n        var statusCode = options.statusCode;\n        if (statusCode < 400 || statusCode > 699) {\n            throw new TypeError(\"Invalid statusCode: \" + statusCode);\n        }\n        var response = this.reply(options);\n        return response;\n    };\n    UserAgentServer.prototype.trying = function (options) {\n        if (!this.tryingable) {\n            throw new exceptions_1.TransactionStateError(this.message.method + \" not tryingable in state \" + this.transaction.state + \".\");\n        }\n        var response = this.reply({ statusCode: 100 });\n        return response;\n    };\n    /**\n     * If the UAS did not find a matching transaction for the CANCEL\n     * according to the procedure above, it SHOULD respond to the CANCEL\n     * with a 481 (Call Leg/Transaction Does Not Exist).  If the transaction\n     * for the original request still exists, the behavior of the UAS on\n     * receiving a CANCEL request depends on whether it has already sent a\n     * final response for the original request.  If it has, the CANCEL\n     * request has no effect on the processing of the original request, no\n     * effect on any session state, and no effect on the responses generated\n     * for the original request.  If the UAS has not issued a final response\n     * for the original request, its behavior depends on the method of the\n     * original request.  If the original request was an INVITE, the UAS\n     * SHOULD immediately respond to the INVITE with a 487 (Request\n     * Terminated).  A CANCEL request has no impact on the processing of\n     * transactions with any other method defined in this specification.\n     * https://tools.ietf.org/html/rfc3261#section-9.2\n     * @param request - Incoming CANCEL request.\n     */\n    UserAgentServer.prototype.receiveCancel = function (message) {\n        // Note: Currently CANCEL is being handled as a special case.\n        // No UAS is created to handle the CANCEL and the response to\n        // it CANCEL is being handled statelessly by the user agent core.\n        // As such, there is currently no way to externally impact the\n        // response to the a CANCEL request.\n        if (this.delegate && this.delegate.onCancel) {\n            this.delegate.onCancel(message);\n        }\n    };\n    Object.defineProperty(UserAgentServer.prototype, \"acceptable\", {\n        get: function () {\n            if (this.transaction instanceof transactions_1.InviteServerTransaction) {\n                return (this.transaction.state === transactions_1.TransactionState.Proceeding ||\n                    this.transaction.state === transactions_1.TransactionState.Accepted);\n            }\n            if (this.transaction instanceof transactions_1.NonInviteServerTransaction) {\n                return (this.transaction.state === transactions_1.TransactionState.Trying ||\n                    this.transaction.state === transactions_1.TransactionState.Proceeding);\n            }\n            throw new Error(\"Unknown transaction type.\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UserAgentServer.prototype, \"progressable\", {\n        get: function () {\n            if (this.transaction instanceof transactions_1.InviteServerTransaction) {\n                return this.transaction.state === transactions_1.TransactionState.Proceeding;\n            }\n            if (this.transaction instanceof transactions_1.NonInviteServerTransaction) {\n                return false; // https://tools.ietf.org/html/rfc4320#section-4.1\n            }\n            throw new Error(\"Unknown transaction type.\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UserAgentServer.prototype, \"redirectable\", {\n        get: function () {\n            if (this.transaction instanceof transactions_1.InviteServerTransaction) {\n                return this.transaction.state === transactions_1.TransactionState.Proceeding;\n            }\n            if (this.transaction instanceof transactions_1.NonInviteServerTransaction) {\n                return (this.transaction.state === transactions_1.TransactionState.Trying ||\n                    this.transaction.state === transactions_1.TransactionState.Proceeding);\n            }\n            throw new Error(\"Unknown transaction type.\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UserAgentServer.prototype, \"rejectable\", {\n        get: function () {\n            if (this.transaction instanceof transactions_1.InviteServerTransaction) {\n                return this.transaction.state === transactions_1.TransactionState.Proceeding;\n            }\n            if (this.transaction instanceof transactions_1.NonInviteServerTransaction) {\n                return (this.transaction.state === transactions_1.TransactionState.Trying ||\n                    this.transaction.state === transactions_1.TransactionState.Proceeding);\n            }\n            throw new Error(\"Unknown transaction type.\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UserAgentServer.prototype, \"tryingable\", {\n        get: function () {\n            if (this.transaction instanceof transactions_1.InviteServerTransaction) {\n                return this.transaction.state === transactions_1.TransactionState.Proceeding;\n            }\n            if (this.transaction instanceof transactions_1.NonInviteServerTransaction) {\n                return this.transaction.state === transactions_1.TransactionState.Trying;\n            }\n            throw new Error(\"Unknown transaction type.\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * When a UAS wishes to construct a response to a request, it follows\n     * the general procedures detailed in the following subsections.\n     * Additional behaviors specific to the response code in question, which\n     * are not detailed in this section, may also be required.\n     *\n     * Once all procedures associated with the creation of a response have\n     * been completed, the UAS hands the response back to the server\n     * transaction from which it received the request.\n     * https://tools.ietf.org/html/rfc3261#section-8.2.6\n     * @param statusCode - Status code to reply with.\n     * @param options - Reply options bucket.\n     */\n    UserAgentServer.prototype.reply = function (options) {\n        if (!options.toTag && options.statusCode !== 100) {\n            options.toTag = this.toTag;\n        }\n        options.userAgent = options.userAgent || this.core.configuration.userAgentHeaderFieldValue;\n        options.supported = options.supported || this.core.configuration.supportedOptionTagsResponse;\n        var response = messages_1.constructOutgoingResponse(this.message, options);\n        this.transaction.receiveResponse(options.statusCode, response.message);\n        return response;\n    };\n    UserAgentServer.prototype.init = function () {\n        var _this = this;\n        // We are the transaction user.\n        var user = {\n            loggerFactory: this.loggerFactory,\n            onStateChange: function (newState) {\n                if (newState === transactions_1.TransactionState.Terminated) {\n                    // Remove the terminated transaction from the core.\n                    _this.core.userAgentServers.delete(userAgentServerId);\n                    _this.dispose();\n                }\n            },\n            onTransportError: function (error) {\n                _this.logger.error(error.message);\n                if (_this.delegate && _this.delegate.onTransportError) {\n                    _this.delegate.onTransportError(error);\n                }\n                else {\n                    _this.logger.error(\"User agent server response transport error.\");\n                }\n            }\n        };\n        // Create a new transaction with us as the user.\n        var transaction = new this.transactionConstructor(this.message, this.core.transport, user);\n        this._transaction = transaction;\n        // Add the new transaction to the core.\n        var userAgentServerId = transaction.id;\n        this.core.userAgentServers.set(transaction.id, this);\n    };\n    return UserAgentServer;\n}());\nexports.UserAgentServer = UserAgentServer;\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar messages_1 = __webpack_require__(5);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_client_1 = __webpack_require__(43);\n/**\n * INFO UAC.\n * @public\n */\nvar InfoUserAgentClient = /** @class */ (function (_super) {\n    tslib_1.__extends(InfoUserAgentClient, _super);\n    function InfoUserAgentClient(dialog, delegate, options) {\n        var _this = this;\n        var message = dialog.createOutgoingRequestMessage(messages_1.C.INFO, options);\n        _this = _super.call(this, transactions_1.NonInviteClientTransaction, dialog.userAgentCore, message, delegate) || this;\n        return _this;\n    }\n    return InfoUserAgentClient;\n}(user_agent_client_1.UserAgentClient));\nexports.InfoUserAgentClient = InfoUserAgentClient;\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_server_1 = __webpack_require__(45);\n/**\n * INFO UAS.\n * @public\n */\nvar InfoUserAgentServer = /** @class */ (function (_super) {\n    tslib_1.__extends(InfoUserAgentServer, _super);\n    function InfoUserAgentServer(dialog, message, delegate) {\n        return _super.call(this, transactions_1.NonInviteServerTransaction, dialog.userAgentCore, message, delegate) || this;\n    }\n    return InfoUserAgentServer;\n}(user_agent_server_1.UserAgentServer));\nexports.InfoUserAgentServer = InfoUserAgentServer;\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_client_1 = __webpack_require__(43);\n/**\n * MESSAGE UAC.\n * @public\n */\nvar MessageUserAgentClient = /** @class */ (function (_super) {\n    tslib_1.__extends(MessageUserAgentClient, _super);\n    function MessageUserAgentClient(core, message, delegate) {\n        return _super.call(this, transactions_1.NonInviteClientTransaction, core, message, delegate) || this;\n    }\n    return MessageUserAgentClient;\n}(user_agent_client_1.UserAgentClient));\nexports.MessageUserAgentClient = MessageUserAgentClient;\n\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_server_1 = __webpack_require__(45);\n/**\n * MESSAGE UAS.\n * @public\n */\nvar MessageUserAgentServer = /** @class */ (function (_super) {\n    tslib_1.__extends(MessageUserAgentServer, _super);\n    function MessageUserAgentServer(core, message, delegate) {\n        return _super.call(this, transactions_1.NonInviteServerTransaction, core, message, delegate) || this;\n    }\n    return MessageUserAgentServer;\n}(user_agent_server_1.UserAgentServer));\nexports.MessageUserAgentServer = MessageUserAgentServer;\n\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar messages_1 = __webpack_require__(5);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_client_1 = __webpack_require__(43);\n/**\n * NOTIFY UAS.\n * @public\n */\nvar NotifyUserAgentClient = /** @class */ (function (_super) {\n    tslib_1.__extends(NotifyUserAgentClient, _super);\n    function NotifyUserAgentClient(dialog, delegate, options) {\n        var _this = this;\n        var message = dialog.createOutgoingRequestMessage(messages_1.C.NOTIFY, options);\n        _this = _super.call(this, transactions_1.NonInviteClientTransaction, dialog.userAgentCore, message, delegate) || this;\n        return _this;\n    }\n    return NotifyUserAgentClient;\n}(user_agent_client_1.UserAgentClient));\nexports.NotifyUserAgentClient = NotifyUserAgentClient;\n\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_server_1 = __webpack_require__(45);\n/**\n * NOTIFY UAS.\n * @public\n */\nvar NotifyUserAgentServer = /** @class */ (function (_super) {\n    tslib_1.__extends(NotifyUserAgentServer, _super);\n    /**\n     * NOTIFY UAS constructor.\n     * @param dialogOrCore - Dialog for in dialog NOTIFY, UserAgentCore for out of dialog NOTIFY (deprecated).\n     * @param message - Incoming NOTIFY request message.\n     */\n    function NotifyUserAgentServer(dialogOrCore, message, delegate) {\n        var _this = this;\n        var userAgentCore = instanceOfDialog(dialogOrCore) ?\n            dialogOrCore.userAgentCore :\n            dialogOrCore;\n        _this = _super.call(this, transactions_1.NonInviteServerTransaction, userAgentCore, message, delegate) || this;\n        return _this;\n    }\n    return NotifyUserAgentServer;\n}(user_agent_server_1.UserAgentServer));\nexports.NotifyUserAgentServer = NotifyUserAgentServer;\nfunction instanceOfDialog(object) {\n    return object.userAgentCore !== undefined;\n}\n\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar messages_1 = __webpack_require__(5);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_client_1 = __webpack_require__(43);\n/**\n * PRACK UAC.\n * @public\n */\nvar PrackUserAgentClient = /** @class */ (function (_super) {\n    tslib_1.__extends(PrackUserAgentClient, _super);\n    function PrackUserAgentClient(dialog, delegate, options) {\n        var _this = this;\n        var message = dialog.createOutgoingRequestMessage(messages_1.C.PRACK, options);\n        _this = _super.call(this, transactions_1.NonInviteClientTransaction, dialog.userAgentCore, message, delegate) || this;\n        dialog.signalingStateTransition(message);\n        return _this;\n    }\n    return PrackUserAgentClient;\n}(user_agent_client_1.UserAgentClient));\nexports.PrackUserAgentClient = PrackUserAgentClient;\n\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_server_1 = __webpack_require__(45);\n/**\n * PRACK UAS.\n * @public\n */\nvar PrackUserAgentServer = /** @class */ (function (_super) {\n    tslib_1.__extends(PrackUserAgentServer, _super);\n    function PrackUserAgentServer(dialog, message, delegate) {\n        var _this = _super.call(this, transactions_1.NonInviteServerTransaction, dialog.userAgentCore, message, delegate) || this;\n        // Update dialog signaling state with offer/answer in body\n        dialog.signalingStateTransition(message);\n        _this.dialog = dialog;\n        return _this;\n    }\n    /**\n     * Update the dialog signaling state on a 2xx response.\n     * @param options - Options bucket.\n     */\n    PrackUserAgentServer.prototype.accept = function (options) {\n        if (options === void 0) { options = { statusCode: 200 }; }\n        if (options.body) {\n            // Update dialog signaling state with offer/answer in body\n            this.dialog.signalingStateTransition(options.body);\n        }\n        return _super.prototype.accept.call(this, options);\n    };\n    return PrackUserAgentServer;\n}(user_agent_server_1.UserAgentServer));\nexports.PrackUserAgentServer = PrackUserAgentServer;\n\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar messages_1 = __webpack_require__(5);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_client_1 = __webpack_require__(43);\n/**\n * Re-INVITE UAC.\n * @remarks\n * 14 Modifying an Existing Session\n * https://tools.ietf.org/html/rfc3261#section-14\n * 14.1 UAC Behavior\n * https://tools.ietf.org/html/rfc3261#section-14.1\n * @public\n */\nvar ReInviteUserAgentClient = /** @class */ (function (_super) {\n    tslib_1.__extends(ReInviteUserAgentClient, _super);\n    function ReInviteUserAgentClient(dialog, delegate, options) {\n        var _this = this;\n        var message = dialog.createOutgoingRequestMessage(messages_1.C.INVITE, options);\n        _this = _super.call(this, transactions_1.InviteClientTransaction, dialog.userAgentCore, message, delegate) || this;\n        _this.delegate = delegate;\n        dialog.signalingStateTransition(message);\n        // FIXME: TODO: next line obviously needs to be improved...\n        dialog.reinviteUserAgentClient = _this; // let the dialog know re-invite request sent\n        _this.dialog = dialog;\n        return _this;\n    }\n    ReInviteUserAgentClient.prototype.receiveResponse = function (message) {\n        var _this = this;\n        if (!this.authenticationGuard(message, this.dialog)) {\n            return;\n        }\n        var statusCode = message.statusCode ? message.statusCode.toString() : \"\";\n        if (!statusCode) {\n            throw new Error(\"Response status code undefined.\");\n        }\n        switch (true) {\n            case /^100$/.test(statusCode):\n                if (this.delegate && this.delegate.onTrying) {\n                    this.delegate.onTrying({ message: message });\n                }\n                break;\n            case /^1[0-9]{2}$/.test(statusCode):\n                if (this.delegate && this.delegate.onProgress) {\n                    this.delegate.onProgress({\n                        message: message,\n                        session: this.dialog,\n                        prack: function (options) {\n                            throw new Error(\"Unimplemented.\");\n                        }\n                    });\n                }\n                break;\n            case /^2[0-9]{2}$/.test(statusCode):\n                // Update dialog signaling state with offer/answer in body\n                this.dialog.signalingStateTransition(message);\n                if (this.delegate && this.delegate.onAccept) {\n                    this.delegate.onAccept({\n                        message: message,\n                        session: this.dialog,\n                        ack: function (options) {\n                            var outgoingAckRequest = _this.dialog.ack(options);\n                            return outgoingAckRequest;\n                        }\n                    });\n                }\n                break;\n            case /^3[0-9]{2}$/.test(statusCode):\n                this.dialog.signalingStateRollback();\n                this.dialog.reinviteUserAgentClient = undefined; // ACK was handled by transaction\n                if (this.delegate && this.delegate.onRedirect) {\n                    this.delegate.onRedirect({ message: message });\n                }\n                break;\n            case /^[4-6][0-9]{2}$/.test(statusCode):\n                this.dialog.signalingStateRollback();\n                this.dialog.reinviteUserAgentClient = undefined; // ACK was handled by transaction\n                if (this.delegate && this.delegate.onReject) {\n                    this.delegate.onReject({ message: message });\n                }\n                else {\n                    // If a UA receives a non-2xx final response to a re-INVITE, the session\n                    // parameters MUST remain unchanged, as if no re-INVITE had been issued.\n                    // Note that, as stated in Section 12.2.1.2, if the non-2xx final\n                    // response is a 481 (Call/Transaction Does Not Exist), or a 408\n                    // (Request Timeout), or no response at all is received for the re-\n                    // INVITE (that is, a timeout is returned by the INVITE client\n                    // transaction), the UAC will terminate the dialog.\n                    //\n                    // If a UAC receives a 491 response to a re-INVITE, it SHOULD start a\n                    // timer with a value T chosen as follows:\n                    //\n                    //    1. If the UAC is the owner of the Call-ID of the dialog ID\n                    //       (meaning it generated the value), T has a randomly chosen value\n                    //       between 2.1 and 4 seconds in units of 10 ms.\n                    //\n                    //    2. If the UAC is not the owner of the Call-ID of the dialog ID, T\n                    //       has a randomly chosen value of between 0 and 2 seconds in units\n                    //       of 10 ms.\n                    //\n                    // When the timer fires, the UAC SHOULD attempt the re-INVITE once more,\n                    // if it still desires for that session modification to take place.  For\n                    // example, if the call was already hung up with a BYE, the re-INVITE\n                    // would not take place.\n                    // https://tools.ietf.org/html/rfc3261#section-14.1\n                    // FIXME: TODO: The above.\n                }\n                break;\n            default:\n                throw new Error(\"Invalid status code \" + statusCode);\n        }\n    };\n    return ReInviteUserAgentClient;\n}(user_agent_client_1.UserAgentClient));\nexports.ReInviteUserAgentClient = ReInviteUserAgentClient;\n\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_server_1 = __webpack_require__(45);\n/**\n * Re-INVITE UAS.\n * @remarks\n * 14 Modifying an Existing Session\n * https://tools.ietf.org/html/rfc3261#section-14\n * 14.2 UAS Behavior\n * https://tools.ietf.org/html/rfc3261#section-14.2\n * @public\n */\nvar ReInviteUserAgentServer = /** @class */ (function (_super) {\n    tslib_1.__extends(ReInviteUserAgentServer, _super);\n    function ReInviteUserAgentServer(dialog, message, delegate) {\n        var _this = _super.call(this, transactions_1.InviteServerTransaction, dialog.userAgentCore, message, delegate) || this;\n        dialog.reinviteUserAgentServer = _this;\n        _this.dialog = dialog;\n        return _this;\n    }\n    /**\n     * Update the dialog signaling state on a 2xx response.\n     * @param options - Options bucket.\n     */\n    ReInviteUserAgentServer.prototype.accept = function (options) {\n        if (options === void 0) { options = { statusCode: 200 }; }\n        // FIXME: The next two lines SHOULD go away, but I suppose it's technically harmless...\n        // These are here because some versions of SIP.js prior to 0.13.8 set the route set\n        // of all in dialog ACKs based on the Record-Route headers in the associated 2xx\n        // response. While this worked for dialog forming 2xx responses, it was technically\n        // broken for re-INVITE ACKS as it only worked if the UAS populated the Record-Route\n        // headers in the re-INVITE 2xx response (which is not required and a waste of bandwidth\n        // as the should be ignored if present in re-INVITE ACKS) and the UAS populated\n        // the Record-Route headers with the correct values (would be weird not too, but...).\n        // Anyway, for now the technically useless Record-Route headers are being added\n        // to maintain \"backwards compatibility\" with the older broken versions of SIP.js.\n        options.extraHeaders = options.extraHeaders || [];\n        options.extraHeaders = options.extraHeaders.concat(this.dialog.routeSet.map(function (route) { return \"Record-Route: \" + route; }));\n        // Send and return the response\n        var response = _super.prototype.accept.call(this, options);\n        var session = this.dialog;\n        var result = tslib_1.__assign(tslib_1.__assign({}, response), { session: session });\n        if (options.body) {\n            // Update dialog signaling state with offer/answer in body\n            this.dialog.signalingStateTransition(options.body);\n        }\n        // Update dialog\n        this.dialog.reConfirm();\n        return result;\n    };\n    /**\n     * Update the dialog signaling state on a 1xx response.\n     * @param options - Progress options bucket.\n     */\n    ReInviteUserAgentServer.prototype.progress = function (options) {\n        if (options === void 0) { options = { statusCode: 180 }; }\n        // Send and return the response\n        var response = _super.prototype.progress.call(this, options);\n        var session = this.dialog;\n        var result = tslib_1.__assign(tslib_1.__assign({}, response), { session: session });\n        // Update dialog signaling state\n        if (options.body) {\n            this.dialog.signalingStateTransition(options.body);\n        }\n        return result;\n    };\n    /**\n     * TODO: Not Yet Supported\n     * @param contacts - Contacts to redirect to.\n     * @param options - Redirect options bucket.\n     */\n    ReInviteUserAgentServer.prototype.redirect = function (contacts, options) {\n        if (options === void 0) { options = { statusCode: 302 }; }\n        this.dialog.signalingStateRollback();\n        this.dialog.reinviteUserAgentServer = undefined; // ACK will be handled by transaction\n        throw new Error(\"Unimplemented.\");\n    };\n    /**\n     * 3.1 Background on Re-INVITE Handling by UASs\n     * An error response to a re-INVITE has the following semantics.  As\n     * specified in Section 12.2.2 of RFC 3261 [RFC3261], if a re-INVITE is\n     * rejected, no state changes are performed.\n     * https://tools.ietf.org/html/rfc6141#section-3.1\n     * @param options - Reject options bucket.\n     */\n    ReInviteUserAgentServer.prototype.reject = function (options) {\n        if (options === void 0) { options = { statusCode: 488 }; }\n        this.dialog.signalingStateRollback();\n        this.dialog.reinviteUserAgentServer = undefined; // ACK will be handled by transaction\n        return _super.prototype.reject.call(this, options);\n    };\n    return ReInviteUserAgentServer;\n}(user_agent_server_1.UserAgentServer));\nexports.ReInviteUserAgentServer = ReInviteUserAgentServer;\n\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar messages_1 = __webpack_require__(5);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_client_1 = __webpack_require__(43);\n/**\n * REFER UAC.\n * @public\n */\nvar ReferUserAgentClient = /** @class */ (function (_super) {\n    tslib_1.__extends(ReferUserAgentClient, _super);\n    function ReferUserAgentClient(dialog, delegate, options) {\n        var _this = this;\n        var message = dialog.createOutgoingRequestMessage(messages_1.C.REFER, options);\n        _this = _super.call(this, transactions_1.NonInviteClientTransaction, dialog.userAgentCore, message, delegate) || this;\n        return _this;\n    }\n    return ReferUserAgentClient;\n}(user_agent_client_1.UserAgentClient));\nexports.ReferUserAgentClient = ReferUserAgentClient;\n\n\n/***/ }),\n/* 57 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_server_1 = __webpack_require__(45);\n/**\n * REFER UAS.\n * @public\n */\nvar ReferUserAgentServer = /** @class */ (function (_super) {\n    tslib_1.__extends(ReferUserAgentServer, _super);\n    /**\n     * REFER UAS constructor.\n     * @param dialogOrCore - Dialog for in dialog REFER, UserAgentCore for out of dialog REFER.\n     * @param message - Incoming REFER request message.\n     */\n    function ReferUserAgentServer(dialogOrCore, message, delegate) {\n        var _this = this;\n        var userAgentCore = instanceOfSessionDialog(dialogOrCore) ?\n            dialogOrCore.userAgentCore :\n            dialogOrCore;\n        _this = _super.call(this, transactions_1.NonInviteServerTransaction, userAgentCore, message, delegate) || this;\n        return _this;\n    }\n    return ReferUserAgentServer;\n}(user_agent_server_1.UserAgentServer));\nexports.ReferUserAgentServer = ReferUserAgentServer;\nfunction instanceOfSessionDialog(object) {\n    return object.userAgentCore !== undefined;\n}\n\n\n/***/ }),\n/* 58 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar messages_1 = __webpack_require__(5);\nvar subscription_1 = __webpack_require__(59);\nvar timers_1 = __webpack_require__(27);\nvar allowed_methods_1 = __webpack_require__(61);\nvar notify_user_agent_server_1 = __webpack_require__(51);\nvar re_subscribe_user_agent_client_1 = __webpack_require__(62);\nvar dialog_1 = __webpack_require__(4);\n/**\n * Subscription Dialog.\n * @remarks\n * SIP-Specific Event Notification\n *\n * Abstract\n *\n *    This document describes an extension to the Session Initiation\n *    Protocol (SIP) defined by RFC 3261.  The purpose of this extension is\n *    to provide an extensible framework by which SIP nodes can request\n *    notification from remote nodes indicating that certain events have\n *    occurred.\n *\n *    Note that the event notification mechanisms defined herein are NOT\n *    intended to be a general-purpose infrastructure for all classes of\n *    event subscription and notification.\n *\n *    This document represents a backwards-compatible improvement on the\n *    original mechanism described by RFC 3265, taking into account several\n *    years of implementation experience.  Accordingly, this document\n *    obsoletes RFC 3265.  This document also updates RFC 4660 slightly to\n *    accommodate some small changes to the mechanism that were discussed\n *    in that document.\n *\n *  https://tools.ietf.org/html/rfc6665\n * @public\n */\nvar SubscriptionDialog = /** @class */ (function (_super) {\n    tslib_1.__extends(SubscriptionDialog, _super);\n    function SubscriptionDialog(subscriptionEvent, subscriptionExpires, subscriptionState, core, state, delegate) {\n        var _this = _super.call(this, core, state) || this;\n        _this.delegate = delegate;\n        _this._autoRefresh = false;\n        _this._subscriptionEvent = subscriptionEvent;\n        _this._subscriptionExpires = subscriptionExpires;\n        _this._subscriptionExpiresInitial = subscriptionExpires;\n        _this._subscriptionExpiresLastSet = Math.floor(Date.now() / 1000);\n        _this._subscriptionRefresh = undefined;\n        _this._subscriptionRefreshLastSet = undefined;\n        _this._subscriptionState = subscriptionState;\n        _this.logger = core.loggerFactory.getLogger(\"sip.subscribe-dialog\");\n        _this.logger.log(\"SUBSCRIBE dialog \" + _this.id + \" constructed\");\n        return _this;\n    }\n    /**\n     * When a UAC receives a response that establishes a dialog, it\n     * constructs the state of the dialog.  This state MUST be maintained\n     * for the duration of the dialog.\n     * https://tools.ietf.org/html/rfc3261#section-12.1.2\n     * @param outgoingRequestMessage - Outgoing request message for dialog.\n     * @param incomingResponseMessage - Incoming response message creating dialog.\n     */\n    SubscriptionDialog.initialDialogStateForSubscription = function (outgoingSubscribeRequestMessage, incomingNotifyRequestMessage) {\n        // If the request was sent over TLS, and the Request-URI contained a\n        // SIPS URI, the \"secure\" flag is set to TRUE.\n        // https://tools.ietf.org/html/rfc3261#section-12.1.2\n        var secure = false; // FIXME: Currently no support for TLS.\n        // The route set MUST be set to the list of URIs in the Record-Route\n        // header field from the response, taken in reverse order and preserving\n        // all URI parameters.  If no Record-Route header field is present in\n        // the response, the route set MUST be set to the empty set.  This route\n        // set, even if empty, overrides any pre-existing route set for future\n        // requests in this dialog.  The remote target MUST be set to the URI\n        // from the Contact header field of the response.\n        // https://tools.ietf.org/html/rfc3261#section-12.1.2\n        var routeSet = incomingNotifyRequestMessage.getHeaders(\"record-route\");\n        var contact = incomingNotifyRequestMessage.parseHeader(\"contact\");\n        if (!contact) { // TODO: Review to make sure this will never happen\n            throw new Error(\"Contact undefined.\");\n        }\n        if (!(contact instanceof messages_1.NameAddrHeader)) {\n            throw new Error(\"Contact not instance of NameAddrHeader.\");\n        }\n        var remoteTarget = contact.uri;\n        // The local sequence number MUST be set to the value of the sequence\n        // number in the CSeq header field of the request.  The remote sequence\n        // number MUST be empty (it is established when the remote UA sends a\n        // request within the dialog).  The call identifier component of the\n        // dialog ID MUST be set to the value of the Call-ID in the request.\n        // The local tag component of the dialog ID MUST be set to the tag in\n        // the From field in the request, and the remote tag component of the\n        // dialog ID MUST be set to the tag in the To field of the response.  A\n        // UAC MUST be prepared to receive a response without a tag in the To\n        // field, in which case the tag is considered to have a value of null.\n        //\n        //    This is to maintain backwards compatibility with RFC 2543, which\n        //    did not mandate To tags.\n        //\n        // https://tools.ietf.org/html/rfc3261#section-12.1.2\n        var localSequenceNumber = outgoingSubscribeRequestMessage.cseq;\n        var remoteSequenceNumber = undefined;\n        var callId = outgoingSubscribeRequestMessage.callId;\n        var localTag = outgoingSubscribeRequestMessage.fromTag;\n        var remoteTag = incomingNotifyRequestMessage.fromTag;\n        if (!callId) { // TODO: Review to make sure this will never happen\n            throw new Error(\"Call id undefined.\");\n        }\n        if (!localTag) { // TODO: Review to make sure this will never happen\n            throw new Error(\"From tag undefined.\");\n        }\n        if (!remoteTag) { // TODO: Review to make sure this will never happen\n            throw new Error(\"To tag undefined.\"); // FIXME: No backwards compatibility with RFC 2543\n        }\n        // The remote URI MUST be set to the URI in the To field, and the local\n        // URI MUST be set to the URI in the From field.\n        // https://tools.ietf.org/html/rfc3261#section-12.1.2\n        if (!outgoingSubscribeRequestMessage.from) { // TODO: Review to make sure this will never happen\n            throw new Error(\"From undefined.\");\n        }\n        if (!outgoingSubscribeRequestMessage.to) { // TODO: Review to make sure this will never happen\n            throw new Error(\"To undefined.\");\n        }\n        var localURI = outgoingSubscribeRequestMessage.from.uri;\n        var remoteURI = outgoingSubscribeRequestMessage.to.uri;\n        // A dialog can also be in the \"early\" state, which occurs when it is\n        // created with a provisional response, and then transition to the\n        // \"confirmed\" state when a 2xx final response arrives.\n        // https://tools.ietf.org/html/rfc3261#section-12\n        var early = false;\n        var dialogState = {\n            id: callId + localTag + remoteTag,\n            early: early,\n            callId: callId,\n            localTag: localTag,\n            remoteTag: remoteTag,\n            localSequenceNumber: localSequenceNumber,\n            remoteSequenceNumber: remoteSequenceNumber,\n            localURI: localURI,\n            remoteURI: remoteURI,\n            remoteTarget: remoteTarget,\n            routeSet: routeSet,\n            secure: secure\n        };\n        return dialogState;\n    };\n    SubscriptionDialog.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        if (this.N) {\n            clearTimeout(this.N);\n            this.N = undefined;\n        }\n        this.refreshTimerClear();\n        this.logger.log(\"SUBSCRIBE dialog \" + this.id + \" destroyed\");\n    };\n    Object.defineProperty(SubscriptionDialog.prototype, \"autoRefresh\", {\n        get: function () {\n            return this._autoRefresh;\n        },\n        set: function (autoRefresh) {\n            this._autoRefresh = true;\n            this.refreshTimerSet();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SubscriptionDialog.prototype, \"subscriptionEvent\", {\n        get: function () {\n            return this._subscriptionEvent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SubscriptionDialog.prototype, \"subscriptionExpires\", {\n        /** Number of seconds until subscription expires. */\n        get: function () {\n            var secondsSinceLastSet = Math.floor(Date.now() / 1000) - this._subscriptionExpiresLastSet;\n            var secondsUntilExpires = this._subscriptionExpires - secondsSinceLastSet;\n            return Math.max(secondsUntilExpires, 0);\n        },\n        set: function (expires) {\n            if (expires < 0) {\n                throw new Error(\"Expires must be greater than or equal to zero.\");\n            }\n            this._subscriptionExpires = expires;\n            this._subscriptionExpiresLastSet = Math.floor(Date.now() / 1000);\n            if (this.autoRefresh) {\n                var refresh = this.subscriptionRefresh;\n                if (refresh === undefined || refresh >= expires) {\n                    this.refreshTimerSet();\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SubscriptionDialog.prototype, \"subscriptionExpiresInitial\", {\n        get: function () {\n            return this._subscriptionExpiresInitial;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SubscriptionDialog.prototype, \"subscriptionRefresh\", {\n        /** Number of seconds until subscription auto refresh. */\n        get: function () {\n            if (this._subscriptionRefresh === undefined || this._subscriptionRefreshLastSet === undefined) {\n                return undefined;\n            }\n            var secondsSinceLastSet = Math.floor(Date.now() / 1000) - this._subscriptionRefreshLastSet;\n            var secondsUntilExpires = this._subscriptionRefresh - secondsSinceLastSet;\n            return Math.max(secondsUntilExpires, 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SubscriptionDialog.prototype, \"subscriptionState\", {\n        get: function () {\n            return this._subscriptionState;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Receive in dialog request message from transport.\n     * @param message -  The incoming request message.\n     */\n    SubscriptionDialog.prototype.receiveRequest = function (message) {\n        this.logger.log(\"SUBSCRIBE dialog \" + this.id + \" received \" + message.method + \" request\");\n        // Request within a dialog out of sequence guard.\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\n        if (!this.sequenceGuard(message)) {\n            this.logger.log(\"SUBSCRIBE dialog \" + this.id + \" rejected out of order \" + message.method + \" request.\");\n            return;\n        }\n        // Request within a dialog common processing.\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\n        _super.prototype.receiveRequest.call(this, message);\n        // Switch on method and then delegate.\n        switch (message.method) {\n            case messages_1.C.NOTIFY:\n                this.onNotify(message);\n                break;\n            default:\n                this.logger.log(\"SUBSCRIBE dialog \" + this.id + \" received unimplemented \" + message.method + \" request\");\n                this.core.replyStateless(message, { statusCode: 501 });\n                break;\n        }\n    };\n    /**\n     * 4.1.2.2.  Refreshing of Subscriptions\n     * https://tools.ietf.org/html/rfc6665#section-4.1.2.2\n     */\n    SubscriptionDialog.prototype.refresh = function () {\n        var allowHeader = \"Allow: \" + allowed_methods_1.AllowedMethods.toString();\n        var options = {};\n        options.extraHeaders = (options.extraHeaders || []).slice();\n        options.extraHeaders.push(allowHeader);\n        options.extraHeaders.push(\"Event: \" + this.subscriptionEvent);\n        options.extraHeaders.push(\"Expires: \" + this.subscriptionExpiresInitial);\n        options.extraHeaders.push(\"Contact: \" + this.core.configuration.contact.toString());\n        return this.subscribe(undefined, options);\n    };\n    /**\n     * 4.1.2.2.  Refreshing of Subscriptions\n     * https://tools.ietf.org/html/rfc6665#section-4.1.2.2\n     * @param delegate - Delegate to handle responses.\n     * @param options - Options bucket.\n     */\n    SubscriptionDialog.prototype.subscribe = function (delegate, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        if (this.subscriptionState !== subscription_1.SubscriptionState.Pending && this.subscriptionState !== subscription_1.SubscriptionState.Active) {\n            // FIXME: This needs to be a proper exception\n            throw new Error(\"Invalid state \" + this.subscriptionState + \". May only re-subscribe while in state \\\"pending\\\" or \\\"active\\\".\");\n        }\n        this.logger.log(\"SUBSCRIBE dialog \" + this.id + \" sending SUBSCRIBE request\");\n        var uac = new re_subscribe_user_agent_client_1.ReSubscribeUserAgentClient(this, delegate, options);\n        // When refreshing a subscription, a subscriber starts Timer N, set to\n        // 64*T1, when it sends the SUBSCRIBE request.\n        // https://tools.ietf.org/html/rfc6665#section-4.1.2.2\n        this.N = setTimeout(function () { return _this.timer_N(); }, timers_1.Timers.TIMER_N);\n        return uac;\n    };\n    /**\n     * 4.4.1.  Dialog Creation and Termination\n     * A subscription is destroyed after a notifier sends a NOTIFY request\n     * with a \"Subscription-State\" of \"terminated\", or in certain error\n     * situations described elsewhere in this document.\n     * https://tools.ietf.org/html/rfc6665#section-4.4.1\n     */\n    SubscriptionDialog.prototype.terminate = function () {\n        this.stateTransition(subscription_1.SubscriptionState.Terminated);\n        this.onTerminated();\n    };\n    /**\n     * 4.1.2.3.  Unsubscribing\n     * https://tools.ietf.org/html/rfc6665#section-4.1.2.3\n     */\n    SubscriptionDialog.prototype.unsubscribe = function () {\n        var allowHeader = \"Allow: \" + allowed_methods_1.AllowedMethods.toString();\n        var options = {};\n        options.extraHeaders = (options.extraHeaders || []).slice();\n        options.extraHeaders.push(allowHeader);\n        options.extraHeaders.push(\"Event: \" + this.subscriptionEvent);\n        options.extraHeaders.push(\"Expires: 0\");\n        options.extraHeaders.push(\"Contact: \" + this.core.configuration.contact.toString());\n        return this.subscribe(undefined, options);\n    };\n    /**\n     * Handle in dialog NOTIFY requests.\n     * This does not include the first NOTIFY which created the dialog.\n     * @param message - The incoming NOTIFY request message.\n     */\n    SubscriptionDialog.prototype.onNotify = function (message) {\n        // If, for some reason, the event package designated in the \"Event\"\n        // header field of the NOTIFY request is not supported, the subscriber\n        // will respond with a 489 (Bad Event) response.\n        // https://tools.ietf.org/html/rfc6665#section-4.1.3\n        var event = message.parseHeader(\"Event\").event;\n        if (!event || event !== this.subscriptionEvent) {\n            this.core.replyStateless(message, { statusCode: 489 });\n            return;\n        }\n        // In the state diagram, \"Re-subscription times out\" means that an\n        // attempt to refresh or update the subscription using a new SUBSCRIBE\n        // request does not result in a NOTIFY request before the corresponding\n        // Timer N expires.\n        // https://tools.ietf.org/html/rfc6665#section-4.1.2\n        if (this.N) {\n            clearTimeout(this.N);\n            this.N = undefined;\n        }\n        // NOTIFY requests MUST contain \"Subscription-State\" header fields that\n        // indicate the status of the subscription.\n        // https://tools.ietf.org/html/rfc6665#section-4.1.3\n        var subscriptionState = message.parseHeader(\"Subscription-State\");\n        if (!subscriptionState || !subscriptionState.state) {\n            this.core.replyStateless(message, { statusCode: 489 });\n            return;\n        }\n        var state = subscriptionState.state;\n        var expires = subscriptionState.expires ? Math.max(subscriptionState.expires, 0) : undefined;\n        // Update our state and expiration.\n        switch (state) {\n            case \"pending\":\n                this.stateTransition(subscription_1.SubscriptionState.Pending, expires);\n                break;\n            case \"active\":\n                this.stateTransition(subscription_1.SubscriptionState.Active, expires);\n                break;\n            case \"terminated\":\n                this.stateTransition(subscription_1.SubscriptionState.Terminated, expires);\n                break;\n            default:\n                this.logger.warn(\"Unrecognized subscription state.\");\n                break;\n        }\n        // Delegate remainder of NOTIFY handling.\n        var uas = new notify_user_agent_server_1.NotifyUserAgentServer(this, message);\n        if (this.delegate && this.delegate.onNotify) {\n            this.delegate.onNotify(uas);\n        }\n        else {\n            uas.accept();\n        }\n    };\n    SubscriptionDialog.prototype.onRefresh = function (request) {\n        if (this.delegate && this.delegate.onRefresh) {\n            this.delegate.onRefresh(request);\n        }\n    };\n    SubscriptionDialog.prototype.onTerminated = function () {\n        if (this.delegate && this.delegate.onTerminated) {\n            this.delegate.onTerminated();\n        }\n    };\n    SubscriptionDialog.prototype.refreshTimerClear = function () {\n        if (this.refreshTimer) {\n            clearTimeout(this.refreshTimer);\n            this.refreshTimer = undefined;\n        }\n    };\n    SubscriptionDialog.prototype.refreshTimerSet = function () {\n        var _this = this;\n        this.refreshTimerClear();\n        if (this.autoRefresh && this.subscriptionExpires > 0) {\n            var refresh = this.subscriptionExpires * 900;\n            this._subscriptionRefresh = Math.floor(refresh / 1000);\n            this._subscriptionRefreshLastSet = Math.floor(Date.now() / 1000);\n            this.refreshTimer = setTimeout(function () {\n                _this.refreshTimer = undefined;\n                _this._subscriptionRefresh = undefined;\n                _this._subscriptionRefreshLastSet = undefined;\n                _this.onRefresh(_this.refresh());\n            }, refresh);\n        }\n    };\n    SubscriptionDialog.prototype.stateTransition = function (newState, newExpires) {\n        var _this = this;\n        // Assert valid state transitions.\n        var invalidStateTransition = function () {\n            _this.logger.warn(\"Invalid subscription state transition from \" + _this.subscriptionState + \" to \" + newState);\n        };\n        switch (newState) {\n            case subscription_1.SubscriptionState.Initial:\n                invalidStateTransition();\n                return;\n            case subscription_1.SubscriptionState.NotifyWait:\n                invalidStateTransition();\n                return;\n            case subscription_1.SubscriptionState.Pending:\n                if (this.subscriptionState !== subscription_1.SubscriptionState.NotifyWait &&\n                    this.subscriptionState !== subscription_1.SubscriptionState.Pending) {\n                    invalidStateTransition();\n                    return;\n                }\n                break;\n            case subscription_1.SubscriptionState.Active:\n                if (this.subscriptionState !== subscription_1.SubscriptionState.NotifyWait &&\n                    this.subscriptionState !== subscription_1.SubscriptionState.Pending &&\n                    this.subscriptionState !== subscription_1.SubscriptionState.Active) {\n                    invalidStateTransition();\n                    return;\n                }\n                break;\n            case subscription_1.SubscriptionState.Terminated:\n                if (this.subscriptionState !== subscription_1.SubscriptionState.NotifyWait &&\n                    this.subscriptionState !== subscription_1.SubscriptionState.Pending &&\n                    this.subscriptionState !== subscription_1.SubscriptionState.Active) {\n                    invalidStateTransition();\n                    return;\n                }\n                break;\n            default:\n                invalidStateTransition();\n                return;\n        }\n        // If the \"Subscription-State\" value is \"pending\", the subscription has\n        // been received by the notifier, but there is insufficient policy\n        // information to grant or deny the subscription yet.  If the header\n        // field also contains an \"expires\" parameter, the subscriber SHOULD\n        // take it as the authoritative subscription duration and adjust\n        // accordingly.  No further action is necessary on the part of the\n        // subscriber.  The \"retry-after\" and \"reason\" parameters have no\n        // semantics for \"pending\".\n        // https://tools.ietf.org/html/rfc6665#section-4.1.3\n        if (newState === subscription_1.SubscriptionState.Pending) {\n            if (newExpires) {\n                this.subscriptionExpires = newExpires;\n            }\n        }\n        // If the \"Subscription-State\" header field value is \"active\", it means\n        // that the subscription has been accepted and (in general) has been\n        // authorized.  If the header field also contains an \"expires\"\n        // parameter, the subscriber SHOULD take it as the authoritative\n        // subscription duration and adjust accordingly.  The \"retry-after\" and\n        // \"reason\" parameters have no semantics for \"active\".\n        // https://tools.ietf.org/html/rfc6665#section-4.1.3\n        if (newState === subscription_1.SubscriptionState.Active) {\n            if (newExpires) {\n                this.subscriptionExpires = newExpires;\n            }\n        }\n        // If the \"Subscription-State\" value is \"terminated\", the subscriber\n        // MUST consider the subscription terminated.  The \"expires\" parameter\n        // has no semantics for \"terminated\" -- notifiers SHOULD NOT include an\n        // \"expires\" parameter on a \"Subscription-State\" header field with a\n        // value of \"terminated\", and subscribers MUST ignore any such\n        // parameter, if present.\n        if (newState === subscription_1.SubscriptionState.Terminated) {\n            this.dispose();\n        }\n        this._subscriptionState = newState;\n    };\n    /**\n     * When refreshing a subscription, a subscriber starts Timer N, set to\n     * 64*T1, when it sends the SUBSCRIBE request.  If this Timer N expires\n     * prior to the receipt of a NOTIFY request, the subscriber considers\n     * the subscription terminated.  If the subscriber receives a success\n     * response to the SUBSCRIBE request that indicates that no NOTIFY\n     * request will be generated -- such as the 204 response defined for use\n     * with the optional extension described in [RFC5839] -- then it MUST\n     * cancel Timer N.\n     * https://tools.ietf.org/html/rfc6665#section-4.1.2.2\n     */\n    SubscriptionDialog.prototype.timer_N = function () {\n        if (this.subscriptionState !== subscription_1.SubscriptionState.Terminated) {\n            this.stateTransition(subscription_1.SubscriptionState.Terminated);\n            this.onTerminated();\n        }\n    };\n    return SubscriptionDialog;\n}(dialog_1.Dialog));\nexports.SubscriptionDialog = SubscriptionDialog;\n\n\n/***/ }),\n/* 59 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\ntslib_1.__exportStar(__webpack_require__(60), exports);\n\n\n/***/ }),\n/* 60 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Subscription state.\n * @remarks\n * https://tools.ietf.org/html/rfc6665#section-4.1.2\n * @public\n */\nvar SubscriptionState;\n(function (SubscriptionState) {\n    SubscriptionState[\"Initial\"] = \"Initial\";\n    SubscriptionState[\"NotifyWait\"] = \"NotifyWait\";\n    SubscriptionState[\"Pending\"] = \"Pending\";\n    SubscriptionState[\"Active\"] = \"Active\";\n    SubscriptionState[\"Terminated\"] = \"Terminated\";\n})(SubscriptionState = exports.SubscriptionState || (exports.SubscriptionState = {}));\n\n\n/***/ }),\n/* 61 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar messages_1 = __webpack_require__(5);\n/**\n * FIXME: TODO: Should be configurable/variable.\n */\nexports.AllowedMethods = [\n    messages_1.C.ACK,\n    messages_1.C.BYE,\n    messages_1.C.CANCEL,\n    messages_1.C.INFO,\n    messages_1.C.INVITE,\n    messages_1.C.MESSAGE,\n    messages_1.C.NOTIFY,\n    messages_1.C.OPTIONS,\n    messages_1.C.PRACK,\n    messages_1.C.REFER,\n    messages_1.C.REGISTER,\n    messages_1.C.SUBSCRIBE\n];\n\n\n/***/ }),\n/* 62 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar messages_1 = __webpack_require__(5);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_client_1 = __webpack_require__(43);\n/**\n * Re-SUBSCRIBE UAC.\n * @public\n */\nvar ReSubscribeUserAgentClient = /** @class */ (function (_super) {\n    tslib_1.__extends(ReSubscribeUserAgentClient, _super);\n    function ReSubscribeUserAgentClient(dialog, delegate, options) {\n        var _this = this;\n        var message = dialog.createOutgoingRequestMessage(messages_1.C.SUBSCRIBE, options);\n        _this = _super.call(this, transactions_1.NonInviteClientTransaction, dialog.userAgentCore, message, delegate) || this;\n        _this.dialog = dialog;\n        return _this;\n    }\n    ReSubscribeUserAgentClient.prototype.waitNotifyStop = function () {\n        // TODO: Placeholder. Not utilized currently.\n        return;\n    };\n    /**\n     * Receive a response from the transaction layer.\n     * @param message - Incoming response message.\n     */\n    ReSubscribeUserAgentClient.prototype.receiveResponse = function (message) {\n        if (message.statusCode && message.statusCode >= 200 && message.statusCode < 300) {\n            //  The \"Expires\" header field in a 200-class response to SUBSCRIBE\n            //  request indicates the actual duration for which the subscription will\n            //  remain active (unless refreshed).  The received value might be\n            //  smaller than the value indicated in the SUBSCRIBE request but cannot\n            //  be larger; see Section 4.2.1 for details.\n            // https://tools.ietf.org/html/rfc6665#section-4.1.2.1\n            var expires = message.getHeader(\"Expires\");\n            if (!expires) {\n                this.logger.warn(\"Expires header missing in a 200-class response to SUBSCRIBE\");\n            }\n            else {\n                var subscriptionExpiresReceived = Number(expires);\n                if (this.dialog.subscriptionExpires > subscriptionExpiresReceived) {\n                    this.dialog.subscriptionExpires = subscriptionExpiresReceived;\n                }\n            }\n        }\n        if (message.statusCode && message.statusCode >= 400 && message.statusCode < 700) {\n            // If a SUBSCRIBE request to refresh a subscription receives a 404, 405,\n            // 410, 416, 480-485, 489, 501, or 604 response, the subscriber MUST\n            // consider the subscription terminated.  (See [RFC5057] for further\n            // details and notes about the effect of error codes on dialogs and\n            // usages within dialog, such as subscriptions).  If the subscriber\n            // wishes to re-subscribe to the state, he does so by composing an\n            // unrelated initial SUBSCRIBE request with a freshly generated Call-ID\n            // and a new, unique \"From\" tag (see Section 4.1.2.1).\n            // https://tools.ietf.org/html/rfc6665#section-4.1.2.2\n            var errorCodes = [404, 405, 410, 416, 480, 481, 482, 483, 484, 485, 489, 501, 604];\n            if (errorCodes.indexOf(message.statusCode) !== -1) {\n                this.dialog.terminate();\n            }\n            // If a SUBSCRIBE request to refresh a subscription fails with any error\n            // code other than those listed above, the original subscription is\n            // still considered valid for the duration of the most recently known\n            // \"Expires\" value as negotiated by the most recent successful SUBSCRIBE\n            // transaction, or as communicated by a NOTIFY request in its\n            // \"Subscription-State\" header field \"expires\" parameter.\n            // https://tools.ietf.org/html/rfc6665#section-4.1.2.2\n        }\n        _super.prototype.receiveResponse.call(this, message);\n    };\n    return ReSubscribeUserAgentClient;\n}(user_agent_client_1.UserAgentClient));\nexports.ReSubscribeUserAgentClient = ReSubscribeUserAgentClient;\n\n\n/***/ }),\n/* 63 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\ntslib_1.__exportStar(__webpack_require__(64), exports);\ntslib_1.__exportStar(__webpack_require__(65), exports);\ntslib_1.__exportStar(__webpack_require__(66), exports);\n\n\n/***/ }),\n/* 64 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Log levels.\n * @public\n */\nvar Levels;\n(function (Levels) {\n    Levels[Levels[\"error\"] = 0] = \"error\";\n    Levels[Levels[\"warn\"] = 1] = \"warn\";\n    Levels[Levels[\"log\"] = 2] = \"log\";\n    Levels[Levels[\"debug\"] = 3] = \"debug\";\n})(Levels = exports.Levels || (exports.Levels = {}));\n\n\n/***/ }),\n/* 65 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar levels_1 = __webpack_require__(64);\nvar logger_1 = __webpack_require__(66);\n/**\n * Logger.\n * @public\n */\nvar LoggerFactory = /** @class */ (function () {\n    function LoggerFactory() {\n        this.builtinEnabled = true;\n        this._level = levels_1.Levels.log;\n        this.loggers = {};\n        this.logger = this.getLogger(\"sip:loggerfactory\");\n    }\n    Object.defineProperty(LoggerFactory.prototype, \"level\", {\n        get: function () { return this._level; },\n        set: function (newLevel) {\n            if (newLevel >= 0 && newLevel <= 3) {\n                this._level = newLevel;\n            }\n            else if (newLevel > 3) {\n                this._level = 3;\n            }\n            else if (levels_1.Levels.hasOwnProperty(newLevel)) {\n                this._level = newLevel;\n            }\n            else {\n                this.logger.error(\"invalid 'level' parameter value: \" + JSON.stringify(newLevel));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LoggerFactory.prototype, \"connector\", {\n        get: function () {\n            return this._connector;\n        },\n        set: function (value) {\n            if (!value) {\n                this._connector = undefined;\n            }\n            else if (typeof value === \"function\") {\n                this._connector = value;\n            }\n            else {\n                this.logger.error(\"invalid 'connector' parameter value: \" + JSON.stringify(value));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LoggerFactory.prototype.getLogger = function (category, label) {\n        if (label && this.level === 3) {\n            return new logger_1.Logger(this, category, label);\n        }\n        else if (this.loggers[category]) {\n            return this.loggers[category];\n        }\n        else {\n            var logger = new logger_1.Logger(this, category);\n            this.loggers[category] = logger;\n            return logger;\n        }\n    };\n    LoggerFactory.prototype.genericLog = function (levelToLog, category, label, content) {\n        if (this.level >= levelToLog) {\n            if (this.builtinEnabled) {\n                this.print(levelToLog, category, label, content);\n            }\n        }\n        if (this.connector) {\n            this.connector(levels_1.Levels[levelToLog], category, label, content);\n        }\n    };\n    LoggerFactory.prototype.print = function (levelToLog, category, label, content) {\n        if (typeof content === \"string\") {\n            var prefix = [new Date(), category];\n            if (label) {\n                prefix.push(label);\n            }\n            content = prefix.concat(content).join(\" | \");\n        }\n        switch (levelToLog) {\n            case levels_1.Levels.error:\n                // tslint:disable-next-line:no-console\n                console.error(content);\n                break;\n            case levels_1.Levels.warn:\n                // tslint:disable-next-line:no-console\n                console.warn(content);\n                break;\n            case levels_1.Levels.log:\n                // tslint:disable-next-line:no-console\n                console.log(content);\n                break;\n            case levels_1.Levels.debug:\n                // tslint:disable-next-line:no-console\n                console.debug(content);\n                break;\n            default:\n                break;\n        }\n    };\n    return LoggerFactory;\n}());\nexports.LoggerFactory = LoggerFactory;\n\n\n/***/ }),\n/* 66 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar levels_1 = __webpack_require__(64);\n/**\n * Logger.\n * @public\n */\nvar Logger = /** @class */ (function () {\n    function Logger(logger, category, label) {\n        this.logger = logger;\n        this.category = category;\n        this.label = label;\n    }\n    Logger.prototype.error = function (content) { this.genericLog(levels_1.Levels.error, content); };\n    Logger.prototype.warn = function (content) { this.genericLog(levels_1.Levels.warn, content); };\n    Logger.prototype.log = function (content) { this.genericLog(levels_1.Levels.log, content); };\n    Logger.prototype.debug = function (content) { this.genericLog(levels_1.Levels.debug, content); };\n    Logger.prototype.genericLog = function (level, content) {\n        this.logger.genericLog(level, this.category, this.label, content);\n    };\n    return Logger;\n}());\nexports.Logger = Logger;\n\n\n/***/ }),\n/* 67 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\ntslib_1.__exportStar(__webpack_require__(68), exports);\n\n\n/***/ }),\n/* 68 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar messages_1 = __webpack_require__(5);\nvar transactions_1 = __webpack_require__(28);\nvar user_agents_1 = __webpack_require__(69);\nvar allowed_methods_1 = __webpack_require__(61);\n/**\n * This is ported from UA.C.ACCEPTED_BODY_TYPES.\n * FIXME: TODO: Should be configurable/variable.\n */\nvar acceptedBodyTypes = [\n    \"application/sdp\",\n    \"application/dtmf-relay\"\n];\n/**\n * User Agent Core.\n * @remarks\n * Core designates the functions specific to a particular type\n * of SIP entity, i.e., specific to either a stateful or stateless\n * proxy, a user agent or registrar.  All cores, except those for\n * the stateless proxy, are transaction users.\n * https://tools.ietf.org/html/rfc3261#section-6\n *\n * UAC Core: The set of processing functions required of a UAC that\n * reside above the transaction and transport layers.\n * https://tools.ietf.org/html/rfc3261#section-6\n *\n * UAS Core: The set of processing functions required at a UAS that\n * resides above the transaction and transport layers.\n * https://tools.ietf.org/html/rfc3261#section-6\n * @public\n */\nvar UserAgentCore = /** @class */ (function () {\n    /**\n     * Constructor.\n     * @param configuration - Configuration.\n     * @param delegate - Delegate.\n     */\n    function UserAgentCore(configuration, delegate) {\n        if (delegate === void 0) { delegate = {}; }\n        /** UACs. */\n        this.userAgentClients = new Map();\n        /** UASs. */\n        this.userAgentServers = new Map();\n        this.configuration = configuration;\n        this.delegate = delegate;\n        this.dialogs = new Map();\n        this.subscribers = new Map();\n        this.logger = configuration.loggerFactory.getLogger(\"sip.user-agent-core\");\n    }\n    /** Destructor. */\n    UserAgentCore.prototype.dispose = function () {\n        this.reset();\n    };\n    /** Reset. */\n    UserAgentCore.prototype.reset = function () {\n        this.dialogs.forEach(function (dialog) { return dialog.dispose(); });\n        this.dialogs.clear();\n        this.subscribers.forEach(function (subscriber) { return subscriber.dispose(); });\n        this.subscribers.clear();\n        this.userAgentClients.forEach(function (uac) { return uac.dispose(); });\n        this.userAgentClients.clear();\n        this.userAgentServers.forEach(function (uac) { return uac.dispose(); });\n        this.userAgentServers.clear();\n    };\n    Object.defineProperty(UserAgentCore.prototype, \"loggerFactory\", {\n        /** Logger factory. */\n        get: function () {\n            return this.configuration.loggerFactory;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UserAgentCore.prototype, \"transport\", {\n        /** Transport. */\n        get: function () {\n            var transport = this.configuration.transportAccessor();\n            if (!transport) {\n                throw new Error(\"Transport undefined.\");\n            }\n            return transport;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Send INVITE.\n     * @param request - Outgoing request.\n     * @param delegate - Request delegate.\n     */\n    UserAgentCore.prototype.invite = function (request, delegate) {\n        return new user_agents_1.InviteUserAgentClient(this, request, delegate);\n    };\n    /**\n     * Send MESSAGE.\n     * @param request - Outgoing request.\n     * @param delegate - Request delegate.\n     */\n    UserAgentCore.prototype.message = function (request, delegate) {\n        return new user_agents_1.MessageUserAgentClient(this, request, delegate);\n    };\n    /**\n     * Send PUBLISH.\n     * @param request - Outgoing request.\n     * @param delegate - Request delegate.\n     */\n    UserAgentCore.prototype.publish = function (request, delegate) {\n        return new user_agents_1.PublishUserAgentClient(this, request, delegate);\n    };\n    /**\n     * Send REGISTER.\n     * @param request - Outgoing request.\n     * @param delegate - Request delegate.\n     */\n    UserAgentCore.prototype.register = function (request, delegate) {\n        return new user_agents_1.RegisterUserAgentClient(this, request, delegate);\n    };\n    /**\n     * Send SUBSCRIBE.\n     * @param request - Outgoing request.\n     * @param delegate - Request delegate.\n     */\n    UserAgentCore.prototype.subscribe = function (request, delegate) {\n        return new user_agents_1.SubscribeUserAgentClient(this, request, delegate);\n    };\n    /**\n     * Send a request.\n     * @param request - Outgoing request.\n     * @param delegate - Request delegate.\n     */\n    UserAgentCore.prototype.request = function (request, delegate) {\n        return new user_agents_1.UserAgentClient(transactions_1.NonInviteClientTransaction, this, request, delegate);\n    };\n    /**\n     * Outgoing request message factory function.\n     * @param method - Method.\n     * @param requestURI - Request-URI.\n     * @param fromURI - From URI.\n     * @param toURI - To URI.\n     * @param options - Request options.\n     * @param extraHeaders - Extra headers to add.\n     * @param body - Message body.\n     */\n    UserAgentCore.prototype.makeOutgoingRequestMessage = function (method, requestURI, fromURI, toURI, options, extraHeaders, body) {\n        // default values from user agent configuration\n        var callIdPrefix = this.configuration.sipjsId;\n        var fromDisplayName = this.configuration.displayName;\n        var forceRport = this.configuration.viaForceRport;\n        var hackViaTcp = this.configuration.hackViaTcp;\n        var optionTags = this.configuration.supportedOptionTags.slice();\n        if (method === messages_1.C.REGISTER) {\n            optionTags.push(\"path\", \"gruu\");\n        }\n        if (method === messages_1.C.INVITE && (this.configuration.contact.pubGruu || this.configuration.contact.tempGruu)) {\n            optionTags.push(\"gruu\");\n        }\n        var routeSet = this.configuration.routeSet;\n        var userAgentString = this.configuration.userAgentHeaderFieldValue;\n        var viaHost = this.configuration.viaHost;\n        var defaultOptions = {\n            callIdPrefix: callIdPrefix,\n            forceRport: forceRport,\n            fromDisplayName: fromDisplayName,\n            hackViaTcp: hackViaTcp,\n            optionTags: optionTags,\n            routeSet: routeSet,\n            userAgentString: userAgentString,\n            viaHost: viaHost,\n        };\n        // merge provided options with default options\n        var requestOptions = tslib_1.__assign(tslib_1.__assign({}, defaultOptions), options);\n        return new messages_1.OutgoingRequestMessage(method, requestURI, fromURI, toURI, requestOptions, extraHeaders, body);\n    };\n    /**\n     * Handle an incoming request message from the transport.\n     * @param message - Incoming request message from transport layer.\n     */\n    UserAgentCore.prototype.receiveIncomingRequestFromTransport = function (message) {\n        this.receiveRequestFromTransport(message);\n    };\n    /**\n     * Handle an incoming response message from the transport.\n     * @param message - Incoming response message from transport layer.\n     */\n    UserAgentCore.prototype.receiveIncomingResponseFromTransport = function (message) {\n        this.receiveResponseFromTransport(message);\n    };\n    /**\n     * A stateless UAS is a UAS that does not maintain transaction state.\n     * It replies to requests normally, but discards any state that would\n     * ordinarily be retained by a UAS after a response has been sent.  If a\n     * stateless UAS receives a retransmission of a request, it regenerates\n     * the response and re-sends it, just as if it were replying to the first\n     * instance of the request. A UAS cannot be stateless unless the request\n     * processing for that method would always result in the same response\n     * if the requests are identical. This rules out stateless registrars,\n     * for example.  Stateless UASs do not use a transaction layer; they\n     * receive requests directly from the transport layer and send responses\n     * directly to the transport layer.\n     * https://tools.ietf.org/html/rfc3261#section-8.2.7\n     * @param message - Incoming request message to reply to.\n     * @param statusCode - Status code to reply with.\n     */\n    UserAgentCore.prototype.replyStateless = function (message, options) {\n        var _this = this;\n        var userAgent = this.configuration.userAgentHeaderFieldValue;\n        var supported = this.configuration.supportedOptionTagsResponse;\n        options = tslib_1.__assign(tslib_1.__assign({}, options), { userAgent: userAgent, supported: supported });\n        var response = messages_1.constructOutgoingResponse(message, options);\n        this.transport.send(response.message).catch(function (error) {\n            // If the transport rejects, it SHOULD reject with a TransportError.\n            // But the transport may be external code, so we are careful...\n            if (error instanceof Error) {\n                _this.logger.error(error.message);\n            }\n            _this.logger.error(\"Transport error occurred sending stateless reply to \" + message.method + \" request.\");\n            // TODO: Currently there is no hook to provide notification that a transport error occurred\n            // and throwing would result in an uncaught error (in promise), so we silently eat the error.\n            // Furthermore, silently eating stateless reply transport errors is arguably what we want to do here.\n        });\n        return response;\n    };\n    /**\n     * In Section 18.2.1, replace the last paragraph with:\n     *\n     * Next, the server transport attempts to match the request to a\n     * server transaction.  It does so using the matching rules described\n     * in Section 17.2.3.  If a matching server transaction is found, the\n     * request is passed to that transaction for processing.  If no match\n     * is found, the request is passed to the core, which may decide to\n     * construct a new server transaction for that request.\n     * https://tools.ietf.org/html/rfc6026#section-8.10\n     * @param message - Incoming request message from transport layer.\n     */\n    UserAgentCore.prototype.receiveRequestFromTransport = function (message) {\n        // When a request is received from the network by the server, it has to\n        // be matched to an existing transaction.  This is accomplished in the\n        // following manner.\n        //\n        // The branch parameter in the topmost Via header field of the request\n        // is examined.  If it is present and begins with the magic cookie\n        // \"z9hG4bK\", the request was generated by a client transaction\n        // compliant to this specification.  Therefore, the branch parameter\n        // will be unique across all transactions sent by that client.  The\n        // request matches a transaction if:\n        //\n        //    1. the branch parameter in the request is equal to the one in the\n        //       top Via header field of the request that created the\n        //       transaction, and\n        //\n        //    2. the sent-by value in the top Via of the request is equal to the\n        //       one in the request that created the transaction, and\n        //\n        //    3. the method of the request matches the one that created the\n        //       transaction, except for ACK, where the method of the request\n        //       that created the transaction is INVITE.\n        //\n        // This matching rule applies to both INVITE and non-INVITE transactions\n        // alike.\n        //\n        //    The sent-by value is used as part of the matching process because\n        //    there could be accidental or malicious duplication of branch\n        //    parameters from different clients.\n        // https://tools.ietf.org/html/rfc3261#section-17.2.3\n        var transactionId = message.viaBranch; // FIXME: Currently only using rule 1...\n        var uas = this.userAgentServers.get(transactionId);\n        // When receiving an ACK that matches an existing INVITE server\n        // transaction and that does not contain a branch parameter containing\n        // the magic cookie defined in RFC 3261, the matching transaction MUST\n        // be checked to see if it is in the \"Accepted\" state.  If it is, then\n        // the ACK must be passed directly to the transaction user instead of\n        // being absorbed by the transaction state machine.  This is necessary\n        // as requests from RFC 2543 clients will not include a unique branch\n        // parameter, and the mechanisms for calculating the transaction ID from\n        // such a request will be the same for both INVITE and ACKs.\n        // https://tools.ietf.org/html/rfc6026#section-6\n        // Any ACKs received from the network while in the \"Accepted\" state MUST be\n        // passed directly to the TU and not absorbed.\n        // https://tools.ietf.org/html/rfc6026#section-7.1\n        if (message.method === messages_1.C.ACK) {\n            if (uas && uas.transaction.state === transactions_1.TransactionState.Accepted) {\n                if (uas instanceof user_agents_1.InviteUserAgentServer) {\n                    // These are ACKs matching an INVITE server transaction.\n                    // These should never happen with RFC 3261 compliant user agents\n                    // (would be a broken ACK to negative final response or something)\n                    // but is apparently how RFC 2543 user agents do things.\n                    // We are not currently supporting this case.\n                    // NOTE: Not backwards compatible with RFC 2543 (no support for strict-routing).\n                    this.logger.warn(\"Discarding out of dialog ACK after 2xx response sent on transaction \" + transactionId + \".\");\n                    return;\n                }\n            }\n        }\n        // The CANCEL method requests that the TU at the server side cancel a\n        // pending transaction.  The TU determines the transaction to be\n        // cancelled by taking the CANCEL request, and then assuming that the\n        // request method is anything but CANCEL or ACK and applying the\n        // transaction matching procedures of Section 17.2.3.  The matching\n        // transaction is the one to be cancelled.\n        // https://tools.ietf.org/html/rfc3261#section-9.2\n        if (message.method === messages_1.C.CANCEL) {\n            if (uas) {\n                // Regardless of the method of the original request, as long as the\n                // CANCEL matched an existing transaction, the UAS answers the CANCEL\n                // request itself with a 200 (OK) response.\n                // https://tools.ietf.org/html/rfc3261#section-9.2\n                this.replyStateless(message, { statusCode: 200 });\n                // If the transaction for the original request still exists, the behavior\n                // of the UAS on receiving a CANCEL request depends on whether it has already\n                // sent a final response for the original request. If it has, the CANCEL\n                // request has no effect on the processing of the original request, no\n                // effect on any session state, and no effect on the responses generated\n                // for the original request. If the UAS has not issued a final response\n                // for the original request, its behavior depends on the method of the\n                // original request. If the original request was an INVITE, the UAS\n                // SHOULD immediately respond to the INVITE with a 487 (Request\n                // Terminated).\n                // https://tools.ietf.org/html/rfc3261#section-9.2\n                if (uas.transaction instanceof transactions_1.InviteServerTransaction &&\n                    uas.transaction.state === transactions_1.TransactionState.Proceeding) {\n                    if (uas instanceof user_agents_1.InviteUserAgentServer) {\n                        uas.receiveCancel(message);\n                    }\n                    // A CANCEL request has no impact on the processing of\n                    // transactions with any other method defined in this specification.\n                    // https://tools.ietf.org/html/rfc3261#section-9.2\n                }\n            }\n            else {\n                // If the UAS did not find a matching transaction for the CANCEL\n                // according to the procedure above, it SHOULD respond to the CANCEL\n                // with a 481 (Call Leg/Transaction Does Not Exist).\n                // https://tools.ietf.org/html/rfc3261#section-9.2\n                this.replyStateless(message, { statusCode: 481 });\n            }\n            return;\n        }\n        // If a matching server transaction is found, the request is passed to that\n        // transaction for processing.\n        // https://tools.ietf.org/html/rfc6026#section-8.10\n        if (uas) {\n            uas.transaction.receiveRequest(message);\n            return;\n        }\n        // If no match is found, the request is passed to the core, which may decide to\n        // construct a new server transaction for that request.\n        // https://tools.ietf.org/html/rfc6026#section-8.10\n        this.receiveRequest(message);\n        return;\n    };\n    /**\n     * UAC and UAS procedures depend strongly on two factors.  First, based\n     * on whether the request or response is inside or outside of a dialog,\n     * and second, based on the method of a request.  Dialogs are discussed\n     * thoroughly in Section 12; they represent a peer-to-peer relationship\n     * between user agents and are established by specific SIP methods, such\n     * as INVITE.\n     * @param message - Incoming request message.\n     */\n    UserAgentCore.prototype.receiveRequest = function (message) {\n        // 8.2 UAS Behavior\n        // UASs SHOULD process the requests in the order of the steps that\n        // follow in this section (that is, starting with authentication, then\n        // inspecting the method, the header fields, and so on throughout the\n        // remainder of this section).\n        // https://tools.ietf.org/html/rfc3261#section-8.2\n        // 8.2.1 Method Inspection\n        // Once a request is authenticated (or authentication is skipped), the\n        // UAS MUST inspect the method of the request.  If the UAS recognizes\n        // but does not support the method of a request, it MUST generate a 405\n        // (Method Not Allowed) response.  Procedures for generating responses\n        // are described in Section 8.2.6.  The UAS MUST also add an Allow\n        // header field to the 405 (Method Not Allowed) response.  The Allow\n        // header field MUST list the set of methods supported by the UAS\n        // generating the message.\n        // https://tools.ietf.org/html/rfc3261#section-8.2.1\n        if (allowed_methods_1.AllowedMethods.indexOf(message.method) === -1) {\n            var allowHeader = \"Allow: \" + allowed_methods_1.AllowedMethods.toString();\n            this.replyStateless(message, {\n                statusCode: 405,\n                extraHeaders: [allowHeader]\n            });\n            return;\n        }\n        // 8.2.2 Header Inspection\n        // https://tools.ietf.org/html/rfc3261#section-8.2.2\n        if (!message.ruri) { // FIXME: A request message should always have an ruri\n            throw new Error(\"Request-URI undefined.\");\n        }\n        // 8.2.2.1 To and Request-URI\n        // If the Request-URI uses a scheme not supported by the UAS, it SHOULD\n        // reject the request with a 416 (Unsupported URI Scheme) response.\n        // https://tools.ietf.org/html/rfc3261#section-8.2.2.1\n        if (message.ruri.scheme !== \"sip\") {\n            this.replyStateless(message, { statusCode: 416 });\n            return;\n        }\n        // 8.2.2.1 To and Request-URI\n        // If the Request-URI does not identify an address that the\n        // UAS is willing to accept requests for, it SHOULD reject\n        // the request with a 404 (Not Found) response.\n        // https://tools.ietf.org/html/rfc3261#section-8.2.2.1\n        var ruri = message.ruri;\n        var ruriMatches = function (uri) {\n            return !!uri && uri.user === ruri.user;\n        };\n        if (!ruriMatches(this.configuration.aor) &&\n            !(ruriMatches(this.configuration.contact.uri) ||\n                ruriMatches(this.configuration.contact.pubGruu) ||\n                ruriMatches(this.configuration.contact.tempGruu))) {\n            this.logger.warn(\"Request-URI does not point to us.\");\n            if (message.method !== messages_1.C.ACK) {\n                this.replyStateless(message, { statusCode: 404 });\n            }\n            return;\n        }\n        // 8.2.2.1 To and Request-URI\n        // Other potential sources of received Request-URIs include\n        // the Contact header fields of requests and responses sent by the UA\n        // that establish or refresh dialogs.\n        // https://tools.ietf.org/html/rfc3261#section-8.2.2.1\n        if (message.method === messages_1.C.INVITE) {\n            if (!message.hasHeader(\"Contact\")) {\n                this.replyStateless(message, {\n                    statusCode: 400,\n                    reasonPhrase: \"Missing Contact Header\"\n                });\n                return;\n            }\n        }\n        // 8.2.2.2 Merged Requests\n        // If the request has no tag in the To header field, the UAS core MUST\n        // check the request against ongoing transactions.  If the From tag,\n        // Call-ID, and CSeq exactly match those associated with an ongoing\n        // transaction, but the request does not match that transaction (based\n        // on the matching rules in Section 17.2.3), the UAS core SHOULD\n        // generate a 482 (Loop Detected) response and pass it to the server\n        // transaction.\n        //\n        //    The same request has arrived at the UAS more than once, following\n        //    different paths, most likely due to forking.  The UAS processes\n        //    the first such request received and responds with a 482 (Loop\n        //    Detected) to the rest of them.\n        // https://tools.ietf.org/html/rfc3261#section-8.2.2.2\n        if (!message.toTag) {\n            var transactionId = message.viaBranch;\n            if (!this.userAgentServers.has(transactionId)) {\n                var mergedRequest = Array.from(this.userAgentServers.values())\n                    .some(function (uas) {\n                    return uas.transaction.request.fromTag === message.fromTag &&\n                        uas.transaction.request.callId === message.callId &&\n                        uas.transaction.request.cseq === message.cseq;\n                });\n                if (mergedRequest) {\n                    this.replyStateless(message, { statusCode: 482 });\n                    return;\n                }\n            }\n        }\n        // 8.2.2.3 Require\n        // https://tools.ietf.org/html/rfc3261#section-8.2.2.3\n        // TODO\n        // 8.2.3 Content Processing\n        // https://tools.ietf.org/html/rfc3261#section-8.2.3\n        // TODO\n        // 8.2.4 Applying Extensions\n        // https://tools.ietf.org/html/rfc3261#section-8.2.4\n        // TODO\n        // 8.2.5 Processing the Request\n        // Assuming all of the checks in the previous subsections are passed,\n        // the UAS processing becomes method-specific.\n        // https://tools.ietf.org/html/rfc3261#section-8.2.5\n        // The UAS will receive the request from the transaction layer.  If the\n        // request has a tag in the To header field, the UAS core computes the\n        // dialog identifier corresponding to the request and compares it with\n        // existing dialogs.  If there is a match, this is a mid-dialog request.\n        // In that case, the UAS first applies the same processing rules for\n        // requests outside of a dialog, discussed in Section 8.2.\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\n        if (message.toTag) {\n            this.receiveInsideDialogRequest(message);\n        }\n        else {\n            this.receiveOutsideDialogRequest(message);\n        }\n        return;\n    };\n    /**\n     * Once a dialog has been established between two UAs, either of them\n     * MAY initiate new transactions as needed within the dialog.  The UA\n     * sending the request will take the UAC role for the transaction.  The\n     * UA receiving the request will take the UAS role.  Note that these may\n     * be different roles than the UAs held during the transaction that\n     * established the dialog.\n     * https://tools.ietf.org/html/rfc3261#section-12.2\n     * @param message - Incoming request message.\n     */\n    UserAgentCore.prototype.receiveInsideDialogRequest = function (message) {\n        // NOTIFY requests are matched to such SUBSCRIBE requests if they\n        // contain the same \"Call-ID\", a \"To\" header field \"tag\" parameter that\n        // matches the \"From\" header field \"tag\" parameter of the SUBSCRIBE\n        // request, and the same \"Event\" header field.  Rules for comparisons of\n        // the \"Event\" header fields are described in Section 8.2.1.\n        // https://tools.ietf.org/html/rfc6665#section-4.4.1\n        if (message.method === messages_1.C.NOTIFY) {\n            var event_1 = message.parseHeader(\"Event\");\n            if (!event_1 || !event_1.event) {\n                this.replyStateless(message, { statusCode: 489 });\n                return;\n            }\n            // FIXME: Subscriber id should also matching on event id.\n            var subscriberId = message.callId + message.toTag + event_1.event;\n            var subscriber = this.subscribers.get(subscriberId);\n            if (subscriber) {\n                var uas = new user_agents_1.NotifyUserAgentServer(this, message);\n                subscriber.onNotify(uas);\n                return;\n            }\n        }\n        // Requests sent within a dialog, as any other requests, are atomic.  If\n        // a particular request is accepted by the UAS, all the state changes\n        // associated with it are performed.  If the request is rejected, none\n        // of the state changes are performed.\n        //\n        //    Note that some requests, such as INVITEs, affect several pieces of\n        //    state.\n        //\n        // The UAS will receive the request from the transaction layer.  If the\n        // request has a tag in the To header field, the UAS core computes the\n        // dialog identifier corresponding to the request and compares it with\n        // existing dialogs.  If there is a match, this is a mid-dialog request.\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\n        var dialogId = message.callId + message.toTag + message.fromTag;\n        var dialog = this.dialogs.get(dialogId);\n        if (dialog) {\n            // [Sip-implementors] Reg. SIP reinvite, UPDATE and OPTIONS\n            // You got the question right.\n            //\n            // And you got the right answer too. :-)\n            //\n            //   Thanks,\n            //   Paul\n            //\n            // Robert Sparks wrote:\n            // > So I've lost track of the question during the musing.\n            // >\n            // > I _think_ the fundamental question being asked is this:\n            // >\n            // > Is an endpoint required to reject (with a 481) an OPTIONS request that\n            // > arrives with at to-tag but does not match any existing dialog state.\n            // > (Assuming some earlier requirement hasn't forced another error code). Or\n            // > is it OK if it just sends\n            // > a 200 OK anyhow.\n            // >\n            // > My take on the collection of specs is that its _not_ ok for it to send\n            // > the 200 OK anyhow and that it is required to send\n            // > the 481. I base this primarily on these sentences from 11.2 in 3261:\n            // >\n            // >    The response to an OPTIONS is constructed using the standard rules\n            // >    for a SIP response as discussed in Section 8.2.6.  The response code\n            // >    chosen MUST be the same that would have been chosen had the request\n            // >    been an INVITE.\n            // >\n            // > Did I miss the point of the question?\n            // >\n            // > On May 15, 2008, at 12:48 PM, Paul Kyzivat wrote:\n            // >\n            // >> [Including Robert in hopes of getting his insight on this.]\n            // https://lists.cs.columbia.edu/pipermail/sip-implementors/2008-May/019178.html\n            //\n            // Requests that do not change in any way the state of a dialog may be\n            // received within a dialog (for example, an OPTIONS request).  They are\n            // processed as if they had been received outside the dialog.\n            // https://tools.ietf.org/html/rfc3261#section-12.2.2\n            if (message.method === messages_1.C.OPTIONS) {\n                var allowHeader = \"Allow: \" + allowed_methods_1.AllowedMethods.toString();\n                var acceptHeader = \"Accept: \" + acceptedBodyTypes.toString();\n                this.replyStateless(message, {\n                    statusCode: 200,\n                    extraHeaders: [allowHeader, acceptHeader]\n                });\n                return;\n            }\n            // Pass the incoming request to the dialog for further handling.\n            dialog.receiveRequest(message);\n            return;\n        }\n        // The most important behaviors of a stateless UAS are the following:\n        // ...\n        // o  A stateless UAS MUST ignore ACK requests.\n        // ...\n        // https://tools.ietf.org/html/rfc3261#section-8.2.7\n        if (message.method === messages_1.C.ACK) {\n            // If a final response to an INVITE was sent statelessly,\n            // the corresponding ACK:\n            // - will not match an existing transaction\n            // - may have tag in the To header field\n            // - not not match any existing dialogs\n            // Absorb unmatched ACKs.\n            return;\n        }\n        // If the request has a tag in the To header field, but the dialog\n        // identifier does not match any existing dialogs, the UAS may have\n        // crashed and restarted, or it may have received a request for a\n        // different (possibly failed) UAS (the UASs can construct the To tags\n        // so that a UAS can identify that the tag was for a UAS for which it is\n        // providing recovery).  Another possibility is that the incoming\n        // request has been simply mis-routed.  Based on the To tag, the UAS MAY\n        // either accept or reject the request.  Accepting the request for\n        // acceptable To tags provides robustness, so that dialogs can persist\n        // even through crashes.  UAs wishing to support this capability must\n        // take into consideration some issues such as choosing monotonically\n        // increasing CSeq sequence numbers even across reboots, reconstructing\n        // the route set, and accepting out-of-range RTP timestamps and sequence\n        // numbers.\n        //\n        // If the UAS wishes to reject the request because it does not wish to\n        // recreate the dialog, it MUST respond to the request with a 481\n        // (Call/Transaction Does Not Exist) status code and pass that to the\n        // server transaction.\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\n        this.replyStateless(message, { statusCode: 481 });\n        return;\n    };\n    /**\n     * Assuming all of the checks in the previous subsections are passed,\n     * the UAS processing becomes method-specific.\n     *  https://tools.ietf.org/html/rfc3261#section-8.2.5\n     * @param message - Incoming request message.\n     */\n    UserAgentCore.prototype.receiveOutsideDialogRequest = function (message) {\n        switch (message.method) {\n            case messages_1.C.ACK:\n                // Absorb stray out of dialog ACKs\n                break;\n            case messages_1.C.BYE:\n                // If the BYE does not match an existing dialog, the UAS core SHOULD\n                // generate a 481 (Call/Transaction Does Not Exist) response and pass\n                // that to the server transaction. This rule means that a BYE sent\n                // without tags by a UAC will be rejected.\n                // https://tools.ietf.org/html/rfc3261#section-15.1.2\n                this.replyStateless(message, { statusCode: 481 });\n                break;\n            case messages_1.C.CANCEL:\n                throw new Error(\"Unexpected out of dialog request method \" + message.method + \".\");\n                break;\n            case messages_1.C.INFO:\n                // Use of the INFO method does not constitute a separate dialog usage.\n                // INFO messages are always part of, and share the fate of, an invite\n                // dialog usage [RFC5057].  INFO messages cannot be sent as part of\n                // other dialog usages, or outside an existing dialog.\n                // https://tools.ietf.org/html/rfc6086#section-1\n                this.replyStateless(message, { statusCode: 405 }); // Should never happen\n                break;\n            case messages_1.C.INVITE:\n                // https://tools.ietf.org/html/rfc3261#section-13.3.1\n                {\n                    var uas = new user_agents_1.InviteUserAgentServer(this, message);\n                    this.delegate.onInvite ?\n                        this.delegate.onInvite(uas) :\n                        uas.reject();\n                }\n                break;\n            case messages_1.C.MESSAGE:\n                // MESSAGE requests are discouraged inside a dialog.  Implementations\n                // are restricted from creating a usage for the purpose of carrying a\n                // sequence of MESSAGE requests (though some implementations use it that\n                // way, against the standard recommendation).\n                // https://tools.ietf.org/html/rfc5057#section-5.3\n                {\n                    var uas = new user_agents_1.MessageUserAgentServer(this, message);\n                    this.delegate.onMessage ?\n                        this.delegate.onMessage(uas) :\n                        uas.accept();\n                }\n                break;\n            case messages_1.C.NOTIFY:\n                // Obsoleted by: RFC 6665\n                // If any non-SUBSCRIBE mechanisms are defined to create subscriptions,\n                // it is the responsibility of the parties defining those mechanisms to\n                // ensure that correlation of a NOTIFY message to the corresponding\n                // subscription is possible.  Designers of such mechanisms are also\n                // warned to make a distinction between sending a NOTIFY message to a\n                // subscriber who is aware of the subscription, and sending a NOTIFY\n                // message to an unsuspecting node.  The latter behavior is invalid, and\n                // MUST receive a \"481 Subscription does not exist\" response (unless\n                // some other 400- or 500-class error code is more applicable), as\n                // described in section 3.2.4.  In other words, knowledge of a\n                // subscription must exist in both the subscriber and the notifier to be\n                // valid, even if installed via a non-SUBSCRIBE mechanism.\n                // https://tools.ietf.org/html/rfc3265#section-3.2\n                //\n                // NOTIFY requests are sent to inform subscribers of changes in state to\n                // which the subscriber has a subscription.  Subscriptions are created\n                // using the SUBSCRIBE method.  In legacy implementations, it is\n                // possible that other means of subscription creation have been used.\n                // However, this specification does not allow the creation of\n                // subscriptions except through SUBSCRIBE requests and (for backwards-\n                // compatibility) REFER requests [RFC3515].\n                // https://tools.ietf.org/html/rfc6665#section-3.2\n                {\n                    var uas = new user_agents_1.NotifyUserAgentServer(this, message);\n                    this.delegate.onNotify ?\n                        this.delegate.onNotify(uas) :\n                        uas.reject({ statusCode: 405 });\n                }\n                break;\n            case messages_1.C.OPTIONS:\n                // https://tools.ietf.org/html/rfc3261#section-11.2\n                {\n                    var allowHeader = \"Allow: \" + allowed_methods_1.AllowedMethods.toString();\n                    var acceptHeader = \"Accept: \" + acceptedBodyTypes.toString();\n                    this.replyStateless(message, {\n                        statusCode: 200,\n                        extraHeaders: [allowHeader, acceptHeader]\n                    });\n                }\n                break;\n            case messages_1.C.REFER:\n                // https://tools.ietf.org/html/rfc3515#section-2.4.2\n                {\n                    var uas = new user_agents_1.ReferUserAgentServer(this, message);\n                    this.delegate.onRefer ?\n                        this.delegate.onRefer(uas) :\n                        uas.reject({ statusCode: 405 });\n                }\n                break;\n            case messages_1.C.REGISTER:\n                // https://tools.ietf.org/html/rfc3261#section-10.3\n                {\n                    var uas = new user_agents_1.RegisterUserAgentServer(this, message);\n                    this.delegate.onRegister ?\n                        this.delegate.onRegister(uas) :\n                        uas.reject({ statusCode: 405 });\n                }\n                break;\n            case messages_1.C.SUBSCRIBE:\n                // https://tools.ietf.org/html/rfc6665#section-4.2\n                {\n                    var uas = new user_agents_1.SubscribeUserAgentServer(this, message);\n                    this.delegate.onSubscribe ?\n                        this.delegate.onSubscribe(uas) :\n                        uas.reject({ statusCode: 480 });\n                }\n                break;\n            default:\n                throw new Error(\"Unexpected out of dialog request method \" + message.method + \".\");\n        }\n        return;\n    };\n    /**\n     * Responses are first processed by the transport layer and then passed\n     * up to the transaction layer.  The transaction layer performs its\n     * processing and then passes the response up to the TU.  The majority\n     * of response processing in the TU is method specific.  However, there\n     * are some general behaviors independent of the method.\n     * https://tools.ietf.org/html/rfc3261#section-8.1.3\n     * @param message - Incoming response message from transport layer.\n     */\n    UserAgentCore.prototype.receiveResponseFromTransport = function (message) {\n        // 8.1.3.1 Transaction Layer Errors\n        // https://tools.ietf.org/html/rfc3261#section-8.1.3.1\n        // Handled by transaction layer callbacks.\n        // 8.1.3.2 Unrecognized Responses\n        // https://tools.ietf.org/html/rfc3261#section-8.1.3.1\n        // TODO\n        // 8.1.3.3 Vias\n        // https://tools.ietf.org/html/rfc3261#section-8.1.3.3\n        if (message.getHeaders(\"via\").length > 1) {\n            this.logger.warn(\"More than one Via header field present in the response, dropping\");\n            return;\n        }\n        // 8.1.3.4 Processing 3xx Responses\n        // https://tools.ietf.org/html/rfc3261#section-8.1.3.4\n        // TODO\n        // 8.1.3.5 Processing 4xx Responses\n        // https://tools.ietf.org/html/rfc3261#section-8.1.3.5\n        // TODO\n        // When the transport layer in the client receives a response, it has to\n        // determine which client transaction will handle the response, so that\n        // the processing of Sections 17.1.1 and 17.1.2 can take place.  The\n        // branch parameter in the top Via header field is used for this\n        // purpose.  A response matches a client transaction under two\n        // conditions:\n        //\n        //    1.  If the response has the same value of the branch parameter in\n        //        the top Via header field as the branch parameter in the top\n        //        Via header field of the request that created the transaction.\n        //\n        //    2.  If the method parameter in the CSeq header field matches the\n        //        method of the request that created the transaction.  The\n        //        method is needed since a CANCEL request constitutes a\n        //        different transaction, but shares the same value of the branch\n        //        parameter.\n        // https://tools.ietf.org/html/rfc3261#section-17.1.3\n        var userAgentClientId = message.viaBranch + message.method;\n        var userAgentClient = this.userAgentClients.get(userAgentClientId);\n        // The client transport uses the matching procedures of Section\n        // 17.1.3 to attempt to match the response to an existing\n        // transaction.  If there is a match, the response MUST be passed to\n        // that transaction.  Otherwise, any element other than a stateless\n        // proxy MUST silently discard the response.\n        // https://tools.ietf.org/html/rfc6026#section-8.9\n        if (userAgentClient) {\n            userAgentClient.transaction.receiveResponse(message);\n        }\n        else {\n            this.logger.warn(\"Discarding unmatched \" + message.statusCode + \" response to \" + message.method + \" \" + userAgentClientId + \".\");\n        }\n    };\n    return UserAgentCore;\n}());\nexports.UserAgentCore = UserAgentCore;\n\n\n/***/ }),\n/* 69 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\ntslib_1.__exportStar(__webpack_require__(42), exports);\ntslib_1.__exportStar(__webpack_require__(44), exports);\ntslib_1.__exportStar(__webpack_require__(70), exports);\ntslib_1.__exportStar(__webpack_require__(46), exports);\ntslib_1.__exportStar(__webpack_require__(47), exports);\ntslib_1.__exportStar(__webpack_require__(71), exports);\ntslib_1.__exportStar(__webpack_require__(72), exports);\ntslib_1.__exportStar(__webpack_require__(48), exports);\ntslib_1.__exportStar(__webpack_require__(49), exports);\ntslib_1.__exportStar(__webpack_require__(50), exports);\ntslib_1.__exportStar(__webpack_require__(51), exports);\ntslib_1.__exportStar(__webpack_require__(73), exports);\ntslib_1.__exportStar(__webpack_require__(52), exports);\ntslib_1.__exportStar(__webpack_require__(53), exports);\ntslib_1.__exportStar(__webpack_require__(54), exports);\ntslib_1.__exportStar(__webpack_require__(55), exports);\ntslib_1.__exportStar(__webpack_require__(62), exports);\ntslib_1.__exportStar(__webpack_require__(74), exports);\ntslib_1.__exportStar(__webpack_require__(56), exports);\ntslib_1.__exportStar(__webpack_require__(57), exports);\ntslib_1.__exportStar(__webpack_require__(75), exports);\ntslib_1.__exportStar(__webpack_require__(76), exports);\ntslib_1.__exportStar(__webpack_require__(77), exports);\ntslib_1.__exportStar(__webpack_require__(78), exports);\ntslib_1.__exportStar(__webpack_require__(43), exports);\ntslib_1.__exportStar(__webpack_require__(45), exports);\n\n\n/***/ }),\n/* 70 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_client_1 = __webpack_require__(43);\n/**\n * CANCEL UAC.\n * @public\n */\nvar CancelUserAgentClient = /** @class */ (function (_super) {\n    tslib_1.__extends(CancelUserAgentClient, _super);\n    function CancelUserAgentClient(core, message, delegate) {\n        return _super.call(this, transactions_1.NonInviteClientTransaction, core, message, delegate) || this;\n    }\n    return CancelUserAgentClient;\n}(user_agent_client_1.UserAgentClient));\nexports.CancelUserAgentClient = CancelUserAgentClient;\n\n\n/***/ }),\n/* 71 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar dialogs_1 = __webpack_require__(3);\nvar session_1 = __webpack_require__(25);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_client_1 = __webpack_require__(43);\n/**\n * INVITE UAC.\n * @remarks\n * 13 Initiating a Session\n * https://tools.ietf.org/html/rfc3261#section-13\n * 13.1 Overview\n * https://tools.ietf.org/html/rfc3261#section-13.1\n * 13.2 UAC Processing\n * https://tools.ietf.org/html/rfc3261#section-13.2\n * @public\n */\nvar InviteUserAgentClient = /** @class */ (function (_super) {\n    tslib_1.__extends(InviteUserAgentClient, _super);\n    function InviteUserAgentClient(core, message, delegate) {\n        var _this = _super.call(this, transactions_1.InviteClientTransaction, core, message, delegate) || this;\n        _this.confirmedDialogAcks = new Map();\n        _this.confirmedDialogs = new Map();\n        _this.earlyDialogs = new Map();\n        _this.delegate = delegate;\n        return _this;\n    }\n    InviteUserAgentClient.prototype.dispose = function () {\n        // The UAC core considers the INVITE transaction completed 64*T1 seconds\n        // after the reception of the first 2xx response.  At this point all the\n        // early dialogs that have not transitioned to established dialogs are\n        // terminated.  Once the INVITE transaction is considered completed by\n        // the UAC core, no more new 2xx responses are expected to arrive.\n        //\n        // If, after acknowledging any 2xx response to an INVITE, the UAC does\n        // not want to continue with that dialog, then the UAC MUST terminate\n        // the dialog by sending a BYE request as described in Section 15.\n        // https://tools.ietf.org/html/rfc3261#section-13.2.2.4\n        this.earlyDialogs.forEach(function (earlyDialog) { return earlyDialog.dispose(); });\n        this.earlyDialogs.clear();\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Special case for transport error while sending ACK.\n     * @param error - Transport error\n     */\n    InviteUserAgentClient.prototype.onTransportError = function (error) {\n        if (this.transaction.state === transactions_1.TransactionState.Calling) {\n            return _super.prototype.onTransportError.call(this, error);\n        }\n        // If not in 'calling' state, the transport error occurred while sending an ACK.\n        this.logger.error(error.message);\n        this.logger.error(\"User agent client request transport error while sending ACK.\");\n    };\n    /**\n     * Once the INVITE has been passed to the INVITE client transaction, the\n     * UAC waits for responses for the INVITE.\n     * https://tools.ietf.org/html/rfc3261#section-13.2.2\n     * @param incomingResponse - Incoming response to INVITE request.\n     */\n    InviteUserAgentClient.prototype.receiveResponse = function (message) {\n        var _this = this;\n        if (!this.authenticationGuard(message)) {\n            return;\n        }\n        var statusCode = message.statusCode ? message.statusCode.toString() : \"\";\n        if (!statusCode) {\n            throw new Error(\"Response status code undefined.\");\n        }\n        switch (true) {\n            case /^100$/.test(statusCode):\n                if (this.delegate && this.delegate.onTrying) {\n                    this.delegate.onTrying({ message: message });\n                }\n                return;\n            case /^1[0-9]{2}$/.test(statusCode):\n                // Zero, one or multiple provisional responses may arrive before one or\n                // more final responses are received.  Provisional responses for an\n                // INVITE request can create \"early dialogs\".  If a provisional response\n                // has a tag in the To field, and if the dialog ID of the response does\n                // not match an existing dialog, one is constructed using the procedures\n                // defined in Section 12.1.2.\n                //\n                // The early dialog will only be needed if the UAC needs to send a\n                // request to its peer within the dialog before the initial INVITE\n                // transaction completes.  Header fields present in a provisional\n                // response are applicable as long as the dialog is in the early state\n                // (for example, an Allow header field in a provisional response\n                // contains the methods that can be used in the dialog while this is in\n                // the early state).\n                // https://tools.ietf.org/html/rfc3261#section-13.2.2.1\n                {\n                    // Provisional without to tag, no dialog to create.\n                    if (!message.toTag) {\n                        this.logger.warn(\"Non-100 1xx INVITE response received without a to tag, dropping.\");\n                        return;\n                    }\n                    // Compute dialog state.\n                    var dialogState = dialogs_1.Dialog.initialDialogStateForUserAgentClient(this.message, message);\n                    // Have existing early dialog or create a new one.\n                    var earlyDialog = this.earlyDialogs.get(dialogState.id);\n                    if (!earlyDialog) {\n                        var transaction = this.transaction;\n                        if (!(transaction instanceof transactions_1.InviteClientTransaction)) {\n                            throw new Error(\"Transaction not instance of InviteClientTransaction.\");\n                        }\n                        earlyDialog = new dialogs_1.SessionDialog(transaction, this.core, dialogState);\n                        this.earlyDialogs.set(earlyDialog.id, earlyDialog);\n                    }\n                    // Guard against out of order reliable provisional responses.\n                    // Note that this is where the rseq tracking is done.\n                    if (!earlyDialog.reliableSequenceGuard(message)) {\n                        this.logger.warn(\"1xx INVITE reliable response received out of order, dropping.\");\n                        return;\n                    }\n                    // If the initial offer is in an INVITE, the answer MUST be in a\n                    // reliable non-failure message from UAS back to UAC which is\n                    // correlated to that INVITE.  For this specification, that is\n                    // only the final 2xx response to that INVITE.  That same exact\n                    // answer MAY also be placed in any provisional responses sent\n                    // prior to the answer.  The UAC MUST treat the first session\n                    // description it receives as the answer, and MUST ignore any\n                    // session descriptions in subsequent responses to the initial\n                    // INVITE.\n                    // https://tools.ietf.org/html/rfc3261#section-13.2.1\n                    if (earlyDialog.signalingState === session_1.SignalingState.Initial ||\n                        earlyDialog.signalingState === session_1.SignalingState.HaveLocalOffer) {\n                        earlyDialog.signalingStateTransition(message);\n                    }\n                    // Pass response to delegate.\n                    var session_2 = earlyDialog;\n                    if (this.delegate && this.delegate.onProgress) {\n                        this.delegate.onProgress({\n                            message: message,\n                            session: session_2,\n                            prack: function (options) {\n                                var outgoingPrackRequest = session_2.prack(undefined, options);\n                                return outgoingPrackRequest;\n                            }\n                        });\n                    }\n                }\n                return;\n            case /^2[0-9]{2}$/.test(statusCode):\n                // Multiple 2xx responses may arrive at the UAC for a single INVITE\n                // request due to a forking proxy.  Each response is distinguished by\n                // the tag parameter in the To header field, and each represents a\n                // distinct dialog, with a distinct dialog identifier.\n                //\n                // If the dialog identifier in the 2xx response matches the dialog\n                // identifier of an existing dialog, the dialog MUST be transitioned to\n                // the \"confirmed\" state, and the route set for the dialog MUST be\n                // recomputed based on the 2xx response using the procedures of Section\n                // 12.2.1.2.  Otherwise, a new dialog in the \"confirmed\" state MUST be\n                // constructed using the procedures of Section 12.1.2.\n                // https://tools.ietf.org/html/rfc3261#section-13.2.2.4\n                {\n                    // Compute dialog state.\n                    var dialogState = dialogs_1.Dialog.initialDialogStateForUserAgentClient(this.message, message);\n                    // NOTE: Currently our transaction layer is caching the 2xx ACKs and\n                    // handling retransmissions of the ACK which is an approach which is\n                    // not to spec. In any event, this block is intended to provide a to\n                    // spec implementation of ACK retransmissions, but it should not be\n                    // hit currently.\n                    var dialog = this.confirmedDialogs.get(dialogState.id);\n                    if (dialog) {\n                        // Once the ACK has been constructed, the procedures of [4] are used to\n                        // determine the destination address, port and transport.  However, the\n                        // request is passed to the transport layer directly for transmission,\n                        // rather than a client transaction.  This is because the UAC core\n                        // handles retransmissions of the ACK, not the transaction layer.  The\n                        // ACK MUST be passed to the client transport every time a\n                        // retransmission of the 2xx final response that triggered the ACK\n                        // arrives.\n                        // https://tools.ietf.org/html/rfc3261#section-13.2.2.4\n                        var outgoingAckRequest = this.confirmedDialogAcks.get(dialogState.id);\n                        if (outgoingAckRequest) {\n                            var transaction = this.transaction;\n                            if (!(transaction instanceof transactions_1.InviteClientTransaction)) {\n                                throw new Error(\"Client transaction not instance of InviteClientTransaction.\");\n                            }\n                            transaction.ackResponse(outgoingAckRequest.message);\n                        }\n                        else {\n                            // If still waiting for an ACK, drop the retransmission of the 2xx final response.\n                        }\n                        return;\n                    }\n                    // If the dialog identifier in the 2xx response matches the dialog\n                    // identifier of an existing dialog, the dialog MUST be transitioned to\n                    // the \"confirmed\" state, and the route set for the dialog MUST be\n                    // recomputed based on the 2xx response using the procedures of Section\n                    // 12.2.1.2. Otherwise, a new dialog in the \"confirmed\" state MUST be\n                    // constructed using the procedures of Section 12.1.2.\n                    // https://tools.ietf.org/html/rfc3261#section-13.2.2.4\n                    dialog = this.earlyDialogs.get(dialogState.id);\n                    if (dialog) {\n                        dialog.confirm();\n                        dialog.recomputeRouteSet(message);\n                        this.earlyDialogs.delete(dialog.id);\n                        this.confirmedDialogs.set(dialog.id, dialog);\n                    }\n                    else {\n                        var transaction = this.transaction;\n                        if (!(transaction instanceof transactions_1.InviteClientTransaction)) {\n                            throw new Error(\"Transaction not instance of InviteClientTransaction.\");\n                        }\n                        dialog = new dialogs_1.SessionDialog(transaction, this.core, dialogState);\n                        this.confirmedDialogs.set(dialog.id, dialog);\n                    }\n                    // If the initial offer is in an INVITE, the answer MUST be in a\n                    // reliable non-failure message from UAS back to UAC which is\n                    // correlated to that INVITE.  For this specification, that is\n                    // only the final 2xx response to that INVITE.  That same exact\n                    // answer MAY also be placed in any provisional responses sent\n                    // prior to the answer.  The UAC MUST treat the first session\n                    // description it receives as the answer, and MUST ignore any\n                    // session descriptions in subsequent responses to the initial\n                    // INVITE.\n                    // https://tools.ietf.org/html/rfc3261#section-13.2.1\n                    if (dialog.signalingState === session_1.SignalingState.Initial ||\n                        dialog.signalingState === session_1.SignalingState.HaveLocalOffer) {\n                        dialog.signalingStateTransition(message);\n                    }\n                    // Session Initiated! :)\n                    var session_3 = dialog;\n                    // The UAC core MUST generate an ACK request for each 2xx received from\n                    // the transaction layer.  The header fields of the ACK are constructed\n                    // in the same way as for any request sent within a dialog (see Section\n                    // 12) with the exception of the CSeq and the header fields related to\n                    // authentication.  The sequence number of the CSeq header field MUST be\n                    // the same as the INVITE being acknowledged, but the CSeq method MUST\n                    // be ACK.  The ACK MUST contain the same credentials as the INVITE.  If\n                    // the 2xx contains an offer (based on the rules above), the ACK MUST\n                    // carry an answer in its body.  If the offer in the 2xx response is not\n                    // acceptable, the UAC core MUST generate a valid answer in the ACK and\n                    // then send a BYE immediately.\n                    // https://tools.ietf.org/html/rfc3261#section-13.2.2.4\n                    if (this.delegate && this.delegate.onAccept) {\n                        this.delegate.onAccept({\n                            message: message,\n                            session: session_3,\n                            ack: function (options) {\n                                var outgoingAckRequest = session_3.ack(options);\n                                _this.confirmedDialogAcks.set(session_3.id, outgoingAckRequest);\n                                return outgoingAckRequest;\n                            }\n                        });\n                    }\n                    else {\n                        var outgoingAckRequest = session_3.ack();\n                        this.confirmedDialogAcks.set(session_3.id, outgoingAckRequest);\n                    }\n                }\n                return;\n            case /^3[0-9]{2}$/.test(statusCode):\n                // 12.3 Termination of a Dialog\n                //\n                // Independent of the method, if a request outside of a dialog generates\n                // a non-2xx final response, any early dialogs created through\n                // provisional responses to that request are terminated.  The mechanism\n                // for terminating confirmed dialogs is method specific.  In this\n                // specification, the BYE method terminates a session and the dialog\n                // associated with it.  See Section 15 for details.\n                // https://tools.ietf.org/html/rfc3261#section-12.3\n                // All early dialogs are considered terminated upon reception of the\n                // non-2xx final response.\n                //\n                // After having received the non-2xx final response the UAC core\n                // considers the INVITE transaction completed.  The INVITE client\n                // transaction handles the generation of ACKs for the response (see\n                // Section 17).\n                // https://tools.ietf.org/html/rfc3261#section-13.2.2.3\n                this.earlyDialogs.forEach(function (earlyDialog) { return earlyDialog.dispose(); });\n                this.earlyDialogs.clear();\n                // A 3xx response may contain one or more Contact header field values\n                // providing new addresses where the callee might be reachable.\n                // Depending on the status code of the 3xx response (see Section 21.3),\n                // the UAC MAY choose to try those new addresses.\n                // https://tools.ietf.org/html/rfc3261#section-13.2.2.2\n                if (this.delegate && this.delegate.onRedirect) {\n                    this.delegate.onRedirect({ message: message });\n                }\n                return;\n            case /^[4-6][0-9]{2}$/.test(statusCode):\n                // 12.3 Termination of a Dialog\n                //\n                // Independent of the method, if a request outside of a dialog generates\n                // a non-2xx final response, any early dialogs created through\n                // provisional responses to that request are terminated.  The mechanism\n                // for terminating confirmed dialogs is method specific.  In this\n                // specification, the BYE method terminates a session and the dialog\n                // associated with it.  See Section 15 for details.\n                // https://tools.ietf.org/html/rfc3261#section-12.3\n                // All early dialogs are considered terminated upon reception of the\n                // non-2xx final response.\n                //\n                // After having received the non-2xx final response the UAC core\n                // considers the INVITE transaction completed.  The INVITE client\n                // transaction handles the generation of ACKs for the response (see\n                // Section 17).\n                // https://tools.ietf.org/html/rfc3261#section-13.2.2.3\n                this.earlyDialogs.forEach(function (earlyDialog) { return earlyDialog.dispose(); });\n                this.earlyDialogs.clear();\n                // A single non-2xx final response may be received for the INVITE.  4xx,\n                // 5xx and 6xx responses may contain a Contact header field value\n                // indicating the location where additional information about the error\n                // can be found.  Subsequent final responses (which would only arrive\n                // under error conditions) MUST be ignored.\n                // https://tools.ietf.org/html/rfc3261#section-13.2.2.3\n                if (this.delegate && this.delegate.onReject) {\n                    this.delegate.onReject({ message: message });\n                }\n                return;\n            default:\n                throw new Error(\"Invalid status code \" + statusCode);\n        }\n        throw new Error(\"Executing what should be an unreachable code path receiving \" + statusCode + \" response.\");\n    };\n    return InviteUserAgentClient;\n}(user_agent_client_1.UserAgentClient));\nexports.InviteUserAgentClient = InviteUserAgentClient;\n\n\n/***/ }),\n/* 72 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar dialogs_1 = __webpack_require__(3);\nvar exceptions_1 = __webpack_require__(32);\nvar session_1 = __webpack_require__(25);\nvar transactions_1 = __webpack_require__(28);\nvar allowed_methods_1 = __webpack_require__(61);\nvar user_agent_server_1 = __webpack_require__(45);\n/**\n * INVITE UAS.\n * @remarks\n * 13 Initiating a Session\n * https://tools.ietf.org/html/rfc3261#section-13\n * 13.1 Overview\n * https://tools.ietf.org/html/rfc3261#section-13.1\n * 13.3 UAS Processing\n * https://tools.ietf.org/html/rfc3261#section-13.3\n * @public\n */\nvar InviteUserAgentServer = /** @class */ (function (_super) {\n    tslib_1.__extends(InviteUserAgentServer, _super);\n    function InviteUserAgentServer(core, message, delegate) {\n        var _this = _super.call(this, transactions_1.InviteServerTransaction, core, message, delegate) || this;\n        _this.core = core;\n        return _this;\n    }\n    InviteUserAgentServer.prototype.dispose = function () {\n        if (this.earlyDialog) {\n            this.earlyDialog.dispose();\n        }\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * 13.3.1.4 The INVITE is Accepted\n     * The UAS core generates a 2xx response.  This response establishes a\n     * dialog, and therefore follows the procedures of Section 12.1.1 in\n     * addition to those of Section 8.2.6.\n     * https://tools.ietf.org/html/rfc3261#section-13.3.1.4\n     * @param options - Accept options bucket.\n     */\n    InviteUserAgentServer.prototype.accept = function (options) {\n        if (options === void 0) { options = { statusCode: 200 }; }\n        if (!this.acceptable) {\n            throw new exceptions_1.TransactionStateError(this.message.method + \" not acceptable in state \" + this.transaction.state + \".\");\n        }\n        // This response establishes a dialog...\n        // https://tools.ietf.org/html/rfc3261#section-13.3.1.4\n        if (!this.confirmedDialog) {\n            if (this.earlyDialog) {\n                this.earlyDialog.confirm();\n                this.confirmedDialog = this.earlyDialog;\n                this.earlyDialog = undefined;\n            }\n            else {\n                var transaction = this.transaction;\n                if (!(transaction instanceof transactions_1.InviteServerTransaction)) {\n                    throw new Error(\"Transaction not instance of InviteClientTransaction.\");\n                }\n                var state = dialogs_1.Dialog.initialDialogStateForUserAgentServer(this.message, this.toTag);\n                this.confirmedDialog = new dialogs_1.SessionDialog(transaction, this.core, state);\n            }\n        }\n        // When a UAS responds to a request with a response that establishes a\n        // dialog (such as a 2xx to INVITE), the UAS MUST copy all Record-Route\n        // header field values from the request into the response (including the\n        // URIs, URI parameters, and any Record-Route header field parameters,\n        // whether they are known or unknown to the UAS) and MUST maintain the\n        // order of those values.  The UAS MUST add a Contact header field to\n        // the response.  The Contact header field contains an address where the\n        // UAS would like to be contacted for subsequent requests in the dialog\n        // (which includes the ACK for a 2xx response in the case of an INVITE).\n        // Generally, the host portion of this URI is the IP address or FQDN of\n        // the host.  The URI provided in the Contact header field MUST be a SIP\n        // or SIPS URI.  If the request that initiated the dialog contained a\n        // SIPS URI in the Request-URI or in the top Record-Route header field\n        // value, if there was any, or the Contact header field if there was no\n        // Record-Route header field, the Contact header field in the response\n        // MUST be a SIPS URI.  The URI SHOULD have global scope (that is, the\n        // same URI can be used in messages outside this dialog).  The same way,\n        // the scope of the URI in the Contact header field of the INVITE is not\n        // limited to this dialog either.  It can therefore be used in messages\n        // to the UAC even outside this dialog.\n        // https://tools.ietf.org/html/rfc3261#section-12.1.1\n        var recordRouteHeader = this.message\n            .getHeaders(\"record-route\")\n            .map(function (header) { return \"Record-Route: \" + header; });\n        var contactHeader = \"Contact: \" + this.core.configuration.contact.toString();\n        // A 2xx response to an INVITE SHOULD contain the Allow header field and\n        // the Supported header field, and MAY contain the Accept header field.\n        // Including these header fields allows the UAC to determine the\n        // features and extensions supported by the UAS for the duration of the\n        // call, without probing.\n        // https://tools.ietf.org/html/rfc3261#section-13.3.1.4\n        // FIXME: TODO: This should not be hard coded.\n        var allowHeader = \"Allow: \" + allowed_methods_1.AllowedMethods.toString();\n        // FIXME: TODO: Supported header (see reply())\n        // FIXME: TODO: Accept header\n        // If the INVITE request contained an offer, and the UAS had not yet\n        // sent an answer, the 2xx MUST contain an answer.  If the INVITE did\n        // not contain an offer, the 2xx MUST contain an offer if the UAS had\n        // not yet sent an offer.\n        // https://tools.ietf.org/html/rfc3261#section-13.3.1.4\n        if (!options.body) {\n            if (this.confirmedDialog.signalingState === session_1.SignalingState.Stable) {\n                options.body = this.confirmedDialog.answer; // resend the answer sent in provisional response\n            }\n            else if (this.confirmedDialog.signalingState === session_1.SignalingState.Initial ||\n                this.confirmedDialog.signalingState === session_1.SignalingState.HaveRemoteOffer) {\n                throw new Error(\"Response must have a body.\");\n            }\n        }\n        options.statusCode = options.statusCode || 200;\n        options.extraHeaders = options.extraHeaders || [];\n        options.extraHeaders = options.extraHeaders.concat(recordRouteHeader);\n        options.extraHeaders.push(allowHeader);\n        options.extraHeaders.push(contactHeader);\n        var response = _super.prototype.accept.call(this, options);\n        var session = this.confirmedDialog;\n        var result = tslib_1.__assign(tslib_1.__assign({}, response), { session: session });\n        // Update dialog signaling state\n        if (options.body) {\n            // Once the UAS has sent or received an answer to the initial\n            // offer, it MUST NOT generate subsequent offers in any responses\n            // to the initial INVITE.  This means that a UAS based on this\n            // specification alone can never generate subsequent offers until\n            // completion of the initial transaction.\n            // https://tools.ietf.org/html/rfc3261#section-13.2.1\n            if (this.confirmedDialog.signalingState !== session_1.SignalingState.Stable) {\n                this.confirmedDialog.signalingStateTransition(options.body);\n            }\n        }\n        return result;\n    };\n    /**\n     * 13.3.1.1 Progress\n     * If the UAS is not able to answer the invitation immediately, it can\n     * choose to indicate some kind of progress to the UAC (for example, an\n     * indication that a phone is ringing).  This is accomplished with a\n     * provisional response between 101 and 199.  These provisional\n     * responses establish early dialogs and therefore follow the procedures\n     * of Section 12.1.1 in addition to those of Section 8.2.6.  A UAS MAY\n     * send as many provisional responses as it likes.  Each of these MUST\n     * indicate the same dialog ID.  However, these will not be delivered\n     * reliably.\n     *\n     * If the UAS desires an extended period of time to answer the INVITE,\n     * it will need to ask for an \"extension\" in order to prevent proxies\n     * from canceling the transaction.  A proxy has the option of canceling\n     * a transaction when there is a gap of 3 minutes between responses in a\n     * transaction.  To prevent cancellation, the UAS MUST send a non-100\n     * provisional response at every minute, to handle the possibility of\n     * lost provisional responses.\n     * https://tools.ietf.org/html/rfc3261#section-13.3.1.1\n     * @param options - Progress options bucket.\n     */\n    InviteUserAgentServer.prototype.progress = function (options) {\n        if (options === void 0) { options = { statusCode: 180 }; }\n        if (!this.progressable) {\n            throw new exceptions_1.TransactionStateError(this.message.method + \" not progressable in state \" + this.transaction.state + \".\");\n        }\n        // This response establishes a dialog...\n        // https://tools.ietf.org/html/rfc3261#section-13.3.1.4\n        if (!this.earlyDialog) {\n            var transaction = this.transaction;\n            if (!(transaction instanceof transactions_1.InviteServerTransaction)) {\n                throw new Error(\"Transaction not instance of InviteClientTransaction.\");\n            }\n            var state = dialogs_1.Dialog.initialDialogStateForUserAgentServer(this.message, this.toTag, true);\n            this.earlyDialog = new dialogs_1.SessionDialog(transaction, this.core, state);\n        }\n        // When a UAS responds to a request with a response that establishes a\n        // dialog (such as a 2xx to INVITE), the UAS MUST copy all Record-Route\n        // header field values from the request into the response (including the\n        // URIs, URI parameters, and any Record-Route header field parameters,\n        // whether they are known or unknown to the UAS) and MUST maintain the\n        // order of those values.  The UAS MUST add a Contact header field to\n        // the response.  The Contact header field contains an address where the\n        // UAS would like to be contacted for subsequent requests in the dialog\n        // (which includes the ACK for a 2xx response in the case of an INVITE).\n        // Generally, the host portion of this URI is the IP address or FQDN of\n        // the host.  The URI provided in the Contact header field MUST be a SIP\n        // or SIPS URI.  If the request that initiated the dialog contained a\n        // SIPS URI in the Request-URI or in the top Record-Route header field\n        // value, if there was any, or the Contact header field if there was no\n        // Record-Route header field, the Contact header field in the response\n        // MUST be a SIPS URI.  The URI SHOULD have global scope (that is, the\n        // same URI can be used in messages outside this dialog).  The same way,\n        // the scope of the URI in the Contact header field of the INVITE is not\n        // limited to this dialog either.  It can therefore be used in messages\n        // to the UAC even outside this dialog.\n        // https://tools.ietf.org/html/rfc3261#section-12.1.1\n        var recordRouteHeader = this.message\n            .getHeaders(\"record-route\")\n            .map(function (header) { return \"Record-Route: \" + header; });\n        var contactHeader = \"Contact: \" + this.core.configuration.contact;\n        options.extraHeaders = options.extraHeaders || [];\n        options.extraHeaders = options.extraHeaders.concat(recordRouteHeader);\n        options.extraHeaders.push(contactHeader);\n        var response = _super.prototype.progress.call(this, options);\n        var session = this.earlyDialog;\n        var result = tslib_1.__assign(tslib_1.__assign({}, response), { session: session });\n        // Update dialog signaling state\n        if (options.body) {\n            // Once the UAS has sent or received an answer to the initial\n            // offer, it MUST NOT generate subsequent offers in any responses\n            // to the initial INVITE.  This means that a UAS based on this\n            // specification alone can never generate subsequent offers until\n            // completion of the initial transaction.\n            // https://tools.ietf.org/html/rfc3261#section-13.2.1\n            if (this.earlyDialog.signalingState !== session_1.SignalingState.Stable) {\n                this.earlyDialog.signalingStateTransition(options.body);\n            }\n        }\n        return result;\n    };\n    /**\n     * 13.3.1.2 The INVITE is Redirected\n     * If the UAS decides to redirect the call, a 3xx response is sent.  A\n     * 300 (Multiple Choices), 301 (Moved Permanently) or 302 (Moved\n     * Temporarily) response SHOULD contain a Contact header field\n     * containing one or more URIs of new addresses to be tried.  The\n     * response is passed to the INVITE server transaction, which will deal\n     * with its retransmissions.\n     * https://tools.ietf.org/html/rfc3261#section-13.3.1.2\n     * @param contacts - Contacts to redirect to.\n     * @param options - Redirect options bucket.\n     */\n    InviteUserAgentServer.prototype.redirect = function (contacts, options) {\n        if (options === void 0) { options = { statusCode: 302 }; }\n        return _super.prototype.redirect.call(this, contacts, options);\n    };\n    /**\n     * 13.3.1.3 The INVITE is Rejected\n     * A common scenario occurs when the callee is currently not willing or\n     * able to take additional calls at this end system.  A 486 (Busy Here)\n     * SHOULD be returned in such a scenario.\n     * https://tools.ietf.org/html/rfc3261#section-13.3.1.3\n     * @param options - Reject options bucket.\n     */\n    InviteUserAgentServer.prototype.reject = function (options) {\n        if (options === void 0) { options = { statusCode: 486 }; }\n        return _super.prototype.reject.call(this, options);\n    };\n    return InviteUserAgentServer;\n}(user_agent_server_1.UserAgentServer));\nexports.InviteUserAgentServer = InviteUserAgentServer;\n\n\n/***/ }),\n/* 73 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_client_1 = __webpack_require__(43);\n/**\n * PUBLISH UAC.\n * @public\n */\nvar PublishUserAgentClient = /** @class */ (function (_super) {\n    tslib_1.__extends(PublishUserAgentClient, _super);\n    function PublishUserAgentClient(core, message, delegate) {\n        return _super.call(this, transactions_1.NonInviteClientTransaction, core, message, delegate) || this;\n    }\n    return PublishUserAgentClient;\n}(user_agent_client_1.UserAgentClient));\nexports.PublishUserAgentClient = PublishUserAgentClient;\n\n\n/***/ }),\n/* 74 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_server_1 = __webpack_require__(45);\n/**\n * Re-SUBSCRIBE UAS.\n * @public\n */\nvar ReSubscribeUserAgentServer = /** @class */ (function (_super) {\n    tslib_1.__extends(ReSubscribeUserAgentServer, _super);\n    function ReSubscribeUserAgentServer(dialog, message, delegate) {\n        return _super.call(this, transactions_1.NonInviteServerTransaction, dialog.userAgentCore, message, delegate) || this;\n    }\n    return ReSubscribeUserAgentServer;\n}(user_agent_server_1.UserAgentServer));\nexports.ReSubscribeUserAgentServer = ReSubscribeUserAgentServer;\n\n\n/***/ }),\n/* 75 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_client_1 = __webpack_require__(43);\n/**\n * REGISTER UAC.\n * @public\n */\nvar RegisterUserAgentClient = /** @class */ (function (_super) {\n    tslib_1.__extends(RegisterUserAgentClient, _super);\n    function RegisterUserAgentClient(core, message, delegate) {\n        return _super.call(this, transactions_1.NonInviteClientTransaction, core, message, delegate) || this;\n    }\n    return RegisterUserAgentClient;\n}(user_agent_client_1.UserAgentClient));\nexports.RegisterUserAgentClient = RegisterUserAgentClient;\n\n\n/***/ }),\n/* 76 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_server_1 = __webpack_require__(45);\n/**\n * REGISTER UAS.\n * @public\n */\nvar RegisterUserAgentServer = /** @class */ (function (_super) {\n    tslib_1.__extends(RegisterUserAgentServer, _super);\n    function RegisterUserAgentServer(core, message, delegate) {\n        var _this = _super.call(this, transactions_1.NonInviteServerTransaction, core, message, delegate) || this;\n        _this.core = core;\n        return _this;\n    }\n    return RegisterUserAgentServer;\n}(user_agent_server_1.UserAgentServer));\nexports.RegisterUserAgentServer = RegisterUserAgentServer;\n\n\n/***/ }),\n/* 77 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar subscription_dialog_1 = __webpack_require__(58);\nvar subscription_1 = __webpack_require__(59);\nvar timers_1 = __webpack_require__(27);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_client_1 = __webpack_require__(43);\n/**\n * SUBSCRIBE UAC.\n * @remarks\n * 4.1.  Subscriber Behavior\n * https://tools.ietf.org/html/rfc6665#section-4.1\n *\n * User agent client for installation of a single subscription per SUBSCRIBE request.\n * TODO: Support for installation of multiple subscriptions on forked SUBSCRIBE requests.\n * @public\n */\nvar SubscribeUserAgentClient = /** @class */ (function (_super) {\n    tslib_1.__extends(SubscribeUserAgentClient, _super);\n    function SubscribeUserAgentClient(core, message, delegate) {\n        var _this = this;\n        // Get event from request message.\n        var event = message.getHeader(\"Event\");\n        if (!event) {\n            throw new Error(\"Event undefined\");\n        }\n        // Get expires from request message.\n        var expires = message.getHeader(\"Expires\");\n        if (!expires) {\n            throw new Error(\"Expires undefined\");\n        }\n        _this = _super.call(this, transactions_1.NonInviteClientTransaction, core, message, delegate) || this;\n        _this.delegate = delegate;\n        // FIXME: Subscriber id should also be matching on event id.\n        _this.subscriberId = message.callId + message.fromTag + event;\n        _this.subscriptionExpiresRequested = _this.subscriptionExpires = Number(expires);\n        _this.subscriptionEvent = event;\n        _this.subscriptionState = subscription_1.SubscriptionState.NotifyWait;\n        // Start waiting for a NOTIFY we can use to create a subscription.\n        _this.waitNotifyStart();\n        return _this;\n    }\n    /**\n     * Destructor.\n     * Note that Timer N may live on waiting for an initial NOTIFY and\n     * the delegate may still receive that NOTIFY. If you don't want\n     * that behavior then either clear the delegate so the delegate\n     * doesn't get called (a 200 will be sent in response to the NOTIFY)\n     * or call `waitNotifyStop` which will clear Timer N and remove this\n     * UAC from the core (a 481 will be sent in response to the NOTIFY).\n     */\n    SubscribeUserAgentClient.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Handle out of dialog NOTIFY associated with SUBSCRIBE request.\n     * This is the first NOTIFY received after the SUBSCRIBE request.\n     * @param uas - User agent server handling the subscription creating NOTIFY.\n     */\n    SubscribeUserAgentClient.prototype.onNotify = function (uas) {\n        // NOTIFY requests are matched to such SUBSCRIBE requests if they\n        // contain the same \"Call-ID\", a \"To\" header field \"tag\" parameter that\n        // matches the \"From\" header field \"tag\" parameter of the SUBSCRIBE\n        // request, and the same \"Event\" header field.  Rules for comparisons of\n        // the \"Event\" header fields are described in Section 8.2.1.\n        // https://tools.ietf.org/html/rfc6665#section-4.4.1\n        var event = uas.message.parseHeader(\"Event\").event;\n        if (!event || event !== this.subscriptionEvent) {\n            this.logger.warn(\"Failed to parse event.\");\n            uas.reject({ statusCode: 489 });\n            return;\n        }\n        // NOTIFY requests MUST contain \"Subscription-State\" header fields that\n        // indicate the status of the subscription.\n        // https://tools.ietf.org/html/rfc6665#section-4.1.3\n        var subscriptionState = uas.message.parseHeader(\"Subscription-State\");\n        if (!subscriptionState || !subscriptionState.state) {\n            this.logger.warn(\"Failed to parse subscription state.\");\n            uas.reject({ statusCode: 489 });\n            return;\n        }\n        // Validate subscription state.\n        var state = subscriptionState.state;\n        switch (state) {\n            case \"pending\":\n                break;\n            case \"active\":\n                break;\n            case \"terminated\":\n                break;\n            default:\n                this.logger.warn(\"Invalid subscription state \" + state);\n                uas.reject({ statusCode: 489 });\n                return;\n        }\n        // Dialogs usages are created upon completion of a NOTIFY transaction\n        // for a new subscription, unless the NOTIFY request contains a\n        // \"Subscription-State\" of \"terminated.\"\n        // https://tools.ietf.org/html/rfc6665#section-4.4.1\n        if (state !== \"terminated\") {\n            // The Contact header field MUST be present and contain exactly one SIP\n            // or SIPS URI in any request that can result in the establishment of a\n            // dialog.\n            // https://tools.ietf.org/html/rfc3261#section-8.1.1.8\n            var contact = uas.message.parseHeader(\"contact\");\n            if (!contact) {\n                this.logger.warn(\"Failed to parse contact.\");\n                uas.reject({ statusCode: 489 });\n                return;\n            }\n        }\n        // In accordance with the rules for proxying non-INVITE requests as\n        // defined in [RFC3261], successful SUBSCRIBE requests will receive only\n        // one 200-class response; however, due to forking, the subscription may\n        // have been accepted by multiple nodes.  The subscriber MUST therefore\n        // be prepared to receive NOTIFY requests with \"From:\" tags that differ\n        // from the \"To:\" tag received in the SUBSCRIBE 200-class response.\n        //\n        // If multiple NOTIFY requests are received in different dialogs in\n        // response to a single SUBSCRIBE request, each dialog represents a\n        // different destination to which the SUBSCRIBE request was forked.\n        // Subscriber handling in such situations varies by event package; see\n        // Section 5.4.9 for details.\n        // https://tools.ietf.org/html/rfc6665#section-4.1.4\n        // Each event package MUST specify whether forked SUBSCRIBE requests are\n        // allowed to install multiple subscriptions.\n        //\n        // If such behavior is not allowed, the first potential dialog-\n        // establishing message will create a dialog.  All subsequent NOTIFY\n        // requests that correspond to the SUBSCRIBE request (i.e., have\n        // matching \"To\", \"From\", \"Call-ID\", and \"Event\" header fields, as well\n        // as \"From\" header field \"tag\" parameter and \"Event\" header field \"id\"\n        // parameter) but that do not match the dialog would be rejected with a\n        // 481 response.  Note that the 200-class response to the SUBSCRIBE\n        // request can arrive after a matching NOTIFY request has been received;\n        // such responses might not correlate to the same dialog established by\n        // the NOTIFY request.  Except as required to complete the SUBSCRIBE\n        // transaction, such non-matching 200-class responses are ignored.\n        //\n        // If installing of multiple subscriptions by way of a single forked\n        // SUBSCRIBE request is allowed, the subscriber establishes a new dialog\n        // towards each notifier by returning a 200-class response to each\n        // NOTIFY request.  Each dialog is then handled as its own entity and is\n        // refreshed independently of the other dialogs.\n        //\n        // In the case that multiple subscriptions are allowed, the event\n        // package MUST specify whether merging of the notifications to form a\n        // single state is required, and how such merging is to be performed.\n        // Note that it is possible that some event packages may be defined in\n        // such a way that each dialog is tied to a mutually exclusive state\n        // that is unaffected by the other dialogs; this MUST be clearly stated\n        // if it is the case.\n        // https://tools.ietf.org/html/rfc6665#section-5.4.9\n        // *** NOTE: This implementation is only for event packages which\n        // do not allow forked requests to install multiple subscriptions.\n        // As such and in accordance with the specification, we stop waiting\n        // and any future NOTIFY requests will be rejected with a 481.\n        if (this.dialog) {\n            throw new Error(\"Dialog already created. This implementation only supports install of single subscriptions.\");\n        }\n        this.waitNotifyStop();\n        // Update expires.\n        this.subscriptionExpires =\n            subscriptionState.expires ?\n                Math.min(this.subscriptionExpires, Math.max(subscriptionState.expires, 0)) :\n                this.subscriptionExpires;\n        // Update subscription state.\n        switch (state) {\n            case \"pending\":\n                this.subscriptionState = subscription_1.SubscriptionState.Pending;\n                break;\n            case \"active\":\n                this.subscriptionState = subscription_1.SubscriptionState.Active;\n                break;\n            case \"terminated\":\n                this.subscriptionState = subscription_1.SubscriptionState.Terminated;\n                break;\n            default:\n                throw new Error(\"Unrecognized state \" + state + \".\");\n        }\n        // Dialogs usages are created upon completion of a NOTIFY transaction\n        // for a new subscription, unless the NOTIFY request contains a\n        // \"Subscription-State\" of \"terminated.\"\n        // https://tools.ietf.org/html/rfc6665#section-4.4.1\n        if (this.subscriptionState !== subscription_1.SubscriptionState.Terminated) {\n            // Because the dialog usage is established by the NOTIFY request, the\n            // route set at the subscriber is taken from the NOTIFY request itself,\n            // as opposed to the route set present in the 200-class response to the\n            // SUBSCRIBE request.\n            // https://tools.ietf.org/html/rfc6665#section-4.4.1\n            var dialogState = subscription_dialog_1.SubscriptionDialog.initialDialogStateForSubscription(this.message, uas.message);\n            // Subscription Initiated! :)\n            this.dialog = new subscription_dialog_1.SubscriptionDialog(this.subscriptionEvent, this.subscriptionExpires, this.subscriptionState, this.core, dialogState);\n        }\n        // Delegate.\n        if (this.delegate && this.delegate.onNotify) {\n            var request = uas;\n            var subscription = this.dialog;\n            this.delegate.onNotify({ request: request, subscription: subscription });\n        }\n        else {\n            uas.accept();\n        }\n    };\n    SubscribeUserAgentClient.prototype.waitNotifyStart = function () {\n        var _this = this;\n        if (!this.N) {\n            // Add ourselves to the core's subscriber map.\n            // This allows the core to route out of dialog NOTIFY messages to us.\n            this.core.subscribers.set(this.subscriberId, this);\n            this.N = setTimeout(function () { return _this.timer_N(); }, timers_1.Timers.TIMER_N);\n        }\n    };\n    SubscribeUserAgentClient.prototype.waitNotifyStop = function () {\n        if (this.N) {\n            // Remove ourselves to the core's subscriber map.\n            // Any future out of dialog NOTIFY messages will be rejected with a 481.\n            this.core.subscribers.delete(this.subscriberId);\n            clearTimeout(this.N);\n            this.N = undefined;\n        }\n    };\n    /**\n     * Receive a response from the transaction layer.\n     * @param message - Incoming response message.\n     */\n    SubscribeUserAgentClient.prototype.receiveResponse = function (message) {\n        if (!this.authenticationGuard(message)) {\n            return;\n        }\n        if (message.statusCode && message.statusCode >= 200 && message.statusCode < 300) {\n            //  The \"Expires\" header field in a 200-class response to SUBSCRIBE\n            //  request indicates the actual duration for which the subscription will\n            //  remain active (unless refreshed).  The received value might be\n            //  smaller than the value indicated in the SUBSCRIBE request but cannot\n            //  be larger; see Section 4.2.1 for details.\n            // https://tools.ietf.org/html/rfc6665#section-4.1.2.1\n            // The \"Expires\" values present in SUBSCRIBE 200-class responses behave\n            // in the same way as they do in REGISTER responses: the server MAY\n            // shorten the interval but MUST NOT lengthen it.\n            //\n            //    If the duration specified in a SUBSCRIBE request is unacceptably\n            //    short, the notifier may be able to send a 423 response, as\n            //    described earlier in this section.\n            //\n            // 200-class responses to SUBSCRIBE requests will not generally contain\n            // any useful information beyond subscription duration; their primary\n            // purpose is to serve as a reliability mechanism.  State information\n            // will be communicated via a subsequent NOTIFY request from the\n            // notifier.\n            // https://tools.ietf.org/html/rfc6665#section-4.2.1.1\n            var expires = message.getHeader(\"Expires\");\n            if (!expires) {\n                this.logger.warn(\"Expires header missing in a 200-class response to SUBSCRIBE\");\n            }\n            else {\n                var subscriptionExpiresReceived = Number(expires);\n                if (subscriptionExpiresReceived > this.subscriptionExpiresRequested) {\n                    this.logger.warn(\"Expires header in a 200-class response to SUBSCRIBE with a higher value than the one in the request\");\n                }\n                if (subscriptionExpiresReceived < this.subscriptionExpires) {\n                    this.subscriptionExpires = subscriptionExpiresReceived;\n                }\n            }\n            // If a NOTIFY arrived before 200-class response a dialog may have been created.\n            // Updated the dialogs expiration only if this indicates earlier expiration.\n            if (this.dialog) {\n                if (this.dialog.subscriptionExpires > this.subscriptionExpires) {\n                    this.dialog.subscriptionExpires = this.subscriptionExpires;\n                }\n            }\n        }\n        if (message.statusCode && message.statusCode >= 300 && message.statusCode < 700) {\n            this.waitNotifyStop(); // No NOTIFY will be sent after a negative final response.\n        }\n        _super.prototype.receiveResponse.call(this, message);\n    };\n    /**\n     * To ensure that subscribers do not wait indefinitely for a\n     * subscription to be established, a subscriber starts a Timer N, set to\n     * 64*T1, when it sends a SUBSCRIBE request.  If this Timer N expires\n     * prior to the receipt of a NOTIFY request, the subscriber considers\n     * the subscription failed, and cleans up any state associated with the\n     * subscription attempt.\n     * https://tools.ietf.org/html/rfc6665#section-4.1.2.4\n     */\n    SubscribeUserAgentClient.prototype.timer_N = function () {\n        this.logger.warn(\"Timer N expired for SUBSCRIBE user agent client. Timed out waiting for NOTIFY.\");\n        this.waitNotifyStop();\n        if (this.delegate && this.delegate.onNotifyTimeout) {\n            this.delegate.onNotifyTimeout();\n        }\n    };\n    return SubscribeUserAgentClient;\n}(user_agent_client_1.UserAgentClient));\nexports.SubscribeUserAgentClient = SubscribeUserAgentClient;\n\n\n/***/ }),\n/* 78 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar transactions_1 = __webpack_require__(28);\nvar user_agent_server_1 = __webpack_require__(45);\n/**\n * SUBSCRIBE UAS.\n * @public\n */\nvar SubscribeUserAgentServer = /** @class */ (function (_super) {\n    tslib_1.__extends(SubscribeUserAgentServer, _super);\n    function SubscribeUserAgentServer(core, message, delegate) {\n        var _this = _super.call(this, transactions_1.NonInviteServerTransaction, core, message, delegate) || this;\n        _this.core = core;\n        return _this;\n    }\n    return SubscribeUserAgentServer;\n}(user_agent_server_1.UserAgentServer));\nexports.SubscribeUserAgentServer = SubscribeUserAgentServer;\n\n\n/***/ }),\n/* 79 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar events_1 = __webpack_require__(31);\nvar Constants_1 = __webpack_require__(80);\nvar core_1 = __webpack_require__(2);\nvar Enums_1 = __webpack_require__(82);\nvar Utils_1 = __webpack_require__(83);\nvar ClientContext = /** @class */ (function (_super) {\n    tslib_1.__extends(ClientContext, _super);\n    function ClientContext(ua, method, target, options) {\n        var _this = _super.call(this) || this;\n        _this.data = {};\n        ClientContext.initializer(_this, ua, method, target, options);\n        return _this;\n    }\n    ClientContext.initializer = function (objToConstruct, ua, method, originalTarget, options) {\n        objToConstruct.type = Enums_1.TypeStrings.ClientContext;\n        // Validate arguments\n        if (originalTarget === undefined) {\n            throw new TypeError(\"Not enough arguments\");\n        }\n        objToConstruct.ua = ua;\n        objToConstruct.logger = ua.getLogger(\"sip.clientcontext\");\n        objToConstruct.method = method;\n        var target = ua.normalizeTarget(originalTarget);\n        if (!target) {\n            throw new TypeError(\"Invalid target: \" + originalTarget);\n        }\n        var fromURI = ua.userAgentCore.configuration.aor;\n        if (options && options.params && options.params.fromUri) {\n            fromURI =\n                (typeof options.params.fromUri === \"string\") ?\n                    core_1.Grammar.URIParse(options.params.fromUri) :\n                    options.params.fromUri;\n            if (!fromURI) {\n                throw new TypeError(\"Invalid from URI: \" + options.params.fromUri);\n            }\n        }\n        var toURI = target;\n        if (options && options.params && options.params.toUri) {\n            toURI =\n                (typeof options.params.toUri === \"string\") ?\n                    core_1.Grammar.URIParse(options.params.toUri) :\n                    options.params.toUri;\n            if (!toURI) {\n                throw new TypeError(\"Invalid to URI: \" + options.params.toUri);\n            }\n        }\n        /* Options\n        * - extraHeaders\n        * - params\n        * - contentType\n        * - body\n        */\n        options = Object.create(options || Object.prototype);\n        options = options || {};\n        var extraHeaders = (options.extraHeaders || []).slice();\n        var params = options.params || {};\n        var bodyObj;\n        if (options.body) {\n            bodyObj = {\n                body: options.body,\n                contentType: options.contentType ? options.contentType : \"application/sdp\"\n            };\n            objToConstruct.body = bodyObj;\n        }\n        var body;\n        if (bodyObj) {\n            body = Utils_1.Utils.fromBodyObj(bodyObj);\n        }\n        // Build the request\n        objToConstruct.request = ua.userAgentCore.makeOutgoingRequestMessage(method, target, fromURI, toURI, params, extraHeaders, body);\n        /* Set other properties from the request */\n        if (objToConstruct.request.from) {\n            objToConstruct.localIdentity = objToConstruct.request.from;\n        }\n        if (objToConstruct.request.to) {\n            objToConstruct.remoteIdentity = objToConstruct.request.to;\n        }\n    };\n    ClientContext.prototype.send = function () {\n        var _this = this;\n        this.ua.userAgentCore.request(this.request, {\n            onAccept: function (response) { return _this.receiveResponse(response.message); },\n            onProgress: function (response) { return _this.receiveResponse(response.message); },\n            onRedirect: function (response) { return _this.receiveResponse(response.message); },\n            onReject: function (response) { return _this.receiveResponse(response.message); },\n            onTrying: function (response) { return _this.receiveResponse(response.message); }\n        });\n        return this;\n    };\n    ClientContext.prototype.receiveResponse = function (response) {\n        var statusCode = response.statusCode || 0;\n        var cause = Utils_1.Utils.getReasonPhrase(statusCode);\n        switch (true) {\n            case /^1[0-9]{2}$/.test(statusCode.toString()):\n                this.emit(\"progress\", response, cause);\n                break;\n            case /^2[0-9]{2}$/.test(statusCode.toString()):\n                if (this.ua.applicants[this.toString()]) {\n                    delete this.ua.applicants[this.toString()];\n                }\n                this.emit(\"accepted\", response, cause);\n                break;\n            default:\n                if (this.ua.applicants[this.toString()]) {\n                    delete this.ua.applicants[this.toString()];\n                }\n                this.emit(\"rejected\", response, cause);\n                this.emit(\"failed\", response, cause);\n                break;\n        }\n    };\n    ClientContext.prototype.onRequestTimeout = function () {\n        this.emit(\"failed\", undefined, Constants_1.C.causes.REQUEST_TIMEOUT);\n    };\n    ClientContext.prototype.onTransportError = function () {\n        this.emit(\"failed\", undefined, Constants_1.C.causes.CONNECTION_ERROR);\n    };\n    return ClientContext;\n}(events_1.EventEmitter));\nexports.ClientContext = ClientContext;\n\n\n/***/ }),\n/* 80 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar version_1 = __webpack_require__(81);\nvar C;\n(function (C) {\n    C.version = version_1.LIBRARY_VERSION;\n    C.USER_AGENT = \"SIP.js/\" + version_1.LIBRARY_VERSION;\n    // SIP scheme\n    C.SIP = \"sip\";\n    C.SIPS = \"sips\";\n    // End and Failure causes\n    var causes;\n    (function (causes) {\n        // Generic error causes\n        causes[\"CONNECTION_ERROR\"] = \"Connection Error\";\n        causes[\"INTERNAL_ERROR\"] = \"Internal Error\";\n        causes[\"REQUEST_TIMEOUT\"] = \"Request Timeout\";\n        causes[\"SIP_FAILURE_CODE\"] = \"SIP Failure Code\";\n        // SIP error causes\n        causes[\"ADDRESS_INCOMPLETE\"] = \"Address Incomplete\";\n        causes[\"AUTHENTICATION_ERROR\"] = \"Authentication Error\";\n        causes[\"BUSY\"] = \"Busy\";\n        causes[\"DIALOG_ERROR\"] = \"Dialog Error\";\n        causes[\"INCOMPATIBLE_SDP\"] = \"Incompatible SDP\";\n        causes[\"NOT_FOUND\"] = \"Not Found\";\n        causes[\"REDIRECTED\"] = \"Redirected\";\n        causes[\"REJECTED\"] = \"Rejected\";\n        causes[\"UNAVAILABLE\"] = \"Unavailable\";\n        // Session error causes\n        causes[\"BAD_MEDIA_DESCRIPTION\"] = \"Bad Media Description\";\n        causes[\"CANCELED\"] = \"Canceled\";\n        causes[\"EXPIRES\"] = \"Expires\";\n        causes[\"NO_ACK\"] = \"No ACK\";\n        causes[\"NO_ANSWER\"] = \"No Answer\";\n        causes[\"NO_PRACK\"] = \"No PRACK\";\n        causes[\"RTP_TIMEOUT\"] = \"RTP Timeout\";\n        causes[\"USER_DENIED_MEDIA_ACCESS\"] = \"User Denied Media Access\";\n        causes[\"WEBRTC_ERROR\"] = \"WebRTC Error\";\n        causes[\"WEBRTC_NOT_SUPPORTED\"] = \"WebRTC Not Supported\";\n    })(causes = C.causes || (C.causes = {}));\n    var supported;\n    (function (supported) {\n        supported[\"REQUIRED\"] = \"required\";\n        supported[\"SUPPORTED\"] = \"supported\";\n        supported[\"UNSUPPORTED\"] = \"none\";\n    })(supported = C.supported || (C.supported = {}));\n    C.SIP_ERROR_CAUSES = {\n        ADDRESS_INCOMPLETE: [484],\n        AUTHENTICATION_ERROR: [401, 407],\n        BUSY: [486, 600],\n        INCOMPATIBLE_SDP: [488, 606],\n        NOT_FOUND: [404, 604],\n        REDIRECTED: [300, 301, 302, 305, 380],\n        REJECTED: [403, 603],\n        UNAVAILABLE: [480, 410, 408, 430]\n    };\n    // SIP Methods\n    C.ACK = \"ACK\";\n    C.BYE = \"BYE\";\n    C.CANCEL = \"CANCEL\";\n    C.INFO = \"INFO\";\n    C.INVITE = \"INVITE\";\n    C.MESSAGE = \"MESSAGE\";\n    C.NOTIFY = \"NOTIFY\";\n    C.OPTIONS = \"OPTIONS\";\n    C.REGISTER = \"REGISTER\";\n    C.UPDATE = \"UPDATE\";\n    C.SUBSCRIBE = \"SUBSCRIBE\";\n    C.PUBLISH = \"PUBLISH\";\n    C.REFER = \"REFER\";\n    C.PRACK = \"PRACK\";\n    /* SIP Response Reasons\n     * DOC: http://www.iana.org/assignments/sip-parameters\n     * Copied from https://github.com/versatica/OverSIP/blob/master/lib/oversip/sip/constants.rb#L7\n     */\n    C.REASON_PHRASE = {\n        100: \"Trying\",\n        180: \"Ringing\",\n        181: \"Call Is Being Forwarded\",\n        182: \"Queued\",\n        183: \"Session Progress\",\n        199: \"Early Dialog Terminated\",\n        200: \"OK\",\n        202: \"Accepted\",\n        204: \"No Notification\",\n        300: \"Multiple Choices\",\n        301: \"Moved Permanently\",\n        302: \"Moved Temporarily\",\n        305: \"Use Proxy\",\n        380: \"Alternative Service\",\n        400: \"Bad Request\",\n        401: \"Unauthorized\",\n        402: \"Payment Required\",\n        403: \"Forbidden\",\n        404: \"Not Found\",\n        405: \"Method Not Allowed\",\n        406: \"Not Acceptable\",\n        407: \"Proxy Authentication Required\",\n        408: \"Request Timeout\",\n        410: \"Gone\",\n        412: \"Conditional Request Failed\",\n        413: \"Request Entity Too Large\",\n        414: \"Request-URI Too Long\",\n        415: \"Unsupported Media Type\",\n        416: \"Unsupported URI Scheme\",\n        417: \"Unknown Resource-Priority\",\n        420: \"Bad Extension\",\n        421: \"Extension Required\",\n        422: \"Session Interval Too Small\",\n        423: \"Interval Too Brief\",\n        428: \"Use Identity Header\",\n        429: \"Provide Referrer Identity\",\n        430: \"Flow Failed\",\n        433: \"Anonymity Disallowed\",\n        436: \"Bad Identity-Info\",\n        437: \"Unsupported Certificate\",\n        438: \"Invalid Identity Header\",\n        439: \"First Hop Lacks Outbound Support\",\n        440: \"Max-Breadth Exceeded\",\n        469: \"Bad Info Package\",\n        470: \"Consent Needed\",\n        478: \"Unresolvable Destination\",\n        480: \"Temporarily Unavailable\",\n        481: \"Call/Transaction Does Not Exist\",\n        482: \"Loop Detected\",\n        483: \"Too Many Hops\",\n        484: \"Address Incomplete\",\n        485: \"Ambiguous\",\n        486: \"Busy Here\",\n        487: \"Request Terminated\",\n        488: \"Not Acceptable Here\",\n        489: \"Bad Event\",\n        491: \"Request Pending\",\n        493: \"Undecipherable\",\n        494: \"Security Agreement Required\",\n        500: \"Internal Server Error\",\n        501: \"Not Implemented\",\n        502: \"Bad Gateway\",\n        503: \"Service Unavailable\",\n        504: \"Server Time-out\",\n        505: \"Version Not Supported\",\n        513: \"Message Too Large\",\n        580: \"Precondition Failure\",\n        600: \"Busy Everywhere\",\n        603: \"Decline\",\n        604: \"Does Not Exist Anywhere\",\n        606: \"Not Acceptable\"\n    };\n    /* SIP Option Tags\n     * DOC: http://www.iana.org/assignments/sip-parameters/sip-parameters.xhtml#sip-parameters-4\n     */\n    C.OPTION_TAGS = {\n        \"100rel\": true,\n        \"199\": true,\n        \"answermode\": true,\n        \"early-session\": true,\n        \"eventlist\": true,\n        \"explicitsub\": true,\n        \"from-change\": true,\n        \"geolocation-http\": true,\n        \"geolocation-sip\": true,\n        \"gin\": true,\n        \"gruu\": true,\n        \"histinfo\": true,\n        \"ice\": true,\n        \"join\": true,\n        \"multiple-refer\": true,\n        \"norefersub\": true,\n        \"nosub\": true,\n        \"outbound\": true,\n        \"path\": true,\n        \"policy\": true,\n        \"precondition\": true,\n        \"pref\": true,\n        \"privacy\": true,\n        \"recipient-list-invite\": true,\n        \"recipient-list-message\": true,\n        \"recipient-list-subscribe\": true,\n        \"replaces\": true,\n        \"resource-priority\": true,\n        \"sdp-anat\": true,\n        \"sec-agree\": true,\n        \"tdialog\": true,\n        \"timer\": true,\n        \"uui\": true // RFC 7433\n    };\n    var dtmfType;\n    (function (dtmfType) {\n        dtmfType[\"INFO\"] = \"info\";\n        dtmfType[\"RTP\"] = \"rtp\";\n    })(dtmfType = C.dtmfType || (C.dtmfType = {}));\n})(C = exports.C || (exports.C = {}));\n\n\n/***/ }),\n/* 81 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LIBRARY_VERSION = \"0.15.11\";\n\n\n/***/ }),\n/* 82 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// enums can't really be declared, so they are set here.\n// pulled out of individual files to avoid circular dependencies\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DialogStatus;\n(function (DialogStatus) {\n    DialogStatus[DialogStatus[\"STATUS_EARLY\"] = 1] = \"STATUS_EARLY\";\n    DialogStatus[DialogStatus[\"STATUS_CONFIRMED\"] = 2] = \"STATUS_CONFIRMED\";\n})(DialogStatus = exports.DialogStatus || (exports.DialogStatus = {}));\nvar SessionStatus;\n(function (SessionStatus) {\n    // Session states\n    SessionStatus[SessionStatus[\"STATUS_NULL\"] = 0] = \"STATUS_NULL\";\n    SessionStatus[SessionStatus[\"STATUS_INVITE_SENT\"] = 1] = \"STATUS_INVITE_SENT\";\n    SessionStatus[SessionStatus[\"STATUS_1XX_RECEIVED\"] = 2] = \"STATUS_1XX_RECEIVED\";\n    SessionStatus[SessionStatus[\"STATUS_INVITE_RECEIVED\"] = 3] = \"STATUS_INVITE_RECEIVED\";\n    SessionStatus[SessionStatus[\"STATUS_WAITING_FOR_ANSWER\"] = 4] = \"STATUS_WAITING_FOR_ANSWER\";\n    SessionStatus[SessionStatus[\"STATUS_ANSWERED\"] = 5] = \"STATUS_ANSWERED\";\n    SessionStatus[SessionStatus[\"STATUS_WAITING_FOR_PRACK\"] = 6] = \"STATUS_WAITING_FOR_PRACK\";\n    SessionStatus[SessionStatus[\"STATUS_WAITING_FOR_ACK\"] = 7] = \"STATUS_WAITING_FOR_ACK\";\n    SessionStatus[SessionStatus[\"STATUS_CANCELED\"] = 8] = \"STATUS_CANCELED\";\n    SessionStatus[SessionStatus[\"STATUS_TERMINATED\"] = 9] = \"STATUS_TERMINATED\";\n    SessionStatus[SessionStatus[\"STATUS_ANSWERED_WAITING_FOR_PRACK\"] = 10] = \"STATUS_ANSWERED_WAITING_FOR_PRACK\";\n    SessionStatus[SessionStatus[\"STATUS_EARLY_MEDIA\"] = 11] = \"STATUS_EARLY_MEDIA\";\n    SessionStatus[SessionStatus[\"STATUS_CONFIRMED\"] = 12] = \"STATUS_CONFIRMED\";\n})(SessionStatus = exports.SessionStatus || (exports.SessionStatus = {}));\nvar TypeStrings;\n(function (TypeStrings) {\n    TypeStrings[TypeStrings[\"ClientContext\"] = 0] = \"ClientContext\";\n    TypeStrings[TypeStrings[\"ConfigurationError\"] = 1] = \"ConfigurationError\";\n    TypeStrings[TypeStrings[\"Dialog\"] = 2] = \"Dialog\";\n    TypeStrings[TypeStrings[\"DigestAuthentication\"] = 3] = \"DigestAuthentication\";\n    TypeStrings[TypeStrings[\"DTMF\"] = 4] = \"DTMF\";\n    TypeStrings[TypeStrings[\"IncomingMessage\"] = 5] = \"IncomingMessage\";\n    TypeStrings[TypeStrings[\"IncomingRequest\"] = 6] = \"IncomingRequest\";\n    TypeStrings[TypeStrings[\"IncomingResponse\"] = 7] = \"IncomingResponse\";\n    TypeStrings[TypeStrings[\"InvalidStateError\"] = 8] = \"InvalidStateError\";\n    TypeStrings[TypeStrings[\"InviteClientContext\"] = 9] = \"InviteClientContext\";\n    TypeStrings[TypeStrings[\"InviteServerContext\"] = 10] = \"InviteServerContext\";\n    TypeStrings[TypeStrings[\"Logger\"] = 11] = \"Logger\";\n    TypeStrings[TypeStrings[\"LoggerFactory\"] = 12] = \"LoggerFactory\";\n    TypeStrings[TypeStrings[\"MethodParameterError\"] = 13] = \"MethodParameterError\";\n    TypeStrings[TypeStrings[\"NameAddrHeader\"] = 14] = \"NameAddrHeader\";\n    TypeStrings[TypeStrings[\"NotSupportedError\"] = 15] = \"NotSupportedError\";\n    TypeStrings[TypeStrings[\"OutgoingRequest\"] = 16] = \"OutgoingRequest\";\n    TypeStrings[TypeStrings[\"Parameters\"] = 17] = \"Parameters\";\n    TypeStrings[TypeStrings[\"PublishContext\"] = 18] = \"PublishContext\";\n    TypeStrings[TypeStrings[\"ReferClientContext\"] = 19] = \"ReferClientContext\";\n    TypeStrings[TypeStrings[\"ReferServerContext\"] = 20] = \"ReferServerContext\";\n    TypeStrings[TypeStrings[\"RegisterContext\"] = 21] = \"RegisterContext\";\n    TypeStrings[TypeStrings[\"RenegotiationError\"] = 22] = \"RenegotiationError\";\n    TypeStrings[TypeStrings[\"RequestSender\"] = 23] = \"RequestSender\";\n    TypeStrings[TypeStrings[\"ServerContext\"] = 24] = \"ServerContext\";\n    TypeStrings[TypeStrings[\"Session\"] = 25] = \"Session\";\n    TypeStrings[TypeStrings[\"SessionDescriptionHandler\"] = 26] = \"SessionDescriptionHandler\";\n    TypeStrings[TypeStrings[\"SessionDescriptionHandlerError\"] = 27] = \"SessionDescriptionHandlerError\";\n    TypeStrings[TypeStrings[\"SessionDescriptionHandlerObserver\"] = 28] = \"SessionDescriptionHandlerObserver\";\n    TypeStrings[TypeStrings[\"Subscription\"] = 29] = \"Subscription\";\n    TypeStrings[TypeStrings[\"Transport\"] = 30] = \"Transport\";\n    TypeStrings[TypeStrings[\"UA\"] = 31] = \"UA\";\n    TypeStrings[TypeStrings[\"URI\"] = 32] = \"URI\";\n})(TypeStrings = exports.TypeStrings || (exports.TypeStrings = {}));\n// UA status codes\nvar UAStatus;\n(function (UAStatus) {\n    UAStatus[UAStatus[\"STATUS_INIT\"] = 0] = \"STATUS_INIT\";\n    UAStatus[UAStatus[\"STATUS_STARTING\"] = 1] = \"STATUS_STARTING\";\n    UAStatus[UAStatus[\"STATUS_READY\"] = 2] = \"STATUS_READY\";\n    UAStatus[UAStatus[\"STATUS_USER_CLOSED\"] = 3] = \"STATUS_USER_CLOSED\";\n    UAStatus[UAStatus[\"STATUS_NOT_READY\"] = 4] = \"STATUS_NOT_READY\";\n})(UAStatus = exports.UAStatus || (exports.UAStatus = {}));\n\n\n/***/ }),\n/* 83 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Constants_1 = __webpack_require__(80);\nvar grammar_1 = __webpack_require__(11);\nvar uri_1 = __webpack_require__(15);\nvar Utils;\n(function (Utils) {\n    function defer() {\n        var deferred = {};\n        deferred.promise = new Promise(function (resolve, reject) {\n            deferred.resolve = resolve;\n            deferred.reject = reject;\n        });\n        return deferred;\n    }\n    Utils.defer = defer;\n    function reducePromises(arr, val) {\n        return arr.reduce(function (acc, fn) {\n            acc = acc.then(fn);\n            return acc;\n        }, Promise.resolve(val));\n    }\n    Utils.reducePromises = reducePromises;\n    function str_utf8_length(str) {\n        return encodeURIComponent(str).replace(/%[A-F\\d]{2}/g, \"U\").length;\n    }\n    Utils.str_utf8_length = str_utf8_length;\n    function generateFakeSDP(body) {\n        if (!body) {\n            return;\n        }\n        var start = body.indexOf(\"o=\");\n        var end = body.indexOf(\"\\r\\n\", start);\n        return \"v=0\\r\\n\" + body.slice(start, end) + \"\\r\\ns=-\\r\\nt=0 0\\r\\nc=IN IP4 0.0.0.0\";\n    }\n    Utils.generateFakeSDP = generateFakeSDP;\n    function isDecimal(num) {\n        var numAsNum = parseInt(num, 10);\n        return !isNaN(numAsNum) && (parseFloat(num) === numAsNum);\n    }\n    Utils.isDecimal = isDecimal;\n    function createRandomToken(size, base) {\n        if (base === void 0) { base = 32; }\n        var token = \"\";\n        for (var i = 0; i < size; i++) {\n            var r = Math.floor(Math.random() * base);\n            token += r.toString(base);\n        }\n        return token;\n    }\n    Utils.createRandomToken = createRandomToken;\n    function newTag() {\n        // used to use the constant in UA\n        return Utils.createRandomToken(10);\n    }\n    Utils.newTag = newTag;\n    // http://stackoverflow.com/users/109538/broofa\n    function newUUID() {\n        var UUID = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n            var r = Math.floor(Math.random() * 16);\n            var v = c === \"x\" ? r : (r % 4 + 8);\n            return v.toString(16);\n        });\n        return UUID;\n    }\n    Utils.newUUID = newUUID;\n    /*\n     * Normalize SIP URI.\n     * NOTE: It does not allow a SIP URI without username.\n     * Accepts 'sip', 'sips' and 'tel' URIs and convert them into 'sip'.\n     * Detects the domain part (if given) and properly hex-escapes the user portion.\n     * If the user portion has only 'tel' number symbols the user portion is clean of 'tel' visual separators.\n     * @private\n     * @param {String} target\n     * @param {String} [domain]\n     */\n    function normalizeTarget(target, domain) {\n        // If no target is given then raise an error.\n        if (!target) {\n            return;\n            // If a SIP.URI instance is given then return it.\n        }\n        else if (target instanceof uri_1.URI) {\n            return target;\n            // If a string is given split it by '@':\n            // - Last fragment is the desired domain.\n            // - Otherwise append the given domain argument.\n        }\n        else if (typeof target === \"string\") {\n            var targetArray = target.split(\"@\");\n            var targetUser = void 0;\n            var targetDomain = void 0;\n            switch (targetArray.length) {\n                case 1:\n                    if (!domain) {\n                        return;\n                    }\n                    targetUser = target;\n                    targetDomain = domain;\n                    break;\n                case 2:\n                    targetUser = targetArray[0];\n                    targetDomain = targetArray[1];\n                    break;\n                default:\n                    targetUser = targetArray.slice(0, targetArray.length - 1).join(\"@\");\n                    targetDomain = targetArray[targetArray.length - 1];\n            }\n            // Remove the URI scheme (if present).\n            targetUser = targetUser.replace(/^(sips?|tel):/i, \"\");\n            // Remove 'tel' visual separators if the user portion just contains 'tel' number symbols.\n            if (/^[\\-\\.\\(\\)]*\\+?[0-9\\-\\.\\(\\)]+$/.test(targetUser)) {\n                targetUser = targetUser.replace(/[\\-\\.\\(\\)]/g, \"\");\n            }\n            // Build the complete SIP URI.\n            target = Constants_1.C.SIP + \":\" + Utils.escapeUser(targetUser) + \"@\" + targetDomain;\n            // Finally parse the resulting URI.\n            return grammar_1.Grammar.URIParse(target);\n        }\n        else {\n            return;\n        }\n    }\n    Utils.normalizeTarget = normalizeTarget;\n    /*\n     * Hex-escape a SIP URI user.\n     * @private\n     * @param {String} user\n     */\n    function escapeUser(user) {\n        // Don't hex-escape ':' (%3A), '+' (%2B), '?' (%3F\"), '/' (%2F).\n        return encodeURIComponent(decodeURIComponent(user))\n            .replace(/%3A/ig, \":\")\n            .replace(/%2B/ig, \"+\")\n            .replace(/%3F/ig, \"?\")\n            .replace(/%2F/ig, \"/\");\n    }\n    Utils.escapeUser = escapeUser;\n    function headerize(str) {\n        var exceptions = {\n            \"Call-Id\": \"Call-ID\",\n            \"Cseq\": \"CSeq\",\n            \"Min-Se\": \"Min-SE\",\n            \"Rack\": \"RAck\",\n            \"Rseq\": \"RSeq\",\n            \"Www-Authenticate\": \"WWW-Authenticate\",\n        };\n        var name = str.toLowerCase().replace(/_/g, \"-\").split(\"-\");\n        var parts = name.length;\n        var hname = \"\";\n        for (var part = 0; part < parts; part++) {\n            if (part !== 0) {\n                hname += \"-\";\n            }\n            hname += name[part].charAt(0).toUpperCase() + name[part].substring(1);\n        }\n        if (exceptions[hname]) {\n            hname = exceptions[hname];\n        }\n        return hname;\n    }\n    Utils.headerize = headerize;\n    function sipErrorCause(statusCode) {\n        for (var cause in Constants_1.C.SIP_ERROR_CAUSES) {\n            if (Constants_1.C.SIP_ERROR_CAUSES[cause].indexOf(statusCode) !== -1) {\n                return Constants_1.C.causes[cause];\n            }\n        }\n        return Constants_1.C.causes.SIP_FAILURE_CODE;\n    }\n    Utils.sipErrorCause = sipErrorCause;\n    function getReasonPhrase(code, specific) {\n        return specific || Constants_1.C.REASON_PHRASE[code] || \"\";\n    }\n    Utils.getReasonPhrase = getReasonPhrase;\n    function getReasonHeaderValue(code, reason) {\n        reason = Utils.getReasonPhrase(code, reason);\n        return \"SIP;cause=\" + code + ';text=\"' + reason + '\"';\n    }\n    Utils.getReasonHeaderValue = getReasonHeaderValue;\n    function getCancelReason(code, reason) {\n        if (code && code < 200 || code > 699) {\n            throw new TypeError(\"Invalid statusCode: \" + code);\n        }\n        else if (code) {\n            return Utils.getReasonHeaderValue(code, reason);\n        }\n    }\n    Utils.getCancelReason = getCancelReason;\n    function buildStatusLine(code, reason) {\n        // Validate code and reason values\n        if (!code || (code < 100 || code > 699)) {\n            throw new TypeError(\"Invalid statusCode: \" + code);\n        }\n        else if (reason && typeof reason !== \"string\" && !(reason instanceof String)) {\n            throw new TypeError(\"Invalid reason: \" + reason);\n        }\n        reason = Utils.getReasonPhrase(code, reason);\n        return \"SIP/2.0 \" + code + \" \" + reason + \"\\r\\n\";\n    }\n    Utils.buildStatusLine = buildStatusLine;\n    /**\n     * Create a Body given a BodyObj.\n     * @param bodyObj Body Object\n     */\n    function fromBodyObj(bodyObj) {\n        var content = bodyObj.body;\n        var contentType = bodyObj.contentType;\n        var contentDisposition = contentTypeToContentDisposition(contentType);\n        var body = { contentDisposition: contentDisposition, contentType: contentType, content: content };\n        return body;\n    }\n    Utils.fromBodyObj = fromBodyObj;\n    /**\n     * Create a BodyObj given a Body.\n     * @param bodyObj Body Object\n     */\n    function toBodyObj(body) {\n        var bodyObj = {\n            body: body.content,\n            contentType: body.contentType\n        };\n        return bodyObj;\n    }\n    Utils.toBodyObj = toBodyObj;\n    // If the Content-Disposition header field is missing, bodies of\n    // Content-Type application/sdp imply the disposition \"session\", while\n    // other content types imply \"render\".\n    // https://tools.ietf.org/html/rfc3261#section-13.2.1\n    function contentTypeToContentDisposition(contentType) {\n        if (contentType === \"application/sdp\") {\n            return \"session\";\n        }\n        else {\n            return \"render\";\n        }\n    }\n})(Utils = exports.Utils || (exports.Utils = {}));\n\n\n/***/ }),\n/* 84 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar core_1 = __webpack_require__(2);\nvar Enums_1 = __webpack_require__(82);\n// tslint:disable:max-classes-per-file\nvar Exceptions;\n(function (Exceptions) {\n    /**\n     * Indicates the session description handler has closed.\n     * Occurs when getDescription() or setDescription() are called after close() has been called.\n     * Occurs when close() is called while getDescription() or setDescription() are in progress.\n     */\n    var ClosedSessionDescriptionHandlerError = /** @class */ (function (_super) {\n        tslib_1.__extends(ClosedSessionDescriptionHandlerError, _super);\n        function ClosedSessionDescriptionHandlerError() {\n            return _super.call(this, \"The session description handler has closed.\") || this;\n        }\n        return ClosedSessionDescriptionHandlerError;\n    }(core_1.Exception));\n    Exceptions.ClosedSessionDescriptionHandlerError = ClosedSessionDescriptionHandlerError;\n    /**\n     * Indicates the session terminated before the action completed.\n     */\n    var TerminatedSessionError = /** @class */ (function (_super) {\n        tslib_1.__extends(TerminatedSessionError, _super);\n        function TerminatedSessionError() {\n            return _super.call(this, \"The session has terminated.\") || this;\n        }\n        return TerminatedSessionError;\n    }(core_1.Exception));\n    Exceptions.TerminatedSessionError = TerminatedSessionError;\n    /**\n     * Unsupported session description content type.\n     */\n    var UnsupportedSessionDescriptionContentTypeError = /** @class */ (function (_super) {\n        tslib_1.__extends(UnsupportedSessionDescriptionContentTypeError, _super);\n        function UnsupportedSessionDescriptionContentTypeError(message) {\n            return _super.call(this, message ? message : \"Unsupported session description content type.\") || this;\n        }\n        return UnsupportedSessionDescriptionContentTypeError;\n    }(core_1.Exception));\n    Exceptions.UnsupportedSessionDescriptionContentTypeError = UnsupportedSessionDescriptionContentTypeError;\n})(Exceptions = exports.Exceptions || (exports.Exceptions = {}));\n/**\n * DEPRECATED: The original implementation of exceptions in this library attempted to\n * deal with the lack of type checking in JavaScript by adding a \"type\" attribute\n * to objects and using that to discriminate. On top of that it layered allcoated\n * \"code\" numbers and constant \"name\" strings. All of that is unnecessary when using\n * TypeScript, inheriting from Error and properly setting up the prototype chain...\n */\nvar LegacyException = /** @class */ (function (_super) {\n    tslib_1.__extends(LegacyException, _super);\n    function LegacyException(code, name, message) {\n        var _this = _super.call(this, message) || this;\n        _this.code = code;\n        _this.name = name;\n        _this.message = message;\n        return _this;\n    }\n    return LegacyException;\n}(core_1.Exception));\n(function (Exceptions) {\n    var ConfigurationError = /** @class */ (function (_super) {\n        tslib_1.__extends(ConfigurationError, _super);\n        function ConfigurationError(parameter, value) {\n            var _this = _super.call(this, 1, \"CONFIGURATION_ERROR\", (!value) ? \"Missing parameter: \" + parameter :\n                \"Invalid value \" + JSON.stringify(value) + \" for parameter '\" + parameter + \"'\") || this;\n            _this.type = Enums_1.TypeStrings.ConfigurationError;\n            _this.parameter = parameter;\n            _this.value = value;\n            return _this;\n        }\n        return ConfigurationError;\n    }(LegacyException));\n    Exceptions.ConfigurationError = ConfigurationError;\n    var InvalidStateError = /** @class */ (function (_super) {\n        tslib_1.__extends(InvalidStateError, _super);\n        function InvalidStateError(status) {\n            var _this = _super.call(this, 2, \"INVALID_STATE_ERROR\", \"Invalid status: \" + status) || this;\n            _this.type = Enums_1.TypeStrings.InvalidStateError;\n            _this.status = status;\n            return _this;\n        }\n        return InvalidStateError;\n    }(LegacyException));\n    Exceptions.InvalidStateError = InvalidStateError;\n    var NotSupportedError = /** @class */ (function (_super) {\n        tslib_1.__extends(NotSupportedError, _super);\n        function NotSupportedError(message) {\n            var _this = _super.call(this, 3, \"NOT_SUPPORTED_ERROR\", message) || this;\n            _this.type = Enums_1.TypeStrings.NotSupportedError;\n            return _this;\n        }\n        return NotSupportedError;\n    }(LegacyException));\n    Exceptions.NotSupportedError = NotSupportedError;\n    // 4 was GetDescriptionError, which was deprecated and now removed\n    var RenegotiationError = /** @class */ (function (_super) {\n        tslib_1.__extends(RenegotiationError, _super);\n        function RenegotiationError(message) {\n            var _this = _super.call(this, 5, \"RENEGOTIATION_ERROR\", message) || this;\n            _this.type = Enums_1.TypeStrings.RenegotiationError;\n            return _this;\n        }\n        return RenegotiationError;\n    }(LegacyException));\n    Exceptions.RenegotiationError = RenegotiationError;\n    var MethodParameterError = /** @class */ (function (_super) {\n        tslib_1.__extends(MethodParameterError, _super);\n        function MethodParameterError(method, parameter, value) {\n            var _this = _super.call(this, 6, \"METHOD_PARAMETER_ERROR\", (!value) ?\n                \"Missing parameter: \" + parameter :\n                \"Invalid value \" + JSON.stringify(value) + \" for parameter '\" + parameter + \"'\") || this;\n            _this.type = Enums_1.TypeStrings.MethodParameterError;\n            _this.method = method;\n            _this.parameter = parameter;\n            _this.value = value;\n            return _this;\n        }\n        return MethodParameterError;\n    }(LegacyException));\n    Exceptions.MethodParameterError = MethodParameterError;\n    // 7 was TransportError, which was replaced\n    var SessionDescriptionHandlerError = /** @class */ (function (_super) {\n        tslib_1.__extends(SessionDescriptionHandlerError, _super);\n        function SessionDescriptionHandlerError(method, error, message) {\n            var _this = _super.call(this, 8, \"SESSION_DESCRIPTION_HANDLER_ERROR\", message || \"Error with Session Description Handler\") || this;\n            _this.type = Enums_1.TypeStrings.SessionDescriptionHandlerError;\n            _this.method = method;\n            _this.error = error;\n            return _this;\n        }\n        return SessionDescriptionHandlerError;\n    }(LegacyException));\n    Exceptions.SessionDescriptionHandlerError = SessionDescriptionHandlerError;\n})(Exceptions = exports.Exceptions || (exports.Exceptions = {}));\n\n\n/***/ }),\n/* 85 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar ClientContext_1 = __webpack_require__(79);\nvar Constants_1 = __webpack_require__(80);\nvar core_1 = __webpack_require__(2);\nvar Enums_1 = __webpack_require__(82);\nvar Exceptions_1 = __webpack_require__(84);\nvar Utils_1 = __webpack_require__(83);\n/**\n * SIP Publish (SIP Extension for Event State Publication RFC3903)\n * @class Class creating a SIP PublishContext.\n */\nvar PublishContext = /** @class */ (function (_super) {\n    tslib_1.__extends(PublishContext, _super);\n    function PublishContext(ua, target, event, options) {\n        if (options === void 0) { options = {}; }\n        var _this = this;\n        options.extraHeaders = (options.extraHeaders || []).slice();\n        options.contentType = (options.contentType || \"text/plain\");\n        if (typeof options.expires !== \"number\" || (options.expires % 1) !== 0) {\n            options.expires = 3600;\n        }\n        else {\n            options.expires = Number(options.expires);\n        }\n        if (typeof (options.unpublishOnClose) !== \"boolean\") {\n            options.unpublishOnClose = true;\n        }\n        if (target === undefined || target === null || target === \"\") {\n            throw new Exceptions_1.Exceptions.MethodParameterError(\"Publish\", \"Target\", target);\n        }\n        else {\n            target = ua.normalizeTarget(target);\n            if (target === undefined) {\n                throw new Exceptions_1.Exceptions.MethodParameterError(\"Publish\", \"Target\", target);\n            }\n        }\n        _this = _super.call(this, ua, Constants_1.C.PUBLISH, target, options) || this;\n        _this.type = Enums_1.TypeStrings.PublishContext;\n        _this.options = options;\n        _this.target = target;\n        if (event === undefined || event === null || event === \"\") {\n            throw new Exceptions_1.Exceptions.MethodParameterError(\"Publish\", \"Event\", event);\n        }\n        else {\n            _this.event = event;\n        }\n        _this.logger = ua.getLogger(\"sip.publish\");\n        _this.pubRequestExpires = _this.options.expires;\n        return _this;\n    }\n    /**\n     * Publish\n     * @param {string} Event body to publish, optional\n     */\n    PublishContext.prototype.publish = function (body) {\n        // Clean up before the run\n        if (this.publishRefreshTimer) {\n            clearTimeout(this.publishRefreshTimer);\n            this.publishRefreshTimer = undefined;\n        }\n        // is Inital or Modify request\n        this.options.body = body;\n        this.pubRequestBody = this.options.body;\n        if (this.pubRequestExpires === 0) {\n            // This is Initial request after unpublish\n            this.pubRequestExpires = this.options.expires;\n            this.pubRequestEtag = undefined;\n        }\n        if (!(this.ua.publishers[this.target.toString() + \":\" + this.event])) {\n            this.ua.publishers[this.target.toString() + \":\" + this.event] = this;\n        }\n        this.sendPublishRequest();\n    };\n    /**\n     * Unpublish\n     */\n    PublishContext.prototype.unpublish = function () {\n        // Clean up before the run\n        if (this.publishRefreshTimer) {\n            clearTimeout(this.publishRefreshTimer);\n            this.publishRefreshTimer = undefined;\n        }\n        this.pubRequestBody = undefined;\n        this.pubRequestExpires = 0;\n        if (this.pubRequestEtag !== undefined) {\n            this.sendPublishRequest();\n        }\n    };\n    /**\n     * Close\n     */\n    PublishContext.prototype.close = function () {\n        // Send unpublish, if requested\n        if (this.options.unpublishOnClose) {\n            this.unpublish();\n        }\n        else {\n            if (this.publishRefreshTimer) {\n                clearTimeout(this.publishRefreshTimer);\n                this.publishRefreshTimer = undefined;\n            }\n            this.pubRequestBody = undefined;\n            this.pubRequestExpires = 0;\n            this.pubRequestEtag = undefined;\n        }\n        if (this.ua.publishers[this.target.toString() + \":\" + this.event]) {\n            delete this.ua.publishers[this.target.toString() + \":\" + this.event];\n        }\n    };\n    PublishContext.prototype.onRequestTimeout = function () {\n        _super.prototype.onRequestTimeout.call(this);\n        this.emit(\"unpublished\", undefined, Constants_1.C.causes.REQUEST_TIMEOUT);\n    };\n    PublishContext.prototype.onTransportError = function () {\n        _super.prototype.onTransportError.call(this);\n        this.emit(\"unpublished\", undefined, Constants_1.C.causes.CONNECTION_ERROR);\n    };\n    PublishContext.prototype.receiveResponse = function (response) {\n        var _this = this;\n        var statusCode = response.statusCode || 0;\n        var cause = Utils_1.Utils.getReasonPhrase(statusCode);\n        switch (true) {\n            case /^1[0-9]{2}$/.test(statusCode.toString()):\n                this.emit(\"progress\", response, cause);\n                break;\n            case /^2[0-9]{2}$/.test(statusCode.toString()):\n                // Set SIP-Etag\n                if (response.hasHeader(\"SIP-ETag\")) {\n                    this.pubRequestEtag = response.getHeader(\"SIP-ETag\");\n                }\n                else {\n                    this.logger.warn(\"SIP-ETag header missing in a 200-class response to PUBLISH\");\n                }\n                // Update Expire\n                if (response.hasHeader(\"Expires\")) {\n                    var expires = Number(response.getHeader(\"Expires\"));\n                    if (typeof expires === \"number\" && expires >= 0 && expires <= this.pubRequestExpires) {\n                        this.pubRequestExpires = expires;\n                    }\n                    else {\n                        this.logger.warn(\"Bad Expires header in a 200-class response to PUBLISH\");\n                    }\n                }\n                else {\n                    this.logger.warn(\"Expires header missing in a 200-class response to PUBLISH\");\n                }\n                if (this.pubRequestExpires !== 0) {\n                    // Schedule refresh\n                    this.publishRefreshTimer = setTimeout(function () { return _this.refreshRequest(); }, this.pubRequestExpires * 900);\n                    this.emit(\"published\", response, cause);\n                }\n                else {\n                    this.emit(\"unpublished\", response, cause);\n                }\n                break;\n            case /^412$/.test(statusCode.toString()):\n                // 412 code means no matching ETag - possibly the PUBLISH expired\n                // Resubmit as new request, if the current request is not a \"remove\"\n                if (this.pubRequestEtag !== undefined && this.pubRequestExpires !== 0) {\n                    this.logger.warn(\"412 response to PUBLISH, recovering\");\n                    this.pubRequestEtag = undefined;\n                    this.emit(\"progress\", response, cause);\n                    this.publish(this.options.body);\n                }\n                else {\n                    this.logger.warn(\"412 response to PUBLISH, recovery failed\");\n                    this.pubRequestExpires = 0;\n                    this.emit(\"failed\", response, cause);\n                    this.emit(\"unpublished\", response, cause);\n                }\n                break;\n            case /^423$/.test(statusCode.toString()):\n                // 423 code means we need to adjust the Expires interval up\n                if (this.pubRequestExpires !== 0 && response.hasHeader(\"Min-Expires\")) {\n                    var minExpires = Number(response.getHeader(\"Min-Expires\"));\n                    if (typeof minExpires === \"number\" || minExpires > this.pubRequestExpires) {\n                        this.logger.warn(\"423 code in response to PUBLISH, adjusting the Expires value and trying to recover\");\n                        this.pubRequestExpires = minExpires;\n                        this.emit(\"progress\", response, cause);\n                        this.publish(this.options.body);\n                    }\n                    else {\n                        this.logger.warn(\"Bad 423 response Min-Expires header received for PUBLISH\");\n                        this.pubRequestExpires = 0;\n                        this.emit(\"failed\", response, cause);\n                        this.emit(\"unpublished\", response, cause);\n                    }\n                }\n                else {\n                    this.logger.warn(\"423 response to PUBLISH, recovery failed\");\n                    this.pubRequestExpires = 0;\n                    this.emit(\"failed\", response, cause);\n                    this.emit(\"unpublished\", response, cause);\n                }\n                break;\n            default:\n                this.pubRequestExpires = 0;\n                this.emit(\"failed\", response, cause);\n                this.emit(\"unpublished\", response, cause);\n                break;\n        }\n        // Do the cleanup\n        if (this.pubRequestExpires === 0) {\n            if (this.publishRefreshTimer) {\n                clearTimeout(this.publishRefreshTimer);\n                this.publishRefreshTimer = undefined;\n            }\n            this.pubRequestBody = undefined;\n            this.pubRequestEtag = undefined;\n        }\n    };\n    PublishContext.prototype.send = function () {\n        var _this = this;\n        this.ua.userAgentCore.publish(this.request, {\n            onAccept: function (response) { return _this.receiveResponse(response.message); },\n            onProgress: function (response) { return _this.receiveResponse(response.message); },\n            onRedirect: function (response) { return _this.receiveResponse(response.message); },\n            onReject: function (response) { return _this.receiveResponse(response.message); },\n            onTrying: function (response) { return _this.receiveResponse(response.message); }\n        });\n        return this;\n    };\n    PublishContext.prototype.refreshRequest = function () {\n        // Clean up before the run\n        if (this.publishRefreshTimer) {\n            clearTimeout(this.publishRefreshTimer);\n            this.publishRefreshTimer = undefined;\n        }\n        // This is Refresh request\n        this.pubRequestBody = undefined;\n        if (this.pubRequestEtag === undefined) {\n            // Request not valid\n            throw new Exceptions_1.Exceptions.MethodParameterError(\"Publish\", \"Body\", undefined);\n        }\n        if (this.pubRequestExpires === 0) {\n            // Request not valid\n            throw new Exceptions_1.Exceptions.MethodParameterError(\"Publish\", \"Expire\", this.pubRequestExpires);\n        }\n        this.sendPublishRequest();\n    };\n    PublishContext.prototype.sendPublishRequest = function () {\n        var reqOptions = Object.create(this.options || Object.prototype);\n        reqOptions.extraHeaders = (this.options.extraHeaders || []).slice();\n        reqOptions.extraHeaders.push(\"Event: \" + this.event);\n        reqOptions.extraHeaders.push(\"Expires: \" + this.pubRequestExpires);\n        if (this.pubRequestEtag !== undefined) {\n            reqOptions.extraHeaders.push(\"SIP-If-Match: \" + this.pubRequestEtag);\n        }\n        var ruri = this.target instanceof core_1.URI ? this.target : this.ua.normalizeTarget(this.target);\n        if (!ruri) {\n            throw new Error(\"ruri undefined.\");\n        }\n        var params = this.options.params || {};\n        var bodyObj;\n        if (this.pubRequestBody !== undefined) {\n            bodyObj = {\n                body: this.pubRequestBody,\n                contentType: this.options.contentType\n            };\n        }\n        var body;\n        if (bodyObj) {\n            body = Utils_1.Utils.fromBodyObj(bodyObj);\n        }\n        this.request = this.ua.userAgentCore.makeOutgoingRequestMessage(Constants_1.C.PUBLISH, ruri, params.fromUri ? params.fromUri : this.ua.userAgentCore.configuration.aor, params.toUri ? params.toUri : this.target, params, reqOptions.extraHeaders, body);\n        this.send();\n    };\n    return PublishContext;\n}(ClientContext_1.ClientContext));\nexports.PublishContext = PublishContext;\n\n\n/***/ }),\n/* 86 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar ClientContext_1 = __webpack_require__(79);\nvar Constants_1 = __webpack_require__(80);\nvar core_1 = __webpack_require__(2);\nvar Enums_1 = __webpack_require__(82);\nvar Exceptions_1 = __webpack_require__(84);\nvar ServerContext_1 = __webpack_require__(87);\n// tslint:disable-next-line:max-classes-per-file\nvar ReferClientContext = /** @class */ (function (_super) {\n    tslib_1.__extends(ReferClientContext, _super);\n    function ReferClientContext(ua, applicant, target, options) {\n        if (options === void 0) { options = {}; }\n        var _this = this;\n        if (ua === undefined || applicant === undefined || target === undefined) {\n            throw new TypeError(\"Not enough arguments\");\n        }\n        _this = _super.call(this, ua, Constants_1.C.REFER, applicant.remoteIdentity.uri.toString(), options) || this;\n        _this.type = Enums_1.TypeStrings.ReferClientContext;\n        _this.options = options;\n        _this.extraHeaders = (_this.options.extraHeaders || []).slice();\n        _this.applicant = applicant;\n        _this.target = _this.initReferTo(target);\n        if (_this.ua) {\n            _this.extraHeaders.push(\"Referred-By: <\" + _this.ua.configuration.uri + \">\");\n        }\n        // TODO: Check that this is correct isc/icc\n        _this.extraHeaders.push(\"Contact: \" + applicant.contact);\n        // this is UA.C.ALLOWED_METHODS, removed to get around circular dependency\n        _this.extraHeaders.push(\"Allow: \" + [\n            \"ACK\",\n            \"CANCEL\",\n            \"INVITE\",\n            \"MESSAGE\",\n            \"BYE\",\n            \"OPTIONS\",\n            \"INFO\",\n            \"NOTIFY\",\n            \"REFER\"\n        ].toString());\n        _this.extraHeaders.push(\"Refer-To: \" + _this.target);\n        _this.errorListener = _this.onTransportError.bind(_this);\n        if (ua.transport) {\n            ua.transport.on(\"transportError\", _this.errorListener);\n        }\n        return _this;\n    }\n    ReferClientContext.prototype.refer = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var extraHeaders = (this.extraHeaders || []).slice();\n        if (options.extraHeaders) {\n            extraHeaders.concat(options.extraHeaders);\n        }\n        this.applicant.sendRequest(Constants_1.C.REFER, {\n            extraHeaders: this.extraHeaders,\n            receiveResponse: function (response) {\n                var statusCode = response && response.statusCode ? response.statusCode.toString() : \"\";\n                if (/^1[0-9]{2}$/.test(statusCode)) {\n                    _this.emit(\"referRequestProgress\", _this);\n                }\n                else if (/^2[0-9]{2}$/.test(statusCode)) {\n                    _this.emit(\"referRequestAccepted\", _this);\n                }\n                else if (/^[4-6][0-9]{2}$/.test(statusCode)) {\n                    _this.emit(\"referRequestRejected\", _this);\n                }\n                if (options.receiveResponse) {\n                    options.receiveResponse(response);\n                }\n            }\n        });\n        return this;\n    };\n    ReferClientContext.prototype.receiveNotify = function (request) {\n        // If we can correctly handle this, then we need to send a 200 OK!\n        var contentType = request.message.hasHeader(\"Content-Type\") ?\n            request.message.getHeader(\"Content-Type\") : undefined;\n        if (contentType && contentType.search(/^message\\/sipfrag/) !== -1) {\n            var messageBody = core_1.Grammar.parse(request.message.body, \"sipfrag\");\n            if (messageBody === -1) {\n                request.reject({\n                    statusCode: 489,\n                    reasonPhrase: \"Bad Event\"\n                });\n                return;\n            }\n            switch (true) {\n                case (/^1[0-9]{2}$/.test(messageBody.status_code)):\n                    this.emit(\"referProgress\", this);\n                    break;\n                case (/^2[0-9]{2}$/.test(messageBody.status_code)):\n                    this.emit(\"referAccepted\", this);\n                    if (!this.options.activeAfterTransfer && this.applicant.terminate) {\n                        this.applicant.terminate();\n                    }\n                    break;\n                default:\n                    this.emit(\"referRejected\", this);\n                    break;\n            }\n            request.accept();\n            this.emit(\"notify\", request.message);\n            return;\n        }\n        request.reject({\n            statusCode: 489,\n            reasonPhrase: \"Bad Event\"\n        });\n    };\n    ReferClientContext.prototype.initReferTo = function (target) {\n        var stringOrURI;\n        if (typeof target === \"string\") {\n            // REFER without Replaces (Blind Transfer)\n            var targetString = core_1.Grammar.parse(target, \"Refer_To\");\n            stringOrURI = targetString && targetString.uri ? targetString.uri : target;\n            // Check target validity\n            var targetUri = this.ua.normalizeTarget(target);\n            if (!targetUri) {\n                throw new TypeError(\"Invalid target: \" + target);\n            }\n            stringOrURI = targetUri;\n        }\n        else {\n            // REFER with Replaces (Attended Transfer)\n            if (!target.session) {\n                throw new Error(\"Session undefined.\");\n            }\n            var displayName = target.remoteIdentity.friendlyName;\n            var remoteTarget = target.session.remoteTarget.toString();\n            var callId = target.session.callId;\n            var remoteTag = target.session.remoteTag;\n            var localTag = target.session.localTag;\n            var replaces = encodeURIComponent(callId + \";to-tag=\" + remoteTag + \";from-tag=\" + localTag);\n            stringOrURI = \"\\\"\" + displayName + \"\\\" <\" + remoteTarget + \"?Replaces=\" + replaces + \">\";\n        }\n        return stringOrURI;\n    };\n    return ReferClientContext;\n}(ClientContext_1.ClientContext));\nexports.ReferClientContext = ReferClientContext;\n// tslint:disable-next-line:max-classes-per-file\nvar ReferServerContext = /** @class */ (function (_super) {\n    tslib_1.__extends(ReferServerContext, _super);\n    function ReferServerContext(ua, incomingRequest, session) {\n        var _this = _super.call(this, ua, incomingRequest) || this;\n        _this.session = session;\n        _this.type = Enums_1.TypeStrings.ReferServerContext;\n        _this.ua = ua;\n        _this.status = Enums_1.SessionStatus.STATUS_INVITE_RECEIVED;\n        _this.fromTag = _this.request.fromTag;\n        _this.id = _this.request.callId + _this.fromTag;\n        _this.contact = _this.ua.contact.toString();\n        _this.logger = ua.getLogger(\"sip.referservercontext\", _this.id);\n        // Needed to send the NOTIFY's\n        _this.cseq = Math.floor(Math.random() * 10000);\n        _this.callId = _this.request.callId;\n        _this.fromUri = _this.request.to.uri;\n        _this.fromTag = _this.request.to.parameters.tag;\n        _this.remoteTarget = _this.request.headers.Contact[0].parsed.uri;\n        _this.toUri = _this.request.from.uri;\n        _this.toTag = _this.request.fromTag;\n        _this.routeSet = _this.request.getHeaders(\"record-route\");\n        // RFC 3515 2.4.1\n        if (!_this.request.hasHeader(\"refer-to\")) {\n            _this.logger.warn(\"Invalid REFER packet. A refer-to header is required. Rejecting refer.\");\n            _this.reject();\n            return _this;\n        }\n        _this.referTo = _this.request.parseHeader(\"refer-to\");\n        // TODO: Must set expiration timer and send 202 if there is no response by then\n        _this.referredSession = _this.ua.findSession(_this.request);\n        if (_this.request.hasHeader(\"referred-by\")) {\n            _this.referredBy = _this.request.getHeader(\"referred-by\");\n        }\n        if (_this.referTo.uri.hasHeader(\"replaces\")) {\n            _this.replaces = _this.referTo.uri.getHeader(\"replaces\");\n        }\n        _this.errorListener = _this.onTransportError.bind(_this);\n        if (ua.transport) {\n            ua.transport.on(\"transportError\", _this.errorListener);\n        }\n        _this.status = Enums_1.SessionStatus.STATUS_WAITING_FOR_ANSWER;\n        return _this;\n    }\n    ReferServerContext.prototype.progress = function () {\n        if (this.status !== Enums_1.SessionStatus.STATUS_WAITING_FOR_ANSWER) {\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\n        }\n        this.incomingRequest.trying();\n    };\n    ReferServerContext.prototype.reject = function (options) {\n        if (options === void 0) { options = {}; }\n        if (this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\n        }\n        this.logger.log(\"Rejecting refer\");\n        this.status = Enums_1.SessionStatus.STATUS_TERMINATED;\n        _super.prototype.reject.call(this, options);\n        this.emit(\"referRequestRejected\", this);\n    };\n    ReferServerContext.prototype.accept = function (options, modifiers) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        if (this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_ANSWER) {\n            this.status = Enums_1.SessionStatus.STATUS_ANSWERED;\n        }\n        else {\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\n        }\n        this.incomingRequest.accept({\n            statusCode: 202,\n            reasonPhrase: \"Accepted\"\n        });\n        this.emit(\"referRequestAccepted\", this);\n        if (options.followRefer) {\n            this.logger.log(\"Accepted refer, attempting to automatically follow it\");\n            var target = this.referTo.uri;\n            if (!target.scheme || !target.scheme.match(\"^sips?$\")) {\n                this.logger.error(\"SIP.js can only automatically follow SIP refer target\");\n                this.reject();\n                return;\n            }\n            var inviteOptions = options.inviteOptions || {};\n            var extraHeaders = (inviteOptions.extraHeaders || []).slice();\n            if (this.replaces) {\n                // decodeURIComponent is a holdover from 2c086eb4. Not sure that it is actually necessary\n                extraHeaders.push(\"Replaces: \" + decodeURIComponent(this.replaces));\n            }\n            if (this.referredBy) {\n                extraHeaders.push(\"Referred-By: \" + this.referredBy);\n            }\n            inviteOptions.extraHeaders = extraHeaders;\n            target.clearHeaders();\n            this.targetSession = this.ua.invite(target.toString(), inviteOptions, modifiers);\n            this.emit(\"referInviteSent\", this);\n            if (this.targetSession) {\n                this.targetSession.once(\"progress\", function (response) {\n                    var statusCode = response.statusCode || 100;\n                    var reasonPhrase = response.reasonPhrase;\n                    _this.sendNotify((\"SIP/2.0 \" + statusCode + \" \" + reasonPhrase).trim());\n                    _this.emit(\"referProgress\", _this);\n                    if (_this.referredSession) {\n                        _this.referredSession.emit(\"referProgress\", _this);\n                    }\n                });\n                this.targetSession.once(\"accepted\", function () {\n                    _this.logger.log(\"Successfully followed the refer\");\n                    _this.sendNotify(\"SIP/2.0 200 OK\");\n                    _this.emit(\"referAccepted\", _this);\n                    if (_this.referredSession) {\n                        _this.referredSession.emit(\"referAccepted\", _this);\n                    }\n                });\n                var referFailed = function (response) {\n                    if (_this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\n                        return; // No throw here because it is possible this gets called multiple times\n                    }\n                    _this.logger.log(\"Refer was not successful. Resuming session\");\n                    if (response && response.statusCode === 429) {\n                        _this.logger.log(\"Alerting referrer that identity is required.\");\n                        _this.sendNotify(\"SIP/2.0 429 Provide Referrer Identity\");\n                        return;\n                    }\n                    _this.sendNotify(\"SIP/2.0 603 Declined\");\n                    // Must change the status after sending the final Notify or it will not send due to check\n                    _this.status = Enums_1.SessionStatus.STATUS_TERMINATED;\n                    _this.emit(\"referRejected\", _this);\n                    if (_this.referredSession) {\n                        _this.referredSession.emit(\"referRejected\");\n                    }\n                };\n                this.targetSession.once(\"rejected\", referFailed);\n                this.targetSession.once(\"failed\", referFailed);\n            }\n        }\n        else {\n            this.logger.log(\"Accepted refer, but did not automatically follow it\");\n            this.sendNotify(\"SIP/2.0 200 OK\");\n            this.emit(\"referAccepted\", this);\n            if (this.referredSession) {\n                this.referredSession.emit(\"referAccepted\", this);\n            }\n        }\n    };\n    ReferServerContext.prototype.sendNotify = function (bodyStr) {\n        // FIXME: Ported this. Clean it up. Session knows its state.\n        if (this.status !== Enums_1.SessionStatus.STATUS_ANSWERED) {\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\n        }\n        if (core_1.Grammar.parse(bodyStr, \"sipfrag\") === -1) {\n            throw new Error(\"sipfrag body is required to send notify for refer\");\n        }\n        var body = {\n            contentDisposition: \"render\",\n            contentType: \"message/sipfrag\",\n            content: bodyStr\n        };\n        // NOTIFY requests sent in same dialog as in dialog REFER.\n        if (this.session) {\n            this.session.notify(undefined, {\n                extraHeaders: [\n                    \"Event: refer\",\n                    \"Subscription-State: terminated\",\n                ],\n                body: body\n            });\n            return;\n        }\n        // The implicit subscription created by a REFER is the same as a\n        // subscription created with a SUBSCRIBE request.  The agent issuing the\n        // REFER can terminate this subscription prematurely by unsubscribing\n        // using the mechanisms described in [2].  Terminating a subscription,\n        // either by explicitly unsubscribing or rejecting NOTIFY, is not an\n        // indication that the referenced request should be withdrawn or\n        // abandoned.\n        // https://tools.ietf.org/html/rfc3515#section-2.4.4\n        // NOTIFY requests sent in new dialog for out of dialog REFER.\n        // FIXME: TODO: This should be done in a subscribe dialog to satisfy the above.\n        var request = this.ua.userAgentCore.makeOutgoingRequestMessage(Constants_1.C.NOTIFY, this.remoteTarget, this.fromUri, this.toUri, {\n            cseq: this.cseq += 1,\n            callId: this.callId,\n            fromTag: this.fromTag,\n            toTag: this.toTag,\n            routeSet: this.routeSet\n        }, [\n            \"Event: refer\",\n            \"Subscription-State: terminated\",\n            \"Content-Type: message/sipfrag\"\n        ], body);\n        var transport = this.ua.transport;\n        if (!transport) {\n            throw new Error(\"Transport undefined.\");\n        }\n        var user = {\n            loggerFactory: this.ua.getLoggerFactory()\n        };\n        var nic = new core_1.NonInviteClientTransaction(request, transport, user);\n    };\n    ReferServerContext.prototype.on = function (name, callback) { return _super.prototype.on.call(this, name, callback); };\n    return ReferServerContext;\n}(ServerContext_1.ServerContext));\nexports.ReferServerContext = ReferServerContext;\n\n\n/***/ }),\n/* 87 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar events_1 = __webpack_require__(31);\nvar Constants_1 = __webpack_require__(80);\nvar core_1 = __webpack_require__(2);\nvar Enums_1 = __webpack_require__(82);\nvar Utils_1 = __webpack_require__(83);\nvar ServerContext = /** @class */ (function (_super) {\n    tslib_1.__extends(ServerContext, _super);\n    function ServerContext(ua, incomingRequest) {\n        var _this = _super.call(this) || this;\n        _this.incomingRequest = incomingRequest;\n        _this.data = {};\n        ServerContext.initializer(_this, ua, incomingRequest);\n        return _this;\n    }\n    // hack to get around our multiple inheritance issues\n    ServerContext.initializer = function (objectToConstruct, ua, incomingRequest) {\n        var request = incomingRequest.message;\n        objectToConstruct.type = Enums_1.TypeStrings.ServerContext;\n        objectToConstruct.ua = ua;\n        objectToConstruct.logger = ua.getLogger(\"sip.servercontext\");\n        objectToConstruct.request = request;\n        if (request.body) {\n            objectToConstruct.body = request.body;\n        }\n        if (request.hasHeader(\"Content-Type\")) {\n            objectToConstruct.contentType = request.getHeader(\"Content-Type\");\n        }\n        objectToConstruct.method = request.method;\n        objectToConstruct.localIdentity = request.to;\n        objectToConstruct.remoteIdentity = request.from;\n        var hasAssertedIdentity = request.hasHeader(\"P-Asserted-Identity\");\n        if (hasAssertedIdentity) {\n            var assertedIdentity = request.getHeader(\"P-Asserted-Identity\");\n            if (assertedIdentity) {\n                objectToConstruct.assertedIdentity = core_1.Grammar.nameAddrHeaderParse(assertedIdentity);\n            }\n        }\n    };\n    ServerContext.prototype.progress = function (options) {\n        if (options === void 0) { options = {}; }\n        options.statusCode = options.statusCode || 180;\n        options.minCode = 100;\n        options.maxCode = 199;\n        options.events = [\"progress\"];\n        return this.reply(options);\n    };\n    ServerContext.prototype.accept = function (options) {\n        if (options === void 0) { options = {}; }\n        options.statusCode = options.statusCode || 200;\n        options.minCode = 200;\n        options.maxCode = 299;\n        options.events = [\"accepted\"];\n        return this.reply(options);\n    };\n    ServerContext.prototype.reject = function (options) {\n        if (options === void 0) { options = {}; }\n        options.statusCode = options.statusCode || 480;\n        options.minCode = 300;\n        options.maxCode = 699;\n        options.events = [\"rejected\", \"failed\"];\n        return this.reply(options);\n    };\n    ServerContext.prototype.reply = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var statusCode = options.statusCode || 100;\n        var minCode = options.minCode || 100;\n        var maxCode = options.maxCode || 699;\n        var reasonPhrase = Utils_1.Utils.getReasonPhrase(statusCode, options.reasonPhrase);\n        var extraHeaders = options.extraHeaders || [];\n        var body = options.body ? core_1.fromBodyLegacy(options.body) : undefined;\n        var events = options.events || [];\n        if (statusCode < minCode || statusCode > maxCode) {\n            throw new TypeError(\"Invalid statusCode: \" + statusCode);\n        }\n        var responseOptions = {\n            statusCode: statusCode,\n            reasonPhrase: reasonPhrase,\n            extraHeaders: extraHeaders,\n            body: body\n        };\n        var response;\n        var statusCodeString = statusCode.toString();\n        switch (true) {\n            case /^100$/.test(statusCodeString):\n                response = this.incomingRequest.trying(responseOptions).message;\n                break;\n            case /^1[0-9]{2}$/.test(statusCodeString):\n                response = this.incomingRequest.progress(responseOptions).message;\n                break;\n            case /^2[0-9]{2}$/.test(statusCodeString):\n                response = this.incomingRequest.accept(responseOptions).message;\n                break;\n            case /^3[0-9]{2}$/.test(statusCodeString):\n                response = this.incomingRequest.redirect([], responseOptions).message;\n                break;\n            case /^[4-6][0-9]{2}$/.test(statusCodeString):\n                response = this.incomingRequest.reject(responseOptions).message;\n                break;\n            default:\n                throw new Error(\"Invalid status code \" + statusCode);\n        }\n        events.forEach(function (event) {\n            _this.emit(event, response, reasonPhrase);\n        });\n        return this;\n    };\n    ServerContext.prototype.onRequestTimeout = function () {\n        this.emit(\"failed\", undefined, Constants_1.C.causes.REQUEST_TIMEOUT);\n    };\n    ServerContext.prototype.onTransportError = function () {\n        this.emit(\"failed\", undefined, Constants_1.C.causes.CONNECTION_ERROR);\n    };\n    return ServerContext;\n}(events_1.EventEmitter));\nexports.ServerContext = ServerContext;\n\n\n/***/ }),\n/* 88 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar ClientContext_1 = __webpack_require__(79);\nvar Constants_1 = __webpack_require__(80);\nvar core_1 = __webpack_require__(2);\nvar Enums_1 = __webpack_require__(82);\nvar Exceptions_1 = __webpack_require__(84);\nvar Utils_1 = __webpack_require__(83);\n/**\n * Configuration load.\n * @private\n * returns {any}\n */\nfunction loadConfig(configuration) {\n    var settings = {\n        expires: 600,\n        extraContactHeaderParams: [],\n        instanceId: undefined,\n        params: {},\n        regId: undefined,\n        registrar: undefined,\n    };\n    var configCheck = getConfigurationCheck();\n    // Check Mandatory parameters\n    for (var parameter in configCheck.mandatory) {\n        if (!configuration.hasOwnProperty(parameter)) {\n            throw new Exceptions_1.Exceptions.ConfigurationError(parameter);\n        }\n        else {\n            var value = configuration[parameter];\n            var checkedValue = configCheck.mandatory[parameter](value);\n            if (checkedValue !== undefined) {\n                settings[parameter] = checkedValue;\n            }\n            else {\n                throw new Exceptions_1.Exceptions.ConfigurationError(parameter, value);\n            }\n        }\n    }\n    // Check Optional parameters\n    for (var parameter in configCheck.optional) {\n        if (configuration.hasOwnProperty(parameter)) {\n            var value = configuration[parameter];\n            // If the parameter value is an empty array, but shouldn't be, apply its default value.\n            if (value instanceof Array && value.length === 0) {\n                continue;\n            }\n            // If the parameter value is null, empty string, or undefined then apply its default value.\n            // If it's a number with NaN value then also apply its default value.\n            // NOTE: JS does not allow \"value === NaN\", the following does the work:\n            if (value === null || value === \"\" || value === undefined ||\n                (typeof (value) === \"number\" && isNaN(value))) {\n                continue;\n            }\n            var checkedValue = configCheck.optional[parameter](value);\n            if (checkedValue !== undefined) {\n                settings[parameter] = checkedValue;\n            }\n            else {\n                throw new Exceptions_1.Exceptions.ConfigurationError(parameter, value);\n            }\n        }\n    }\n    return settings;\n}\nfunction getConfigurationCheck() {\n    return {\n        mandatory: {},\n        optional: {\n            expires: function (expires) {\n                if (Utils_1.Utils.isDecimal(expires)) {\n                    var value = Number(expires);\n                    if (value >= 0) {\n                        return value;\n                    }\n                }\n            },\n            extraContactHeaderParams: function (extraContactHeaderParams) {\n                if (extraContactHeaderParams instanceof Array) {\n                    return extraContactHeaderParams.filter(function (contactHeaderParam) { return (typeof contactHeaderParam === \"string\"); });\n                }\n            },\n            instanceId: function (instanceId) {\n                if (typeof instanceId !== \"string\") {\n                    return;\n                }\n                if ((/^uuid:/i.test(instanceId))) {\n                    instanceId = instanceId.substr(5);\n                }\n                if (core_1.Grammar.parse(instanceId, \"uuid\") === -1) {\n                    return;\n                }\n                else {\n                    return instanceId;\n                }\n            },\n            params: function (params) {\n                if (typeof params === \"object\") {\n                    return params;\n                }\n            },\n            regId: function (regId) {\n                if (Utils_1.Utils.isDecimal(regId)) {\n                    var value = Number(regId);\n                    if (value >= 0) {\n                        return value;\n                    }\n                }\n            },\n            registrar: function (registrar) {\n                if (typeof registrar !== \"string\") {\n                    return;\n                }\n                if (!/^sip:/i.test(registrar)) {\n                    registrar = Constants_1.C.SIP + \":\" + registrar;\n                }\n                var parsed = core_1.Grammar.URIParse(registrar);\n                if (!parsed) {\n                    return;\n                }\n                else if (parsed.user) {\n                    return;\n                }\n                else {\n                    return parsed;\n                }\n            }\n        }\n    };\n}\nvar RegisterContext = /** @class */ (function (_super) {\n    tslib_1.__extends(RegisterContext, _super);\n    function RegisterContext(ua, options) {\n        if (options === void 0) { options = {}; }\n        var _this = this;\n        var settings = loadConfig(options);\n        if (settings.regId && !settings.instanceId) {\n            settings.instanceId = Utils_1.Utils.newUUID();\n        }\n        else if (!settings.regId && settings.instanceId) {\n            settings.regId = 1;\n        }\n        settings.params.toUri = settings.params.toUri || ua.configuration.uri;\n        settings.params.toDisplayName = settings.params.toDisplayName || ua.configuration.displayName;\n        settings.params.callId = settings.params.callId || Utils_1.Utils.createRandomToken(22);\n        settings.params.cseq = settings.params.cseq || Math.floor(Math.random() * 10000);\n        /* If no 'registrarServer' is set use the 'uri' value without user portion. */\n        if (!settings.registrar) {\n            var registrarServer = {};\n            if (typeof ua.configuration.uri === \"object\") {\n                registrarServer = ua.configuration.uri.clone();\n                registrarServer.user = undefined;\n            }\n            else {\n                registrarServer = ua.configuration.uri;\n            }\n            settings.registrar = registrarServer;\n        }\n        _this = _super.call(this, ua, Constants_1.C.REGISTER, settings.registrar, settings) || this;\n        _this.type = Enums_1.TypeStrings.RegisterContext;\n        _this.options = settings;\n        _this.logger = ua.getLogger(\"sip.registercontext\");\n        _this.logger.log(\"configuration parameters for RegisterContext after validation:\");\n        for (var parameter in settings) {\n            if (settings.hasOwnProperty(parameter)) {\n                _this.logger.log(\"· \" + parameter + \": \" + JSON.stringify(settings[parameter]));\n            }\n        }\n        // Registration expires\n        _this.expires = settings.expires;\n        // Contact header\n        _this.contact = ua.contact.toString();\n        // Set status\n        _this.registered = false;\n        ua.transport.on(\"disconnected\", function () { return _this.onTransportDisconnected(); });\n        return _this;\n    }\n    RegisterContext.prototype.register = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        // Handle Options\n        this.options = tslib_1.__assign(tslib_1.__assign({}, this.options), options);\n        var extraHeaders = (this.options.extraHeaders || []).slice();\n        extraHeaders.push(\"Contact: \" + this.generateContactHeader(this.expires));\n        // this is UA.C.ALLOWED_METHODS, removed to get around circular dependency\n        extraHeaders.push(\"Allow: \" + [\n            \"ACK\",\n            \"CANCEL\",\n            \"INVITE\",\n            \"MESSAGE\",\n            \"BYE\",\n            \"OPTIONS\",\n            \"INFO\",\n            \"NOTIFY\",\n            \"REFER\"\n        ].toString());\n        // Save original extraHeaders to be used in .close\n        this.closeHeaders = this.options.closeWithHeaders ?\n            (this.options.extraHeaders || []).slice() : [];\n        this.receiveResponse = function (response) {\n            // Discard responses to older REGISTER/un-REGISTER requests.\n            if (response.cseq !== _this.request.cseq) {\n                return;\n            }\n            // Clear registration timer\n            if (_this.registrationTimer !== undefined) {\n                clearTimeout(_this.registrationTimer);\n                _this.registrationTimer = undefined;\n            }\n            var statusCode = (response.statusCode || 0).toString();\n            switch (true) {\n                case /^1[0-9]{2}$/.test(statusCode):\n                    _this.emit(\"progress\", response);\n                    break;\n                case /^2[0-9]{2}$/.test(statusCode):\n                    _this.emit(\"accepted\", response);\n                    var expires = void 0;\n                    if (response.hasHeader(\"expires\")) {\n                        expires = Number(response.getHeader(\"expires\"));\n                    }\n                    if (_this.registrationExpiredTimer !== undefined) {\n                        clearTimeout(_this.registrationExpiredTimer);\n                        _this.registrationExpiredTimer = undefined;\n                    }\n                    // Search the Contact pointing to us and update the expires value accordingly.\n                    var contacts = response.getHeaders(\"contact\").length;\n                    if (!contacts) {\n                        _this.logger.warn(\"no Contact header in response to REGISTER, response ignored\");\n                        break;\n                    }\n                    var contact = void 0;\n                    while (contacts--) {\n                        contact = response.parseHeader(\"contact\", contacts);\n                        if (contact.uri.user === _this.ua.contact.uri.user) {\n                            expires = contact.getParam(\"expires\");\n                            break;\n                        }\n                        else {\n                            contact = undefined;\n                        }\n                    }\n                    if (!contact) {\n                        _this.logger.warn(\"no Contact header pointing to us, response ignored\");\n                        break;\n                    }\n                    if (expires === undefined) {\n                        expires = _this.expires;\n                    }\n                    // Re-Register before the expiration interval has elapsed.\n                    // For that, decrease the expires value. ie: 3 seconds\n                    _this.registrationTimer = setTimeout(function () {\n                        _this.registrationTimer = undefined;\n                        _this.register(_this.options);\n                    }, (expires * 1000) - 3000);\n                    _this.registrationExpiredTimer = setTimeout(function () {\n                        _this.logger.warn(\"registration expired\");\n                        if (_this.registered) {\n                            _this.unregistered(undefined, Constants_1.C.causes.EXPIRES);\n                        }\n                    }, expires * 1000);\n                    // Save gruu values\n                    if (contact.hasParam(\"temp-gruu\")) {\n                        _this.ua.contact.tempGruu = core_1.Grammar.URIParse(contact.getParam(\"temp-gruu\").replace(/\"/g, \"\"));\n                    }\n                    if (contact.hasParam(\"pub-gruu\")) {\n                        _this.ua.contact.pubGruu = core_1.Grammar.URIParse(contact.getParam(\"pub-gruu\").replace(/\"/g, \"\"));\n                    }\n                    _this.registered = true;\n                    _this.emit(\"registered\", response || undefined);\n                    break;\n                // Interval too brief RFC3261 10.2.8\n                case /^423$/.test(statusCode):\n                    if (response.hasHeader(\"min-expires\")) {\n                        // Increase our registration interval to the suggested minimum\n                        _this.expires = Number(response.getHeader(\"min-expires\"));\n                        // Attempt the registration again immediately\n                        _this.register(_this.options);\n                    }\n                    else { // This response MUST contain a Min-Expires header field\n                        _this.logger.warn(\"423 response received for REGISTER without Min-Expires\");\n                        _this.registrationFailure(response, Constants_1.C.causes.SIP_FAILURE_CODE);\n                    }\n                    break;\n                default:\n                    _this.registrationFailure(response, Utils_1.Utils.sipErrorCause(response.statusCode || 0));\n            }\n        };\n        this.onRequestTimeout = function () {\n            _this.registrationFailure(undefined, Constants_1.C.causes.REQUEST_TIMEOUT);\n        };\n        this.onTransportError = function () {\n            _this.registrationFailure(undefined, Constants_1.C.causes.CONNECTION_ERROR);\n        };\n        this.request.cseq++;\n        this.request.setHeader(\"cseq\", this.request.cseq + \" REGISTER\");\n        this.request.extraHeaders = extraHeaders;\n        this.send();\n    };\n    RegisterContext.prototype.close = function () {\n        var options = {\n            all: false,\n            extraHeaders: this.closeHeaders\n        };\n        this.registeredBefore = this.registered;\n        if (this.registered) {\n            this.unregister(options);\n        }\n    };\n    RegisterContext.prototype.unregister = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        if (!this.registered && !options.all) {\n            this.logger.warn(\"Already unregistered, but sending an unregister anyways.\");\n        }\n        var extraHeaders = (options.extraHeaders || []).slice();\n        this.registered = false;\n        // Clear the registration timer.\n        if (this.registrationTimer !== undefined) {\n            clearTimeout(this.registrationTimer);\n            this.registrationTimer = undefined;\n        }\n        if (options.all) {\n            extraHeaders.push(\"Contact: *\");\n            extraHeaders.push(\"Expires: 0\");\n        }\n        else {\n            extraHeaders.push(\"Contact: \" + this.generateContactHeader(0));\n        }\n        this.receiveResponse = function (response) {\n            var statusCode = (response && response.statusCode) ? response.statusCode.toString() : \"\";\n            switch (true) {\n                case /^1[0-9]{2}$/.test(statusCode):\n                    _this.emit(\"progress\", response);\n                    break;\n                case /^2[0-9]{2}$/.test(statusCode):\n                    _this.emit(\"accepted\", response);\n                    if (_this.registrationExpiredTimer !== undefined) {\n                        clearTimeout(_this.registrationExpiredTimer);\n                        _this.registrationExpiredTimer = undefined;\n                    }\n                    _this.unregistered(response);\n                    break;\n                default:\n                    _this.unregistered(response, Utils_1.Utils.sipErrorCause(response.statusCode || 0));\n            }\n        };\n        this.onRequestTimeout = function () {\n            // Not actually unregistered...\n            // this.unregistered(undefined, SIP.C.causes.REQUEST_TIMEOUT);\n        };\n        this.request.cseq++;\n        this.request.setHeader(\"cseq\", this.request.cseq + \" REGISTER\");\n        this.request.extraHeaders = extraHeaders;\n        this.send();\n    };\n    RegisterContext.prototype.unregistered = function (response, cause) {\n        this.registered = false;\n        this.emit(\"unregistered\", response || undefined, cause || undefined);\n    };\n    RegisterContext.prototype.send = function () {\n        var _this = this;\n        this.ua.userAgentCore.register(this.request, {\n            onAccept: function (response) { return _this.receiveResponse(response.message); },\n            onProgress: function (response) { return _this.receiveResponse(response.message); },\n            onRedirect: function (response) { return _this.receiveResponse(response.message); },\n            onReject: function (response) { return _this.receiveResponse(response.message); },\n            onTrying: function (response) { return _this.receiveResponse(response.message); }\n        });\n        return this;\n    };\n    RegisterContext.prototype.registrationFailure = function (response, cause) {\n        this.emit(\"failed\", response || undefined, cause || undefined);\n    };\n    RegisterContext.prototype.onTransportDisconnected = function () {\n        this.registeredBefore = this.registered;\n        if (this.registrationTimer !== undefined) {\n            clearTimeout(this.registrationTimer);\n            this.registrationTimer = undefined;\n        }\n        if (this.registrationExpiredTimer !== undefined) {\n            clearTimeout(this.registrationExpiredTimer);\n            this.registrationExpiredTimer = undefined;\n        }\n        if (this.registered) {\n            this.unregistered(undefined, Constants_1.C.causes.CONNECTION_ERROR);\n        }\n    };\n    /**\n     * Helper Function to generate Contact Header\n     * @private\n     * returns {String}\n     */\n    RegisterContext.prototype.generateContactHeader = function (expires) {\n        if (expires === void 0) { expires = 0; }\n        var contact = this.contact;\n        if (this.options.regId && this.options.instanceId) {\n            contact += \";reg-id=\" + this.options.regId;\n            contact += ';+sip.instance=\"<urn:uuid:' + this.options.instanceId + '>\"';\n        }\n        if (this.options.extraContactHeaderParams) {\n            this.options.extraContactHeaderParams.forEach(function (header) {\n                contact += \";\" + header;\n            });\n        }\n        contact += \";expires=\" + expires;\n        return contact;\n    };\n    return RegisterContext;\n}(ClientContext_1.ClientContext));\nexports.RegisterContext = RegisterContext;\n\n\n/***/ }),\n/* 89 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar events_1 = __webpack_require__(31);\nvar ClientContext_1 = __webpack_require__(79);\nvar Constants_1 = __webpack_require__(80);\nvar core_1 = __webpack_require__(2);\nvar Enums_1 = __webpack_require__(82);\nvar Exceptions_1 = __webpack_require__(84);\nvar ReferContext_1 = __webpack_require__(86);\nvar ServerContext_1 = __webpack_require__(87);\nvar DTMF_1 = __webpack_require__(90);\nvar DTMFValidator_1 = __webpack_require__(91);\nvar Utils_1 = __webpack_require__(83);\n/*\n * @param {function returning SIP.sessionDescriptionHandler} [sessionDescriptionHandlerFactory]\n *        (See the documentation for the sessionDescriptionHandlerFactory argument of the UA constructor.)\n */\nvar Session = /** @class */ (function (_super) {\n    tslib_1.__extends(Session, _super);\n    function Session(sessionDescriptionHandlerFactory) {\n        var _this = _super.call(this) || this;\n        _this.data = {};\n        _this.type = Enums_1.TypeStrings.Session;\n        if (!sessionDescriptionHandlerFactory) {\n            throw new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"A session description handler is required for the session to function\");\n        }\n        _this.status = Session.C.STATUS_NULL;\n        _this.pendingReinvite = false;\n        _this.sessionDescriptionHandlerFactory = sessionDescriptionHandlerFactory;\n        _this.hasOffer = false;\n        _this.hasAnswer = false;\n        // Session Timers\n        _this.timers = {\n            ackTimer: undefined,\n            expiresTimer: undefined,\n            invite2xxTimer: undefined,\n            userNoAnswerTimer: undefined,\n            rel1xxTimer: undefined,\n            prackTimer: undefined\n        };\n        // Session info\n        _this.startTime = undefined;\n        _this.endTime = undefined;\n        _this.tones = undefined;\n        // Hold state\n        _this.localHold = false;\n        _this.earlySdp = undefined;\n        _this.rel100 = Constants_1.C.supported.UNSUPPORTED;\n        return _this;\n    }\n    Session.prototype.dtmf = function (tones, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        // Check Session Status\n        if (this.status !== Enums_1.SessionStatus.STATUS_CONFIRMED && this.status !== Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK) {\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\n        }\n        // Check tones' validity\n        DTMFValidator_1.DTMFValidator.validate(tones);\n        var sendDTMF = function () {\n            if (_this.status === Enums_1.SessionStatus.STATUS_TERMINATED || !_this.tones || _this.tones.length === 0) {\n                // Stop sending DTMF\n                _this.tones = undefined;\n                return;\n            }\n            var dtmf = _this.tones.shift();\n            var timeout;\n            if (dtmf.tone === \",\") {\n                timeout = 2000;\n            }\n            else {\n                dtmf.on(\"failed\", function () { _this.tones = undefined; });\n                dtmf.send(options);\n                timeout = dtmf.duration + dtmf.interToneGap;\n            }\n            // Set timeout for the next tone\n            setTimeout(sendDTMF, timeout);\n        };\n        tones = tones.toString();\n        var dtmfType = this.ua.configuration.dtmfType;\n        if (this.sessionDescriptionHandler && dtmfType === Constants_1.C.dtmfType.RTP) {\n            var sent = this.sessionDescriptionHandler.sendDtmf(tones, options);\n            if (!sent) {\n                this.logger.warn(\"Attempt to use dtmfType 'RTP' has failed, falling back to INFO packet method\");\n                dtmfType = Constants_1.C.dtmfType.INFO;\n            }\n        }\n        if (dtmfType === Constants_1.C.dtmfType.INFO) {\n            var dtmfs = [];\n            var tonesArray = tones.split(\"\");\n            while (tonesArray.length > 0) {\n                dtmfs.push(new DTMF_1.DTMF(this, tonesArray.shift(), options));\n            }\n            if (Array.isArray(this.tones) && this.tones.length) {\n                // Tones are already queued, just add to the queue\n                this.tones = this.tones.concat(dtmfs);\n                return this;\n            }\n            this.tones = dtmfs;\n            sendDTMF();\n        }\n        return this;\n    };\n    Session.prototype.bye = function (options) {\n        if (options === void 0) { options = {}; }\n        // Check Session Status\n        if (this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\n            this.logger.error(\"Error: Attempted to send BYE in a terminated session.\");\n            return this;\n        }\n        this.logger.log(\"terminating Session\");\n        var statusCode = options.statusCode;\n        if (statusCode && (statusCode < 200 || statusCode >= 700)) {\n            throw new TypeError(\"Invalid statusCode: \" + statusCode);\n        }\n        options.receiveResponse = function () { };\n        return this.sendRequest(Constants_1.C.BYE, options).terminated();\n    };\n    Session.prototype.refer = function (target, options) {\n        if (options === void 0) { options = {}; }\n        // Check Session Status\n        if (this.status !== Enums_1.SessionStatus.STATUS_CONFIRMED) {\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\n        }\n        this.referContext = new ReferContext_1.ReferClientContext(this.ua, this, target, options);\n        this.emit(\"referRequested\", this.referContext);\n        this.referContext.refer(options);\n        return this.referContext;\n    };\n    /**\n     * Sends in dialog request.\n     * @param method Request method.\n     * @param options Options bucket.\n     */\n    Session.prototype.sendRequest = function (method, options) {\n        if (options === void 0) { options = {}; }\n        if (!this.session) {\n            throw new Error(\"Session undefined.\");\n        }\n        // Convert any \"body\" option to a Body.\n        if (options.body) {\n            options.body = Utils_1.Utils.fromBodyObj(options.body);\n        }\n        // Convert any \"receiveResponse\" callback option passed to an OutgoingRequestDelegate.\n        var delegate;\n        var callback = options.receiveResponse;\n        if (callback) {\n            delegate = {\n                onAccept: function (response) { return callback(response.message); },\n                onProgress: function (response) { return callback(response.message); },\n                onRedirect: function (response) { return callback(response.message); },\n                onReject: function (response) { return callback(response.message); },\n                onTrying: function (response) { return callback(response.message); }\n            };\n        }\n        var request;\n        var requestOptions = options;\n        switch (method) {\n            case Constants_1.C.BYE:\n                request = this.session.bye(delegate, requestOptions);\n                break;\n            case Constants_1.C.INVITE:\n                request = this.session.invite(delegate, requestOptions);\n                break;\n            case Constants_1.C.MESSAGE:\n                request = this.session.message(delegate, requestOptions);\n                break;\n            case Constants_1.C.REFER:\n                request = this.session.refer(delegate, requestOptions);\n                break;\n            default:\n                throw new Error(\"Unexpected \" + method + \". Method not implemented by user agent core.\");\n        }\n        // Ported - Emit the request event\n        this.emit(method.toLowerCase(), request.message);\n        return this;\n    };\n    Session.prototype.close = function () {\n        if (this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\n            return this;\n        }\n        this.logger.log(\"closing INVITE session \" + this.id);\n        // 1st Step. Terminate media.\n        if (this.sessionDescriptionHandler) {\n            this.sessionDescriptionHandler.close();\n        }\n        // 2nd Step. Terminate signaling.\n        // Clear session timers\n        for (var timer in this.timers) {\n            if (this.timers[timer]) {\n                clearTimeout(this.timers[timer]);\n            }\n        }\n        this.status = Enums_1.SessionStatus.STATUS_TERMINATED;\n        if (this.ua.transport) {\n            this.ua.transport.removeListener(\"transportError\", this.errorListener);\n        }\n        delete this.ua.sessions[this.id];\n        return this;\n    };\n    Session.prototype.hold = function (options, modifiers) {\n        if (options === void 0) { options = {}; }\n        if (modifiers === void 0) { modifiers = []; }\n        if (this.status !== Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK && this.status !== Enums_1.SessionStatus.STATUS_CONFIRMED) {\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\n        }\n        if (this.localHold) {\n            this.logger.log(\"Session is already on hold, cannot put it on hold again\");\n            return;\n        }\n        options.modifiers = modifiers;\n        if (this.sessionDescriptionHandler) {\n            options.modifiers.push(this.sessionDescriptionHandler.holdModifier);\n        }\n        this.localHold = true;\n        this.sendReinvite(options);\n    };\n    Session.prototype.unhold = function (options, modifiers) {\n        if (options === void 0) { options = {}; }\n        if (modifiers === void 0) { modifiers = []; }\n        if (this.status !== Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK && this.status !== Enums_1.SessionStatus.STATUS_CONFIRMED) {\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\n        }\n        if (!this.localHold) {\n            this.logger.log(\"Session is not on hold, cannot unhold it\");\n            return;\n        }\n        options.modifiers = modifiers;\n        this.localHold = false;\n        this.sendReinvite(options);\n    };\n    Session.prototype.reinvite = function (options, modifiers) {\n        if (options === void 0) { options = {}; }\n        if (modifiers === void 0) { modifiers = []; }\n        options.modifiers = modifiers;\n        return this.sendReinvite(options);\n    };\n    Session.prototype.terminate = function (options) {\n        // here for types and to be overridden\n        return this;\n    };\n    Session.prototype.onTransportError = function () {\n        if (this.status !== Enums_1.SessionStatus.STATUS_CONFIRMED && this.status !== Enums_1.SessionStatus.STATUS_TERMINATED) {\n            this.failed(undefined, Constants_1.C.causes.CONNECTION_ERROR);\n        }\n    };\n    Session.prototype.onRequestTimeout = function () {\n        if (this.status === Enums_1.SessionStatus.STATUS_CONFIRMED) {\n            this.terminated(undefined, Constants_1.C.causes.REQUEST_TIMEOUT);\n        }\n        else if (this.status !== Enums_1.SessionStatus.STATUS_TERMINATED) {\n            this.failed(undefined, Constants_1.C.causes.REQUEST_TIMEOUT);\n            this.terminated(undefined, Constants_1.C.causes.REQUEST_TIMEOUT);\n        }\n    };\n    Session.prototype.onDialogError = function (response) {\n        if (this.status === Enums_1.SessionStatus.STATUS_CONFIRMED) {\n            this.terminated(response, Constants_1.C.causes.DIALOG_ERROR);\n        }\n        else if (this.status !== Enums_1.SessionStatus.STATUS_TERMINATED) {\n            this.failed(response, Constants_1.C.causes.DIALOG_ERROR);\n            this.terminated(response, Constants_1.C.causes.DIALOG_ERROR);\n        }\n    };\n    Session.prototype.on = function (name, callback) {\n        return _super.prototype.on.call(this, name, callback);\n    };\n    Session.prototype.onAck = function (incomingRequest) {\n        var _this = this;\n        var confirmSession = function () {\n            clearTimeout(_this.timers.ackTimer);\n            clearTimeout(_this.timers.invite2xxTimer);\n            _this.status = Enums_1.SessionStatus.STATUS_CONFIRMED;\n            var contentDisp = incomingRequest.message.getHeader(\"Content-Disposition\");\n            if (contentDisp && contentDisp.type === \"render\") {\n                _this.renderbody = incomingRequest.message.body;\n                _this.rendertype = incomingRequest.message.getHeader(\"Content-Type\");\n            }\n            _this.emit(\"confirmed\", incomingRequest.message);\n        };\n        if (this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK) {\n            if (this.sessionDescriptionHandler &&\n                this.sessionDescriptionHandler.hasDescription(incomingRequest.message.getHeader(\"Content-Type\") || \"\")) {\n                this.hasAnswer = true;\n                this.sessionDescriptionHandler.setDescription(incomingRequest.message.body, this.sessionDescriptionHandlerOptions, this.modifiers).catch(function (e) {\n                    _this.logger.warn(e);\n                    _this.terminate({\n                        statusCode: \"488\",\n                        reasonPhrase: \"Bad Media Description\"\n                    });\n                    _this.failed(incomingRequest.message, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\n                    _this.terminated(incomingRequest.message, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\n                    throw e;\n                }).then(function () { return confirmSession(); });\n            }\n            else {\n                confirmSession();\n            }\n        }\n    };\n    Session.prototype.receiveRequest = function (incomingRequest) {\n        switch (incomingRequest.message.method) { // TODO: This needs a default case\n            case Constants_1.C.BYE:\n                incomingRequest.accept();\n                if (this.status === Enums_1.SessionStatus.STATUS_CONFIRMED) {\n                    this.emit(\"bye\", incomingRequest.message);\n                    this.terminated(incomingRequest.message, Constants_1.C.BYE);\n                }\n                break;\n            case Constants_1.C.INVITE:\n                if (this.status === Enums_1.SessionStatus.STATUS_CONFIRMED) {\n                    this.logger.log(\"re-INVITE received\");\n                    this.receiveReinvite(incomingRequest);\n                }\n                break;\n            case Constants_1.C.INFO:\n                if (this.status === Enums_1.SessionStatus.STATUS_CONFIRMED || this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK) {\n                    if (this.onInfo) {\n                        return this.onInfo(incomingRequest.message);\n                    }\n                    var contentType = incomingRequest.message.getHeader(\"content-type\");\n                    if (contentType) {\n                        if (contentType.match(/^application\\/dtmf-relay/i)) {\n                            if (incomingRequest.message.body) {\n                                var body = incomingRequest.message.body.split(\"\\r\\n\", 2);\n                                if (body.length === 2) {\n                                    var tone = void 0;\n                                    var duration = void 0;\n                                    var regTone = /^(Signal\\s*?=\\s*?)([0-9A-D#*]{1})(\\s)?.*/;\n                                    if (regTone.test(body[0])) {\n                                        tone = body[0].replace(regTone, \"$2\");\n                                    }\n                                    var regDuration = /^(Duration\\s?=\\s?)([0-9]{1,4})(\\s)?.*/;\n                                    if (regDuration.test(body[1])) {\n                                        duration = parseInt(body[1].replace(regDuration, \"$2\"), 10);\n                                    }\n                                    if (tone && duration) {\n                                        new DTMF_1.DTMF(this, tone, { duration: duration }).init_incoming(incomingRequest);\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            incomingRequest.reject({\n                                statusCode: 415,\n                                extraHeaders: [\"Accept: application/dtmf-relay\"]\n                            });\n                        }\n                    }\n                }\n                break;\n            case Constants_1.C.REFER:\n                if (this.status === Enums_1.SessionStatus.STATUS_CONFIRMED) {\n                    this.logger.log(\"REFER received\");\n                    this.referContext = new ReferContext_1.ReferServerContext(this.ua, incomingRequest, this.session);\n                    if (this.listeners(\"referRequested\").length) {\n                        this.emit(\"referRequested\", this.referContext);\n                    }\n                    else {\n                        this.logger.log(\"No referRequested listeners, automatically accepting and following the refer\");\n                        var options = { followRefer: true };\n                        if (this.passedOptions) {\n                            options.inviteOptions = this.passedOptions;\n                        }\n                        this.referContext.accept(options, this.modifiers);\n                    }\n                }\n                break;\n            case Constants_1.C.NOTIFY:\n                if (this.referContext &&\n                    this.referContext.type === Enums_1.TypeStrings.ReferClientContext &&\n                    incomingRequest.message.hasHeader(\"event\") &&\n                    /^refer(;.*)?$/.test(incomingRequest.message.getHeader(\"event\"))) {\n                    this.referContext.receiveNotify(incomingRequest);\n                    return;\n                }\n                incomingRequest.accept();\n                this.emit(\"notify\", incomingRequest.message);\n                break;\n            case Constants_1.C.MESSAGE:\n                incomingRequest.accept();\n                this.emit(\"message\", incomingRequest.message);\n                break;\n        }\n    };\n    // In dialog INVITE Reception\n    Session.prototype.receiveReinvite = function (incomingRequest) {\n        // TODO: Should probably check state of the session\n        var _this = this;\n        this.emit(\"reinvite\", this, incomingRequest.message);\n        if (incomingRequest.message.hasHeader(\"P-Asserted-Identity\")) {\n            this.assertedIdentity =\n                core_1.Grammar.nameAddrHeaderParse(incomingRequest.message.getHeader(\"P-Asserted-Identity\"));\n        }\n        var promise;\n        if (!this.sessionDescriptionHandler) {\n            this.logger.warn(\"No SessionDescriptionHandler to reinvite\");\n            return;\n        }\n        if (incomingRequest.message.getHeader(\"Content-Length\") === \"0\" &&\n            !incomingRequest.message.getHeader(\"Content-Type\")) { // Invite w/o SDP\n            promise = this.sessionDescriptionHandler.getDescription(this.sessionDescriptionHandlerOptions, this.modifiers);\n        }\n        else if (this.sessionDescriptionHandler.hasDescription(incomingRequest.message.getHeader(\"Content-Type\") || \"\")) {\n            // Invite w/ SDP\n            promise = this.sessionDescriptionHandler.setDescription(incomingRequest.message.body, this.sessionDescriptionHandlerOptions, this.modifiers).then(this.sessionDescriptionHandler.getDescription.bind(this.sessionDescriptionHandler, this.sessionDescriptionHandlerOptions, this.modifiers));\n        }\n        else { // Bad Packet (should never get hit)\n            incomingRequest.reject({ statusCode: 415 });\n            this.emit(\"reinviteFailed\", this);\n            return;\n        }\n        promise.catch(function (e) {\n            var statusCode;\n            if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\n                statusCode = 500;\n            }\n            else if (e.type === Enums_1.TypeStrings.RenegotiationError) {\n                _this.emit(\"renegotiationError\", e);\n                _this.logger.warn(e.toString());\n                statusCode = 488;\n            }\n            else {\n                _this.logger.error(e);\n                statusCode = 488;\n            }\n            incomingRequest.reject({ statusCode: statusCode });\n            _this.emit(\"reinviteFailed\", _this);\n            // TODO: This could be better\n            throw e;\n        }).then(function (description) {\n            var extraHeaders = [\"Contact: \" + _this.contact];\n            incomingRequest.accept({\n                statusCode: 200,\n                extraHeaders: extraHeaders,\n                body: Utils_1.Utils.fromBodyObj(description)\n            });\n            _this.status = Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK;\n            _this.emit(\"reinviteAccepted\", _this);\n        });\n    };\n    Session.prototype.sendReinvite = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        if (this.pendingReinvite) {\n            this.logger.warn(\"Reinvite in progress. Please wait until complete, then try again.\");\n            return;\n        }\n        if (!this.sessionDescriptionHandler) {\n            this.logger.warn(\"No SessionDescriptionHandler, can't reinvite..\");\n            return;\n        }\n        this.pendingReinvite = true;\n        options.modifiers = options.modifiers || [];\n        var extraHeaders = (options.extraHeaders || []).slice();\n        extraHeaders.push(\"Contact: \" + this.contact);\n        // this is UA.C.ALLOWED_METHODS, removed to get around circular dependency\n        extraHeaders.push(\"Allow: \" + [\n            \"ACK\",\n            \"CANCEL\",\n            \"INVITE\",\n            \"MESSAGE\",\n            \"BYE\",\n            \"OPTIONS\",\n            \"INFO\",\n            \"NOTIFY\",\n            \"REFER\"\n        ].toString());\n        this.sessionDescriptionHandler.getDescription(options.sessionDescriptionHandlerOptions, options.modifiers)\n            .then(function (description) {\n            if (!_this.session) {\n                throw new Error(\"Session undefined.\");\n            }\n            var delegate = {\n                onAccept: function (response) {\n                    if (_this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\n                        _this.logger.error(\"Received reinvite response, but in STATUS_TERMINATED\");\n                        // TODO: Do we need to send a SIP response?\n                        return;\n                    }\n                    if (!_this.pendingReinvite) {\n                        _this.logger.error(\"Received reinvite response, but have no pending reinvite\");\n                        // TODO: Do we need to send a SIP response?\n                        return;\n                    }\n                    // FIXME: Why is this set here?\n                    _this.status = Enums_1.SessionStatus.STATUS_CONFIRMED;\n                    // 17.1.1.1 - For each final response that is received at the client transaction,\n                    // the client transaction sends an ACK,\n                    _this.emit(\"ack\", response.ack());\n                    _this.pendingReinvite = false;\n                    // TODO: All of these timers should move into the Transaction layer\n                    clearTimeout(_this.timers.invite2xxTimer);\n                    if (!_this.sessionDescriptionHandler ||\n                        !_this.sessionDescriptionHandler.hasDescription(response.message.getHeader(\"Content-Type\") || \"\")) {\n                        _this.logger.error(\"2XX response received to re-invite but did not have a description\");\n                        _this.emit(\"reinviteFailed\", _this);\n                        _this.emit(\"renegotiationError\", new Exceptions_1.Exceptions.RenegotiationError(\"2XX response received to re-invite but did not have a description\"));\n                        return;\n                    }\n                    _this.sessionDescriptionHandler\n                        .setDescription(response.message.body, _this.sessionDescriptionHandlerOptions, _this.modifiers)\n                        .catch(function (e) {\n                        _this.logger.error(\"Could not set the description in 2XX response\");\n                        _this.logger.error(e);\n                        _this.emit(\"reinviteFailed\", _this);\n                        _this.emit(\"renegotiationError\", e);\n                        _this.sendRequest(Constants_1.C.BYE, {\n                            extraHeaders: [\"Reason: \" + Utils_1.Utils.getReasonHeaderValue(488, \"Not Acceptable Here\")]\n                        });\n                        _this.terminated(undefined, Constants_1.C.causes.INCOMPATIBLE_SDP);\n                        throw e;\n                    })\n                        .then(function () {\n                        _this.emit(\"reinviteAccepted\", _this);\n                    });\n                },\n                onProgress: function (response) {\n                    return;\n                },\n                onRedirect: function (response) {\n                    // FIXME: Does ACK need to be sent?\n                    _this.pendingReinvite = false;\n                    _this.logger.log(\"Received a non 1XX or 2XX response to a re-invite\");\n                    _this.emit(\"reinviteFailed\", _this);\n                    _this.emit(\"renegotiationError\", new Exceptions_1.Exceptions.RenegotiationError(\"Invalid response to a re-invite\"));\n                },\n                onReject: function (response) {\n                    // FIXME: Does ACK need to be sent?\n                    _this.pendingReinvite = false;\n                    _this.logger.log(\"Received a non 1XX or 2XX response to a re-invite\");\n                    _this.emit(\"reinviteFailed\", _this);\n                    _this.emit(\"renegotiationError\", new Exceptions_1.Exceptions.RenegotiationError(\"Invalid response to a re-invite\"));\n                },\n                onTrying: function (response) {\n                    return;\n                }\n            };\n            var requestOptions = {\n                extraHeaders: extraHeaders,\n                body: Utils_1.Utils.fromBodyObj(description)\n            };\n            _this.session.invite(delegate, requestOptions);\n        }).catch(function (e) {\n            if (e.type === Enums_1.TypeStrings.RenegotiationError) {\n                _this.pendingReinvite = false;\n                _this.emit(\"renegotiationError\", e);\n                _this.logger.warn(\"Renegotiation Error\");\n                _this.logger.warn(e.toString());\n                throw e;\n            }\n            _this.logger.error(\"sessionDescriptionHandler error\");\n            _this.logger.error(e);\n            throw e;\n        });\n    };\n    Session.prototype.failed = function (response, cause) {\n        if (this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\n            return this;\n        }\n        this.emit(\"failed\", response, cause);\n        return this;\n    };\n    Session.prototype.rejected = function (response, cause) {\n        this.emit(\"rejected\", response, cause);\n        return this;\n    };\n    Session.prototype.canceled = function () {\n        if (this.sessionDescriptionHandler) {\n            this.sessionDescriptionHandler.close();\n        }\n        this.emit(\"cancel\");\n        return this;\n    };\n    Session.prototype.accepted = function (response, cause) {\n        if (!(response instanceof String)) {\n            cause = Utils_1.Utils.getReasonPhrase((response && response.statusCode) || 0, cause);\n        }\n        this.startTime = new Date();\n        if (this.replacee) {\n            this.replacee.emit(\"replaced\", this);\n            this.replacee.terminate();\n        }\n        this.emit(\"accepted\", response, cause);\n        return this;\n    };\n    Session.prototype.terminated = function (message, cause) {\n        if (this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\n            return this;\n        }\n        this.endTime = new Date();\n        this.close();\n        this.emit(\"terminated\", message, cause);\n        return this;\n    };\n    Session.prototype.connecting = function (request) {\n        this.emit(\"connecting\", { request: request });\n        return this;\n    };\n    Session.C = Enums_1.SessionStatus;\n    return Session;\n}(events_1.EventEmitter));\nexports.Session = Session;\n// tslint:disable-next-line:max-classes-per-file\nvar InviteServerContext = /** @class */ (function (_super) {\n    tslib_1.__extends(InviteServerContext, _super);\n    function InviteServerContext(ua, incomingInviteRequest) {\n        var _this = this;\n        if (!ua.configuration.sessionDescriptionHandlerFactory) {\n            ua.logger.warn(\"Can't build ISC without SDH Factory\");\n            throw new Error(\"ISC Constructor Failed\");\n        }\n        _this = _super.call(this, ua.configuration.sessionDescriptionHandlerFactory) || this;\n        _this._canceled = false;\n        _this.rseq = Math.floor(Math.random() * 10000);\n        _this.incomingRequest = incomingInviteRequest;\n        var request = incomingInviteRequest.message;\n        ServerContext_1.ServerContext.initializer(_this, ua, incomingInviteRequest);\n        _this.type = Enums_1.TypeStrings.InviteServerContext;\n        var contentDisp = request.parseHeader(\"Content-Disposition\");\n        if (contentDisp && contentDisp.type === \"render\") {\n            _this.renderbody = request.body;\n            _this.rendertype = request.getHeader(\"Content-Type\");\n        }\n        _this.status = Enums_1.SessionStatus.STATUS_INVITE_RECEIVED;\n        _this.fromTag = request.fromTag;\n        _this.id = request.callId + _this.fromTag;\n        _this.request = request;\n        _this.contact = _this.ua.contact.toString();\n        _this.logger = ua.getLogger(\"sip.inviteservercontext\", _this.id);\n        // Save the session into the ua sessions collection.\n        _this.ua.sessions[_this.id] = _this;\n        // Set 100rel if necessary\n        var set100rel = function (header, relSetting) {\n            if (request.hasHeader(header) && request.getHeader(header).toLowerCase().indexOf(\"100rel\") >= 0) {\n                _this.rel100 = relSetting;\n            }\n        };\n        set100rel(\"require\", Constants_1.C.supported.REQUIRED);\n        set100rel(\"supported\", Constants_1.C.supported.SUPPORTED);\n        // Set the toTag on the incoming request to the toTag which\n        // will be used in the response to the incoming request!!!\n        // FIXME: HACK: This is a hack to port an existing behavior.\n        // The behavior being ported appears to be a hack itself,\n        // so this is a hack to port a hack. At least one test spec\n        // relies on it (which is yet another hack).\n        _this.request.toTag = incomingInviteRequest.toTag;\n        _this.status = Enums_1.SessionStatus.STATUS_WAITING_FOR_ANSWER;\n        // Set userNoAnswerTimer\n        _this.timers.userNoAnswerTimer = setTimeout(function () {\n            incomingInviteRequest.reject({ statusCode: 408 });\n            _this.failed(request, Constants_1.C.causes.NO_ANSWER);\n            _this.terminated(request, Constants_1.C.causes.NO_ANSWER);\n        }, _this.ua.configuration.noAnswerTimeout || 60);\n        /* Set expiresTimer\n        * RFC3261 13.3.1\n        */\n        // Get the Expires header value if exists\n        if (request.hasHeader(\"expires\")) {\n            var expires = Number(request.getHeader(\"expires\") || 0) * 1000;\n            _this.timers.expiresTimer = setTimeout(function () {\n                if (_this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_ANSWER) {\n                    incomingInviteRequest.reject({ statusCode: 487 });\n                    _this.failed(request, Constants_1.C.causes.EXPIRES);\n                    _this.terminated(request, Constants_1.C.causes.EXPIRES);\n                }\n            }, expires);\n        }\n        _this.errorListener = _this.onTransportError.bind(_this);\n        if (ua.transport) {\n            ua.transport.on(\"transportError\", _this.errorListener);\n        }\n        return _this;\n    }\n    Object.defineProperty(InviteServerContext.prototype, \"autoSendAnInitialProvisionalResponse\", {\n        /**\n         * If true, a first provisional response after the 100 Trying\n         * will be sent automatically. This is false it the UAC required\n         * reliable provisional responses (100rel in Require header),\n         * otherwise it is true. The provisional is sent by calling\n         * `progress()` without any options.\n         *\n         * FIXME: TODO: It seems reasonable that the ISC user should\n         * be able to optionally disable this behavior. As the provisional\n         * is sent prior to the \"invite\" event being emitted, it's a known\n         * issue that the ISC user cannot register listeners or do any other\n         * setup prior to the call to `progress()`. As an example why this is\n         * an issue, setting `ua.configuration.rel100` to REQUIRED will result\n         * in an attempt by `progress()` to send a 183 with SDP produced by\n         * calling `getDescription()` on a session description handler, but\n         * the ISC user cannot perform any potentially required session description\n         * handler initialization (thus preventing the utilization of setting\n         * `ua.configuration.rel100` to REQUIRED). That begs the question of\n         * why this behavior is disabled when the UAC requires 100rel but not\n         * when the UAS requires 100rel? But ignoring that, it's just one example\n         * of a class of cases where the ISC user needs to do something prior\n         * to the first call to `progress()` and is unable to do so.\n         */\n        get: function () {\n            return this.rel100 === Constants_1.C.supported.REQUIRED ? false : true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // type hack for servercontext interface\n    InviteServerContext.prototype.reply = function (options) {\n        if (options === void 0) { options = {}; }\n        return this;\n    };\n    // typing note: this was the only function using its super in ServerContext\n    // so the bottom half of this function is copied and paired down from that\n    InviteServerContext.prototype.reject = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        // Check Session Status\n        if (this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\n        }\n        this.logger.log(\"rejecting RTCSession\");\n        var statusCode = options.statusCode || 480;\n        var reasonPhrase = Utils_1.Utils.getReasonPhrase(statusCode, options.reasonPhrase);\n        var extraHeaders = options.extraHeaders || [];\n        if (statusCode < 300 || statusCode > 699) {\n            throw new TypeError(\"Invalid statusCode: \" + statusCode);\n        }\n        var body = options.body ? core_1.fromBodyLegacy(options.body) : undefined;\n        // FIXME: Need to redirect to someplae\n        var response = statusCode < 400 ?\n            this.incomingRequest.redirect([], { statusCode: statusCode, reasonPhrase: reasonPhrase, extraHeaders: extraHeaders, body: body }) :\n            this.incomingRequest.reject({ statusCode: statusCode, reasonPhrase: reasonPhrase, extraHeaders: extraHeaders, body: body });\n        ([\"rejected\", \"failed\"]).forEach(function (event) {\n            _this.emit(event, response.message, reasonPhrase);\n        });\n        return this.terminated();\n    };\n    /**\n     * Accept the incoming INVITE request to start a Session.\n     * Replies to the INVITE request with a 200 Ok response.\n     * @param options Options bucket.\n     */\n    InviteServerContext.prototype.accept = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        // FIXME: Need guard against calling more than once.\n        this._accept(options)\n            .then(function (_a) {\n            var message = _a.message, session = _a.session;\n            session.delegate = {\n                onAck: function (ackRequest) { return _this.onAck(ackRequest); },\n                onAckTimeout: function () { return _this.onAckTimeout(); },\n                onBye: function (byeRequest) { return _this.receiveRequest(byeRequest); },\n                onInfo: function (infoRequest) { return _this.receiveRequest(infoRequest); },\n                onInvite: function (inviteRequest) { return _this.receiveRequest(inviteRequest); },\n                onMessage: function (messageRequest) { return _this.receiveRequest(messageRequest); },\n                onNotify: function (notifyRequest) { return _this.receiveRequest(notifyRequest); },\n                onPrack: function (prackRequest) { return _this.receiveRequest(prackRequest); },\n                onRefer: function (referRequest) { return _this.receiveRequest(referRequest); },\n            };\n            _this.session = session;\n            _this.status = Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK;\n            _this.accepted(message, Utils_1.Utils.getReasonPhrase(200));\n        })\n            .catch(function (error) {\n            _this.onContextError(error);\n            // FIXME: Assuming error due to async race on CANCEL and eating error.\n            if (!_this._canceled) {\n                throw error;\n            }\n        });\n        return this;\n    };\n    /**\n     * Report progress to the the caller.\n     * Replies to the INVITE request with a 1xx provisional response.\n     * @param options Options bucket.\n     */\n    InviteServerContext.prototype.progress = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        // Ported\n        var statusCode = options.statusCode || 180;\n        if (statusCode < 100 || statusCode > 199) {\n            throw new TypeError(\"Invalid statusCode: \" + statusCode);\n        }\n        // Ported\n        if (this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\n            this.logger.warn(\"Unexpected call for progress while terminated, ignoring\");\n            return this;\n        }\n        // Added\n        if (this.status === Enums_1.SessionStatus.STATUS_ANSWERED) {\n            this.logger.warn(\"Unexpected call for progress while answered, ignoring\");\n            return this;\n        }\n        // Added\n        if (this.status === Enums_1.SessionStatus.STATUS_ANSWERED_WAITING_FOR_PRACK) {\n            this.logger.warn(\"Unexpected call for progress while answered (waiting for prack), ignoring\");\n            return this;\n        }\n        // After the first reliable provisional response for a request has been\n        // acknowledged, the UAS MAY send additional reliable provisional\n        // responses.  The UAS MUST NOT send a second reliable provisional\n        // response until the first is acknowledged.  After the first, it is\n        // RECOMMENDED that the UAS not send an additional reliable provisional\n        // response until the previous is acknowledged.  The first reliable\n        // provisional response receives special treatment because it conveys\n        // the initial sequence number.  If additional reliable provisional\n        // responses were sent before the first was acknowledged, the UAS could\n        // not be certain these were received in order.\n        // https://tools.ietf.org/html/rfc3262#section-3\n        if (this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_PRACK) {\n            this.logger.warn(\"Unexpected call for progress while waiting for prack, ignoring\");\n            return this;\n        }\n        // Ported\n        if (options.statusCode === 100) {\n            try {\n                this.incomingRequest.trying();\n            }\n            catch (error) {\n                this.onContextError(error);\n                // FIXME: Assuming error due to async race on CANCEL and eating error.\n                if (!this._canceled) {\n                    throw error;\n                }\n            }\n            return this;\n        }\n        // Standard provisional response.\n        if (!(this.rel100 === Constants_1.C.supported.REQUIRED) &&\n            !(this.rel100 === Constants_1.C.supported.SUPPORTED && options.rel100) &&\n            !(this.rel100 === Constants_1.C.supported.SUPPORTED && this.ua.configuration.rel100 === Constants_1.C.supported.REQUIRED)) {\n            this._progress(options)\n                .catch(function (error) {\n                _this.onContextError(error);\n                // FIXME: Assuming error due to async race on CANCEL and eating error.\n                if (!_this._canceled) {\n                    throw error;\n                }\n            });\n            return this;\n        }\n        // Reliable provisional response.\n        this._reliableProgressWaitForPrack(options)\n            .catch(function (error) {\n            _this.onContextError(error);\n            // FIXME: Assuming error due to async race on CANCEL and eating error.\n            if (!_this._canceled) {\n                throw error;\n            }\n        });\n        return this;\n    };\n    /**\n     * Reject an unaccepted incoming INVITE request or send BYE if established session.\n     * @param options Options bucket. FIXME: This options bucket needs to be typed.\n     */\n    InviteServerContext.prototype.terminate = function (options) {\n        // The caller's UA MAY send a BYE for either confirmed or early dialogs,\n        // and the callee's UA MAY send a BYE on confirmed dialogs, but MUST NOT\n        // send a BYE on early dialogs. However, the callee's UA MUST NOT send a\n        // BYE on a confirmed dialog until it has received an ACK for its 2xx\n        // response or until the server transaction times out.\n        // https://tools.ietf.org/html/rfc3261#section-15\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        // We don't yet have a dialog, so reject request.\n        if (!this.session) {\n            this.reject(options);\n            return this;\n        }\n        switch (this.session.sessionState) {\n            case core_1.SessionState.Initial:\n                this.reject(options);\n                return this;\n            case core_1.SessionState.Early:\n                this.reject(options);\n                return this;\n            case core_1.SessionState.AckWait:\n                this.session.delegate = {\n                    // When ACK shows up, say BYE.\n                    onAck: function () {\n                        _this.sendRequest(Constants_1.C.BYE, options);\n                    },\n                    // Or the server transaction times out before the ACK arrives.\n                    onAckTimeout: function () {\n                        _this.sendRequest(Constants_1.C.BYE, options);\n                    }\n                };\n                // Ported\n                this.emit(\"bye\", this.request);\n                this.terminated();\n                return this;\n            case core_1.SessionState.Confirmed:\n                this.bye(options);\n                return this;\n            case core_1.SessionState.Terminated:\n                return this;\n            default:\n                return this;\n        }\n    };\n    InviteServerContext.prototype.onCancel = function (message) {\n        if (this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_ANSWER ||\n            this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_PRACK ||\n            this.status === Enums_1.SessionStatus.STATUS_ANSWERED_WAITING_FOR_PRACK ||\n            this.status === Enums_1.SessionStatus.STATUS_EARLY_MEDIA ||\n            this.status === Enums_1.SessionStatus.STATUS_ANSWERED) {\n            this.status = Enums_1.SessionStatus.STATUS_CANCELED;\n            this.incomingRequest.reject({ statusCode: 487 });\n            this.canceled();\n            this.rejected(message, Constants_1.C.causes.CANCELED);\n            this.failed(message, Constants_1.C.causes.CANCELED);\n            this.terminated(message, Constants_1.C.causes.CANCELED);\n        }\n    };\n    InviteServerContext.prototype.receiveRequest = function (incomingRequest) {\n        var _this = this;\n        switch (incomingRequest.message.method) {\n            case Constants_1.C.PRACK:\n                if (this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_PRACK ||\n                    this.status === Enums_1.SessionStatus.STATUS_ANSWERED_WAITING_FOR_PRACK) {\n                    if (!this.hasAnswer) {\n                        this.sessionDescriptionHandler = this.setupSessionDescriptionHandler();\n                        this.emit(\"SessionDescriptionHandler-created\", this.sessionDescriptionHandler);\n                        if (this.sessionDescriptionHandler.hasDescription(incomingRequest.message.getHeader(\"Content-Type\") || \"\")) {\n                            this.hasAnswer = true;\n                            this.sessionDescriptionHandler.setDescription(incomingRequest.message.body, this.sessionDescriptionHandlerOptions, this.modifiers).then(function () {\n                                clearTimeout(_this.timers.rel1xxTimer);\n                                clearTimeout(_this.timers.prackTimer);\n                                incomingRequest.accept();\n                                if (_this.status === Enums_1.SessionStatus.STATUS_ANSWERED_WAITING_FOR_PRACK) {\n                                    _this.status = Enums_1.SessionStatus.STATUS_EARLY_MEDIA;\n                                    _this.accept();\n                                }\n                                _this.status = Enums_1.SessionStatus.STATUS_EARLY_MEDIA;\n                            }, function (e) {\n                                _this.logger.warn(e);\n                                _this.terminate({\n                                    statusCode: \"488\",\n                                    reasonPhrase: \"Bad Media Description\"\n                                });\n                                _this.failed(incomingRequest.message, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\n                                _this.terminated(incomingRequest.message, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\n                            });\n                        }\n                        else {\n                            this.terminate({\n                                statusCode: \"488\",\n                                reasonPhrase: \"Bad Media Description\"\n                            });\n                            this.failed(incomingRequest.message, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\n                            this.terminated(incomingRequest.message, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\n                        }\n                    }\n                    else {\n                        clearTimeout(this.timers.rel1xxTimer);\n                        clearTimeout(this.timers.prackTimer);\n                        incomingRequest.accept();\n                        if (this.status === Enums_1.SessionStatus.STATUS_ANSWERED_WAITING_FOR_PRACK) {\n                            this.status = Enums_1.SessionStatus.STATUS_EARLY_MEDIA;\n                            this.accept();\n                        }\n                        this.status = Enums_1.SessionStatus.STATUS_EARLY_MEDIA;\n                    }\n                }\n                else if (this.status === Enums_1.SessionStatus.STATUS_EARLY_MEDIA) {\n                    incomingRequest.accept();\n                }\n                break;\n            default:\n                _super.prototype.receiveRequest.call(this, incomingRequest);\n                break;\n        }\n    };\n    // Internal Function to setup the handler consistently\n    InviteServerContext.prototype.setupSessionDescriptionHandler = function () {\n        if (this.sessionDescriptionHandler) {\n            return this.sessionDescriptionHandler;\n        }\n        return this.sessionDescriptionHandlerFactory(this, this.ua.configuration.sessionDescriptionHandlerFactoryOptions);\n    };\n    InviteServerContext.prototype.generateResponseOfferAnswer = function (options) {\n        if (!this.session) {\n            var body = core_1.getBody(this.incomingRequest.message);\n            if (!body || body.contentDisposition !== \"session\") {\n                return this.getOffer(options);\n            }\n            else {\n                return this.setOfferAndGetAnswer(body, options);\n            }\n        }\n        else {\n            switch (this.session.signalingState) {\n                case core_1.SignalingState.Initial:\n                    return this.getOffer(options);\n                case core_1.SignalingState.Stable:\n                    return Promise.resolve(undefined);\n                case core_1.SignalingState.HaveLocalOffer:\n                    // o  Once the UAS has sent or received an answer to the initial\n                    // offer, it MUST NOT generate subsequent offers in any responses\n                    // to the initial INVITE.  This means that a UAS based on this\n                    // specification alone can never generate subsequent offers until\n                    // completion of the initial transaction.\n                    // https://tools.ietf.org/html/rfc3261#section-13.2.1\n                    return Promise.resolve(undefined);\n                case core_1.SignalingState.HaveRemoteOffer:\n                    if (!this.session.offer) {\n                        throw new Error(\"Session offer undefined\");\n                    }\n                    return this.setOfferAndGetAnswer(this.session.offer, options);\n                case core_1.SignalingState.Closed:\n                    throw new Error(\"Invalid signaling state \" + this.session.signalingState + \".\");\n                default:\n                    throw new Error(\"Invalid signaling state \" + this.session.signalingState + \".\");\n            }\n        }\n    };\n    InviteServerContext.prototype.handlePrackOfferAnswer = function (request, options) {\n        if (!this.session) {\n            throw new Error(\"Session undefined.\");\n        }\n        // If the PRACK doesn't have an offer/answer, nothing to be done.\n        var body = core_1.getBody(request.message);\n        if (!body || body.contentDisposition !== \"session\") {\n            return Promise.resolve(undefined);\n        }\n        // If the UAC receives a reliable provisional response with an offer\n        // (this would occur if the UAC sent an INVITE without an offer, in\n        // which case the first reliable provisional response will contain the\n        // offer), it MUST generate an answer in the PRACK.  If the UAC receives\n        // a reliable provisional response with an answer, it MAY generate an\n        // additional offer in the PRACK.  If the UAS receives a PRACK with an\n        // offer, it MUST place the answer in the 2xx to the PRACK.\n        // https://tools.ietf.org/html/rfc3262#section-5\n        switch (this.session.signalingState) {\n            case core_1.SignalingState.Initial:\n                // State should never be reached as first reliable provisional response must have answer/offer.\n                throw new Error(\"Invalid signaling state \" + this.session.signalingState + \".\");\n            case core_1.SignalingState.Stable:\n                // Receved answer.\n                return this.setAnswer(body, options).then(function () { return undefined; });\n            case core_1.SignalingState.HaveLocalOffer:\n                // State should never be reached as local offer would be answered by this PRACK\n                throw new Error(\"Invalid signaling state \" + this.session.signalingState + \".\");\n            case core_1.SignalingState.HaveRemoteOffer:\n                // Receved offer, generate answer.\n                return this.setOfferAndGetAnswer(body, options);\n            case core_1.SignalingState.Closed:\n                throw new Error(\"Invalid signaling state \" + this.session.signalingState + \".\");\n            default:\n                throw new Error(\"Invalid signaling state \" + this.session.signalingState + \".\");\n        }\n    };\n    /**\n     * Called when session canceled.\n     */\n    InviteServerContext.prototype.canceled = function () {\n        this._canceled = true;\n        return _super.prototype.canceled.call(this);\n    };\n    /**\n     * Called when session terminated.\n     * Using it here just for the PRACK timeout.\n     */\n    InviteServerContext.prototype.terminated = function (message, cause) {\n        this.prackNeverArrived();\n        return _super.prototype.terminated.call(this, message, cause);\n    };\n    /**\n     * A version of `accept` which resolves a session when the 200 Ok response is sent.\n     * @param options Options bucket.\n     * @throws {ClosedSessionDescriptionHandlerError} The session description handler closed before method completed.\n     * @throws {TransactionStateError} The transaction state does not allow for `accept()` to be called.\n     *                                 Note that the transaction state can change while this call is in progress.\n     */\n    InviteServerContext.prototype._accept = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        // FIXME: Ported - callback for in dialog INFO requests.\n        // Turns out accept() can be called more than once if we are waiting\n        // for a PRACK in which case \"options\" get completely tossed away.\n        // So this is broken in that case (and potentially other uses of options).\n        // Tempted to just try to fix it now, but leaving it broken for the moment.\n        this.onInfo = options.onInfo;\n        // The UAS MAY send a final response to the initial request before\n        // having received PRACKs for all unacknowledged reliable provisional\n        // responses, unless the final response is 2xx and any of the\n        // unacknowledged reliable provisional responses contained a session\n        // description.  In that case, it MUST NOT send a final response until\n        // those provisional responses are acknowledged.  If the UAS does send a\n        // final response when reliable responses are still unacknowledged, it\n        // SHOULD NOT continue to retransmit the unacknowledged reliable\n        // provisional responses, but it MUST be prepared to process PRACK\n        // requests for those outstanding responses.  A UAS MUST NOT send new\n        // reliable provisional responses (as opposed to retransmissions of\n        // unacknowledged ones) after sending a final response to a request.\n        // https://tools.ietf.org/html/rfc3262#section-3\n        if (this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_PRACK) {\n            this.status = Enums_1.SessionStatus.STATUS_ANSWERED_WAITING_FOR_PRACK;\n            return this.waitForArrivalOfPrack()\n                .then(function () {\n                _this.status = Enums_1.SessionStatus.STATUS_ANSWERED;\n                clearTimeout(_this.timers.userNoAnswerTimer); // Ported\n            })\n                .then(function () { return _this.generateResponseOfferAnswer(options); })\n                .then(function (body) { return _this.incomingRequest.accept({ statusCode: 200, body: body }); });\n        }\n        // Ported\n        if (this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_ANSWER) {\n            this.status = Enums_1.SessionStatus.STATUS_ANSWERED;\n        }\n        else {\n            return Promise.reject(new Exceptions_1.Exceptions.InvalidStateError(this.status));\n        }\n        this.status = Enums_1.SessionStatus.STATUS_ANSWERED;\n        clearTimeout(this.timers.userNoAnswerTimer); // Ported\n        return this.generateResponseOfferAnswer(options)\n            .then(function (body) { return _this.incomingRequest.accept({ statusCode: 200, body: body }); });\n    };\n    /**\n     * A version of `progress` which resolves when the provisional response is sent.\n     * @param options Options bucket.\n     * @throws {ClosedSessionDescriptionHandlerError} The session description handler closed before method completed.\n     * @throws {TransactionStateError} The transaction state does not allow for `progress()` to be called.\n     *                                 Note that the transaction state can change while this call is in progress.\n     */\n    InviteServerContext.prototype._progress = function (options) {\n        if (options === void 0) { options = {}; }\n        // Ported\n        var statusCode = options.statusCode || 180;\n        var reasonPhrase = options.reasonPhrase;\n        var extraHeaders = (options.extraHeaders || []).slice();\n        var body = options.body ? core_1.fromBodyLegacy(options.body) : undefined;\n        // The 183 (Session Progress) response is used to convey information\n        // about the progress of the call that is not otherwise classified.  The\n        // Reason-Phrase, header fields, or message body MAY be used to convey\n        // more details about the call progress.\n        // https://tools.ietf.org/html/rfc3261#section-21.1.5\n        // It is the de facto industry standard to utilize 183 with SDP to provide \"early media\".\n        // While it is unlikely someone would want to send a 183 without SDP, so it should be an option.\n        if (statusCode === 183 && !body) {\n            return this._progressWithSDP(options);\n        }\n        try {\n            var progressResponse = this.incomingRequest.progress({ statusCode: statusCode, reasonPhrase: reasonPhrase, extraHeaders: extraHeaders, body: body });\n            this.emit(\"progress\", progressResponse.message, reasonPhrase); // Ported\n            this.session = progressResponse.session;\n            return Promise.resolve(progressResponse);\n        }\n        catch (error) {\n            return Promise.reject(error);\n        }\n    };\n    /**\n     * A version of `progress` which resolves when the provisional response with sdp is sent.\n     * @param options Options bucket.\n     * @throws {ClosedSessionDescriptionHandlerError} The session description handler closed before method completed.\n     * @throws {TransactionStateError} The transaction state does not allow for `progress()` to be called.\n     *                                 Note that the transaction state can change while this call is in progress.\n     */\n    InviteServerContext.prototype._progressWithSDP = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var statusCode = options.statusCode || 183;\n        var reasonPhrase = options.reasonPhrase;\n        var extraHeaders = (options.extraHeaders || []).slice();\n        // Get an offer/answer and send a reply.\n        return this.generateResponseOfferAnswer(options)\n            .then(function (body) { return _this.incomingRequest.progress({ statusCode: statusCode, reasonPhrase: reasonPhrase, extraHeaders: extraHeaders, body: body }); })\n            .then(function (progressResponse) {\n            _this.emit(\"progress\", progressResponse.message, reasonPhrase); // Ported\n            _this.session = progressResponse.session;\n            return progressResponse;\n        });\n    };\n    /**\n     * A version of `progress` which resolves when the reliable provisional response is sent.\n     * @param options Options bucket.\n     * @throws {ClosedSessionDescriptionHandlerError} The session description handler closed before method completed.\n     * @throws {TransactionStateError} The transaction state does not allow for `progress()` to be called.\n     *                                 Note that the transaction state can change while this call is in progress.\n     */\n    InviteServerContext.prototype._reliableProgress = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var statusCode = options.statusCode || 183;\n        var reasonPhrase = options.reasonPhrase;\n        var extraHeaders = (options.extraHeaders || []).slice();\n        extraHeaders.push(\"Require: 100rel\");\n        extraHeaders.push(\"RSeq: \" + Math.floor(Math.random() * 10000));\n        // Get an offer/answer and send a reply.\n        return this.generateResponseOfferAnswer(options)\n            .then(function (body) { return _this.incomingRequest.progress({ statusCode: statusCode, reasonPhrase: reasonPhrase, extraHeaders: extraHeaders, body: body }); })\n            .then(function (progressResponse) {\n            _this.emit(\"progress\", progressResponse.message, reasonPhrase); // Ported\n            _this.session = progressResponse.session;\n            return progressResponse;\n        });\n    };\n    /**\n     * A version of `progress` which resolves when the reliable provisional response is acknowledged.\n     * @param options Options bucket.\n     * @throws {ClosedSessionDescriptionHandlerError} The session description handler closed before method completed.\n     * @throws {TransactionStateError} The transaction state does not allow for `progress()` to be called.\n     *                                 Note that the transaction state can change while this call is in progress.\n     */\n    InviteServerContext.prototype._reliableProgressWaitForPrack = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var statusCode = options.statusCode || 183;\n        var reasonPhrase = options.reasonPhrase;\n        var extraHeaders = (options.extraHeaders || []).slice();\n        extraHeaders.push(\"Require: 100rel\");\n        extraHeaders.push(\"RSeq: \" + this.rseq++);\n        var body;\n        // Ported - set status.\n        this.status = Enums_1.SessionStatus.STATUS_WAITING_FOR_PRACK;\n        return new Promise(function (resolve, reject) {\n            var waitingForPrack = true;\n            return _this.generateResponseOfferAnswer(options)\n                .then(function (offerAnswer) {\n                body = offerAnswer;\n                return _this.incomingRequest.progress({ statusCode: statusCode, reasonPhrase: reasonPhrase, extraHeaders: extraHeaders, body: body });\n            })\n                .then(function (progressResponse) {\n                _this.emit(\"progress\", progressResponse.message, reasonPhrase); // Ported\n                _this.session = progressResponse.session;\n                var prackRequest;\n                var prackResponse;\n                progressResponse.session.delegate = {\n                    onPrack: function (request) {\n                        prackRequest = request;\n                        clearTimeout(prackWaitTimeoutTimer);\n                        clearTimeout(rel1xxRetransmissionTimer);\n                        if (!waitingForPrack) {\n                            return;\n                        }\n                        waitingForPrack = false;\n                        _this.handlePrackOfferAnswer(prackRequest, options)\n                            .then(function (prackResponseBody) {\n                            try {\n                                prackResponse = prackRequest.accept({ statusCode: 200, body: prackResponseBody });\n                                // Ported - set status.\n                                if (_this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_PRACK) {\n                                    _this.status = Enums_1.SessionStatus.STATUS_WAITING_FOR_ANSWER;\n                                }\n                                _this.prackArrived();\n                                resolve({ prackRequest: prackRequest, prackResponse: prackResponse, progressResponse: progressResponse });\n                            }\n                            catch (error) {\n                                reject(error);\n                            }\n                        });\n                    }\n                };\n                // https://tools.ietf.org/html/rfc3262#section-3\n                var prackWaitTimeout = function () {\n                    if (!waitingForPrack) {\n                        return;\n                    }\n                    waitingForPrack = false;\n                    _this.logger.warn(\"No PRACK received, rejecting INVITE.\");\n                    clearTimeout(rel1xxRetransmissionTimer);\n                    try {\n                        _this.incomingRequest.reject({ statusCode: 504 });\n                        _this.terminated(undefined, Constants_1.C.causes.NO_PRACK);\n                        reject(new Exceptions_1.Exceptions.TerminatedSessionError());\n                    }\n                    catch (error) {\n                        reject(error);\n                    }\n                };\n                var prackWaitTimeoutTimer = setTimeout(prackWaitTimeout, core_1.Timers.T1 * 64);\n                // https://tools.ietf.org/html/rfc3262#section-3\n                var rel1xxRetransmission = function () {\n                    try {\n                        _this.incomingRequest.progress({ statusCode: statusCode, reasonPhrase: reasonPhrase, extraHeaders: extraHeaders, body: body });\n                    }\n                    catch (error) {\n                        waitingForPrack = false;\n                        reject(error);\n                        return;\n                    }\n                    rel1xxRetransmissionTimer = setTimeout(rel1xxRetransmission, timeout *= 2);\n                };\n                var timeout = core_1.Timers.T1;\n                var rel1xxRetransmissionTimer = setTimeout(rel1xxRetransmission, timeout);\n            });\n        });\n    };\n    /**\n     * Callback for when ACK for a 2xx response is never received.\n     * @param session Session the ACK never arrived for\n     */\n    InviteServerContext.prototype.onAckTimeout = function () {\n        if (this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK) {\n            this.logger.log(\"no ACK received for an extended period of time, terminating the call\");\n            if (!this.session) {\n                throw new Error(\"Session undefined.\");\n            }\n            this.session.bye();\n            this.terminated(undefined, Constants_1.C.causes.NO_ACK);\n        }\n    };\n    /**\n     * FIXME: TODO: The current library interface presents async methods without a\n     * proper async error handling mechanism. Arguably a promise based interface\n     * would be an improvement over the pattern of returning `this`. The approach has\n     * been generally along the lines of log a error and terminate.\n     */\n    InviteServerContext.prototype.onContextError = function (error) {\n        var statusCode = 480;\n        if (error instanceof core_1.Exception) { // There might be interest in catching these Exceptions.\n            if (error instanceof Exceptions_1.Exceptions.SessionDescriptionHandlerError) {\n                this.logger.error(error.message);\n                if (error.error) {\n                    this.logger.error(error.error);\n                }\n            }\n            else if (error instanceof Exceptions_1.Exceptions.TerminatedSessionError) {\n                // PRACK never arrived, so we timed out waiting for it.\n                this.logger.warn(\"Incoming session terminated while waiting for PRACK.\");\n            }\n            else if (error instanceof Exceptions_1.Exceptions.UnsupportedSessionDescriptionContentTypeError) {\n                statusCode = 415;\n            }\n            else if (error instanceof core_1.Exception) {\n                this.logger.error(error.message);\n            }\n        }\n        else if (error instanceof Error) { // Other Errors hould go uncaught.\n            this.logger.error(error.message);\n        }\n        else {\n            // We don't actually know what a session description handler implementation might throw\n            // our way, so as a last resort, just assume we are getting an \"any\" and log it.\n            this.logger.error(\"An error occurred in the session description handler.\");\n            this.logger.error(error);\n        }\n        try {\n            this.incomingRequest.reject({ statusCode: statusCode }); // \"Temporarily Unavailable\"\n            this.failed(this.incomingRequest.message, error.message);\n            this.terminated(this.incomingRequest.message, error.message);\n        }\n        catch (error) {\n            return;\n        }\n    };\n    InviteServerContext.prototype.prackArrived = function () {\n        if (this.waitingForPrackResolve) {\n            this.waitingForPrackResolve();\n        }\n        this.waitingForPrackPromise = undefined;\n        this.waitingForPrackResolve = undefined;\n        this.waitingForPrackReject = undefined;\n    };\n    InviteServerContext.prototype.prackNeverArrived = function () {\n        if (this.waitingForPrackReject) {\n            this.waitingForPrackReject(new Exceptions_1.Exceptions.TerminatedSessionError());\n        }\n        this.waitingForPrackPromise = undefined;\n        this.waitingForPrackResolve = undefined;\n        this.waitingForPrackReject = undefined;\n    };\n    /**\n     * @throws {Exceptions.TerminatedSessionError} The session terminated before being accepted (i.e. cancel arrived).\n     */\n    InviteServerContext.prototype.waitForArrivalOfPrack = function () {\n        var _this = this;\n        if (this.waitingForPrackPromise) {\n            throw new Error(\"Already waiting for PRACK\");\n        }\n        this.waitingForPrackPromise = new Promise(function (resolve, reject) {\n            _this.waitingForPrackResolve = resolve;\n            _this.waitingForPrackReject = reject;\n        });\n        return this.waitingForPrackPromise;\n    };\n    InviteServerContext.prototype.getOffer = function (options) {\n        this.hasOffer = true;\n        var sdh = this.getSessionDescriptionHandler();\n        return sdh\n            .getDescription(options.sessionDescriptionHandlerOptions, options.modifiers)\n            .then(function (bodyObj) { return Utils_1.Utils.fromBodyObj(bodyObj); });\n    };\n    InviteServerContext.prototype.setAnswer = function (answer, options) {\n        this.hasAnswer = true;\n        var sdh = this.getSessionDescriptionHandler();\n        if (!sdh.hasDescription(answer.contentType)) {\n            return Promise.reject(new Exceptions_1.Exceptions.UnsupportedSessionDescriptionContentTypeError());\n        }\n        return sdh\n            .setDescription(answer.content, options.sessionDescriptionHandlerOptions, options.modifiers);\n    };\n    InviteServerContext.prototype.setOfferAndGetAnswer = function (offer, options) {\n        this.hasOffer = true;\n        this.hasAnswer = true;\n        var sdh = this.getSessionDescriptionHandler();\n        if (!sdh.hasDescription(offer.contentType)) {\n            return Promise.reject(new Exceptions_1.Exceptions.UnsupportedSessionDescriptionContentTypeError());\n        }\n        return sdh\n            .setDescription(offer.content, options.sessionDescriptionHandlerOptions, options.modifiers)\n            .then(function () { return sdh.getDescription(options.sessionDescriptionHandlerOptions, options.modifiers); })\n            .then(function (bodyObj) { return Utils_1.Utils.fromBodyObj(bodyObj); });\n    };\n    InviteServerContext.prototype.getSessionDescriptionHandler = function () {\n        // Create our session description handler if not already done so...\n        var sdh = this.sessionDescriptionHandler = this.setupSessionDescriptionHandler();\n        // FIXME: Ported - this can get emitted multiple times even when only created once... don't we care?\n        this.emit(\"SessionDescriptionHandler-created\", this.sessionDescriptionHandler);\n        // Return.\n        return sdh;\n    };\n    return InviteServerContext;\n}(Session));\nexports.InviteServerContext = InviteServerContext;\n// tslint:disable-next-line:max-classes-per-file\nvar InviteClientContext = /** @class */ (function (_super) {\n    tslib_1.__extends(InviteClientContext, _super);\n    function InviteClientContext(ua, target, options, modifiers) {\n        if (options === void 0) { options = {}; }\n        if (modifiers === void 0) { modifiers = []; }\n        var _this = this;\n        if (!ua.configuration.sessionDescriptionHandlerFactory) {\n            ua.logger.warn(\"Can't build ISC without SDH Factory\");\n            throw new Error(\"ICC Constructor Failed\");\n        }\n        options.params = options.params || {};\n        var anonymous = options.anonymous || false;\n        var fromTag = Utils_1.Utils.newTag();\n        options.params.fromTag = fromTag;\n        /* Do not add ;ob in initial forming dialog requests if the registration over\n        *  the current connection got a GRUU URI.\n        */\n        var contact = ua.contact.toString({\n            anonymous: anonymous,\n            outbound: anonymous ? !ua.contact.tempGruu : !ua.contact.pubGruu\n        });\n        var extraHeaders = (options.extraHeaders || []).slice();\n        if (anonymous && ua.configuration.uri) {\n            options.params.fromDisplayName = \"Anonymous\";\n            options.params.fromUri = \"sip:anonymous@anonymous.invalid\";\n            extraHeaders.push(\"P-Preferred-Identity: \" + ua.configuration.uri.toString());\n            extraHeaders.push(\"Privacy: id\");\n        }\n        extraHeaders.push(\"Contact: \" + contact);\n        // this is UA.C.ALLOWED_METHODS, removed to get around circular dependency\n        extraHeaders.push(\"Allow: \" + [\n            \"ACK\",\n            \"CANCEL\",\n            \"INVITE\",\n            \"MESSAGE\",\n            \"BYE\",\n            \"OPTIONS\",\n            \"INFO\",\n            \"NOTIFY\",\n            \"REFER\"\n        ].toString());\n        if (ua.configuration.rel100 === Constants_1.C.supported.REQUIRED) {\n            extraHeaders.push(\"Require: 100rel\");\n        }\n        if (ua.configuration.replaces === Constants_1.C.supported.REQUIRED) {\n            extraHeaders.push(\"Require: replaces\");\n        }\n        options.extraHeaders = extraHeaders;\n        _this = _super.call(this, ua.configuration.sessionDescriptionHandlerFactory) || this;\n        ClientContext_1.ClientContext.initializer(_this, ua, Constants_1.C.INVITE, target, options);\n        _this.earlyMediaSessionDescriptionHandlers = new Map();\n        _this.type = Enums_1.TypeStrings.InviteClientContext;\n        _this.passedOptions = options; // Save for later to use with refer\n        _this.sessionDescriptionHandlerOptions = options.sessionDescriptionHandlerOptions || {};\n        _this.modifiers = modifiers;\n        _this.inviteWithoutSdp = options.inviteWithoutSdp || false;\n        // Set anonymous property\n        _this.anonymous = options.anonymous || false;\n        // Custom data to be sent either in INVITE or in ACK\n        _this.renderbody = options.renderbody || undefined;\n        _this.rendertype = options.rendertype || \"text/plain\";\n        // Session parameter initialization\n        _this.fromTag = fromTag;\n        _this.contact = contact;\n        // Check Session Status\n        if (_this.status !== Enums_1.SessionStatus.STATUS_NULL) {\n            throw new Exceptions_1.Exceptions.InvalidStateError(_this.status);\n        }\n        // OutgoingSession specific parameters\n        _this.isCanceled = false;\n        _this.received100 = false;\n        _this.method = Constants_1.C.INVITE;\n        _this.logger = ua.getLogger(\"sip.inviteclientcontext\");\n        ua.applicants[_this.toString()] = _this;\n        _this.id = _this.request.callId + _this.fromTag;\n        _this.onInfo = options.onInfo;\n        _this.errorListener = _this.onTransportError.bind(_this);\n        if (ua.transport) {\n            ua.transport.on(\"transportError\", _this.errorListener);\n        }\n        return _this;\n    }\n    InviteClientContext.prototype.receiveResponse = function (response) {\n        throw new Error(\"Unimplemented.\");\n    };\n    // hack for getting around ClientContext interface\n    InviteClientContext.prototype.send = function () {\n        this.sendInvite();\n        return this;\n    };\n    InviteClientContext.prototype.invite = function () {\n        var _this = this;\n        // Save the session into the ua sessions collection.\n        // Note: placing in constructor breaks call to request.cancel on close... User does not need this anyway\n        this.ua.sessions[this.id] = this;\n        // This should allow the function to return so that listeners can be set up for these events\n        Promise.resolve().then(function () {\n            // FIXME: There is a race condition where cancel (or terminate) can be called synchronously after invite.\n            if (_this.isCanceled || _this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\n                return;\n            }\n            if (_this.inviteWithoutSdp) {\n                // just send an invite with no sdp...\n                if (_this.renderbody && _this.rendertype) {\n                    _this.request.body = {\n                        body: _this.renderbody,\n                        contentType: _this.rendertype\n                    };\n                }\n                _this.status = Enums_1.SessionStatus.STATUS_INVITE_SENT;\n                _this.send();\n            }\n            else {\n                // Initialize Media Session\n                _this.sessionDescriptionHandler = _this.sessionDescriptionHandlerFactory(_this, _this.ua.configuration.sessionDescriptionHandlerFactoryOptions || {});\n                _this.emit(\"SessionDescriptionHandler-created\", _this.sessionDescriptionHandler);\n                _this.sessionDescriptionHandler.getDescription(_this.sessionDescriptionHandlerOptions, _this.modifiers)\n                    .then(function (description) {\n                    // FIXME: There is a race condition where cancel (or terminate) can be called (a)synchronously after invite.\n                    if (_this.isCanceled || _this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\n                        return;\n                    }\n                    _this.hasOffer = true;\n                    _this.request.body = description;\n                    _this.status = Enums_1.SessionStatus.STATUS_INVITE_SENT;\n                    _this.send();\n                }, function (err) {\n                    if (err.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\n                        _this.logger.log(err.message);\n                        if (err.error) {\n                            _this.logger.log(err.error);\n                        }\n                    }\n                    if (_this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\n                        return;\n                    }\n                    _this.failed(undefined, Constants_1.C.causes.WEBRTC_ERROR);\n                    _this.terminated(undefined, Constants_1.C.causes.WEBRTC_ERROR);\n                });\n            }\n        });\n        return this;\n    };\n    InviteClientContext.prototype.cancel = function (options) {\n        if (options === void 0) { options = {}; }\n        // Check Session Status\n        if (this.status === Enums_1.SessionStatus.STATUS_TERMINATED || this.status === Enums_1.SessionStatus.STATUS_CONFIRMED) {\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\n        }\n        if (this.isCanceled) {\n            throw new Exceptions_1.Exceptions.InvalidStateError(Enums_1.SessionStatus.STATUS_CANCELED);\n        }\n        this.isCanceled = true;\n        this.logger.log(\"Canceling session\");\n        var cancelReason = Utils_1.Utils.getCancelReason(options.statusCode, options.reasonPhrase);\n        options.extraHeaders = (options.extraHeaders || []).slice();\n        if (this.outgoingInviteRequest) {\n            this.logger.warn(\"Canceling session before it was created\");\n            this.outgoingInviteRequest.cancel(cancelReason, options);\n        }\n        return this.canceled();\n    };\n    InviteClientContext.prototype.terminate = function (options) {\n        if (this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\n            return this;\n        }\n        if (this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK || this.status === Enums_1.SessionStatus.STATUS_CONFIRMED) {\n            this.bye(options);\n        }\n        else {\n            this.cancel(options);\n        }\n        return this;\n    };\n    /**\n     * 13.2.1 Creating the Initial INVITE\n     *\n     * Since the initial INVITE represents a request outside of a dialog,\n     * its construction follows the procedures of Section 8.1.1.  Additional\n     * processing is required for the specific case of INVITE.\n     *\n     * An Allow header field (Section 20.5) SHOULD be present in the INVITE.\n     * It indicates what methods can be invoked within a dialog, on the UA\n     * sending the INVITE, for the duration of the dialog.  For example, a\n     * UA capable of receiving INFO requests within a dialog [34] SHOULD\n     * include an Allow header field listing the INFO method.\n     *\n     * A Supported header field (Section 20.37) SHOULD be present in the\n     * INVITE.  It enumerates all the extensions understood by the UAC.\n     *\n     * An Accept (Section 20.1) header field MAY be present in the INVITE.\n     * It indicates which Content-Types are acceptable to the UA, in both\n     * the response received by it, and in any subsequent requests sent to\n     * it within dialogs established by the INVITE.  The Accept header field\n     * is especially useful for indicating support of various session\n     * description formats.\n     *\n     * The UAC MAY add an Expires header field (Section 20.19) to limit the\n     * validity of the invitation.  If the time indicated in the Expires\n     * header field is reached and no final answer for the INVITE has been\n     * received, the UAC core SHOULD generate a CANCEL request for the\n     * INVITE, as per Section 9.\n     *\n     * A UAC MAY also find it useful to add, among others, Subject (Section\n     * 20.36), Organization (Section 20.25) and User-Agent (Section 20.41)\n     * header fields.  They all contain information related to the INVITE.\n     *\n     * The UAC MAY choose to add a message body to the INVITE.  Section\n     * 8.1.1.10 deals with how to construct the header fields -- Content-\n     * Type among others -- needed to describe the message body.\n     *\n     * https://tools.ietf.org/html/rfc3261#section-13.2.1\n     */\n    InviteClientContext.prototype.sendInvite = function () {\n        //    There are special rules for message bodies that contain a session\n        //    description - their corresponding Content-Disposition is \"session\".\n        //    SIP uses an offer/answer model where one UA sends a session\n        //    description, called the offer, which contains a proposed description\n        //    of the session.  The offer indicates the desired communications means\n        //    (audio, video, games), parameters of those means (such as codec\n        //    types) and addresses for receiving media from the answerer.  The\n        //    other UA responds with another session description, called the\n        //    answer, which indicates which communications means are accepted, the\n        //    parameters that apply to those means, and addresses for receiving\n        //    media from the offerer. An offer/answer exchange is within the\n        //    context of a dialog, so that if a SIP INVITE results in multiple\n        //    dialogs, each is a separate offer/answer exchange.  The offer/answer\n        //    model defines restrictions on when offers and answers can be made\n        //    (for example, you cannot make a new offer while one is in progress).\n        //    This results in restrictions on where the offers and answers can\n        //    appear in SIP messages.  In this specification, offers and answers\n        //    can only appear in INVITE requests and responses, and ACK.  The usage\n        //    of offers and answers is further restricted.  For the initial INVITE\n        //    transaction, the rules are:\n        //\n        //       o  The initial offer MUST be in either an INVITE or, if not there,\n        //          in the first reliable non-failure message from the UAS back to\n        //          the UAC.  In this specification, that is the final 2xx\n        //          response.\n        //\n        //       o  If the initial offer is in an INVITE, the answer MUST be in a\n        //          reliable non-failure message from UAS back to UAC which is\n        //          correlated to that INVITE.  For this specification, that is\n        //          only the final 2xx response to that INVITE.  That same exact\n        //          answer MAY also be placed in any provisional responses sent\n        //          prior to the answer.  The UAC MUST treat the first session\n        //          description it receives as the answer, and MUST ignore any\n        //          session descriptions in subsequent responses to the initial\n        //          INVITE.\n        //\n        //       o  If the initial offer is in the first reliable non-failure\n        //          message from the UAS back to UAC, the answer MUST be in the\n        //          acknowledgement for that message (in this specification, ACK\n        //          for a 2xx response).\n        //\n        //       o  After having sent or received an answer to the first offer, the\n        //          UAC MAY generate subsequent offers in requests based on rules\n        //          specified for that method, but only if it has received answers\n        //          to any previous offers, and has not sent any offers to which it\n        //          hasn't gotten an answer.\n        //\n        //       o  Once the UAS has sent or received an answer to the initial\n        //          offer, it MUST NOT generate subsequent offers in any responses\n        //          to the initial INVITE.  This means that a UAS based on this\n        //          specification alone can never generate subsequent offers until\n        //          completion of the initial transaction.\n        //\n        // https://tools.ietf.org/html/rfc3261#section-13.2.1\n        var _this = this;\n        // 5 The Offer/Answer Model and PRACK\n        //\n        //    RFC 3261 describes guidelines for the sets of messages in which\n        //    offers and answers [3] can appear.  Based on those guidelines, this\n        //    extension provides additional opportunities for offer/answer\n        //    exchanges.\n        //    If the INVITE contained an offer, the UAS MAY generate an answer in a\n        //    reliable provisional response (assuming these are supported by the\n        //    UAC).  That results in the establishment of the session before\n        //    completion of the call.  Similarly, if a reliable provisional\n        //    response is the first reliable message sent back to the UAC, and the\n        //    INVITE did not contain an offer, one MUST appear in that reliable\n        //    provisional response.\n        //    If the UAC receives a reliable provisional response with an offer\n        //    (this would occur if the UAC sent an INVITE without an offer, in\n        //    which case the first reliable provisional response will contain the\n        //    offer), it MUST generate an answer in the PRACK.  If the UAC receives\n        //    a reliable provisional response with an answer, it MAY generate an\n        //    additional offer in the PRACK.  If the UAS receives a PRACK with an\n        //    offer, it MUST place the answer in the 2xx to the PRACK.\n        //    Once an answer has been sent or received, the UA SHOULD establish the\n        //    session based on the parameters of the offer and answer, even if the\n        //    original INVITE itself has not been responded to.\n        //    If the UAS had placed a session description in any reliable\n        //    provisional response that is unacknowledged when the INVITE is\n        //    accepted, the UAS MUST delay sending the 2xx until the provisional\n        //    response is acknowledged.  Otherwise, the reliability of the 1xx\n        //    cannot be guaranteed, and reliability is needed for proper operation\n        //    of the offer/answer exchange.\n        //    All user agents that support this extension MUST support all\n        //    offer/answer exchanges that are possible based on the rules in\n        //    Section 13.2 of RFC 3261, based on the existence of INVITE and PRACK\n        //    as requests, and 2xx and reliable 1xx as non-failure reliable\n        //    responses.\n        //\n        // https://tools.ietf.org/html/rfc3262#section-5\n        ////\n        // The Offer/Answer Model Implementation\n        //\n        // The offer/answer model is straight forward, but one MUST READ the specifications...\n        //\n        // 13.2.1 Creating the Initial INVITE (paragraph 8 in particular)\n        // https://tools.ietf.org/html/rfc3261#section-13.2.1\n        //\n        // 5 The Offer/Answer Model and PRACK\n        // https://tools.ietf.org/html/rfc3262#section-5\n        //\n        // Session Initiation Protocol (SIP) Usage of the Offer/Answer Model\n        // https://tools.ietf.org/html/rfc6337\n        //\n        // *** IMPORTANT IMPLEMENTATION CHOICES ***\n        //\n        // TLDR...\n        //\n        //  1) Only one offer/answer exchange permitted during initial INVITE.\n        //  2) No \"early media\" if the initial offer is in an INVITE.\n        //\n        //\n        // 1) Initial Offer/Answer Restriction.\n        //\n        // Our implementation replaces the following bullet point...\n        //\n        // o  After having sent or received an answer to the first offer, the\n        //    UAC MAY generate subsequent offers in requests based on rules\n        //    specified for that method, but only if it has received answers\n        //    to any previous offers, and has not sent any offers to which it\n        //    hasn't gotten an answer.\n        // https://tools.ietf.org/html/rfc3261#section-13.2.1\n        //\n        // ...with...\n        //\n        // o  After having sent or received an answer to the first offer, the\n        //    UAC MUST NOT generate subsequent offers in requests based on rules\n        //    specified for that method.\n        //\n        // ...which in combination with this bullet point...\n        //\n        // o  Once the UAS has sent or received an answer to the initial\n        //    offer, it MUST NOT generate subsequent offers in any responses\n        //    to the initial INVITE.  This means that a UAS based on this\n        //    specification alone can never generate subsequent offers until\n        //    completion of the initial transaction.\n        // https://tools.ietf.org/html/rfc3261#section-13.2.1\n        //\n        // ...ensures that EXACTLY ONE offer/answer exchange will occur\n        // during an initial out of dialog INVITE request made by our UAC.\n        //\n        //\n        // 2) Early Media Restriction.\n        //\n        // While our implementation adheres to the following bullet point...\n        //\n        // o  If the initial offer is in an INVITE, the answer MUST be in a\n        //    reliable non-failure message from UAS back to UAC which is\n        //    correlated to that INVITE.  For this specification, that is\n        //    only the final 2xx response to that INVITE.  That same exact\n        //    answer MAY also be placed in any provisional responses sent\n        //    prior to the answer.  The UAC MUST treat the first session\n        //    description it receives as the answer, and MUST ignore any\n        //    session descriptions in subsequent responses to the initial\n        //    INVITE.\n        // https://tools.ietf.org/html/rfc3261#section-13.2.1\n        //\n        // We have made the following implementation decision with regard to early media...\n        //\n        // o  If the initial offer is in the INVITE, the answer from the\n        //    UAS back to the UAC will establish a media session only\n        //    only after the final 2xx response to that INVITE is received.\n        //\n        // The reason for this decision is rooted in a restriction currently\n        // inherent in WebRTC. Specifically, while a SIP INVITE request with an\n        // initial offer may fork resulting in more than one provisional answer,\n        // there is currently no easy/good way to to \"fork\" an offer generated\n        // by a peer connection. In particular, a WebRTC offer currently may only\n        // be matched with one answer and we have no good way to know which\n        // \"provisional answer\" is going to be the \"final answer\". So we have\n        // decided to punt and not create any \"early media\" sessions in this case.\n        //\n        // The upshot is that if you want \"early media\", you must not put the\n        // initial offer in the INVITE. Instead, force the UAS to provide the\n        // initial offer by sending an INVITE without an offer. In the WebRTC\n        // case this allows us to create a unique peer connection with a unique\n        // answer for every provisional offer with \"early media\" on all of them.\n        ////\n        ////\n        // ROADMAP: The Offer/Answer Model Implementation\n        //\n        // The \"no early media if offer in INVITE\" implementation is not a\n        // welcome one. The masses want it. The want it and they want it\n        // to work for WebRTC (so they want to have their cake and eat too).\n        //\n        // So while we currently cannot make the offer in INVITE+forking+webrtc\n        // case work, we decided to do the following...\n        //\n        // 1) modify SDH Factory to provide an initial offer without giving us the SDH, and then...\n        // 2) stick that offer in the initial INVITE, and when 183 with initial answer is received...\n        // 3) ask SDH Factory if it supports \"earlyRemoteAnswer\"\n        //   a) if true, ask SDH Factory to createSDH(localOffer).then((sdh) => sdh.setDescription(remoteAnswer)\n        //   b) if false, defer getting a SDH until 2xx response is received\n        //\n        // Our supplied WebRTC SDH will default to behavior 3b which works in forking environment (without)\n        // early media if initial offer is in the INVITE). We will, however, provide an \"inviteWillNotFork\"\n        // option which if set to \"true\" will have our supplied WebRTC SDH behave in the 3a manner.\n        // That will result in\n        //  - early media working with initial offer in the INVITE, and...\n        //  - if the INVITE forks, the session terminating with an ERROR that reads like\n        //    \"You set 'inviteWillNotFork' to true but the INVITE forked. You can't eat your cake, and have it too.\"\n        //  - furthermore, we accept that users will report that error to us as \"bug\" regardless\n        //\n        // So, SDH Factory is going to end up with a new interface along the lines of...\n        //\n        // interface SessionDescriptionHandlerFactory {\n        //   makeLocalOffer(): Promise<ContentTypeAndBody>;\n        //   makeSessionDescriptionHandler(\n        //     initialOffer: ContentTypeAndBody, offerType: \"local\" | \"remote\"\n        //   ): Promise<SessionDescriptionHandler>;\n        //   supportsEarlyRemoteAnswer: boolean;\n        //   supportsContentType(contentType: string): boolean;\n        //   getDescription(description: ContentTypeAndBody): Promise<ContentTypeAndBody>\n        //   setDescription(description: ContentTypeAndBody): Promise<void>\n        // }\n        //\n        // We should be able to get rid of all the hasOffer/hasAnswer tracking code and otherwise code\n        // it up to the same interaction with the SDH Factory and SDH regardless of signaling scenario.\n        ////\n        // Send the INVITE request.\n        this.outgoingInviteRequest = this.ua.userAgentCore.invite(this.request, {\n            onAccept: function (inviteResponse) { return _this.onAccept(inviteResponse); },\n            onProgress: function (inviteResponse) { return _this.onProgress(inviteResponse); },\n            onRedirect: function (inviteResponse) { return _this.onRedirect(inviteResponse); },\n            onReject: function (inviteResponse) { return _this.onReject(inviteResponse); },\n            onTrying: function (inviteResponse) { return _this.onTrying(inviteResponse); }\n        });\n    };\n    InviteClientContext.prototype.ackAndBye = function (inviteResponse, session, statusCode, reasonPhrase) {\n        if (!this.ua.userAgentCore) {\n            throw new Error(\"Method requires user agent core.\");\n        }\n        var extraHeaders = [];\n        if (statusCode) {\n            extraHeaders.push(\"Reason: \" + Utils_1.Utils.getReasonHeaderValue(statusCode, reasonPhrase));\n        }\n        var outgoingAckRequest = inviteResponse.ack();\n        this.emit(\"ack\", outgoingAckRequest.message);\n        var outgoingByeRequest = session.bye(undefined, { extraHeaders: extraHeaders });\n        this.emit(\"bye\", outgoingByeRequest.message);\n    };\n    InviteClientContext.prototype.disposeEarlyMedia = function () {\n        if (!this.earlyMediaSessionDescriptionHandlers) {\n            throw new Error(\"Early media session description handlers undefined.\");\n        }\n        this.earlyMediaSessionDescriptionHandlers.forEach(function (sessionDescriptionHandler) {\n            sessionDescriptionHandler.close();\n        });\n    };\n    /**\n     * Handle final response to initial INVITE.\n     * @param inviteResponse 2xx response.\n     */\n    InviteClientContext.prototype.onAccept = function (inviteResponse) {\n        var _this = this;\n        if (!this.earlyMediaSessionDescriptionHandlers) {\n            throw new Error(\"Early media session description handlers undefined.\");\n        }\n        var response = inviteResponse.message;\n        var session = inviteResponse.session;\n        // Our transaction layer is \"non-standard\" in that it will only\n        // pass us a 2xx response once per branch, so there is no need to\n        // worry about dealing with 2xx retransmissions. However, we can\n        // and do still get 2xx responses for multiple branches (when an\n        // INVITE is forked) which may create multiple confirmed dialogs.\n        // Herein we are acking and sending a bye to any confirmed dialogs\n        // which arrive beyond the first one. This is the desired behavior\n        // for most applications (but certainly not all).\n        // If we already received a confirmed dialog, ack & bye this session.\n        if (this.session) {\n            this.ackAndBye(inviteResponse, session);\n            return;\n        }\n        // If the user requested cancellation, ack & bye this session.\n        if (this.isCanceled) {\n            this.ackAndBye(inviteResponse, session);\n            this.emit(\"bye\", this.request); // FIXME: Ported this odd second \"bye\" emit\n            return;\n        }\n        // Ported behavior.\n        if (response.hasHeader(\"P-Asserted-Identity\")) {\n            this.assertedIdentity = core_1.Grammar.nameAddrHeaderParse(response.getHeader(\"P-Asserted-Identity\"));\n        }\n        // We have a confirmed dialog.\n        this.session = session;\n        this.session.delegate = {\n            onAck: function (ackRequest) { return _this.onAck(ackRequest); },\n            onBye: function (byeRequest) { return _this.receiveRequest(byeRequest); },\n            onInfo: function (infoRequest) { return _this.receiveRequest(infoRequest); },\n            onInvite: function (inviteRequest) { return _this.receiveRequest(inviteRequest); },\n            onMessage: function (messageRequest) { return _this.receiveRequest(messageRequest); },\n            onNotify: function (notifyRequest) { return _this.receiveRequest(notifyRequest); },\n            onPrack: function (prackRequest) { return _this.receiveRequest(prackRequest); },\n            onRefer: function (referRequest) { return _this.receiveRequest(referRequest); },\n        };\n        switch (session.signalingState) {\n            case core_1.SignalingState.Initial:\n                // INVITE without Offer, so MUST have Offer at this point, so invalid state.\n                this.ackAndBye(inviteResponse, session, 400, \"Missing session description\");\n                this.failed(response, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\n                break;\n            case core_1.SignalingState.HaveLocalOffer:\n                // INVITE with Offer, so MUST have Answer at this point, so invalid state.\n                this.ackAndBye(inviteResponse, session, 400, \"Missing session description\");\n                this.failed(response, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\n                break;\n            case core_1.SignalingState.HaveRemoteOffer:\n                // INVITE without Offer, received offer in 2xx, so MUST send Answer in ACK.\n                var sdh_1 = this.sessionDescriptionHandlerFactory(this, this.ua.configuration.sessionDescriptionHandlerFactoryOptions || {});\n                this.sessionDescriptionHandler = sdh_1;\n                this.emit(\"SessionDescriptionHandler-created\", this.sessionDescriptionHandler);\n                if (!sdh_1.hasDescription(response.getHeader(\"Content-Type\") || \"\")) {\n                    this.ackAndBye(inviteResponse, session, 400, \"Missing session description\");\n                    this.failed(response, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\n                    break;\n                }\n                this.hasOffer = true;\n                sdh_1\n                    .setDescription(response.body, this.sessionDescriptionHandlerOptions, this.modifiers)\n                    .then(function () { return sdh_1.getDescription(_this.sessionDescriptionHandlerOptions, _this.modifiers); })\n                    .then(function (description) {\n                    if (_this.isCanceled || _this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\n                        return;\n                    }\n                    _this.status = Enums_1.SessionStatus.STATUS_CONFIRMED;\n                    _this.hasAnswer = true;\n                    var body = {\n                        contentDisposition: \"session\", contentType: description.contentType, content: description.body\n                    };\n                    var ackRequest = inviteResponse.ack({ body: body });\n                    _this.emit(\"ack\", ackRequest.message);\n                    _this.accepted(response);\n                })\n                    .catch(function (e) {\n                    if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\n                        _this.logger.warn(\"invalid description\");\n                        _this.logger.warn(e.toString());\n                        // TODO: This message is inconsistent\n                        _this.ackAndBye(inviteResponse, session, 488, \"Invalid session description\");\n                        _this.failed(response, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\n                    }\n                    else {\n                        throw e;\n                    }\n                });\n                break;\n            case core_1.SignalingState.Stable:\n                // This session has completed an initial offer/answer exchange...\n                var options_1;\n                if (this.renderbody && this.rendertype) {\n                    options_1 = { body: { contentDisposition: \"render\", contentType: this.rendertype, content: this.renderbody } };\n                }\n                // If INVITE with Offer and we have been waiting till now to apply the answer.\n                if (this.hasOffer && !this.hasAnswer) {\n                    if (!this.sessionDescriptionHandler) {\n                        throw new Error(\"Session description handler undefined.\");\n                    }\n                    var answer = session.answer;\n                    if (!answer) {\n                        throw new Error(\"Answer is undefined.\");\n                    }\n                    this.sessionDescriptionHandler\n                        .setDescription(answer.content, this.sessionDescriptionHandlerOptions, this.modifiers)\n                        .then(function () {\n                        _this.hasAnswer = true;\n                        _this.status = Enums_1.SessionStatus.STATUS_CONFIRMED;\n                        var ackRequest = inviteResponse.ack(options_1);\n                        _this.emit(\"ack\", ackRequest.message);\n                        _this.accepted(response);\n                    })\n                        .catch(function (error) {\n                        _this.logger.error(error);\n                        _this.ackAndBye(inviteResponse, session, 488, \"Not Acceptable Here\");\n                        _this.failed(response, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\n                        // FIME: DON'T EAT UNHANDLED ERRORS!\n                    });\n                }\n                else {\n                    // Otherwise INVITE with or without Offer and we have already completed the initial exchange.\n                    this.sessionDescriptionHandler = this.earlyMediaSessionDescriptionHandlers.get(session.id);\n                    if (!this.sessionDescriptionHandler) {\n                        throw new Error(\"Session description handler undefined.\");\n                    }\n                    this.earlyMediaSessionDescriptionHandlers.delete(session.id);\n                    this.hasOffer = true;\n                    this.hasAnswer = true;\n                    this.status = Enums_1.SessionStatus.STATUS_CONFIRMED;\n                    var ackRequest = inviteResponse.ack();\n                    this.emit(\"ack\", ackRequest.message);\n                    this.accepted(response);\n                }\n                break;\n            case core_1.SignalingState.Closed:\n                // Dialog has terminated.\n                break;\n            default:\n                throw new Error(\"Unknown session signaling state.\");\n        }\n        this.disposeEarlyMedia();\n    };\n    /**\n     * Handle provisional response to initial INVITE.\n     * @param inviteResponse 1xx response.\n     */\n    InviteClientContext.prototype.onProgress = function (inviteResponse) {\n        var _this = this;\n        // Ported - User requested cancellation.\n        if (this.isCanceled) {\n            return;\n        }\n        if (!this.outgoingInviteRequest) {\n            throw new Error(\"Outgoing INVITE request undefined.\");\n        }\n        if (!this.earlyMediaSessionDescriptionHandlers) {\n            throw new Error(\"Early media session description handlers undefined.\");\n        }\n        var response = inviteResponse.message;\n        var session = inviteResponse.session;\n        // Ported - Set status.\n        this.status = Enums_1.SessionStatus.STATUS_1XX_RECEIVED;\n        // Ported - Set assertedIdentity.\n        if (response.hasHeader(\"P-Asserted-Identity\")) {\n            this.assertedIdentity = core_1.Grammar.nameAddrHeaderParse(response.getHeader(\"P-Asserted-Identity\"));\n        }\n        // The provisional response MUST establish a dialog if one is not yet created.\n        // https://tools.ietf.org/html/rfc3262#section-4\n        if (!session) {\n            // A response with a to tag MUST create a session (should never get here).\n            throw new Error(\"Session undefined.\");\n        }\n        // If a provisional response is received for an initial request, and\n        // that response contains a Require header field containing the option\n        // tag 100rel, the response is to be sent reliably.  If the response is\n        // a 100 (Trying) (as opposed to 101 to 199), this option tag MUST be\n        // ignored, and the procedures below MUST NOT be used.\n        // https://tools.ietf.org/html/rfc3262#section-4\n        var requireHeader = response.getHeader(\"require\");\n        var rseqHeader = response.getHeader(\"rseq\");\n        var rseq = requireHeader && requireHeader.includes(\"100rel\") && rseqHeader ? Number(rseqHeader) : undefined;\n        var responseReliable = !!rseq;\n        var extraHeaders = [];\n        if (responseReliable) {\n            extraHeaders.push(\"RAck: \" + response.getHeader(\"rseq\") + \" \" + response.getHeader(\"cseq\"));\n        }\n        // INVITE without Offer and session still has no offer (and no answer).\n        if (session.signalingState === core_1.SignalingState.Initial) {\n            // Similarly, if a reliable provisional\n            // response is the first reliable message sent back to the UAC, and the\n            // INVITE did not contain an offer, one MUST appear in that reliable\n            // provisional response.\n            // https://tools.ietf.org/html/rfc3262#section-5\n            if (responseReliable) {\n                this.logger.warn(\"First reliable provisional response received MUST contain an offer when INVITE does not contain an offer.\");\n                // FIXME: Known popular UA's currently end up here...\n                inviteResponse.prack({ extraHeaders: extraHeaders });\n            }\n            this.emit(\"progress\", response);\n            return;\n        }\n        // INVITE with Offer and session only has that initial local offer.\n        if (session.signalingState === core_1.SignalingState.HaveLocalOffer) {\n            if (responseReliable) {\n                inviteResponse.prack({ extraHeaders: extraHeaders });\n            }\n            this.emit(\"progress\", response);\n            return;\n        }\n        // INVITE without Offer and received initial offer in provisional response\n        if (session.signalingState === core_1.SignalingState.HaveRemoteOffer) {\n            // The initial offer MUST be in either an INVITE or, if not there,\n            // in the first reliable non-failure message from the UAS back to\n            // the UAC.\n            // https://tools.ietf.org/html/rfc3261#section-13.2.1\n            // According to Section 13.2.1 of [RFC3261], 'The first reliable\n            // non-failure message' must have an offer if there is no offer in the\n            // INVITE request.  This means that the User Agent (UA) that receives\n            // the INVITE request without an offer must include an offer in the\n            // first reliable response with 100rel extension.  If no reliable\n            // provisional response has been sent, the User Agent Server (UAS) must\n            // include an offer when sending 2xx response.\n            // https://tools.ietf.org/html/rfc6337#section-2.2\n            if (!responseReliable) {\n                this.logger.warn(\"Non-reliable provisional response MUST NOT contain an initial offer, discarding response.\");\n                return;\n            }\n            // If the initial offer is in the first reliable non-failure\n            // message from the UAS back to UAC, the answer MUST be in the\n            // acknowledgement for that message\n            var sdh_2 = this.sessionDescriptionHandlerFactory(this, this.ua.configuration.sessionDescriptionHandlerFactoryOptions || {});\n            this.emit(\"SessionDescriptionHandler-created\", sdh_2);\n            this.earlyMediaSessionDescriptionHandlers.set(session.id, sdh_2);\n            sdh_2\n                .setDescription(response.body, this.sessionDescriptionHandlerOptions, this.modifiers)\n                .then(function () { return sdh_2.getDescription(_this.sessionDescriptionHandlerOptions, _this.modifiers); })\n                .then(function (description) {\n                var body = {\n                    contentDisposition: \"session\", contentType: description.contentType, content: description.body\n                };\n                inviteResponse.prack({ extraHeaders: extraHeaders, body: body });\n                _this.status = Enums_1.SessionStatus.STATUS_EARLY_MEDIA;\n                _this.emit(\"progress\", response);\n            })\n                .catch(function (error) {\n                if (_this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\n                    return;\n                }\n                _this.failed(undefined, Constants_1.C.causes.WEBRTC_ERROR);\n                _this.terminated(undefined, Constants_1.C.causes.WEBRTC_ERROR);\n            });\n            return;\n        }\n        // This session has completed an initial offer/answer exchange, so...\n        // - INVITE with SDP and this provisional response MAY be reliable\n        // - INVITE without SDP and this provisional response MAY be reliable\n        if (session.signalingState === core_1.SignalingState.Stable) {\n            if (responseReliable) {\n                inviteResponse.prack({ extraHeaders: extraHeaders });\n            }\n            // Note: As documented, no early media if offer was in INVITE, so nothing to be done.\n            // FIXME: TODO: Add a flag/hack to allow early media in this case. There are people\n            //              in non-forking environments (think straight to FreeSWITCH) who want\n            //              early media on a 183. Not sure how to actually make it work, basically\n            //              something like...\n            if (false) {}\n            this.emit(\"progress\", response);\n            return;\n        }\n    };\n    /**\n     * Handle final response to initial INVITE.\n     * @param inviteResponse 3xx response.\n     */\n    InviteClientContext.prototype.onRedirect = function (inviteResponse) {\n        this.disposeEarlyMedia();\n        var response = inviteResponse.message;\n        var statusCode = response.statusCode;\n        var cause = Utils_1.Utils.sipErrorCause(statusCode || 0);\n        this.rejected(response, cause);\n        this.failed(response, cause);\n        this.terminated(response, cause);\n    };\n    /**\n     * Handle final response to initial INVITE.\n     * @param inviteResponse 4xx, 5xx, or 6xx response.\n     */\n    InviteClientContext.prototype.onReject = function (inviteResponse) {\n        this.disposeEarlyMedia();\n        var response = inviteResponse.message;\n        var statusCode = response.statusCode;\n        var cause = Utils_1.Utils.sipErrorCause(statusCode || 0);\n        this.rejected(response, cause);\n        this.failed(response, cause);\n        this.terminated(response, cause);\n    };\n    /**\n     * Handle final response to initial INVITE.\n     * @param inviteResponse 100 response.\n     */\n    InviteClientContext.prototype.onTrying = function (inviteResponse) {\n        this.received100 = true;\n        this.emit(\"progress\", inviteResponse.message);\n    };\n    return InviteClientContext;\n}(Session));\nexports.InviteClientContext = InviteClientContext;\n\n\n/***/ }),\n/* 90 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar events_1 = __webpack_require__(31);\nvar Constants_1 = __webpack_require__(80);\nvar Enums_1 = __webpack_require__(82);\nvar Exceptions_1 = __webpack_require__(84);\nvar Utils_1 = __webpack_require__(83);\nvar DTMFValidator_1 = __webpack_require__(91);\n/**\n * @class DTMF\n * @param {SIP.Session} session\n */\nvar DTMF = /** @class */ (function (_super) {\n    tslib_1.__extends(DTMF, _super);\n    function DTMF(session, tone, options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this) || this;\n        _this.C = {\n            MIN_DURATION: 70,\n            MAX_DURATION: 6000,\n            DEFAULT_DURATION: 100,\n            MIN_INTER_TONE_GAP: 50,\n            DEFAULT_INTER_TONE_GAP: 500\n        };\n        _this.type = Enums_1.TypeStrings.DTMF;\n        if (tone === undefined) {\n            throw new TypeError(\"Not enough arguments\");\n        }\n        _this.logger = session.ua.getLogger(\"sip.invitecontext.dtmf\", session.id);\n        _this.owner = session;\n        var moreThanOneTone = false;\n        // If tone is invalid, it will automatically generate an exception.\n        // Otherwise, it will return the tone in the correct format.\n        _this.tone = DTMFValidator_1.DTMFValidator.validate(tone, moreThanOneTone);\n        var duration = options.duration;\n        var interToneGap = options.interToneGap;\n        // Check duration\n        if (duration && !Utils_1.Utils.isDecimal(duration)) {\n            throw new TypeError(\"Invalid tone duration: \" + duration);\n        }\n        else if (!duration) {\n            duration = _this.C.DEFAULT_DURATION;\n        }\n        else if (duration < _this.C.MIN_DURATION) {\n            _this.logger.warn(\"'duration' value is lower than the minimum allowed, setting it to \" +\n                _this.C.MIN_DURATION + \" milliseconds\");\n            duration = _this.C.MIN_DURATION;\n        }\n        else if (duration > _this.C.MAX_DURATION) {\n            _this.logger.warn(\"'duration' value is greater than the maximum allowed, setting it to \" +\n                _this.C.MAX_DURATION + \" milliseconds\");\n            duration = _this.C.MAX_DURATION;\n        }\n        else {\n            duration = Math.abs(duration);\n        }\n        _this.duration = duration;\n        // Check interToneGap\n        if (interToneGap && !Utils_1.Utils.isDecimal(interToneGap)) {\n            throw new TypeError(\"Invalid interToneGap: \" + interToneGap);\n        }\n        else if (!interToneGap) {\n            interToneGap = _this.C.DEFAULT_INTER_TONE_GAP;\n        }\n        else if (interToneGap < _this.C.MIN_INTER_TONE_GAP) {\n            _this.logger.warn(\"'interToneGap' value is lower than the minimum allowed, setting it to \" +\n                _this.C.MIN_INTER_TONE_GAP + \" milliseconds\");\n            interToneGap = _this.C.MIN_INTER_TONE_GAP;\n        }\n        else {\n            interToneGap = Math.abs(interToneGap);\n        }\n        _this.interToneGap = interToneGap;\n        return _this;\n    }\n    DTMF.prototype.send = function (options) {\n        if (options === void 0) { options = {}; }\n        // Check RTCSession Status\n        if (this.owner.status !== Enums_1.SessionStatus.STATUS_CONFIRMED &&\n            this.owner.status !== Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK) {\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.owner.status);\n        }\n        // Get DTMF options\n        var extraHeaders = options.extraHeaders ? options.extraHeaders.slice() : [];\n        var body = {\n            contentType: \"application/dtmf-relay\",\n            body: \"Signal= \" + this.tone + \"\\r\\nDuration= \" + this.duration\n        };\n        if (this.owner.session) {\n            var request = this.owner.session.info(undefined, {\n                extraHeaders: extraHeaders,\n                body: Utils_1.Utils.fromBodyObj(body)\n            });\n            this.owner.emit(\"dtmf\", request.message, this);\n            return;\n        }\n    };\n    DTMF.prototype.init_incoming = function (request) {\n        request.accept();\n        if (!this.tone || !this.duration) {\n            this.logger.warn(\"invalid INFO DTMF received, discarded\");\n        }\n        else {\n            this.owner.emit(\"dtmf\", request.message, this);\n        }\n    };\n    DTMF.prototype.receiveResponse = function (response) {\n        var statusCode = response && response.statusCode ? response.statusCode : 0;\n        switch (true) {\n            case /^1[0-9]{2}$/.test(statusCode.toString()):\n                // Ignore provisional responses.\n                break;\n            case /^2[0-9]{2}$/.test(statusCode.toString()):\n                this.emit(\"succeeded\", {\n                    originator: \"remote\",\n                    response: response\n                });\n                break;\n            default:\n                var cause = Utils_1.Utils.sipErrorCause(statusCode);\n                this.emit(\"failed\", response, cause);\n                break;\n        }\n    };\n    DTMF.prototype.onRequestTimeout = function () {\n        this.emit(\"failed\", undefined, Constants_1.C.causes.REQUEST_TIMEOUT);\n        this.owner.onRequestTimeout();\n    };\n    DTMF.prototype.onTransportError = function () {\n        this.emit(\"failed\", undefined, Constants_1.C.causes.CONNECTION_ERROR);\n        this.owner.onTransportError();\n    };\n    DTMF.prototype.onDialogError = function (response) {\n        this.emit(\"failed\", response, Constants_1.C.causes.DIALOG_ERROR);\n        this.owner.onDialogError(response);\n    };\n    return DTMF;\n}(events_1.EventEmitter));\nexports.DTMF = DTMF;\n\n\n/***/ }),\n/* 91 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DTMFValidator = /** @class */ (function () {\n    function DTMFValidator() {\n    }\n    DTMFValidator.validate = function (tone, moreThanOneTone) {\n        if (moreThanOneTone === void 0) { moreThanOneTone = true; }\n        // Check tone type\n        if (typeof tone === \"string\") {\n            tone = tone.toUpperCase();\n        }\n        else if (typeof tone === \"number\") {\n            tone = tone.toString();\n        }\n        else {\n            DTMFValidator.generateInvalidToneError(tone);\n        }\n        var regex = moreThanOneTone ? /^[0-9A-D#*,]+$/i : /^[0-9A-D#*]$/i;\n        // Check tone value\n        if (!tone.match(regex)) {\n            DTMFValidator.generateInvalidToneError(tone);\n        }\n        return tone;\n    };\n    DTMFValidator.generateInvalidToneError = function (tone) {\n        var toneForMsg = (!!tone && typeof tone !== \"boolean\" ? tone.toString().toLowerCase() : tone);\n        throw new TypeError(\"Invalid tone(s): \" + toneForMsg);\n    };\n    return DTMFValidator;\n}());\nexports.DTMFValidator = DTMFValidator;\n\n\n/***/ }),\n/* 92 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar events_1 = __webpack_require__(31);\nvar Constants_1 = __webpack_require__(80);\nvar core_1 = __webpack_require__(2);\nvar allowed_methods_1 = __webpack_require__(61);\nvar Enums_1 = __webpack_require__(82);\nvar Utils_1 = __webpack_require__(83);\n/**\n * While this class is named `Subscription`, it is closer to\n * an implementation of a \"subscriber\" as defined in RFC 6665\n * \"SIP-Specific Event Notifications\".\n * https://tools.ietf.org/html/rfc6665\n * @class Class creating a SIP Subscriber.\n */\nvar Subscription = /** @class */ (function (_super) {\n    tslib_1.__extends(Subscription, _super);\n    /**\n     * Constructor.\n     * @param ua User agent.\n     * @param target Subscription target.\n     * @param event Subscription event.\n     * @param options Options bucket.\n     */\n    function Subscription(ua, target, event, options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this) || this;\n        _this.data = {};\n        _this.method = Constants_1.C.SUBSCRIBE;\n        _this.body = undefined;\n        // ClientContext interface\n        _this.type = Enums_1.TypeStrings.Subscription;\n        _this.ua = ua;\n        _this.logger = ua.getLogger(\"sip.subscription\");\n        if (options.body) {\n            _this.body = {\n                body: options.body,\n                contentType: options.contentType ? options.contentType : \"application/sdp\"\n            };\n        }\n        // Target URI\n        var uri = ua.normalizeTarget(target);\n        if (!uri) {\n            throw new TypeError(\"Invalid target: \" + target);\n        }\n        _this.uri = uri;\n        // Subscription event\n        _this.event = event;\n        // Subscription expires\n        if (options.expires === undefined) {\n            _this.expires = 3600;\n        }\n        else if (typeof options.expires !== \"number\") { // pre-typescript type guard\n            ua.logger.warn(\"Option \\\"expires\\\" must be a number. Using default of 3600.\");\n            _this.expires = 3600;\n        }\n        else {\n            _this.expires = options.expires;\n        }\n        // Subscription extra headers\n        _this.extraHeaders = (options.extraHeaders || []).slice();\n        // Subscription context.\n        _this.context = _this.initContext();\n        _this.disposed = false;\n        // ClientContext interface\n        _this.request = _this.context.message;\n        if (!_this.request.from) {\n            throw new Error(\"From undefined.\");\n        }\n        if (!_this.request.to) {\n            throw new Error(\"From undefined.\");\n        }\n        _this.localIdentity = _this.request.from;\n        _this.remoteIdentity = _this.request.to;\n        // Add to UA's collection\n        _this.id = _this.request.callId + _this.request.from.parameters.tag + _this.event;\n        _this.ua.subscriptions[_this.id] = _this;\n        return _this;\n    }\n    /**\n     * Destructor.\n     */\n    Subscription.prototype.dispose = function () {\n        if (this.disposed) {\n            return;\n        }\n        if (this.retryAfterTimer) {\n            clearTimeout(this.retryAfterTimer);\n            this.retryAfterTimer = undefined;\n        }\n        this.context.dispose();\n        this.disposed = true;\n        // Remove from UA's collection\n        delete this.ua.subscriptions[this.id];\n    };\n    Subscription.prototype.on = function (name, callback) {\n        return _super.prototype.on.call(this, name, callback);\n    };\n    Subscription.prototype.emit = function (event) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        return _super.prototype.emit.apply(this, tslib_1.__spreadArrays([event], args));\n    };\n    /**\n     * Gracefully terminate.\n     */\n    Subscription.prototype.close = function () {\n        if (this.disposed) {\n            return;\n        }\n        this.dispose();\n        switch (this.context.state) {\n            case core_1.SubscriptionState.Initial:\n                this.onTerminated();\n                break;\n            case core_1.SubscriptionState.NotifyWait:\n                this.onTerminated();\n                break;\n            case core_1.SubscriptionState.Pending:\n                this.unsubscribe();\n                break;\n            case core_1.SubscriptionState.Active:\n                this.unsubscribe();\n                break;\n            case core_1.SubscriptionState.Terminated:\n                this.onTerminated();\n                break;\n            default:\n                break;\n        }\n    };\n    /**\n     * Send a re-SUBSCRIBE request if there is an \"active\" subscription.\n     */\n    Subscription.prototype.refresh = function () {\n        var _this = this;\n        switch (this.context.state) {\n            case core_1.SubscriptionState.Initial:\n                break;\n            case core_1.SubscriptionState.NotifyWait:\n                break;\n            case core_1.SubscriptionState.Pending:\n                break;\n            case core_1.SubscriptionState.Active:\n                if (this.subscription) {\n                    var request = this.subscription.refresh();\n                    request.delegate = {\n                        onAccept: (function (response) { return _this.onAccepted(response); }),\n                        onRedirect: (function (response) { return _this.onFailed(response); }),\n                        onReject: (function (response) { return _this.onFailed(response); }),\n                    };\n                }\n                break;\n            case core_1.SubscriptionState.Terminated:\n                break;\n            default:\n                break;\n        }\n    };\n    /**\n     * Send an initial SUBSCRIBE request if no subscription.\n     * Send a re-SUBSCRIBE request if there is an \"active\" subscription.\n     */\n    Subscription.prototype.subscribe = function () {\n        var _this = this;\n        switch (this.context.state) {\n            case core_1.SubscriptionState.Initial:\n                this.context.subscribe().then(function (result) {\n                    if (result.success) {\n                        if (result.success.subscription) {\n                            _this.subscription = result.success.subscription;\n                            _this.subscription.delegate = {\n                                onNotify: function (request) { return _this.onNotify(request); },\n                                onRefresh: function (request) { return _this.onRefresh(request); },\n                                onTerminated: function () { return _this.close(); }\n                            };\n                        }\n                        _this.onNotify(result.success.request);\n                    }\n                    else if (result.failure) {\n                        _this.onFailed(result.failure.response);\n                    }\n                });\n                break;\n            case core_1.SubscriptionState.NotifyWait:\n                break;\n            case core_1.SubscriptionState.Pending:\n                break;\n            case core_1.SubscriptionState.Active:\n                this.refresh();\n                break;\n            case core_1.SubscriptionState.Terminated:\n                break;\n            default:\n                break;\n        }\n        return this;\n    };\n    /**\n     * Send a re-SUBSCRIBE request if there is a \"pending\" or \"active\" subscription.\n     */\n    Subscription.prototype.unsubscribe = function () {\n        this.dispose();\n        switch (this.context.state) {\n            case core_1.SubscriptionState.Initial:\n                break;\n            case core_1.SubscriptionState.NotifyWait:\n                break;\n            case core_1.SubscriptionState.Pending:\n                if (this.subscription) {\n                    this.subscription.unsubscribe();\n                    // responses intentionally ignored\n                }\n                break;\n            case core_1.SubscriptionState.Active:\n                if (this.subscription) {\n                    this.subscription.unsubscribe();\n                    // responses intentionally ignored\n                }\n                break;\n            case core_1.SubscriptionState.Terminated:\n                break;\n            default:\n                break;\n        }\n        this.onTerminated();\n    };\n    Subscription.prototype.onAccepted = function (response) {\n        var statusCode = response.message.statusCode ? response.message.statusCode : 0;\n        var cause = Utils_1.Utils.getReasonPhrase(statusCode);\n        this.emit(\"accepted\", response.message, cause);\n    };\n    Subscription.prototype.onFailed = function (response) {\n        this.close();\n        if (response) {\n            var statusCode = response.message.statusCode ? response.message.statusCode : 0;\n            var cause = Utils_1.Utils.getReasonPhrase(statusCode);\n            this.emit(\"failed\", response.message, cause);\n            this.emit(\"rejected\", response.message, cause);\n        }\n    };\n    Subscription.prototype.onNotify = function (request) {\n        var _this = this;\n        request.accept(); // Send 200 response.\n        this.emit(\"notify\", { request: request.message });\n        // If we've set state to done, no further processing should take place\n        // and we are only interested in cleaning up after the appropriate NOTIFY.\n        if (this.disposed) {\n            return;\n        }\n        //  If the \"Subscription-State\" value is \"terminated\", the subscriber\n        //  MUST consider the subscription terminated.  The \"expires\" parameter\n        //  has no semantics for \"terminated\" -- notifiers SHOULD NOT include an\n        //  \"expires\" parameter on a \"Subscription-State\" header field with a\n        //  value of \"terminated\", and subscribers MUST ignore any such\n        //  parameter, if present.  If a reason code is present, the client\n        //  should behave as described below.  If no reason code or an unknown\n        //  reason code is present, the client MAY attempt to re-subscribe at any\n        //  time (unless a \"retry-after\" parameter is present, in which case the\n        //  client SHOULD NOT attempt re-subscription until after the number of\n        //  seconds specified by the \"retry-after\" parameter).  The reason codes\n        //  defined by this document are:\n        // https://tools.ietf.org/html/rfc6665#section-4.1.3\n        var subscriptionState = request.message.parseHeader(\"Subscription-State\");\n        if (subscriptionState && subscriptionState.state) {\n            switch (subscriptionState.state) {\n                case \"terminated\":\n                    if (subscriptionState.reason) {\n                        this.logger.log(\"Terminated subscription with reason \" + subscriptionState.reason);\n                        switch (subscriptionState.reason) {\n                            case \"deactivated\":\n                            case \"timeout\":\n                                this.initContext();\n                                this.subscribe();\n                                return;\n                            case \"probation\":\n                            case \"giveup\":\n                                this.initContext();\n                                if (subscriptionState.params && subscriptionState.params[\"retry-after\"]) {\n                                    this.retryAfterTimer = setTimeout(function () { return _this.subscribe(); }, subscriptionState.params[\"retry-after\"]);\n                                }\n                                else {\n                                    this.subscribe();\n                                }\n                                return;\n                            case \"rejected\":\n                            case \"noresource\":\n                            case \"invariant\":\n                                break;\n                        }\n                    }\n                    this.close();\n                    break;\n                default:\n                    break;\n            }\n        }\n    };\n    Subscription.prototype.onRefresh = function (request) {\n        var _this = this;\n        request.delegate = {\n            onAccept: function (response) { return _this.onAccepted(response); }\n        };\n    };\n    Subscription.prototype.onTerminated = function () {\n        this.emit(\"terminated\");\n    };\n    Subscription.prototype.initContext = function () {\n        var _this = this;\n        var options = {\n            extraHeaders: this.extraHeaders,\n            body: this.body ? Utils_1.Utils.fromBodyObj(this.body) : undefined\n        };\n        this.context = new SubscribeClientContext(this.ua.userAgentCore, this.uri, this.event, this.expires, options);\n        this.context.delegate = {\n            onAccept: (function (response) { return _this.onAccepted(response); })\n        };\n        return this.context;\n    };\n    return Subscription;\n}(events_1.EventEmitter));\nexports.Subscription = Subscription;\n// tslint:disable-next-line:max-classes-per-file\nvar SubscribeClientContext = /** @class */ (function () {\n    function SubscribeClientContext(core, target, event, expires, options, delegate) {\n        this.core = core;\n        this.target = target;\n        this.event = event;\n        this.expires = expires;\n        this.subscribed = false;\n        this.logger = core.loggerFactory.getLogger(\"sip.subscription\");\n        this.delegate = delegate;\n        var allowHeader = \"Allow: \" + allowed_methods_1.AllowedMethods.toString();\n        var extraHeaders = (options && options.extraHeaders || []).slice();\n        extraHeaders.push(allowHeader);\n        extraHeaders.push(\"Event: \" + this.event);\n        extraHeaders.push(\"Expires: \" + this.expires);\n        extraHeaders.push(\"Contact: \" + this.core.configuration.contact.toString());\n        var body = options && options.body;\n        this.message = core.makeOutgoingRequestMessage(Constants_1.C.SUBSCRIBE, this.target, this.core.configuration.aor, this.target, {}, extraHeaders, body);\n    }\n    /** Destructor. */\n    SubscribeClientContext.prototype.dispose = function () {\n        if (this.subscription) {\n            this.subscription.dispose();\n        }\n        if (this.request) {\n            this.request.waitNotifyStop();\n            this.request.dispose();\n        }\n    };\n    Object.defineProperty(SubscribeClientContext.prototype, \"state\", {\n        /** Subscription state. */\n        get: function () {\n            if (this.subscription) {\n                return this.subscription.subscriptionState;\n            }\n            else if (this.subscribed) {\n                return core_1.SubscriptionState.NotifyWait;\n            }\n            else {\n                return core_1.SubscriptionState.Initial;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Establish subscription.\n     * @param options Options bucket.\n     */\n    SubscribeClientContext.prototype.subscribe = function () {\n        var _this = this;\n        if (this.subscribed) {\n            return Promise.reject(new Error(\"Not in initial state. Did you call subscribe more than once?\"));\n        }\n        this.subscribed = true;\n        return new Promise(function (resolve, reject) {\n            if (!_this.message) {\n                throw new Error(\"Message undefined.\");\n            }\n            _this.request = _this.core.subscribe(_this.message, {\n                // This SUBSCRIBE request will be confirmed with a final response.\n                // 200-class responses indicate that the subscription has been accepted\n                // and that a NOTIFY request will be sent immediately.\n                // https://tools.ietf.org/html/rfc6665#section-4.1.2.1\n                onAccept: function (response) {\n                    if (_this.delegate && _this.delegate.onAccept) {\n                        _this.delegate.onAccept(response);\n                    }\n                },\n                // Due to the potential for out-of-order messages, packet loss, and\n                // forking, the subscriber MUST be prepared to receive NOTIFY requests\n                // before the SUBSCRIBE transaction has completed.\n                // https://tools.ietf.org/html/rfc6665#section-4.1.2.4\n                onNotify: function (requestWithSubscription) {\n                    _this.subscription = requestWithSubscription.subscription;\n                    if (_this.subscription) {\n                        _this.subscription.autoRefresh = true;\n                    }\n                    resolve({ success: requestWithSubscription });\n                },\n                // If this Timer N expires prior to the receipt of a NOTIFY request,\n                // the subscriber considers the subscription failed, and cleans up\n                // any state associated with the subscription attempt.\n                // https://tools.ietf.org/html/rfc6665#section-4.1.2.4\n                onNotifyTimeout: function () {\n                    resolve({ failure: {} });\n                },\n                // This SUBSCRIBE request will be confirmed with a final response.\n                // Non-200-class final responses indicate that no subscription or new\n                // dialog usage has been created, and no subsequent NOTIFY request will\n                // be sent.\n                // https://tools.ietf.org/html/rfc6665#section-4.1.2.1\n                onRedirect: function (response) {\n                    resolve({ failure: { response: response } });\n                },\n                // This SUBSCRIBE request will be confirmed with a final response.\n                // Non-200-class final responses indicate that no subscription or new\n                // dialog usage has been created, and no subsequent NOTIFY request will\n                // be sent.\n                // https://tools.ietf.org/html/rfc6665#section-4.1.2.1\n                onReject: function (response) {\n                    resolve({ failure: { response: response } });\n                }\n            });\n        });\n    };\n    return SubscribeClientContext;\n}());\n\n\n/***/ }),\n/* 93 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar events_1 = __webpack_require__(31);\n/**\n * Legacy Transport.\n * @remarks\n * Abstract transport layer base class.\n * @public\n */\nvar Transport = /** @class */ (function (_super) {\n    tslib_1.__extends(Transport, _super);\n    /**\n     * Constructor\n     * @param logger - Logger.\n     * @param options - Options bucket. Deprecated.\n     */\n    function Transport(logger, options) {\n        var _this = _super.call(this) || this;\n        _this.logger = logger;\n        return _this;\n    }\n    Object.defineProperty(Transport.prototype, \"protocol\", {\n        /**\n         * The protocol.\n         *\n         * @remarks\n         * Formatted as defined for the Via header sent-protocol transport.\n         * https://tools.ietf.org/html/rfc3261#section-20.42\n         */\n        get: function () {\n            return this.server && this.server.scheme ? this.server.scheme : \"WSS\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the promise designated by the child layer then emits a connected event.\n     * Automatically emits an event upon resolution, unless overrideEvent is set. If you\n     * override the event in this fashion, you should emit it in your implementation of connectPromise\n     * @param options - Options bucket.\n     */\n    Transport.prototype.connect = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        return this.connectPromise(options).then(function (data) {\n            if (!data.overrideEvent) {\n                _this.emit(\"connected\");\n            }\n        });\n    };\n    /**\n     * Sends a message then emits a 'messageSent' event. Automatically emits an\n     * event upon resolution, unless data.overrideEvent is set. If you override\n     * the event in this fashion, you should emit it in your implementation of sendPromise\n     * Rejects with an Error if message fails to send.\n     * @param message - Message.\n     * @param options - Options bucket.\n     */\n    Transport.prototype.send = function (message, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        // Error handling is independent of whether the message was a request or\n        // response.\n        //\n        // If the transport user asks for a message to be sent over an\n        // unreliable transport, and the result is an ICMP error, the behavior\n        // depends on the type of ICMP error.  Host, network, port or protocol\n        // unreachable errors, or parameter problem errors SHOULD cause the\n        // transport layer to inform the transport user of a failure in sending.\n        // Source quench and TTL exceeded ICMP errors SHOULD be ignored.\n        //\n        // If the transport user asks for a request to be sent over a reliable\n        // transport, and the result is a connection failure, the transport\n        // layer SHOULD inform the transport user of a failure in sending.\n        // https://tools.ietf.org/html/rfc3261#section-18.4\n        return this.sendPromise(message).then(function (result) {\n            if (!result.overrideEvent) {\n                _this.emit(\"messageSent\", result.msg);\n            }\n        });\n    };\n    /**\n     * Returns the promise designated by the child layer then emits a\n     * disconnected event. Automatically emits an event upon resolution,\n     * unless overrideEvent is set. If you override the event in this fashion,\n     * you should emit it in your implementation of disconnectPromise\n     * @param options - Options bucket\n     */\n    Transport.prototype.disconnect = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        return this.disconnectPromise(options).then(function (data) {\n            if (!data.overrideEvent) {\n                _this.emit(\"disconnected\");\n            }\n        });\n    };\n    Transport.prototype.afterConnected = function (callback) {\n        if (this.isConnected()) {\n            callback();\n        }\n        else {\n            this.once(\"connected\", callback);\n        }\n    };\n    /**\n     * Returns a promise which resolves once the UA is connected. DEPRECATION WARNING: just use afterConnected()\n     */\n    Transport.prototype.waitForConnected = function () {\n        var _this = this;\n        // tslint:disable-next-line:no-console\n        console.warn(\"DEPRECATION WARNING Transport.waitForConnected(): use afterConnected() instead\");\n        return new Promise(function (resolve) {\n            _this.afterConnected(resolve);\n        });\n    };\n    return Transport;\n}(events_1.EventEmitter));\nexports.Transport = Transport;\n\n\n/***/ }),\n/* 94 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar events_1 = __webpack_require__(31);\nvar ClientContext_1 = __webpack_require__(79);\nvar Constants_1 = __webpack_require__(80);\nvar core_1 = __webpack_require__(2);\nvar Enums_1 = __webpack_require__(82);\nvar Exceptions_1 = __webpack_require__(84);\nvar PublishContext_1 = __webpack_require__(85);\nvar ReferContext_1 = __webpack_require__(86);\nvar RegisterContext_1 = __webpack_require__(88);\nvar ServerContext_1 = __webpack_require__(87);\nvar Session_1 = __webpack_require__(89);\nvar Subscription_1 = __webpack_require__(92);\nvar Utils_1 = __webpack_require__(83);\nvar SessionDescriptionHandler_1 = __webpack_require__(95);\nvar Transport_1 = __webpack_require__(112);\n/**\n * @class Class creating a SIP User Agent.\n * @param {function returning SIP.sessionDescriptionHandler} [configuration.sessionDescriptionHandlerFactory]\n *  A function will be invoked by each of the UA's Sessions to build the sessionDescriptionHandler for that Session.\n *  If no (or a falsy) value is provided, each Session will use a default (WebRTC) sessionDescriptionHandler.\n */\nvar UA = /** @class */ (function (_super) {\n    tslib_1.__extends(UA, _super);\n    function UA(configuration) {\n        var _this = _super.call(this) || this;\n        /** Unload listener. */\n        _this.unloadListener = (function () { _this.stop(); });\n        _this.type = Enums_1.TypeStrings.UA;\n        _this.log = new core_1.LoggerFactory();\n        _this.logger = _this.getLogger(\"sip.ua\");\n        _this.configuration = {};\n        // User actions outside any session/dialog (MESSAGE)\n        _this.applicants = {};\n        _this.data = {};\n        _this.sessions = {};\n        _this.subscriptions = {};\n        _this.publishers = {};\n        _this.status = Enums_1.UAStatus.STATUS_INIT;\n        /**\n         * Load configuration\n         *\n         * @throws {SIP.Exceptions.ConfigurationError}\n         * @throws {TypeError}\n         */\n        if (configuration === undefined) {\n            configuration = {};\n        }\n        else if (typeof configuration === \"string\" || configuration instanceof String) {\n            configuration = {\n                uri: configuration\n            };\n        }\n        // Apply log configuration if present\n        if (configuration.log) {\n            _this.log.builtinEnabled = configuration.log.builtinEnabled;\n            if (configuration.log.hasOwnProperty(\"connector\")) {\n                _this.log.connector = configuration.log.connector;\n            }\n            if (configuration.log.hasOwnProperty(\"level\")) {\n                var level = configuration.log.level;\n                var normalized = void 0;\n                if (typeof level === \"string\") {\n                    switch (level) {\n                        case \"error\":\n                            normalized = core_1.Levels.error;\n                            break;\n                        case \"warn\":\n                            normalized = core_1.Levels.warn;\n                            break;\n                        case \"log\":\n                            normalized = core_1.Levels.log;\n                            break;\n                        case \"debug\":\n                            normalized = core_1.Levels.debug;\n                            break;\n                        default:\n                            break;\n                    }\n                }\n                else {\n                    switch (level) {\n                        case 0:\n                            normalized = core_1.Levels.error;\n                            break;\n                        case 1:\n                            normalized = core_1.Levels.warn;\n                            break;\n                        case 2:\n                            normalized = core_1.Levels.log;\n                            break;\n                        case 3:\n                            normalized = core_1.Levels.debug;\n                            break;\n                        default:\n                            break;\n                    }\n                }\n                // avoid setting level when invalid, use default level instead\n                if (normalized === undefined) {\n                    _this.logger.error(\"Invalid \\\"level\\\" parameter value: \" + JSON.stringify(level));\n                }\n                else {\n                    _this.log.level = normalized;\n                }\n            }\n        }\n        var deprecatedMessage = \"The UA class has been deprecated and will no longer be available starting with SIP.js release 0.16.0. \" +\n            \"The UA has been replaced by the UserAgent class. Please update accordingly.\";\n        _this.logger.warn(deprecatedMessage);\n        try {\n            _this.loadConfig(configuration);\n        }\n        catch (e) {\n            _this.status = Enums_1.UAStatus.STATUS_NOT_READY;\n            _this.error = UA.C.CONFIGURATION_ERROR;\n            throw e;\n        }\n        if (!_this.configuration.transportConstructor) {\n            throw new core_1.TransportError(\"Transport constructor not set\");\n        }\n        _this.transport = new _this.configuration.transportConstructor(_this.getLogger(\"sip.transport\"), _this.configuration.transportOptions);\n        var userAgentCoreConfiguration = makeUserAgentCoreConfigurationFromUA(_this);\n        // The Replaces header contains information used to match an existing\n        // SIP dialog (call-id, to-tag, and from-tag).  Upon receiving an INVITE\n        // with a Replaces header, the User Agent (UA) attempts to match this\n        // information with a confirmed or early dialog.\n        // https://tools.ietf.org/html/rfc3891#section-3\n        var handleInviteWithReplacesHeader = function (context, request) {\n            if (_this.configuration.replaces !== Constants_1.C.supported.UNSUPPORTED) {\n                var replaces = request.parseHeader(\"replaces\");\n                if (replaces) {\n                    var targetSession = _this.sessions[replaces.call_id + replaces.replaces_from_tag] ||\n                        _this.sessions[replaces.call_id + replaces.replaces_to_tag] ||\n                        undefined;\n                    if (!targetSession) {\n                        _this.userAgentCore.replyStateless(request, { statusCode: 481 });\n                        return;\n                    }\n                    if (targetSession.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\n                        _this.userAgentCore.replyStateless(request, { statusCode: 603 });\n                        return;\n                    }\n                    var targetDialogId = replaces.call_id + replaces.replaces_to_tag + replaces.replaces_from_tag;\n                    var targetDialog = _this.userAgentCore.dialogs.get(targetDialogId);\n                    if (!targetDialog) {\n                        _this.userAgentCore.replyStateless(request, { statusCode: 481 });\n                        return;\n                    }\n                    if (!targetDialog.early && replaces.early_only) {\n                        _this.userAgentCore.replyStateless(request, { statusCode: 486 });\n                        return;\n                    }\n                    context.replacee = targetSession;\n                }\n            }\n        };\n        var userAgentCoreDelegate = {\n            onInvite: function (incomingInviteRequest) {\n                // FIXME: Ported - 100 Trying send should be configurable.\n                // Only required if TU will not respond in 200ms.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.1\n                incomingInviteRequest.trying();\n                incomingInviteRequest.delegate = {\n                    onCancel: function (cancel) {\n                        context.onCancel(cancel);\n                    },\n                    onTransportError: function (error) {\n                        context.onTransportError();\n                    }\n                };\n                var context = new Session_1.InviteServerContext(_this, incomingInviteRequest);\n                // Ported - handling of out of dialog INVITE with Replaces.\n                handleInviteWithReplacesHeader(context, incomingInviteRequest.message);\n                // Ported - make the first call to progress automatically.\n                if (context.autoSendAnInitialProvisionalResponse) {\n                    context.progress();\n                }\n                _this.emit(\"invite\", context);\n            },\n            onMessage: function (incomingMessageRequest) {\n                // Ported - handling of out of dialog MESSAGE.\n                var serverContext = new ServerContext_1.ServerContext(_this, incomingMessageRequest);\n                serverContext.body = incomingMessageRequest.message.body;\n                serverContext.contentType = incomingMessageRequest.message.getHeader(\"Content-Type\") || \"text/plain\";\n                incomingMessageRequest.accept();\n                _this.emit(\"message\", serverContext); // TODO: Review. Why is a \"ServerContext\" emitted? What use it is?\n            },\n            onNotify: function (incomingNotifyRequest) {\n                // DEPRECATED: Out of dialog NOTIFY is an obsolete usage.\n                // Ported - handling of out of dialog NOTIFY.\n                if (_this.configuration.allowLegacyNotifications && _this.listeners(\"notify\").length > 0) {\n                    incomingNotifyRequest.accept();\n                    _this.emit(\"notify\", { request: incomingNotifyRequest.message });\n                }\n                else {\n                    incomingNotifyRequest.reject({ statusCode: 481 });\n                }\n            },\n            onRefer: function (incomingReferRequest) {\n                // Ported - handling of out of dialog REFER.\n                _this.logger.log(\"Received an out of dialog refer\");\n                if (!_this.configuration.allowOutOfDialogRefers) {\n                    incomingReferRequest.reject({ statusCode: 405 });\n                }\n                _this.logger.log(\"Allow out of dialog refers is enabled on the UA\");\n                var referContext = new ReferContext_1.ReferServerContext(_this, incomingReferRequest);\n                if (_this.listeners(\"outOfDialogReferRequested\").length) {\n                    _this.emit(\"outOfDialogReferRequested\", referContext);\n                }\n                else {\n                    _this.logger.log(\"No outOfDialogReferRequest listeners, automatically accepting and following the out of dialog refer\");\n                    referContext.accept({ followRefer: true });\n                }\n            },\n            onSubscribe: function (incomingSubscribeRequest) {\n                _this.emit(\"subscribe\", incomingSubscribeRequest);\n            },\n        };\n        _this.userAgentCore = new core_1.UserAgentCore(userAgentCoreConfiguration, userAgentCoreDelegate);\n        // Initialize registerContext\n        _this.registerContext = new RegisterContext_1.RegisterContext(_this, configuration.registerOptions);\n        _this.registerContext.on(\"failed\", _this.emit.bind(_this, \"registrationFailed\"));\n        _this.registerContext.on(\"registered\", _this.emit.bind(_this, \"registered\"));\n        _this.registerContext.on(\"unregistered\", _this.emit.bind(_this, \"unregistered\"));\n        if (_this.configuration.autostart) {\n            _this.start();\n        }\n        return _this;\n    }\n    // =================\n    //  High Level API\n    // =================\n    UA.prototype.register = function (options) {\n        if (options === void 0) { options = {}; }\n        if (options.register) {\n            this.configuration.register = true;\n        }\n        this.registerContext.register(options);\n        return this;\n    };\n    /**\n     * Unregister.\n     *\n     * @param {Boolean} [all] unregister all user bindings.\n     *\n     */\n    UA.prototype.unregister = function (options) {\n        var _this = this;\n        this.configuration.register = false;\n        this.transport.afterConnected(function () {\n            _this.registerContext.unregister(options);\n        });\n        return this;\n    };\n    UA.prototype.isRegistered = function () {\n        return this.registerContext.registered;\n    };\n    /**\n     * Make an outgoing call.\n     *\n     * @param {String} target\n     * @param {Object} views\n     * @param {Object} [options.media] gets passed to SIP.sessionDescriptionHandler.getDescription as mediaHint\n     *\n     * @throws {TypeError}\n     *\n     */\n    UA.prototype.invite = function (target, options, modifiers) {\n        var _this = this;\n        var context = new Session_1.InviteClientContext(this, target, options, modifiers);\n        // Delay sending actual invite until the next 'tick' if we are already\n        // connected, so that API consumers can register to events fired by the\n        // the session.\n        this.transport.afterConnected(function () {\n            context.invite();\n            _this.emit(\"inviteSent\", context);\n        });\n        return context;\n    };\n    UA.prototype.subscribe = function (target, event, options) {\n        var sub = new Subscription_1.Subscription(this, target, event, options);\n        this.transport.afterConnected(function () { return sub.subscribe(); });\n        return sub;\n    };\n    /**\n     * Send PUBLISH Event State Publication (RFC3903)\n     *\n     * @param {String} target\n     * @param {String} event\n     * @param {String} body\n     * @param {Object} [options]\n     *\n     * @throws {SIP.Exceptions.MethodParameterError}\n     */\n    UA.prototype.publish = function (target, event, body, options) {\n        var pub = new PublishContext_1.PublishContext(this, target, event, options);\n        this.transport.afterConnected(function () {\n            pub.publish(body);\n        });\n        return pub;\n    };\n    /**\n     * Send a message.\n     *\n     * @param {String} target\n     * @param {String} body\n     * @param {Object} [options]\n     *\n     * @throws {TypeError}\n     */\n    UA.prototype.message = function (target, body, options) {\n        if (options === void 0) { options = {}; }\n        if (body === undefined) {\n            throw new TypeError(\"Not enough arguments\");\n        }\n        // There is no Message module, so it is okay that the UA handles defaults here.\n        options.contentType = options.contentType || \"text/plain\";\n        options.body = body;\n        return this.request(Constants_1.C.MESSAGE, target, options);\n    };\n    UA.prototype.request = function (method, target, options) {\n        var req = new ClientContext_1.ClientContext(this, method, target, options);\n        this.transport.afterConnected(function () { return req.send(); });\n        return req;\n    };\n    /**\n     * Gracefully close.\n     */\n    UA.prototype.stop = function () {\n        this.logger.log(\"user requested closure...\");\n        if (this.status === Enums_1.UAStatus.STATUS_USER_CLOSED) {\n            this.logger.warn(\"UA already closed\");\n            return this;\n        }\n        // Close registerContext\n        this.logger.log(\"closing registerContext\");\n        this.registerContext.close();\n        // Run terminate on every Session\n        for (var session in this.sessions) {\n            if (this.sessions[session]) {\n                this.logger.log(\"closing session \" + session);\n                this.sessions[session].terminate();\n            }\n        }\n        // Run unsubscribe on every Subscription\n        for (var subscription in this.subscriptions) {\n            if (this.subscriptions[subscription]) {\n                this.logger.log(\"unsubscribe \" + subscription);\n                this.subscriptions[subscription].unsubscribe();\n            }\n        }\n        // Run close on every Publisher\n        for (var publisher in this.publishers) {\n            if (this.publishers[publisher]) {\n                this.logger.log(\"unpublish \" + publisher);\n                this.publishers[publisher].close();\n            }\n        }\n        // Run close on every applicant\n        for (var applicant in this.applicants) {\n            if (this.applicants[applicant]) {\n                this.applicants[applicant].close();\n            }\n        }\n        this.status = Enums_1.UAStatus.STATUS_USER_CLOSED;\n        // Disconnect the transport and reset user agent core\n        this.transport.disconnect();\n        this.userAgentCore.reset();\n        if (this.configuration.autostop) {\n            // Google Chrome Packaged Apps don't allow 'unload' listeners: unload is not available in packaged apps\n            var googleChromePackagedApp = typeof chrome !== \"undefined\" && chrome.app && chrome.app.runtime ? true : false;\n            if (typeof window !== \"undefined\" &&\n                typeof window.removeEventListener === \"function\" &&\n                !googleChromePackagedApp) {\n                window.removeEventListener(\"unload\", this.unloadListener);\n            }\n        }\n        return this;\n    };\n    /**\n     * Connect to the WS server if status = STATUS_INIT.\n     * Resume UA after being closed.\n     *\n     */\n    UA.prototype.start = function () {\n        this.logger.log(\"user requested startup...\");\n        if (this.status === Enums_1.UAStatus.STATUS_INIT) {\n            this.status = Enums_1.UAStatus.STATUS_STARTING;\n            this.setTransportListeners();\n            this.emit(\"transportCreated\", this.transport);\n            this.transport.connect();\n        }\n        else if (this.status === Enums_1.UAStatus.STATUS_USER_CLOSED) {\n            this.logger.log(\"resuming\");\n            this.status = Enums_1.UAStatus.STATUS_READY;\n            this.transport.connect();\n        }\n        else if (this.status === Enums_1.UAStatus.STATUS_STARTING) {\n            this.logger.log(\"UA is in STARTING status, not opening new connection\");\n        }\n        else if (this.status === Enums_1.UAStatus.STATUS_READY) {\n            this.logger.log(\"UA is in READY status, not resuming\");\n        }\n        else {\n            this.logger.error(\"Connection is down. Auto-Recovery system is trying to connect\");\n        }\n        if (this.configuration.autostop) {\n            // Google Chrome Packaged Apps don't allow 'unload' listeners: unload is not available in packaged apps\n            var googleChromePackagedApp = typeof chrome !== \"undefined\" && chrome.app && chrome.app.runtime ? true : false;\n            if (typeof window !== \"undefined\" &&\n                typeof window.addEventListener === \"function\" &&\n                !googleChromePackagedApp) {\n                window.addEventListener(\"unload\", this.unloadListener);\n            }\n        }\n        return this;\n    };\n    /**\n     * Normalize a string into a valid SIP request URI\n     *\n     * @param {String} target\n     *\n     * @returns {SIP.URI|undefined}\n     */\n    UA.prototype.normalizeTarget = function (target) {\n        return Utils_1.Utils.normalizeTarget(target, this.configuration.hostportParams);\n    };\n    UA.prototype.getLogger = function (category, label) {\n        return this.log.getLogger(category, label);\n    };\n    UA.prototype.getLoggerFactory = function () {\n        return this.log;\n    };\n    UA.prototype.getSupportedResponseOptions = function () {\n        var optionTags = [];\n        if (this.contact.pubGruu || this.contact.tempGruu) {\n            optionTags.push(\"gruu\");\n        }\n        if (this.configuration.rel100 === Constants_1.C.supported.SUPPORTED) {\n            optionTags.push(\"100rel\");\n        }\n        if (this.configuration.replaces === Constants_1.C.supported.SUPPORTED) {\n            optionTags.push(\"replaces\");\n        }\n        optionTags.push(\"outbound\");\n        optionTags = optionTags.concat(this.configuration.extraSupported || []);\n        var allowUnregistered = this.configuration.hackAllowUnregisteredOptionTags || false;\n        var optionTagSet = {};\n        optionTags = optionTags.filter(function (optionTag) {\n            var registered = Constants_1.C.OPTION_TAGS[optionTag];\n            var unique = !optionTagSet[optionTag];\n            optionTagSet[optionTag] = true;\n            return (registered || allowUnregistered) && unique;\n        });\n        return optionTags;\n    };\n    /**\n     * Get the session to which the request belongs to, if any.\n     * @param {SIP.IncomingRequest} request.\n     * @returns {SIP.OutgoingSession|SIP.IncomingSession|undefined}\n     */\n    UA.prototype.findSession = function (request) {\n        return this.sessions[request.callId + request.fromTag] ||\n            this.sessions[request.callId + request.toTag] ||\n            undefined;\n    };\n    UA.prototype.on = function (name, callback) { return _super.prototype.on.call(this, name, callback); };\n    // ==============================\n    // Event Handlers\n    // ==============================\n    UA.prototype.onTransportError = function () {\n        if (this.status === Enums_1.UAStatus.STATUS_USER_CLOSED) {\n            return;\n        }\n        if (!this.error || this.error !== UA.C.NETWORK_ERROR) {\n            this.status = Enums_1.UAStatus.STATUS_NOT_READY;\n            this.error = UA.C.NETWORK_ERROR;\n        }\n    };\n    /**\n     * Helper function. Sets transport listeners\n     */\n    UA.prototype.setTransportListeners = function () {\n        var _this = this;\n        this.transport.on(\"connected\", function () { return _this.onTransportConnected(); });\n        this.transport.on(\"message\", function (message) { return _this.onTransportReceiveMsg(message); });\n        this.transport.on(\"transportError\", function () { return _this.onTransportError(); });\n    };\n    /**\n     * Transport connection event.\n     * @event\n     * @param {SIP.Transport} transport.\n     */\n    UA.prototype.onTransportConnected = function () {\n        var _this = this;\n        if (this.configuration.register) {\n            // In an effor to maintain behavior from when we \"initialized\" an\n            // authentication factory, this is in a Promise.then\n            Promise.resolve().then(function () { return _this.registerContext.register(); });\n        }\n    };\n    /**\n     * Handle SIP message received from the transport.\n     * @param messageString The message.\n     */\n    UA.prototype.onTransportReceiveMsg = function (messageString) {\n        var _this = this;\n        var message = core_1.Parser.parseMessage(messageString, this.getLogger(\"sip.parser\"));\n        if (!message) {\n            this.logger.warn(\"UA failed to parse incoming SIP message - discarding.\");\n            return;\n        }\n        if (this.status === Enums_1.UAStatus.STATUS_USER_CLOSED && message instanceof core_1.IncomingRequestMessage) {\n            this.logger.warn(\"UA received message when status = USER_CLOSED - aborting\");\n            return;\n        }\n        // A valid SIP request formulated by a UAC MUST, at a minimum, contain\n        // the following header fields: To, From, CSeq, Call-ID, Max-Forwards,\n        // and Via; all of these header fields are mandatory in all SIP\n        // requests.\n        // https://tools.ietf.org/html/rfc3261#section-8.1.1\n        var hasMinimumHeaders = function () {\n            var mandatoryHeaders = [\"from\", \"to\", \"call_id\", \"cseq\", \"via\"];\n            for (var _i = 0, mandatoryHeaders_1 = mandatoryHeaders; _i < mandatoryHeaders_1.length; _i++) {\n                var header = mandatoryHeaders_1[_i];\n                if (!message.hasHeader(header)) {\n                    _this.logger.warn(\"Missing mandatory header field : \" + header + \".\");\n                    return false;\n                }\n            }\n            return true;\n        };\n        // Request Checks\n        if (message instanceof core_1.IncomingRequestMessage) {\n            // This is port of SanityCheck.minimumHeaders().\n            if (!hasMinimumHeaders()) {\n                this.logger.warn(\"Request missing mandatory header field. Dropping.\");\n                return;\n            }\n            // FIXME: This is non-standard and should be a configruable behavior (desirable regardless).\n            // Custom SIP.js check to reject request from ourself (this instance of SIP.js).\n            // This is port of SanityCheck.rfc3261_16_3_4().\n            if (!message.toTag && message.callId.substr(0, 5) === this.configuration.sipjsId) {\n                this.userAgentCore.replyStateless(message, { statusCode: 482 });\n                return;\n            }\n            // FIXME: This should be Transport check before we get here (Section 18).\n            // Custom SIP.js check to reject requests if body length wrong.\n            // This is port of SanityCheck.rfc3261_18_3_request().\n            var len = Utils_1.Utils.str_utf8_length(message.body);\n            var contentLength = message.getHeader(\"content-length\");\n            if (contentLength && len < Number(contentLength)) {\n                this.userAgentCore.replyStateless(message, { statusCode: 400 });\n                return;\n            }\n        }\n        // Reponse Checks\n        if (message instanceof core_1.IncomingResponseMessage) {\n            // This is port of SanityCheck.minimumHeaders().\n            if (!hasMinimumHeaders()) {\n                this.logger.warn(\"Response missing mandatory header field. Dropping.\");\n                return;\n            }\n            // Custom SIP.js check to drop responses if multiple Via headers.\n            // This is port of SanityCheck.rfc3261_8_1_3_3().\n            if (message.getHeaders(\"via\").length > 1) {\n                this.logger.warn(\"More than one Via header field present in the response. Dropping.\");\n                return;\n            }\n            // FIXME: This should be Transport check before we get here (Section 18).\n            // Custom SIP.js check to drop responses if bad Via header.\n            // This is port of SanityCheck.rfc3261_18_1_2().\n            if (message.via.host !== this.configuration.viaHost || message.via.port !== undefined) {\n                this.logger.warn(\"Via sent-by in the response does not match UA Via host value. Dropping.\");\n                return;\n            }\n            // FIXME: This should be Transport check before we get here (Section 18).\n            // Custom SIP.js check to reject requests if body length wrong.\n            // This is port of SanityCheck.rfc3261_18_3_response().\n            var len = Utils_1.Utils.str_utf8_length(message.body);\n            var contentLength = message.getHeader(\"content-length\");\n            if (contentLength && len < Number(contentLength)) {\n                this.logger.warn(\"Message body length is lower than the value in Content-Length header field. Dropping.\");\n                return;\n            }\n        }\n        // Handle Request\n        if (message instanceof core_1.IncomingRequestMessage) {\n            this.userAgentCore.receiveIncomingRequestFromTransport(message);\n            return;\n        }\n        // Handle Response\n        if (message instanceof core_1.IncomingResponseMessage) {\n            this.userAgentCore.receiveIncomingResponseFromTransport(message);\n            return;\n        }\n        throw new Error(\"Invalid message type.\");\n    };\n    // =================\n    // Utils\n    // =================\n    UA.prototype.checkAuthenticationFactory = function (authenticationFactory) {\n        if (!(authenticationFactory instanceof Function)) {\n            return;\n        }\n        if (!authenticationFactory.initialize) {\n            authenticationFactory.initialize = function () {\n                return Promise.resolve();\n            };\n        }\n        return authenticationFactory;\n    };\n    /**\n     * Configuration load.\n     * returns {void}\n     */\n    UA.prototype.loadConfig = function (configuration) {\n        var _this = this;\n        // Settings and default values\n        var settings = {\n            /* Host address\n             * Value to be set in Via sent_by and host part of Contact FQDN\n             */\n            viaHost: Utils_1.Utils.createRandomToken(12) + \".invalid\",\n            uri: new core_1.URI(\"sip\", \"anonymous.\" + Utils_1.Utils.createRandomToken(6), \"anonymous.invalid\", undefined, undefined),\n            // Custom Configuration Settings\n            custom: {},\n            // Display name\n            displayName: \"\",\n            // Password\n            password: undefined,\n            register: true,\n            // Registration parameters\n            registerOptions: {},\n            // Transport related parameters\n            transportConstructor: Transport_1.Transport,\n            transportOptions: {},\n            usePreloadedRoute: false,\n            // string to be inserted into User-Agent request header\n            userAgentString: Constants_1.C.USER_AGENT,\n            // Session parameters\n            noAnswerTimeout: 60,\n            // Hacks\n            hackViaTcp: false,\n            hackIpInContact: false,\n            hackWssInTransport: false,\n            hackAllowUnregisteredOptionTags: false,\n            // Session Description Handler Options\n            sessionDescriptionHandlerFactoryOptions: {\n                constraints: {},\n                peerConnectionOptions: {}\n            },\n            extraSupported: [],\n            contactName: Utils_1.Utils.createRandomToken(8),\n            contactTransport: \"ws\",\n            forceRport: false,\n            // autostarting\n            autostart: true,\n            autostop: true,\n            // Reliable Provisional Responses\n            rel100: Constants_1.C.supported.UNSUPPORTED,\n            // DTMF type: 'info' or 'rtp' (RFC 4733)\n            // RTP Payload Spec: https://tools.ietf.org/html/rfc4733\n            // WebRTC Audio Spec: https://tools.ietf.org/html/rfc7874\n            dtmfType: Constants_1.C.dtmfType.INFO,\n            // Replaces header (RFC 3891)\n            // http://tools.ietf.org/html/rfc3891\n            replaces: Constants_1.C.supported.UNSUPPORTED,\n            sessionDescriptionHandlerFactory: SessionDescriptionHandler_1.SessionDescriptionHandler.defaultFactory,\n            authenticationFactory: this.checkAuthenticationFactory(function (ua) {\n                return new core_1.DigestAuthentication(ua.getLoggerFactory(), _this.configuration.authorizationUser, _this.configuration.password);\n            }),\n            allowLegacyNotifications: false,\n            allowOutOfDialogRefers: false,\n            experimentalFeatures: false\n        };\n        var configCheck = this.getConfigurationCheck();\n        // Check Mandatory parameters\n        for (var parameter in configCheck.mandatory) {\n            if (!configuration.hasOwnProperty(parameter)) {\n                throw new Exceptions_1.Exceptions.ConfigurationError(parameter);\n            }\n            else {\n                var value = configuration[parameter];\n                var checkedValue = configCheck.mandatory[parameter](value);\n                if (checkedValue !== undefined) {\n                    settings[parameter] = checkedValue;\n                }\n                else {\n                    throw new Exceptions_1.Exceptions.ConfigurationError(parameter, value);\n                }\n            }\n        }\n        // Check Optional parameters\n        for (var parameter in configCheck.optional) {\n            if (configuration.hasOwnProperty(parameter)) {\n                var value = configuration[parameter];\n                // If the parameter value is an empty array, but shouldn't be, apply its default value.\n                // If the parameter value is null, empty string, or undefined then apply its default value.\n                // If it's a number with NaN value then also apply its default value.\n                // NOTE: JS does not allow \"value === NaN\", the following does the work:\n                if ((value instanceof Array && value.length === 0) ||\n                    (value === null || value === \"\" || value === undefined) ||\n                    (typeof (value) === \"number\" && isNaN(value))) {\n                    continue;\n                }\n                var checkedValue = configCheck.optional[parameter](value);\n                if (checkedValue !== undefined) {\n                    settings[parameter] = checkedValue;\n                }\n                else {\n                    throw new Exceptions_1.Exceptions.ConfigurationError(parameter, value);\n                }\n            }\n        }\n        // Post Configuration Process\n        // Allow passing 0 number as displayName.\n        if (settings.displayName === 0) {\n            settings.displayName = \"0\";\n        }\n        // sipjsId instance parameter. Static random tag of length 5\n        settings.sipjsId = Utils_1.Utils.createRandomToken(5);\n        // String containing settings.uri without scheme and user.\n        var hostportParams = settings.uri.clone();\n        hostportParams.user = undefined;\n        settings.hostportParams = hostportParams.toRaw().replace(/^sip:/i, \"\");\n        /* Check whether authorizationUser is explicitly defined.\n         * Take 'settings.uri.user' value if not.\n         */\n        if (!settings.authorizationUser) {\n            settings.authorizationUser = settings.uri.user;\n        }\n        // User noAnswerTimeout\n        settings.noAnswerTimeout = settings.noAnswerTimeout * 1000;\n        // Via Host\n        if (settings.hackIpInContact) {\n            if (typeof settings.hackIpInContact === \"boolean\") {\n                var from = 1;\n                var to = 254;\n                var octet = Math.floor(Math.random() * (to - from + 1) + from);\n                // random Test-Net IP (http://tools.ietf.org/html/rfc5735)\n                settings.viaHost = \"192.0.2.\" + octet;\n            }\n            else if (typeof settings.hackIpInContact === \"string\") {\n                settings.viaHost = settings.hackIpInContact;\n            }\n        }\n        // Contact transport parameter\n        if (settings.hackWssInTransport) {\n            settings.contactTransport = \"wss\";\n        }\n        this.contact = {\n            pubGruu: undefined,\n            tempGruu: undefined,\n            uri: new core_1.URI(\"sip\", settings.contactName, settings.viaHost, undefined, { transport: settings.contactTransport }),\n            toString: function (options) {\n                if (options === void 0) { options = {}; }\n                var anonymous = options.anonymous || false;\n                var outbound = options.outbound || false;\n                var contact = \"<\";\n                if (anonymous) {\n                    contact += (_this.contact.tempGruu ||\n                        (\"sip:anonymous@anonymous.invalid;transport=\" + settings.contactTransport)).toString();\n                }\n                else {\n                    contact += (_this.contact.pubGruu || _this.contact.uri).toString();\n                }\n                if (outbound) {\n                    contact += \";ob\";\n                }\n                contact += \">\";\n                return contact;\n            }\n        };\n        var skeleton = {};\n        // Fill the value of the configuration_skeleton\n        for (var parameter in settings) {\n            if (settings.hasOwnProperty(parameter)) {\n                skeleton[parameter] = settings[parameter];\n            }\n        }\n        Object.assign(this.configuration, skeleton);\n        this.logger.log(\"configuration parameters after validation:\");\n        for (var parameter in settings) {\n            if (settings.hasOwnProperty(parameter)) {\n                switch (parameter) {\n                    case \"uri\":\n                    case \"sessionDescriptionHandlerFactory\":\n                        this.logger.log(\"· \" + parameter + \": \" + settings[parameter]);\n                        break;\n                    case \"password\":\n                        this.logger.log(\"· \" + parameter + \": \" + \"NOT SHOWN\");\n                        break;\n                    case \"transportConstructor\":\n                        this.logger.log(\"· \" + parameter + \": \" + settings[parameter].name);\n                        break;\n                    default:\n                        this.logger.log(\"· \" + parameter + \": \" + JSON.stringify(settings[parameter]));\n                }\n            }\n        }\n        return;\n    };\n    /**\n     * Configuration checker.\n     * @return {Boolean}\n     */\n    UA.prototype.getConfigurationCheck = function () {\n        return {\n            mandatory: {},\n            optional: {\n                uri: function (uri) {\n                    if (!(/^sip:/i).test(uri)) {\n                        uri = Constants_1.C.SIP + \":\" + uri;\n                    }\n                    var parsed = core_1.Grammar.URIParse(uri);\n                    if (!parsed || !parsed.user) {\n                        return;\n                    }\n                    else {\n                        return parsed;\n                    }\n                },\n                transportConstructor: function (transportConstructor) {\n                    if (transportConstructor instanceof Function) {\n                        return transportConstructor;\n                    }\n                },\n                transportOptions: function (transportOptions) {\n                    if (typeof transportOptions === \"object\") {\n                        return transportOptions;\n                    }\n                },\n                authorizationUser: function (authorizationUser) {\n                    if (core_1.Grammar.parse('\"' + authorizationUser + '\"', \"quoted_string\") === -1) {\n                        return;\n                    }\n                    else {\n                        return authorizationUser;\n                    }\n                },\n                displayName: function (displayName) {\n                    if (core_1.Grammar.parse('\"' + displayName + '\"', \"displayName\") === -1) {\n                        return;\n                    }\n                    else {\n                        return displayName;\n                    }\n                },\n                dtmfType: function (dtmfType) {\n                    switch (dtmfType) {\n                        case Constants_1.C.dtmfType.RTP:\n                            return Constants_1.C.dtmfType.RTP;\n                        case Constants_1.C.dtmfType.INFO:\n                        // Fall through\n                        default:\n                            return Constants_1.C.dtmfType.INFO;\n                    }\n                },\n                hackViaTcp: function (hackViaTcp) {\n                    if (typeof hackViaTcp === \"boolean\") {\n                        return hackViaTcp;\n                    }\n                },\n                hackIpInContact: function (hackIpInContact) {\n                    if (typeof hackIpInContact === \"boolean\") {\n                        return hackIpInContact;\n                    }\n                    else if (typeof hackIpInContact === \"string\" && core_1.Grammar.parse(hackIpInContact, \"host\") !== -1) {\n                        return hackIpInContact;\n                    }\n                },\n                hackWssInTransport: function (hackWssInTransport) {\n                    if (typeof hackWssInTransport === \"boolean\") {\n                        return hackWssInTransport;\n                    }\n                },\n                hackAllowUnregisteredOptionTags: function (hackAllowUnregisteredOptionTags) {\n                    if (typeof hackAllowUnregisteredOptionTags === \"boolean\") {\n                        return hackAllowUnregisteredOptionTags;\n                    }\n                },\n                contactTransport: function (contactTransport) {\n                    if (typeof contactTransport === \"string\") {\n                        return contactTransport;\n                    }\n                },\n                extraSupported: function (optionTags) {\n                    if (!(optionTags instanceof Array)) {\n                        return;\n                    }\n                    for (var _i = 0, optionTags_1 = optionTags; _i < optionTags_1.length; _i++) {\n                        var tag = optionTags_1[_i];\n                        if (typeof tag !== \"string\") {\n                            return;\n                        }\n                    }\n                    return optionTags;\n                },\n                forceRport: function (forceRport) {\n                    if (typeof forceRport === \"boolean\") {\n                        return forceRport;\n                    }\n                },\n                noAnswerTimeout: function (noAnswerTimeout) {\n                    if (Utils_1.Utils.isDecimal(noAnswerTimeout)) {\n                        var value = Number(noAnswerTimeout);\n                        if (value > 0) {\n                            return value;\n                        }\n                    }\n                },\n                password: function (password) {\n                    return String(password);\n                },\n                rel100: function (rel100) {\n                    if (rel100 === Constants_1.C.supported.REQUIRED) {\n                        return Constants_1.C.supported.REQUIRED;\n                    }\n                    else if (rel100 === Constants_1.C.supported.SUPPORTED) {\n                        return Constants_1.C.supported.SUPPORTED;\n                    }\n                    else {\n                        return Constants_1.C.supported.UNSUPPORTED;\n                    }\n                },\n                replaces: function (replaces) {\n                    if (replaces === Constants_1.C.supported.REQUIRED) {\n                        return Constants_1.C.supported.REQUIRED;\n                    }\n                    else if (replaces === Constants_1.C.supported.SUPPORTED) {\n                        return Constants_1.C.supported.SUPPORTED;\n                    }\n                    else {\n                        return Constants_1.C.supported.UNSUPPORTED;\n                    }\n                },\n                register: function (register) {\n                    if (typeof register === \"boolean\") {\n                        return register;\n                    }\n                },\n                registerOptions: function (registerOptions) {\n                    if (typeof registerOptions === \"object\") {\n                        return registerOptions;\n                    }\n                },\n                usePreloadedRoute: function (usePreloadedRoute) {\n                    if (typeof usePreloadedRoute === \"boolean\") {\n                        return usePreloadedRoute;\n                    }\n                },\n                userAgentString: function (userAgentString) {\n                    if (typeof userAgentString === \"string\") {\n                        return userAgentString;\n                    }\n                },\n                autostart: function (autostart) {\n                    if (typeof autostart === \"boolean\") {\n                        return autostart;\n                    }\n                },\n                autostop: function (autostop) {\n                    if (typeof autostop === \"boolean\") {\n                        return autostop;\n                    }\n                },\n                sessionDescriptionHandlerFactory: function (sessionDescriptionHandlerFactory) {\n                    if (sessionDescriptionHandlerFactory instanceof Function) {\n                        return sessionDescriptionHandlerFactory;\n                    }\n                },\n                sessionDescriptionHandlerFactoryOptions: function (options) {\n                    if (typeof options === \"object\") {\n                        return options;\n                    }\n                },\n                authenticationFactory: this.checkAuthenticationFactory,\n                allowLegacyNotifications: function (allowLegacyNotifications) {\n                    if (typeof allowLegacyNotifications === \"boolean\") {\n                        return allowLegacyNotifications;\n                    }\n                },\n                custom: function (custom) {\n                    if (typeof custom === \"object\") {\n                        return custom;\n                    }\n                },\n                contactName: function (contactName) {\n                    if (typeof contactName === \"string\") {\n                        return contactName;\n                    }\n                },\n                experimentalFeatures: function (experimentalFeatures) {\n                    if (typeof experimentalFeatures === \"boolean\") {\n                        return experimentalFeatures;\n                    }\n                },\n            }\n        };\n    };\n    UA.C = {\n        // UA status codes\n        STATUS_INIT: 0,\n        STATUS_STARTING: 1,\n        STATUS_READY: 2,\n        STATUS_USER_CLOSED: 3,\n        STATUS_NOT_READY: 4,\n        // UA error codes\n        CONFIGURATION_ERROR: 1,\n        NETWORK_ERROR: 2,\n        ALLOWED_METHODS: [\n            \"ACK\",\n            \"CANCEL\",\n            \"INVITE\",\n            \"MESSAGE\",\n            \"BYE\",\n            \"OPTIONS\",\n            \"INFO\",\n            \"NOTIFY\",\n            \"REFER\"\n        ],\n        ACCEPTED_BODY_TYPES: [\n            \"application/sdp\",\n            \"application/dtmf-relay\"\n        ],\n        MAX_FORWARDS: 70,\n        TAG_LENGTH: 10\n    };\n    return UA;\n}(events_1.EventEmitter));\nexports.UA = UA;\n(function (UA) {\n    var DtmfType;\n    (function (DtmfType) {\n        DtmfType[\"RTP\"] = \"rtp\";\n        DtmfType[\"INFO\"] = \"info\";\n    })(DtmfType = UA.DtmfType || (UA.DtmfType = {}));\n})(UA = exports.UA || (exports.UA = {}));\nexports.UA = UA;\n/**\n * Factory function to generate configuration give a UA.\n * @param ua UA\n */\nfunction makeUserAgentCoreConfigurationFromUA(ua) {\n    // FIXME: Configuration URI is a bad mix of types currently. It also needs to exist.\n    if (!(ua.configuration.uri instanceof core_1.URI)) {\n        throw new Error(\"Configuration URI not instance of URI.\");\n    }\n    var aor = ua.configuration.uri;\n    var contact = ua.contact;\n    var displayName = ua.configuration.displayName ? ua.configuration.displayName : \"\";\n    var hackViaTcp = ua.configuration.hackViaTcp ? true : false;\n    var routeSet = ua.configuration.usePreloadedRoute && ua.transport.server && ua.transport.server.sipUri ?\n        [ua.transport.server.sipUri] :\n        [];\n    var sipjsId = ua.configuration.sipjsId || Utils_1.Utils.createRandomToken(5);\n    var supportedOptionTags = [];\n    supportedOptionTags.push(\"outbound\"); // TODO: is this really supported?\n    if (ua.configuration.rel100 === Constants_1.C.supported.SUPPORTED) {\n        supportedOptionTags.push(\"100rel\");\n    }\n    if (ua.configuration.replaces === Constants_1.C.supported.SUPPORTED) {\n        supportedOptionTags.push(\"replaces\");\n    }\n    if (ua.configuration.extraSupported) {\n        supportedOptionTags.push.apply(supportedOptionTags, ua.configuration.extraSupported);\n    }\n    if (!ua.configuration.hackAllowUnregisteredOptionTags) {\n        supportedOptionTags = supportedOptionTags.filter(function (optionTag) { return Constants_1.C.OPTION_TAGS[optionTag]; });\n    }\n    supportedOptionTags = Array.from(new Set(supportedOptionTags)); // array of unique values\n    var supportedOptionTagsResponse = ua.getSupportedResponseOptions();\n    var userAgentHeaderFieldValue = ua.configuration.userAgentString || \"sipjs\";\n    if (!(ua.configuration.viaHost)) {\n        throw new Error(\"Configuration via host undefined\");\n    }\n    var viaForceRport = ua.configuration.forceRport ? true : false;\n    var viaHost = ua.configuration.viaHost;\n    var configuration = {\n        aor: aor,\n        contact: contact,\n        displayName: displayName,\n        hackViaTcp: hackViaTcp,\n        loggerFactory: ua.getLoggerFactory(),\n        routeSet: routeSet,\n        sipjsId: sipjsId,\n        supportedOptionTags: supportedOptionTags,\n        supportedOptionTagsResponse: supportedOptionTagsResponse,\n        userAgentHeaderFieldValue: userAgentHeaderFieldValue,\n        viaForceRport: viaForceRport,\n        viaHost: viaHost,\n        authenticationFactory: function () {\n            if (ua.configuration.authenticationFactory) {\n                return ua.configuration.authenticationFactory(ua);\n            }\n            return undefined;\n        },\n        transportAccessor: function () { return ua.transport; }\n    };\n    return configuration;\n}\nexports.makeUserAgentCoreConfigurationFromUA = makeUserAgentCoreConfigurationFromUA;\n\n\n/***/ }),\n/* 95 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar events_1 = __webpack_require__(31);\nvar session_1 = __webpack_require__(96);\nvar Enums_1 = __webpack_require__(82);\nvar Exceptions_1 = __webpack_require__(84);\nvar Utils_1 = __webpack_require__(83);\nvar Modifiers = tslib_1.__importStar(__webpack_require__(110));\nvar SessionDescriptionHandlerObserver_1 = __webpack_require__(111);\n/* SessionDescriptionHandler\n * @class PeerConnection helper Class.\n * @param {SIP.Session} session\n * @param {Object} [options]\n */\nvar SessionDescriptionHandler = /** @class */ (function (_super) {\n    tslib_1.__extends(SessionDescriptionHandler, _super);\n    function SessionDescriptionHandler(logger, observer, options) {\n        var _this = _super.call(this) || this;\n        _this.type = Enums_1.TypeStrings.SessionDescriptionHandler;\n        // TODO: Validate the options\n        _this.options = options || {};\n        _this.logger = logger;\n        _this.observer = observer;\n        _this.dtmfSender = undefined;\n        _this.shouldAcquireMedia = true;\n        _this.CONTENT_TYPE = \"application/sdp\";\n        _this.C = {\n            DIRECTION: {\n                NULL: null,\n                SENDRECV: \"sendrecv\",\n                SENDONLY: \"sendonly\",\n                RECVONLY: \"recvonly\",\n                INACTIVE: \"inactive\"\n            }\n        };\n        _this.logger.log(\"SessionDescriptionHandlerOptions: \" + JSON.stringify(_this.options));\n        _this.direction = _this.C.DIRECTION.NULL;\n        _this.modifiers = _this.options.modifiers || [];\n        if (!Array.isArray(_this.modifiers)) {\n            _this.modifiers = [_this.modifiers];\n        }\n        _this.iceGatheringTimeout = false;\n        _this.initPeerConnection(_this.options.peerConnectionOptions);\n        _this.constraints = _this.checkAndDefaultConstraints(_this.options.constraints);\n        return _this;\n    }\n    /**\n     * @param {SIP.Session} session\n     * @param {Object} [options]\n     */\n    SessionDescriptionHandler.defaultFactory = function (session, options) {\n        var logger = (session instanceof session_1.Session) ?\n            session.userAgent.getLogger(\"sip.sessionDescriptionHandler\", session.id) :\n            session.ua.getLogger(\"sip.invitecontext.sessionDescriptionHandler\", session.id);\n        var observer = new SessionDescriptionHandlerObserver_1.SessionDescriptionHandlerObserver(session, options);\n        return new SessionDescriptionHandler(logger, observer, options);\n    };\n    // Functions the sesssion can use\n    /**\n     * Destructor\n     */\n    SessionDescriptionHandler.prototype.close = function () {\n        this.logger.log(\"closing PeerConnection\");\n        // have to check signalingState since this.close() gets called multiple times\n        if (this.peerConnection && this.peerConnection.signalingState !== \"closed\") {\n            if (this.peerConnection.getSenders) {\n                this.peerConnection.getSenders().forEach(function (sender) {\n                    if (sender.track) {\n                        sender.track.stop();\n                    }\n                });\n            }\n            else {\n                this.logger.warn(\"Using getLocalStreams which is deprecated\");\n                this.peerConnection.getLocalStreams().forEach(function (stream) {\n                    stream.getTracks().forEach(function (track) {\n                        track.stop();\n                    });\n                });\n            }\n            if (this.peerConnection.getReceivers) {\n                this.peerConnection.getReceivers().forEach(function (receiver) {\n                    if (receiver.track) {\n                        receiver.track.stop();\n                    }\n                });\n            }\n            else {\n                this.logger.warn(\"Using getRemoteStreams which is deprecated\");\n                this.peerConnection.getRemoteStreams().forEach(function (stream) {\n                    stream.getTracks().forEach(function (track) {\n                        track.stop();\n                    });\n                });\n            }\n            this.resetIceGatheringComplete();\n            this.peerConnection.close();\n        }\n    };\n    /**\n     * Gets the local description from the underlying media implementation\n     * @param {Object} [options] Options object to be used by getDescription\n     * @param {MediaStreamConstraints} [options.constraints] MediaStreamConstraints\n     *   https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints\n     * @param {Object} [options.peerConnectionOptions] If this is set it will recreate the peer\n     *   connection with the new options\n     * @param {Array} [modifiers] Array with one time use description modifiers\n     * @returns {Promise} Promise that resolves with the local description to be used for the session\n     */\n    SessionDescriptionHandler.prototype.getDescription = function (options, modifiers) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        if (modifiers === void 0) { modifiers = []; }\n        if (options.peerConnectionOptions) {\n            this.initPeerConnection(options.peerConnectionOptions);\n        }\n        // Merge passed constraints with saved constraints and save\n        var newConstraints = Object.assign({}, this.constraints, options.constraints);\n        newConstraints = this.checkAndDefaultConstraints(newConstraints);\n        if (JSON.stringify(newConstraints) !== JSON.stringify(this.constraints)) {\n            this.constraints = newConstraints;\n            this.shouldAcquireMedia = true;\n        }\n        if (!Array.isArray(modifiers)) {\n            modifiers = [modifiers];\n        }\n        modifiers = modifiers.concat(this.modifiers);\n        return Promise.resolve().then(function () {\n            if (_this.shouldAcquireMedia) {\n                return _this.acquire(_this.constraints).then(function () {\n                    _this.shouldAcquireMedia = false;\n                });\n            }\n        }).then(function () { return _this.createOfferOrAnswer(options.RTCOfferOptions, modifiers); })\n            .then(function (description) {\n            if (description.sdp === undefined) {\n                throw new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"getDescription\", undefined, \"SDP undefined\");\n            }\n            _this.emit(\"getDescription\", description);\n            return {\n                body: description.sdp,\n                contentType: _this.CONTENT_TYPE\n            };\n        });\n    };\n    /**\n     * Check if the Session Description Handler can handle the Content-Type described by a SIP Message\n     * @param {String} contentType The content type that is in the SIP Message\n     * @returns {boolean}\n     */\n    SessionDescriptionHandler.prototype.hasDescription = function (contentType) {\n        return contentType === this.CONTENT_TYPE;\n    };\n    /**\n     * The modifier that should be used when the session would like to place the call on hold\n     * @param {String} [sdp] The description that will be modified\n     * @returns {Promise} Promise that resolves with modified SDP\n     */\n    SessionDescriptionHandler.prototype.holdModifier = function (description) {\n        if (!description.sdp) {\n            return Promise.resolve(description);\n        }\n        if (!(/a=(sendrecv|sendonly|recvonly|inactive)/).test(description.sdp)) {\n            description.sdp = description.sdp.replace(/(m=[^\\r]*\\r\\n)/g, \"$1a=sendonly\\r\\n\");\n        }\n        else {\n            description.sdp = description.sdp.replace(/a=sendrecv\\r\\n/g, \"a=sendonly\\r\\n\");\n            description.sdp = description.sdp.replace(/a=recvonly\\r\\n/g, \"a=inactive\\r\\n\");\n        }\n        return Promise.resolve(description);\n    };\n    /**\n     * Set the remote description to the underlying media implementation\n     * @param {String} sessionDescription The description provided by a SIP message to be set on the media implementation\n     * @param {Object} [options] Options object to be used by getDescription\n     * @param {MediaStreamConstraints} [options.constraints] MediaStreamConstraints\n     *   https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints\n     * @param {Object} [options.peerConnectionOptions] If this is set it will recreate the peer\n     *   connection with the new options\n     * @param {Array} [modifiers] Array with one time use description modifiers\n     * @returns {Promise} Promise that resolves once the description is set\n     */\n    SessionDescriptionHandler.prototype.setDescription = function (sessionDescription, options, modifiers) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        if (modifiers === void 0) { modifiers = []; }\n        if (options.peerConnectionOptions) {\n            this.initPeerConnection(options.peerConnectionOptions);\n        }\n        if (!Array.isArray(modifiers)) {\n            modifiers = [modifiers];\n        }\n        modifiers = modifiers.concat(this.modifiers);\n        var description = {\n            type: this.hasOffer(\"local\") ? \"answer\" : \"offer\",\n            sdp: sessionDescription\n        };\n        return Promise.resolve().then(function () {\n            // Media should be acquired in getDescription unless we need to do it sooner for some reason (FF61+)\n            if (_this.shouldAcquireMedia && _this.options.alwaysAcquireMediaFirst) {\n                return _this.acquire(_this.constraints).then(function () {\n                    _this.shouldAcquireMedia = false;\n                });\n            }\n        }).then(function () { return Utils_1.Utils.reducePromises(modifiers, description); })\n            .catch(function (e) {\n            if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\n                throw e;\n            }\n            var error = new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"setDescription\", e, \"The modifiers did not resolve successfully\");\n            _this.logger.error(error.message);\n            _this.emit(\"peerConnection-setRemoteDescriptionFailed\", error);\n            throw error;\n        }).then(function (modifiedDescription) {\n            _this.emit(\"setDescription\", modifiedDescription);\n            return _this.peerConnection.setRemoteDescription(modifiedDescription);\n        }).catch(function (e) {\n            if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\n                throw e;\n            }\n            // Check the original SDP for video, and ensure that we have want to do audio fallback\n            if ((/^m=video.+$/gm).test(sessionDescription) && !options.disableAudioFallback) {\n                // Do not try to audio fallback again\n                options.disableAudioFallback = true;\n                // Remove video first, then do the other modifiers\n                return _this.setDescription(sessionDescription, options, [Modifiers.stripVideo].concat(modifiers));\n            }\n            var error = new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"setDescription\", e);\n            if (error.error) {\n                _this.logger.error(error.error);\n            }\n            _this.emit(\"peerConnection-setRemoteDescriptionFailed\", error);\n            throw error;\n        }).then(function () {\n            if (_this.peerConnection.getReceivers) {\n                _this.emit(\"setRemoteDescription\", _this.peerConnection.getReceivers());\n            }\n            else {\n                _this.emit(\"setRemoteDescription\", _this.peerConnection.getRemoteStreams());\n            }\n            _this.emit(\"confirmed\", _this);\n        });\n    };\n    /**\n     * Send DTMF via RTP (RFC 4733)\n     * @param {String} tones A string containing DTMF digits\n     * @param {Object} [options] Options object to be used by sendDtmf\n     * @returns {boolean} true if DTMF send is successful, false otherwise\n     */\n    SessionDescriptionHandler.prototype.sendDtmf = function (tones, options) {\n        if (options === void 0) { options = {}; }\n        if (!this.dtmfSender && this.hasBrowserGetSenderSupport()) {\n            var senders = this.peerConnection.getSenders();\n            if (senders.length > 0) {\n                this.dtmfSender = senders[0].dtmf;\n            }\n        }\n        if (!this.dtmfSender && this.hasBrowserTrackSupport()) {\n            var streams = this.peerConnection.getLocalStreams();\n            if (streams.length > 0) {\n                var audioTracks = streams[0].getAudioTracks();\n                if (audioTracks.length > 0) {\n                    this.dtmfSender = this.peerConnection.createDTMFSender(audioTracks[0]);\n                }\n            }\n        }\n        if (!this.dtmfSender) {\n            return false;\n        }\n        try {\n            this.dtmfSender.insertDTMF(tones, options.duration, options.interToneGap);\n        }\n        catch (e) {\n            if (e.type === \"InvalidStateError\" || e.type === \"InvalidCharacterError\") {\n                this.logger.error(e);\n                return false;\n            }\n            else {\n                throw e;\n            }\n        }\n        this.logger.log(\"DTMF sent via RTP: \" + tones.toString());\n        return true;\n    };\n    /**\n     * Get the direction of the session description\n     * @returns {String} direction of the description\n     */\n    SessionDescriptionHandler.prototype.getDirection = function () {\n        return this.direction;\n    };\n    SessionDescriptionHandler.prototype.on = function (name, callback) { return _super.prototype.on.call(this, name, callback); };\n    SessionDescriptionHandler.prototype.getMediaStream = function (constraints) {\n        console.log(\"getMediaStream\")\n        console.log(constraints)\n        //if(constraints.video && constraints.video.mediaSource !== undefined) {\n        //    return navigator.mediaDevices.getDisplayMedia(constraints);\n        //}\n        //else {\n            return navigator.mediaDevices.getUserMedia(constraints);\n        //}\n    };\n    // Internal functions\n    SessionDescriptionHandler.prototype.createOfferOrAnswer = function (RTCOfferOptions, modifiers) {\n        var _this = this;\n        console.log(\"====================================\")\n        console.log(RTCOfferOptions)\n        if (RTCOfferOptions === void 0) { \n            RTCOfferOptions = {}; \n        }\n        if (modifiers === void 0) { modifiers = []; }\n        var methodName = this.hasOffer(\"remote\") ? \"createAnswer\" : \"createOffer\";\n        var pc = this.peerConnection;\n        try {\n            if(RTCOfferOptions.offerToReceiveVideo) {\n                pc.addTransceiver(\"video\", {direction: \"sendrecv\"})    \n            }\n            if(RTCOfferOptions.offerToReceiveAudio) {\n                pc.addTransceiver(\"audio\", {direction: \"sendrecv\"})\n            }\n        }\n        catch(e) {\n            console.log(\"Problem adding null receiver\")\n            console.log(e)\n        }\n        this.logger.log(methodName);\n        var method = this.hasOffer(\"remote\") ? pc.createAnswer : pc.createOffer;\n        return method.apply(pc, RTCOfferOptions).catch(function (e) {\n            if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\n                throw e;\n            }\n            var error = new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"createOfferOrAnswer\", e, \"peerConnection-\" + methodName + \"Failed\");\n            _this.emit(\"peerConnection-\" + methodName + \"Failed\", error);\n            throw error;\n        }).then(function (sdp) {\n            console.log(\"offer sdp\")\n            console.log(sdp)\n            return Utils_1.Utils.reducePromises(modifiers, _this.createRTCSessionDescriptionInit(sdp));\n        }).then(function (sdp) {\n            _this.resetIceGatheringComplete();\n            _this.logger.log(\"Setting local sdp.\");\n            _this.logger.log(\"sdp is \" + sdp.sdp || false);\n            return pc.setLocalDescription(sdp);\n        }).catch(function (e) {\n            if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\n                throw e;\n            }\n            var error = new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"createOfferOrAnswer\", e, \"peerConnection-SetLocalDescriptionFailed\");\n            _this.emit(\"peerConnection-SetLocalDescriptionFailed\", error);\n            throw error;\n        }).then(function () { return _this.waitForIceGatheringComplete(); })\n            .then(function () {\n            if (!_this.peerConnection.localDescription) {\n                throw new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"Missing local description\");\n            }\n            var localDescription = _this.createRTCSessionDescriptionInit(_this.peerConnection.localDescription);\n            return Utils_1.Utils.reducePromises(modifiers, localDescription);\n        }).then(function (localDescription) {\n            _this.setDirection(localDescription.sdp || \"\");\n            return localDescription;\n        }).catch(function (e) {\n            if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\n                throw e;\n            }\n            var error = new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"createOfferOrAnswer\", e);\n            _this.logger.error(error.toString());\n            throw error;\n        });\n    };\n    // Creates an RTCSessionDescriptionInit from an RTCSessionDescription\n    SessionDescriptionHandler.prototype.createRTCSessionDescriptionInit = function (RTCSessionDescription) {\n        return {\n            type: RTCSessionDescription.type,\n            sdp: RTCSessionDescription.sdp\n        };\n    };\n    SessionDescriptionHandler.prototype.addDefaultIceCheckingTimeout = function (peerConnectionOptions) {\n        if (peerConnectionOptions.iceCheckingTimeout === undefined) {\n            peerConnectionOptions.iceCheckingTimeout = 5000;\n        }\n        return peerConnectionOptions;\n    };\n    SessionDescriptionHandler.prototype.addDefaultIceServers = function (rtcConfiguration) {\n        if (!rtcConfiguration.iceServers) {\n            rtcConfiguration.iceServers = [{ urls: \"stun:stun.l.google.com:19302\" }];\n        }\n        return rtcConfiguration;\n    };\n    SessionDescriptionHandler.prototype.checkAndDefaultConstraints = function (constraints) {\n        var defaultConstraints = { audio: true, video: !this.options.alwaysAcquireMediaFirst };\n        constraints = constraints || defaultConstraints;\n        // Empty object check\n        if (Object.keys(constraints).length === 0 && constraints.constructor === Object) {\n            return defaultConstraints;\n        }\n        return constraints;\n    };\n    SessionDescriptionHandler.prototype.hasBrowserTrackSupport = function () {\n        return Boolean(this.peerConnection.addTrack);\n    };\n    SessionDescriptionHandler.prototype.hasBrowserGetSenderSupport = function () {\n        return Boolean(this.peerConnection.getSenders);\n    };\n    SessionDescriptionHandler.prototype.initPeerConnection = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        options = this.addDefaultIceCheckingTimeout(options);\n        options.rtcConfiguration = options.rtcConfiguration || {};\n        options.rtcConfiguration = this.addDefaultIceServers(options.rtcConfiguration);\n        this.logger.log(\"initPeerConnection\");\n        if (this.peerConnection) {\n            this.logger.log(\"Already have a peer connection for this session. Tearing down.\");\n            this.resetIceGatheringComplete();\n            this.peerConnection.close();\n        }\n        this.peerConnection = new RTCPeerConnection(options.rtcConfiguration);\n        this.logger.log(\"New peer connection created\");\n        if (\"ontrack\" in this.peerConnection) {\n            this.peerConnection.addEventListener(\"track\", function (e) {\n                _this.logger.log(\"track added\");\n                _this.observer.trackAdded();\n                _this.emit(\"addTrack\", e);\n            });\n        }\n        else {\n            this.logger.warn(\"Using onaddstream which is deprecated\");\n            this.peerConnection.onaddstream = function (e) {\n                _this.logger.log(\"stream added\");\n                _this.emit(\"addStream\", e);\n            };\n        }\n        this.peerConnection.onicecandidate = function (e) {\n            _this.emit(\"iceCandidate\", e);\n            if (e.candidate) {\n                _this.logger.log(\"ICE candidate received: \" +\n                    (e.candidate.candidate === null ? null : e.candidate.candidate.trim()));\n            }\n            else if (e.candidate === null) {\n                // indicates the end of candidate gathering\n                _this.logger.log(\"ICE candidate gathering complete\");\n                _this.triggerIceGatheringComplete();\n            }\n        };\n        this.peerConnection.onicegatheringstatechange = function () {\n            _this.logger.log(\"RTCIceGatheringState changed: \" + _this.peerConnection.iceGatheringState);\n            switch (_this.peerConnection.iceGatheringState) {\n                case \"gathering\":\n                    _this.emit(\"iceGathering\", _this);\n                    if (!_this.iceGatheringTimer && options.iceCheckingTimeout) {\n                        _this.iceGatheringTimeout = false;\n                        _this.iceGatheringTimer = setTimeout(function () {\n                            _this.logger.log(\"RTCIceChecking Timeout Triggered after \" + options.iceCheckingTimeout + \" milliseconds\");\n                            _this.iceGatheringTimeout = true;\n                            _this.triggerIceGatheringComplete();\n                        }, options.iceCheckingTimeout);\n                    }\n                    break;\n                case \"complete\":\n                    _this.triggerIceGatheringComplete();\n                    break;\n            }\n        };\n        this.peerConnection.oniceconnectionstatechange = function () {\n            var stateEvent;\n            switch (_this.peerConnection.iceConnectionState) {\n                case \"new\":\n                    stateEvent = \"iceConnection\";\n                    break;\n                case \"checking\":\n                    stateEvent = \"iceConnectionChecking\";\n                    break;\n                case \"connected\":\n                    stateEvent = \"iceConnectionConnected\";\n                    break;\n                case \"completed\":\n                    stateEvent = \"iceConnectionCompleted\";\n                    break;\n                case \"failed\":\n                    stateEvent = \"iceConnectionFailed\";\n                    break;\n                case \"disconnected\":\n                    stateEvent = \"iceConnectionDisconnected\";\n                    break;\n                case \"closed\":\n                    stateEvent = \"iceConnectionClosed\";\n                    break;\n                default:\n                    _this.logger.warn(\"Unknown iceConnection state: \" + _this.peerConnection.iceConnectionState);\n                    return;\n            }\n            _this.logger.log(\"ICE Connection State changed to \" + stateEvent);\n            _this.emit(stateEvent, _this);\n        };\n    };\n    SessionDescriptionHandler.prototype.acquire = function (constraints) {\n        var _this = this;\n        // Default audio & video to true\n        constraints = this.checkAndDefaultConstraints(constraints);\n        return new Promise(function (resolve, reject) {\n            /*\n             * Make the call asynchronous, so that ICCs have a chance\n             * to define callbacks to `userMediaRequest`\n             */\n            _this.logger.log(\"acquiring local media\");\n            _this.emit(\"userMediaRequest\", constraints);\n            if (constraints.audio || constraints.video) {\n                _this.getMediaStream(constraints).then(function (streams) {\n                    _this.observer.trackAdded();\n                    _this.emit(\"userMedia\", streams);\n                    resolve(streams);\n                }).catch(function (e) {\n                    _this.emit(\"userMediaFailed\", e);\n                    reject(e);\n                });\n            }\n            else {\n                // Local streams were explicitly excluded.\n                resolve([]);\n            }\n        }).catch(function (e) {\n            if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\n                throw e;\n            }\n            var error = new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"acquire\", e, \"unable to acquire streams\");\n            _this.logger.error(error.message);\n            if (error.error) {\n                _this.logger.error(error.error);\n            }\n            throw error;\n        }).then(function (streams) {\n            _this.logger.log(\"acquired local media streams\");\n            // Remove old tracks\n            if (_this.peerConnection.removeTrack) {\n                _this.peerConnection.getSenders().forEach(function (sender) {\n                    _this.peerConnection.removeTrack(sender);\n                });\n            }\n            return streams;\n        }).catch(function (e) {\n            if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\n                throw e;\n            }\n            var error = new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"acquire\", e, \"error removing streams\");\n            _this.logger.error(error.message);\n            if (error.error) {\n                _this.logger.error(error.error);\n            }\n            throw error;\n        }).then(function (streams) {\n            var streamsArr = [].concat(streams);\n            streamsArr.forEach(function (stream) {\n                if (_this.peerConnection.addTrack) {\n                    stream.getTracks().forEach(function (track) {\n                        _this.peerConnection.addTrack(track, stream);\n                    });\n                }\n                else {\n                    // Chrome 59 does not support addTrack\n                    _this.peerConnection.addStream(stream);\n                }\n            });\n            return Promise.resolve();\n        }).catch(function (e) {\n            if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\n                throw e;\n            }\n            var error = new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"acquire\", e, \"error adding stream\");\n            _this.logger.error(error.message);\n            if (error.error) {\n                _this.logger.error(error.error);\n            }\n            throw error;\n        });\n    };\n    SessionDescriptionHandler.prototype.hasOffer = function (where) {\n        var offerState = \"have-\" + where + \"-offer\";\n        return this.peerConnection.signalingState === offerState;\n    };\n    // ICE gathering state handling\n    SessionDescriptionHandler.prototype.isIceGatheringComplete = function () {\n        return this.peerConnection.iceGatheringState === \"complete\" || this.iceGatheringTimeout;\n    };\n    SessionDescriptionHandler.prototype.resetIceGatheringComplete = function () {\n        this.iceGatheringTimeout = false;\n        this.logger.log(\"resetIceGatheringComplete\");\n        if (this.iceGatheringTimer) {\n            clearTimeout(this.iceGatheringTimer);\n            this.iceGatheringTimer = undefined;\n        }\n        if (this.iceGatheringDeferred) {\n            this.iceGatheringDeferred.reject();\n            this.iceGatheringDeferred = undefined;\n        }\n    };\n    SessionDescriptionHandler.prototype.setDirection = function (sdp) {\n        var match = sdp.match(/a=(sendrecv|sendonly|recvonly|inactive)/);\n        if (match === null) {\n            this.direction = this.C.DIRECTION.NULL;\n            this.observer.directionChanged();\n            return;\n        }\n        var direction = match[1];\n        switch (direction) {\n            case this.C.DIRECTION.SENDRECV:\n            case this.C.DIRECTION.SENDONLY:\n            case this.C.DIRECTION.RECVONLY:\n            case this.C.DIRECTION.INACTIVE:\n                this.direction = direction;\n                break;\n            default:\n                this.direction = this.C.DIRECTION.NULL;\n                break;\n        }\n        this.observer.directionChanged();\n    };\n    SessionDescriptionHandler.prototype.triggerIceGatheringComplete = function () {\n        if (this.isIceGatheringComplete()) {\n            this.emit(\"iceGatheringComplete\", this);\n            if (this.iceGatheringTimer) {\n                clearTimeout(this.iceGatheringTimer);\n                this.iceGatheringTimer = undefined;\n            }\n            if (this.iceGatheringDeferred) {\n                this.iceGatheringDeferred.resolve();\n                this.iceGatheringDeferred = undefined;\n            }\n        }\n    };\n    SessionDescriptionHandler.prototype.waitForIceGatheringComplete = function () {\n        this.logger.log(\"waitForIceGatheringComplete\");\n        if (this.isIceGatheringComplete()) {\n            this.logger.log(\"ICE is already complete. Return resolved.\");\n            return Promise.resolve();\n        }\n        else if (!this.iceGatheringDeferred) {\n            this.iceGatheringDeferred = Utils_1.Utils.defer();\n        }\n        this.logger.log(\"ICE is not complete. Returning promise\");\n        return this.iceGatheringDeferred ? this.iceGatheringDeferred.promise : Promise.resolve();\n    };\n    return SessionDescriptionHandler;\n}(events_1.EventEmitter));\nexports.SessionDescriptionHandler = SessionDescriptionHandler;\n\n\n/***/ }),\n/* 96 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar events_1 = __webpack_require__(31);\nvar core_1 = __webpack_require__(2);\nvar utils_1 = __webpack_require__(16);\nvar allowed_methods_1 = __webpack_require__(61);\nvar bye_1 = __webpack_require__(97);\nvar emitter_1 = __webpack_require__(98);\nvar exceptions_1 = __webpack_require__(99);\nvar info_1 = __webpack_require__(105);\nvar message_1 = __webpack_require__(106);\nvar notification_1 = __webpack_require__(107);\nvar referral_1 = __webpack_require__(108);\nvar session_state_1 = __webpack_require__(109);\n/**\n * A session provides real time communication between one or more participants.\n *\n * @remarks\n * The transport behaves in a deterministic manner according to the\n * the state defined in {@link SessionState}.\n * @public\n */\nvar Session = /** @class */ (function () {\n    /**\n     * Constructor.\n     * @param userAgent - User agent. See {@link UserAgent} for details.\n     * @internal\n     */\n    function Session(userAgent, options) {\n        if (options === void 0) { options = {}; }\n        /** True if there is a re-INVITE request outstanding. */\n        this.pendingReinvite = false;\n        /** Session state. */\n        this._state = session_state_1.SessionState.Initial;\n        /** Session state emitter. */\n        this._stateEventEmitter = new events_1.EventEmitter();\n        this.delegate = options.delegate;\n        this._userAgent = userAgent;\n    }\n    /**\n     * Destructor.\n     */\n    Session.prototype.dispose = function () {\n        var _this = this;\n        this.logger.log(\"Session \" + this.id + \" in state \" + this._state + \" is being disposed\");\n        // Remove from the user agent's session collection\n        delete this.userAgent._sessions[this.id];\n        // Dispose of dialog media\n        if (this._sessionDescriptionHandler) {\n            this._sessionDescriptionHandler.close();\n            // TODO: The SDH needs to remain defined as it will be called after it is closed in cases\n            // where an answer/offer arrives while the session is being torn down. There are a variety\n            // of circumstances where this can happen - sending a BYE during a re-INVITE for example.\n            // The code is currently written such that it lazily makes a new SDH when it needs one\n            // and one is not yet defined. Thus if we undefined it here, it will currently make a\n            // new one which is out of sync and then never gets cleaned up.\n            //\n            // The downside of leaving it defined are that calls this closed SDH will continue to be\n            // made (think setDescription) and those should/will fail. These failures are handled, but\n            // it would be nice to have it all coded up in a way where having an undefined SDH where\n            // one is expected throws an error.\n            //\n            // this._sessionDescriptionHandler = undefined;\n        }\n        switch (this.state) {\n            case session_state_1.SessionState.Initial:\n                break; // the Inviter/Invitation sub class dispose method handles this case\n            case session_state_1.SessionState.Establishing:\n                break; // the Inviter/Invitation sub class dispose method handles this case\n            case session_state_1.SessionState.Established:\n                return new Promise(function (resolve, reject) {\n                    _this._bye({\n                        onAccept: function () { return resolve(); },\n                        onRedirect: function () { return resolve(); },\n                        onReject: function () { return resolve(); }\n                    });\n                });\n            case session_state_1.SessionState.Terminating:\n                break; // nothing to be done\n            case session_state_1.SessionState.Terminated:\n                break; // nothing to be done\n            default:\n                throw new Error(\"Unknown state.\");\n        }\n        return Promise.resolve();\n    };\n    Object.defineProperty(Session.prototype, \"assertedIdentity\", {\n        /**\n         * The asserted identity of the remote user.\n         */\n        get: function () {\n            return this._assertedIdentity;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Session.prototype, \"dialog\", {\n        /**\n         * The confirmed session dialog.\n         */\n        get: function () {\n            return this._dialog;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Session.prototype, \"id\", {\n        /**\n         * A unique identifier for this session.\n         */\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Session.prototype, \"replacee\", {\n        /**\n         * The session being replace by this one.\n         */\n        get: function () {\n            return this._replacee;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Session.prototype, \"sessionDescriptionHandler\", {\n        /**\n         * Session description handler.\n         * @remarks\n         * If `this` is an instance of `Invitation`,\n         * `sessionDescriptionHandler` will be defined when the session state changes to \"established\".\n         * If `this` is an instance of `Inviter` and an offer was sent in the INVITE,\n         * `sessionDescriptionHandler` will be defined when the session state changes to \"establishing\".\n         * If `this` is an instance of `Inviter` and an offer was not sent in the INVITE,\n         * `sessionDescriptionHandler` will be defined when the session state changes to \"established\".\n         * Otherwise `undefined`.\n         */\n        get: function () {\n            return this._sessionDescriptionHandler;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Session.prototype, \"sessionDescriptionHandlerFactory\", {\n        /**\n         * Session description handler factory.\n         */\n        get: function () {\n            return this.userAgent.configuration.sessionDescriptionHandlerFactory;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Session.prototype, \"state\", {\n        /**\n         * Session state.\n         */\n        get: function () {\n            return this._state;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Session.prototype, \"stateChange\", {\n        /**\n         * Session state change emitter.\n         */\n        get: function () {\n            return emitter_1._makeEmitter(this._stateEventEmitter);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Session.prototype, \"userAgent\", {\n        /**\n         * The user agent.\n         */\n        get: function () {\n            return this._userAgent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * End the {@link Session}. Sends a BYE.\n     * @param options - Options bucket. See {@link SessionByeOptions} for details.\n     */\n    Session.prototype.bye = function (options) {\n        if (options === void 0) { options = {}; }\n        var message = \"Session.bye() may only be called if established session.\";\n        switch (this.state) {\n            case session_state_1.SessionState.Initial:\n                if (typeof this.cancel === \"function\") {\n                    message += \" However Inviter.invite() has not yet been called.\";\n                    message += \" Perhaps you should have called Inviter.cancel()?\";\n                }\n                else if (typeof this.reject === \"function\") {\n                    message += \" However Invitation.accept() has not yet been called.\";\n                    message += \" Perhaps you should have called Invitation.reject()?\";\n                }\n                break;\n            case session_state_1.SessionState.Establishing:\n                if (typeof this.cancel === \"function\") {\n                    message += \" However a dialog does not yet exist.\";\n                    message += \" Perhaps you should have called Inviter.cancel()?\";\n                }\n                else if (typeof this.reject === \"function\") {\n                    message += \" However Invitation.accept() has not yet been called (or not yet resolved).\";\n                    message += \" Perhaps you should have called Invitation.reject()?\";\n                }\n                break;\n            case session_state_1.SessionState.Established:\n                var requestDelegate = options.requestDelegate;\n                var requestOptions = this.copyRequestOptions(options.requestOptions);\n                return this._bye(requestDelegate, requestOptions);\n            case session_state_1.SessionState.Terminating:\n                message += \" However this session is already terminating.\";\n                if (typeof this.cancel === \"function\") {\n                    message += \" Perhaps you have already called Inviter.cancel()?\";\n                }\n                else if (typeof this.reject === \"function\") {\n                    message += \" Perhaps you have already called Session.bye()?\";\n                }\n                break;\n            case session_state_1.SessionState.Terminated:\n                message += \" However this session is already terminated.\";\n                break;\n            default:\n                throw new Error(\"Unknown state\");\n        }\n        this.logger.error(message);\n        return Promise.reject(new Error(\"Invalid session state \" + this.state));\n    };\n    /**\n     * Share {@link Info} with peer. Sends an INFO.\n     * @param options - Options bucket. See {@link SessionInfoOptions} for details.\n     */\n    Session.prototype.info = function (options) {\n        if (options === void 0) { options = {}; }\n        // guard session state\n        if (this.state !== session_state_1.SessionState.Established) {\n            var message = \"Session.info() may only be called if established session.\";\n            this.logger.error(message);\n            return Promise.reject(new Error(\"Invalid session state \" + this.state));\n        }\n        var requestDelegate = options.requestDelegate;\n        var requestOptions = this.copyRequestOptions(options.requestOptions);\n        return this._info(requestDelegate, requestOptions);\n    };\n    /**\n     * Renegotiate the session. Sends a re-INVITE.\n     * @param options - Options bucket. See {@link SessionInviteOptions} for details.\n     */\n    Session.prototype.invite = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        this.logger.log(\"Session.invite\");\n        if (this.state !== session_state_1.SessionState.Established) {\n            return Promise.reject(new Error(\"Invalid session state \" + this.state));\n        }\n        if (this.pendingReinvite) {\n            return Promise.reject(new exceptions_1.RequestPendingError(\"Reinvite in progress. Please wait until complete, then try again.\"));\n        }\n        this.pendingReinvite = true;\n        var delegate = {\n            onAccept: function (response) {\n                // A re-INVITE transaction has an offer/answer [RFC3264] exchange\n                // associated with it.  The UAC (User Agent Client) generating a given\n                // re-INVITE can act as the offerer or as the answerer.  A UAC willing\n                // to act as the offerer includes an offer in the re-INVITE.  The UAS\n                // (User Agent Server) then provides an answer in a response to the\n                // re-INVITE.  A UAC willing to act as answerer does not include an\n                // offer in the re-INVITE.  The UAS then provides an offer in a response\n                // to the re-INVITE becoming, thus, the offerer.\n                // https://tools.ietf.org/html/rfc6141#section-1\n                var body = core_1.getBody(response.message);\n                if (!body) {\n                    // No way to recover, so terminate session and mark as failed.\n                    _this.logger.error(\"Received 2xx response to re-INVITE without a session description\");\n                    _this.ackAndBye(response, 400, \"Missing session description\");\n                    _this.stateTransition(session_state_1.SessionState.Terminated);\n                    _this.pendingReinvite = false;\n                    return;\n                }\n                if (options.withoutSdp) {\n                    // INVITE without SDP - set remote offer and send an answer in the ACK\n                    // FIXME: SDH options & SDH modifiers options are applied somewhat ambiguously\n                    //        This behavior was ported from legacy code and the issue punted down the road.\n                    var answerOptions = {\n                        sessionDescriptionHandlerOptions: options.sessionDescriptionHandlerOptions,\n                        sessionDescriptionHandlerModifiers: options.sessionDescriptionHandlerModifiers\n                    };\n                    _this.setOfferAndGetAnswer(body, answerOptions)\n                        .then(function (answerBody) {\n                        response.ack({ body: answerBody });\n                    })\n                        .catch(function (error) {\n                        // No way to recover, so terminate session and mark as failed.\n                        _this.logger.error(\"Failed to handle offer in 2xx response to re-INVITE\");\n                        _this.logger.error(error.message);\n                        if (_this.state === session_state_1.SessionState.Terminated) {\n                            // A BYE should not be sent if already terminated.\n                            // For example, a BYE may be sent/received while re-INVITE is outstanding.\n                            response.ack();\n                        }\n                        else {\n                            _this.ackAndBye(response, 488, \"Bad Media Description\");\n                            _this.stateTransition(session_state_1.SessionState.Terminated);\n                        }\n                    })\n                        .then(function () {\n                        _this.pendingReinvite = false;\n                        if (options.requestDelegate && options.requestDelegate.onAccept) {\n                            options.requestDelegate.onAccept(response);\n                        }\n                    });\n                }\n                else {\n                    // INVITE with SDP - set remote answer and send an ACK\n                    // FIXME: SDH options & SDH modifiers options are applied somewhat ambiguously\n                    //        This behavior was ported from legacy code and the issue punted down the road.\n                    var answerOptions = {\n                        sessionDescriptionHandlerOptions: _this._sessionDescriptionHandlerOptions,\n                        sessionDescriptionHandlerModifiers: _this._sessionDescriptionHandlerModifiers\n                    };\n                    _this.setAnswer(body, answerOptions)\n                        .then(function () {\n                        response.ack();\n                    })\n                        .catch(function (error) {\n                        // No way to recover, so terminate session and mark as failed.\n                        _this.logger.error(\"Failed to handle answer in 2xx response to re-INVITE\");\n                        _this.logger.error(error.message);\n                        // A BYE should only be sent if session is not already terminated.\n                        // For example, a BYE may be sent/received while re-INVITE is outstanding.\n                        // The ACK needs to be sent regardless as it was not handled by the transaction.\n                        if (_this.state !== session_state_1.SessionState.Terminated) {\n                            _this.ackAndBye(response, 488, \"Bad Media Description\");\n                            _this.stateTransition(session_state_1.SessionState.Terminated);\n                        }\n                        else {\n                            response.ack();\n                        }\n                    })\n                        .then(function () {\n                        _this.pendingReinvite = false;\n                        if (options.requestDelegate && options.requestDelegate.onAccept) {\n                            options.requestDelegate.onAccept(response);\n                        }\n                    });\n                }\n            },\n            onProgress: function (response) {\n                return;\n            },\n            onRedirect: function (response) {\n                return;\n            },\n            onReject: function (response) {\n                _this.logger.warn(\"Received a non-2xx response to re-INVITE\");\n                _this.pendingReinvite = false;\n                if (options.withoutSdp) {\n                    if (options.requestDelegate && options.requestDelegate.onReject) {\n                        options.requestDelegate.onReject(response);\n                    }\n                }\n                else {\n                    _this.rollbackOffer()\n                        .catch(function (error) {\n                        // No way to recover, so terminate session and mark as failed.\n                        _this.logger.error(\"Failed to rollback offer on non-2xx response to re-INVITE\");\n                        _this.logger.error(error.message);\n                        // A BYE should only be sent if session is not already terminated.\n                        // For example, a BYE may be sent/received while re-INVITE is outstanding.\n                        // Note that the ACK was already sent by the transaction, so just need to send BYE.\n                        if (_this.state !== session_state_1.SessionState.Terminated) {\n                            if (!_this.dialog) {\n                                throw new Error(\"Dialog undefined.\");\n                            }\n                            var extraHeaders = [];\n                            extraHeaders.push(\"Reason: \" + _this.getReasonHeaderValue(500, \"Internal Server Error\"));\n                            _this.dialog.bye(undefined, { extraHeaders: extraHeaders });\n                            _this.stateTransition(session_state_1.SessionState.Terminated);\n                        }\n                    })\n                        .then(function () {\n                        if (options.requestDelegate && options.requestDelegate.onReject) {\n                            options.requestDelegate.onReject(response);\n                        }\n                    });\n                }\n            },\n            onTrying: function (response) {\n                return;\n            }\n        };\n        var requestOptions = options.requestOptions || {};\n        requestOptions.extraHeaders = (requestOptions.extraHeaders || []).slice();\n        requestOptions.extraHeaders.push(\"Allow: \" + allowed_methods_1.AllowedMethods.toString());\n        requestOptions.extraHeaders.push(\"Contact: \" + this._contact);\n        // Just send an INVITE with no sdp...\n        if (options.withoutSdp) {\n            if (!this.dialog) {\n                this.pendingReinvite = false;\n                throw new Error(\"Dialog undefined.\");\n            }\n            return Promise.resolve(this.dialog.invite(delegate, requestOptions));\n        }\n        // Get an offer and send it in an INVITE\n        // FIXME: SDH options & SDH modifiers options are applied somewhat ambiguously\n        //        This behavior was ported from legacy code and the issue punted down the road.\n        var offerOptions = {\n            sessionDescriptionHandlerOptions: options.sessionDescriptionHandlerOptions,\n            sessionDescriptionHandlerModifiers: options.sessionDescriptionHandlerModifiers\n        };\n        return this.getOffer(offerOptions)\n            .then(function (offerBody) {\n            if (!_this.dialog) {\n                _this.pendingReinvite = false;\n                throw new Error(\"Dialog undefined.\");\n            }\n            requestOptions.body = offerBody;\n            return _this.dialog.invite(delegate, requestOptions);\n        })\n            .catch(function (error) {\n            _this.logger.error(error.message);\n            _this.logger.error(\"Failed to send re-INVITE\");\n            _this.pendingReinvite = false;\n            throw error;\n        });\n    };\n    /**\n     * Deliver a {@link Message}. Sends a MESSAGE.\n     * @param options - Options bucket. See {@link SessionMessageOptions} for details.\n     */\n    Session.prototype.message = function (options) {\n        if (options === void 0) { options = {}; }\n        // guard session state\n        if (this.state !== session_state_1.SessionState.Established) {\n            var message = \"Session.message() may only be called if established session.\";\n            this.logger.error(message);\n            return Promise.reject(new Error(\"Invalid session state \" + this.state));\n        }\n        var requestDelegate = options.requestDelegate;\n        var requestOptions = this.copyRequestOptions(options.requestOptions);\n        return this._message(requestDelegate, requestOptions);\n    };\n    /**\n     * Proffer a {@link Referral}. Send a REFER.\n     * @param referTo - The referral target. If a `Session`, a REFER w/Replaces is sent.\n     * @param options - Options bucket. See {@link SessionReferOptions} for details.\n     */\n    Session.prototype.refer = function (referTo, options) {\n        if (options === void 0) { options = {}; }\n        // guard session state\n        if (this.state !== session_state_1.SessionState.Established) {\n            var message = \"Session.refer() may only be called if established session.\";\n            this.logger.error(message);\n            return Promise.reject(new Error(\"Invalid session state \" + this.state));\n        }\n        var requestDelegate = options.requestDelegate;\n        var requestOptions = this.copyRequestOptions(options.requestOptions);\n        requestOptions.extraHeaders = requestOptions.extraHeaders ?\n            requestOptions.extraHeaders.concat(this.referExtraHeaders(this.referToString(referTo))) :\n            this.referExtraHeaders(this.referToString(referTo));\n        return this._refer(options.onNotify, requestDelegate, requestOptions);\n    };\n    /**\n     * Send BYE.\n     * @param delegate - Request delegate.\n     * @param options - Request options bucket.\n     * @internal\n     */\n    Session.prototype._bye = function (delegate, options) {\n        var _this = this;\n        // Using core session dialog\n        if (!this.dialog) {\n            return Promise.reject(new Error(\"Session dialog undefined.\"));\n        }\n        var dialog = this.dialog;\n        // The caller's UA MAY send a BYE for either confirmed or early dialogs,\n        // and the callee's UA MAY send a BYE on confirmed dialogs, but MUST NOT\n        // send a BYE on early dialogs. However, the callee's UA MUST NOT send a\n        // BYE on a confirmed dialog until it has received an ACK for its 2xx\n        // response or until the server transaction times out.\n        // https://tools.ietf.org/html/rfc3261#section-15\n        switch (dialog.sessionState) {\n            case core_1.SessionState.Initial:\n                throw new Error(\"Invalid dialog state \" + dialog.sessionState);\n            case core_1.SessionState.Early: // Implementation choice - not sending BYE for early dialogs.\n                throw new Error(\"Invalid dialog state \" + dialog.sessionState);\n            case core_1.SessionState.AckWait: { // This state only occurs if we are the callee.\n                this.stateTransition(session_state_1.SessionState.Terminating); // We're terminating\n                return new Promise(function (resolve, reject) {\n                    dialog.delegate = {\n                        // When ACK shows up, say BYE.\n                        onAck: function () {\n                            var request = dialog.bye(delegate, options);\n                            _this.stateTransition(session_state_1.SessionState.Terminated);\n                            resolve(request);\n                        },\n                        // Or the server transaction times out before the ACK arrives.\n                        onAckTimeout: function () {\n                            var request = dialog.bye(delegate, options);\n                            _this.stateTransition(session_state_1.SessionState.Terminated);\n                            resolve(request);\n                        }\n                    };\n                });\n            }\n            case core_1.SessionState.Confirmed: {\n                var request = dialog.bye(delegate, options);\n                this.stateTransition(session_state_1.SessionState.Terminated);\n                return Promise.resolve(request);\n            }\n            case core_1.SessionState.Terminated:\n                throw new Error(\"Invalid dialog state \" + dialog.sessionState);\n            default:\n                throw new Error(\"Unrecognized state.\");\n        }\n    };\n    /**\n     * Send INFO.\n     * @param delegate - Request delegate.\n     * @param options - Request options bucket.\n     * @internal\n     */\n    Session.prototype._info = function (delegate, options) {\n        // Using core session dialog\n        if (!this.dialog) {\n            return Promise.reject(new Error(\"Session dialog undefined.\"));\n        }\n        return Promise.resolve(this.dialog.info(delegate, options));\n    };\n    /**\n     * Send MESSAGE.\n     * @param delegate - Request delegate.\n     * @param options - Request options bucket.\n     * @internal\n     */\n    Session.prototype._message = function (delegate, options) {\n        // Using core session dialog\n        if (!this.dialog) {\n            return Promise.reject(new Error(\"Session dialog undefined.\"));\n        }\n        return Promise.resolve(this.dialog.message(delegate, options));\n    };\n    /**\n     * Send REFER.\n     * @param onNotify - Notification callback.\n     * @param delegate - Request delegate.\n     * @param options - Request options bucket.\n     * @internal\n     */\n    Session.prototype._refer = function (onNotify, delegate, options) {\n        // Using core session dialog\n        if (!this.dialog) {\n            return Promise.reject(new Error(\"Session dialog undefined.\"));\n        }\n        // If set, deliver any in-dialog NOTIFY requests here...\n        this.onNotify = onNotify;\n        return Promise.resolve(this.dialog.refer(delegate, options));\n    };\n    /**\n     * Send ACK and then BYE. There are unrecoverable errors which can occur\n     * while handling dialog forming and in-dialog INVITE responses and when\n     * they occur we ACK the response and send a BYE.\n     * Note that the BYE is sent in the dialog associated with the response\n     * which is not necessarily `this.dialog`. And, accordingly, the\n     * session state is not transitioned to terminated and session is not closed.\n     * @param inviteResponse - The response causing the error.\n     * @param statusCode - Status code for he reason phrase.\n     * @param reasonPhrase - Reason phrase for the BYE.\n     * @internal\n     */\n    Session.prototype.ackAndBye = function (response, statusCode, reasonPhrase) {\n        response.ack();\n        var extraHeaders = [];\n        if (statusCode) {\n            extraHeaders.push(\"Reason: \" + this.getReasonHeaderValue(statusCode, reasonPhrase));\n        }\n        // Using the dialog session associate with the response (which might not be this.dialog)\n        response.session.bye(undefined, { extraHeaders: extraHeaders });\n    };\n    /**\n     * Handle in dialog ACK request.\n     * @internal\n     */\n    Session.prototype.onAckRequest = function (request) {\n        var _this = this;\n        this.logger.log(\"Session.onAckRequest\");\n        if (this.state !== session_state_1.SessionState.Established && this.state !== session_state_1.SessionState.Terminating) {\n            this.logger.error(\"ACK received while in state \" + this.state + \", dropping request\");\n            return;\n        }\n        var dialog = this.dialog;\n        if (!dialog) {\n            throw new Error(\"Dialog undefined.\");\n        }\n        switch (dialog.signalingState) {\n            case core_1.SignalingState.Initial: {\n                // State should never be reached as first reliable response must have answer/offer.\n                // So we must have never has sent an offer.\n                this.logger.error(\"Invalid signaling state \" + dialog.signalingState + \".\");\n                var extraHeaders = [\"Reason: \" + this.getReasonHeaderValue(488, \"Bad Media Description\")];\n                dialog.bye(undefined, { extraHeaders: extraHeaders });\n                this.stateTransition(session_state_1.SessionState.Terminated);\n                return;\n            }\n            case core_1.SignalingState.Stable: {\n                // State we should be in.\n                // Either the ACK has the answer that got us here, or we were in this state prior to the ACK.\n                var body = core_1.getBody(request.message);\n                // If the ACK doesn't have an answer, nothing to be done.\n                if (!body) {\n                    return;\n                }\n                if (body.contentDisposition === \"render\") {\n                    this._renderbody = body.content;\n                    this._rendertype = body.contentType;\n                    return;\n                }\n                if (body.contentDisposition !== \"session\") {\n                    return;\n                }\n                // Received answer in ACK.\n                var options = {\n                    sessionDescriptionHandlerOptions: this._sessionDescriptionHandlerOptions,\n                    sessionDescriptionHandlerModifiers: this._sessionDescriptionHandlerModifiers\n                };\n                this.setAnswer(body, options)\n                    .catch(function (error) {\n                    _this.logger.error(error.message);\n                    var extraHeaders = [\"Reason: \" + _this.getReasonHeaderValue(488, \"Bad Media Description\")];\n                    dialog.bye(undefined, { extraHeaders: extraHeaders });\n                    _this.stateTransition(session_state_1.SessionState.Terminated);\n                });\n                return;\n            }\n            case core_1.SignalingState.HaveLocalOffer: {\n                // State should never be reached as local offer would be answered by this ACK.\n                // So we must have received an ACK without an answer.\n                this.logger.error(\"Invalid signaling state \" + dialog.signalingState + \".\");\n                var extraHeaders = [\"Reason: \" + this.getReasonHeaderValue(488, \"Bad Media Description\")];\n                dialog.bye(undefined, { extraHeaders: extraHeaders });\n                this.stateTransition(session_state_1.SessionState.Terminated);\n                return;\n            }\n            case core_1.SignalingState.HaveRemoteOffer: {\n                // State should never be reached as remote offer would be answered in first reliable response.\n                // So we must have never has sent an answer.\n                this.logger.error(\"Invalid signaling state \" + dialog.signalingState + \".\");\n                var extraHeaders = [\"Reason: \" + this.getReasonHeaderValue(488, \"Bad Media Description\")];\n                dialog.bye(undefined, { extraHeaders: extraHeaders });\n                this.stateTransition(session_state_1.SessionState.Terminated);\n                return;\n            }\n            case core_1.SignalingState.Closed:\n                throw new Error(\"Invalid signaling state \" + dialog.signalingState + \".\");\n            default:\n                throw new Error(\"Invalid signaling state \" + dialog.signalingState + \".\");\n        }\n    };\n    /**\n     * Handle in dialog BYE request.\n     * @internal\n     */\n    Session.prototype.onByeRequest = function (request) {\n        this.logger.log(\"Session.onByeRequest\");\n        if (this.state !== session_state_1.SessionState.Established) {\n            this.logger.error(\"BYE received while in state \" + this.state + \", dropping request\");\n            return;\n        }\n        if (this.delegate && this.delegate.onBye) {\n            var bye = new bye_1.Bye(request);\n            this.delegate.onBye(bye);\n        }\n        else {\n            request.accept();\n        }\n        this.stateTransition(session_state_1.SessionState.Terminated);\n    };\n    /**\n     * Handle in dialog INFO request.\n     * @internal\n     */\n    Session.prototype.onInfoRequest = function (request) {\n        this.logger.log(\"Session.onInfoRequest\");\n        if (this.state !== session_state_1.SessionState.Established) {\n            this.logger.error(\"INFO received while in state \" + this.state + \", dropping request\");\n            return;\n        }\n        if (this.delegate && this.delegate.onInfo) {\n            var info = new info_1.Info(request);\n            this.delegate.onInfo(info);\n        }\n        else {\n            // FIXME: TODO: We should reject request...\n            //\n            // If a UA receives an INFO request associated with an Info Package that\n            // the UA has not indicated willingness to receive, the UA MUST send a\n            // 469 (Bad Info Package) response (see Section 11.6), which contains a\n            // Recv-Info header field with Info Packages for which the UA is willing\n            // to receive INFO requests.\n            // https://tools.ietf.org/html/rfc6086#section-4.2.2\n            request.accept();\n        }\n    };\n    /**\n     * Handle in dialog INVITE request.\n     * @internal\n     */\n    Session.prototype.onInviteRequest = function (request) {\n        var _this = this;\n        this.logger.log(\"Session.onInviteRequest\");\n        if (this.state !== session_state_1.SessionState.Established) {\n            this.logger.error(\"INVITE received while in state \" + this.state + \", dropping request\");\n            return;\n        }\n        // TODO: would be nice to have core track and set the Contact header,\n        // but currently the session which is setting it is holding onto it.\n        var extraHeaders = [\"Contact: \" + this._contact];\n        // Handle P-Asserted-Identity\n        if (request.message.hasHeader(\"P-Asserted-Identity\")) {\n            var header = request.message.getHeader(\"P-Asserted-Identity\");\n            if (!header) {\n                throw new Error(\"Header undefined.\");\n            }\n            this._assertedIdentity = core_1.Grammar.nameAddrHeaderParse(header);\n        }\n        // FIXME: SDH options & SDH modifiers options are applied somewhat ambiguously\n        //        This behavior was ported from legacy code and the issue punted down the road.\n        var options = {\n            sessionDescriptionHandlerOptions: this._sessionDescriptionHandlerOptions,\n            sessionDescriptionHandlerModifiers: this._sessionDescriptionHandlerModifiers\n        };\n        this.generateResponseOfferAnswerInDialog(options)\n            .then(function (body) {\n            var outgoingResponse = request.accept({ statusCode: 200, extraHeaders: extraHeaders, body: body });\n            if (_this.delegate && _this.delegate.onInvite) {\n                _this.delegate.onInvite(request.message, outgoingResponse.message, 200);\n            }\n        })\n            .catch(function (error) {\n            _this.logger.error(error.message);\n            _this.logger.error(\"Failed to handle to re-INVITE request\");\n            if (!_this.dialog) {\n                throw new Error(\"Dialog undefined.\");\n            }\n            _this.logger.error(_this.dialog.signalingState);\n            // If we don't have a local/remote offer...\n            if (_this.dialog.signalingState === core_1.SignalingState.Stable) {\n                var outgoingResponse = request.reject({ statusCode: 488 }); // Not Acceptable Here\n                if (_this.delegate && _this.delegate.onInvite) {\n                    _this.delegate.onInvite(request.message, outgoingResponse.message, 488);\n                }\n                return;\n            }\n            // Otherwise rollback\n            _this.rollbackOffer()\n                .then(function () {\n                var outgoingResponse = request.reject({ statusCode: 488 }); // Not Acceptable Here\n                if (_this.delegate && _this.delegate.onInvite) {\n                    _this.delegate.onInvite(request.message, outgoingResponse.message, 488);\n                }\n            })\n                .catch(function (errorRollback) {\n                // No way to recover, so terminate session and mark as failed.\n                _this.logger.error(errorRollback.message);\n                _this.logger.error(\"Failed to rollback offer on re-INVITE request\");\n                var outgoingResponse = request.reject({ statusCode: 488 }); // Not Acceptable Here\n                // A BYE should only be sent if session is not already terminated.\n                // For example, a BYE may be sent/received while re-INVITE is outstanding.\n                // Note that the ACK was already sent by the transaction, so just need to send BYE.\n                if (_this.state !== session_state_1.SessionState.Terminated) {\n                    if (!_this.dialog) {\n                        throw new Error(\"Dialog undefined.\");\n                    }\n                    var extraHeadersBye = [];\n                    extraHeadersBye.push(\"Reason: \" + _this.getReasonHeaderValue(500, \"Internal Server Error\"));\n                    _this.dialog.bye(undefined, { extraHeaders: extraHeaders });\n                    _this.stateTransition(session_state_1.SessionState.Terminated);\n                }\n                if (_this.delegate && _this.delegate.onInvite) {\n                    _this.delegate.onInvite(request.message, outgoingResponse.message, 488);\n                }\n            });\n        });\n    };\n    /**\n     * Handle in dialog MESSAGE request.\n     * @internal\n     */\n    Session.prototype.onMessageRequest = function (request) {\n        this.logger.log(\"Session.onMessageRequest\");\n        if (this.state !== session_state_1.SessionState.Established) {\n            this.logger.error(\"MESSAGE received while in state \" + this.state + \", dropping request\");\n            return;\n        }\n        if (this.delegate && this.delegate.onMessage) {\n            var message = new message_1.Message(request);\n            this.delegate.onMessage(message);\n        }\n        else {\n            request.accept();\n        }\n    };\n    /**\n     * Handle in dialog NOTIFY request.\n     * @internal\n     */\n    Session.prototype.onNotifyRequest = function (request) {\n        this.logger.log(\"Session.onNotifyRequest\");\n        if (this.state !== session_state_1.SessionState.Established) {\n            this.logger.error(\"NOTIFY received while in state \" + this.state + \", dropping request\");\n            return;\n        }\n        // If this a NOTIFY associated with the progress of a REFER,\n        // look to delegate handling to the associated callback.\n        if (this.onNotify) {\n            var notification = new notification_1.Notification(request);\n            this.onNotify(notification);\n            return;\n        }\n        // Otherwise accept the NOTIFY.\n        if (this.delegate && this.delegate.onNotify) {\n            var notification = new notification_1.Notification(request);\n            this.delegate.onNotify(notification);\n        }\n        else {\n            request.accept();\n        }\n    };\n    /**\n     * Handle in dialog PRACK request.\n     * @internal\n     */\n    Session.prototype.onPrackRequest = function (request) {\n        this.logger.log(\"Session.onPrackRequest\");\n        if (this.state !== session_state_1.SessionState.Established) {\n            this.logger.error(\"PRACK received while in state \" + this.state + \", dropping request\");\n            return;\n        }\n        throw new Error(\"Unimplemented.\");\n    };\n    /**\n     * Handle in dialog REFER request.\n     * @internal\n     */\n    Session.prototype.onReferRequest = function (request) {\n        var _this = this;\n        this.logger.log(\"Session.onReferRequest\");\n        if (this.state !== session_state_1.SessionState.Established) {\n            this.logger.error(\"REFER received while in state \" + this.state + \", dropping request\");\n            return;\n        }\n        // REFER is a SIP request and is constructed as defined in [1].  A REFER\n        // request MUST contain exactly one Refer-To header field value.\n        // https://tools.ietf.org/html/rfc3515#section-2.4.1\n        if (!request.message.hasHeader(\"refer-to\")) {\n            this.logger.warn(\"Invalid REFER packet. A refer-to header is required. Rejecting.\");\n            request.reject();\n            return;\n        }\n        var referral = new referral_1.Referral(request, this);\n        if (this.delegate && this.delegate.onRefer) {\n            this.delegate.onRefer(referral);\n        }\n        else {\n            this.logger.log(\"No delegate available to handle REFER, automatically accepting and following.\");\n            referral\n                .accept()\n                .then(function () { return referral\n                .makeInviter(_this._referralInviterOptions)\n                .invite(); })\n                .catch(function (error) {\n                // FIXME: logging and eating error...\n                _this.logger.error(error.message);\n            });\n        }\n    };\n    /**\n     * Generate an offer or answer for a response to an INVITE request.\n     * If a remote offer was provided in the request, set the remote\n     * description and get a local answer. If a remote offer was not\n     * provided, generates a local offer.\n     * @internal\n     */\n    Session.prototype.generateResponseOfferAnswer = function (request, options) {\n        if (this.dialog) {\n            return this.generateResponseOfferAnswerInDialog(options);\n        }\n        var body = core_1.getBody(request.message);\n        if (!body || body.contentDisposition !== \"session\") {\n            return this.getOffer(options);\n        }\n        else {\n            return this.setOfferAndGetAnswer(body, options);\n        }\n    };\n    /**\n     * Generate an offer or answer for a response to an INVITE request\n     * when a dialog (early or otherwise) has already been established.\n     * This method may NOT be called if a dialog has yet to be established.\n     * @internal\n     */\n    Session.prototype.generateResponseOfferAnswerInDialog = function (options) {\n        if (!this.dialog) {\n            throw new Error(\"Dialog undefined.\");\n        }\n        switch (this.dialog.signalingState) {\n            case core_1.SignalingState.Initial:\n                return this.getOffer(options);\n            case core_1.SignalingState.HaveLocalOffer:\n                // o  Once the UAS has sent or received an answer to the initial\n                // offer, it MUST NOT generate subsequent offers in any responses\n                // to the initial INVITE.  This means that a UAS based on this\n                // specification alone can never generate subsequent offers until\n                // completion of the initial transaction.\n                // https://tools.ietf.org/html/rfc3261#section-13.2.1\n                return Promise.resolve(undefined);\n            case core_1.SignalingState.HaveRemoteOffer:\n                if (!this.dialog.offer) {\n                    throw new Error(\"Session offer undefined in signaling state \" + this.dialog.signalingState + \".\");\n                }\n                return this.setOfferAndGetAnswer(this.dialog.offer, options);\n            case core_1.SignalingState.Stable:\n                // o  Once the UAS has sent or received an answer to the initial\n                // offer, it MUST NOT generate subsequent offers in any responses\n                // to the initial INVITE.  This means that a UAS based on this\n                // specification alone can never generate subsequent offers until\n                // completion of the initial transaction.\n                // https://tools.ietf.org/html/rfc3261#section-13.2.1\n                if (this.state !== session_state_1.SessionState.Established) {\n                    return Promise.resolve(undefined);\n                }\n                // In dialog INVITE without offer, get an offer for the response.\n                return this.getOffer(options);\n            case core_1.SignalingState.Closed:\n                throw new Error(\"Invalid signaling state \" + this.dialog.signalingState + \".\");\n            default:\n                throw new Error(\"Invalid signaling state \" + this.dialog.signalingState + \".\");\n        }\n    };\n    /**\n     * Get local offer.\n     * @internal\n     */\n    Session.prototype.getOffer = function (options) {\n        var _this = this;\n        var sdh = this.setupSessionDescriptionHandler();\n        var sdhOptions = options.sessionDescriptionHandlerOptions;\n        var sdhModifiers = options.sessionDescriptionHandlerModifiers;\n        // This is intentionally written very defensively. Don't trust SDH to behave.\n        try {\n            return sdh.getDescription(sdhOptions, sdhModifiers)\n                .then(function (bodyAndContentType) { return core_1.fromBodyLegacy(bodyAndContentType); })\n                .catch(function (error) {\n                _this.logger.error(\"Session.getOffer: SDH getDescription rejected...\");\n                var e = error instanceof Error ? error : new Error(error);\n                _this.logger.error(e.message);\n                throw e;\n            });\n        }\n        catch (error) { // don't trust SDH to throw an Error\n            this.logger.error(\"Session.getOffer: SDH getDescription threw...\");\n            var e = error instanceof Error ? error : new Error(error);\n            this.logger.error(e.message);\n            return Promise.reject(e);\n        }\n    };\n    /**\n     * Rollback local/remote offer.\n     * @internal\n     */\n    Session.prototype.rollbackOffer = function () {\n        var _this = this;\n        var sdh = this.setupSessionDescriptionHandler();\n        if (!sdh.rollbackDescription) {\n            return Promise.resolve();\n        }\n        // This is intentionally written very defensively. Don't trust SDH to behave.\n        try {\n            return sdh.rollbackDescription()\n                .catch(function (error) {\n                _this.logger.error(\"Session.rollbackOffer: SDH rollbackDescription rejected...\");\n                var e = error instanceof Error ? error : new Error(error);\n                _this.logger.error(e.message);\n                throw e;\n            });\n        }\n        catch (error) { // don't trust SDH to throw an Error\n            this.logger.error(\"Session.rollbackOffer: SDH rollbackDescription threw...\");\n            var e = error instanceof Error ? error : new Error(error);\n            this.logger.error(e.message);\n            return Promise.reject(e);\n        }\n    };\n    /**\n     * Set remote answer.\n     * @internal\n     */\n    Session.prototype.setAnswer = function (answer, options) {\n        var _this = this;\n        var sdh = this.setupSessionDescriptionHandler();\n        var sdhOptions = options.sessionDescriptionHandlerOptions;\n        var sdhModifiers = options.sessionDescriptionHandlerModifiers;\n        // This is intentionally written very defensively. Don't trust SDH to behave.\n        try {\n            if (!sdh.hasDescription(answer.contentType)) {\n                return Promise.reject(new exceptions_1.ContentTypeUnsupportedError());\n            }\n        }\n        catch (error) {\n            this.logger.error(\"Session.setAnswer: SDH hasDescription threw...\");\n            var e = error instanceof Error ? error : new Error(error);\n            this.logger.error(e.message);\n            return Promise.reject(e);\n        }\n        try {\n            return sdh.setDescription(answer.content, sdhOptions, sdhModifiers)\n                .catch(function (error) {\n                _this.logger.error(\"Session.setAnswer: SDH setDescription rejected...\");\n                var e = error instanceof Error ? error : new Error(error);\n                _this.logger.error(e.message);\n                throw e;\n            });\n        }\n        catch (error) { // don't trust SDH to throw an Error\n            this.logger.error(\"Session.setAnswer: SDH setDescription threw...\");\n            var e = error instanceof Error ? error : new Error(error);\n            this.logger.error(e.message);\n            return Promise.reject(e);\n        }\n    };\n    /**\n     * Set remote offer and get local answer.\n     * @internal\n     */\n    Session.prototype.setOfferAndGetAnswer = function (offer, options) {\n        var _this = this;\n        var sdh = this.setupSessionDescriptionHandler();\n        var sdhOptions = options.sessionDescriptionHandlerOptions;\n        var sdhModifiers = options.sessionDescriptionHandlerModifiers;\n        // This is intentionally written very defensively. Don't trust SDH to behave.\n        try {\n            if (!sdh.hasDescription(offer.contentType)) {\n                return Promise.reject(new exceptions_1.ContentTypeUnsupportedError());\n            }\n        }\n        catch (error) {\n            this.logger.error(\"Session.setOfferAndGetAnswer: SDH hasDescription threw...\");\n            var e = error instanceof Error ? error : new Error(error);\n            this.logger.error(e.message);\n            return Promise.reject(e);\n        }\n        try {\n            return sdh.setDescription(offer.content, sdhOptions, sdhModifiers)\n                .then(function () { return sdh.getDescription(sdhOptions, sdhModifiers); })\n                .then(function (bodyAndContentType) { return core_1.fromBodyLegacy(bodyAndContentType); })\n                .catch(function (error) {\n                _this.logger.error(\"Session.setOfferAndGetAnswer: SDH setDescription or getDescription rejected...\");\n                var e = error instanceof Error ? error : new Error(error);\n                _this.logger.error(e.message);\n                throw e;\n            });\n        }\n        catch (error) { // don't trust SDH to throw an Error\n            this.logger.error(\"Session.setOfferAndGetAnswer: SDH setDescription or getDescription threw...\");\n            var e = error instanceof Error ? error : new Error(error);\n            this.logger.error(e.message);\n            return Promise.reject(e);\n        }\n    };\n    /**\n     * SDH for confirmed dialog.\n     * @internal\n     */\n    Session.prototype.setSessionDescriptionHandler = function (sdh) {\n        if (this._sessionDescriptionHandler) {\n            throw new Error(\"Session description handler defined.\");\n        }\n        this._sessionDescriptionHandler = sdh;\n    };\n    /**\n     * SDH for confirmed dialog.\n     * @internal\n     */\n    Session.prototype.setupSessionDescriptionHandler = function () {\n        if (this._sessionDescriptionHandler) {\n            return this._sessionDescriptionHandler;\n        }\n        this._sessionDescriptionHandler =\n            this.sessionDescriptionHandlerFactory(this, this.userAgent.configuration.sessionDescriptionHandlerFactoryOptions);\n        return this._sessionDescriptionHandler;\n    };\n    /**\n     * Transition session state.\n     * @internal\n     */\n    Session.prototype.stateTransition = function (newState) {\n        var _this = this;\n        var invalidTransition = function () {\n            throw new Error(\"Invalid state transition from \" + _this._state + \" to \" + newState);\n        };\n        // Validate transition\n        switch (this._state) {\n            case session_state_1.SessionState.Initial:\n                if (newState !== session_state_1.SessionState.Establishing &&\n                    newState !== session_state_1.SessionState.Established &&\n                    newState !== session_state_1.SessionState.Terminating &&\n                    newState !== session_state_1.SessionState.Terminated) {\n                    invalidTransition();\n                }\n                break;\n            case session_state_1.SessionState.Establishing:\n                if (newState !== session_state_1.SessionState.Established &&\n                    newState !== session_state_1.SessionState.Terminating &&\n                    newState !== session_state_1.SessionState.Terminated) {\n                    invalidTransition();\n                }\n                break;\n            case session_state_1.SessionState.Established:\n                if (newState !== session_state_1.SessionState.Terminating &&\n                    newState !== session_state_1.SessionState.Terminated) {\n                    invalidTransition();\n                }\n                break;\n            case session_state_1.SessionState.Terminating:\n                if (newState !== session_state_1.SessionState.Terminated) {\n                    invalidTransition();\n                }\n                break;\n            case session_state_1.SessionState.Terminated:\n                invalidTransition();\n                break;\n            default:\n                throw new Error(\"Unrecognized state.\");\n        }\n        // Transition\n        this._state = newState;\n        this.logger.log(\"Session \" + this.id + \" transitioned to state \" + this._state);\n        this._stateEventEmitter.emit(\"event\", this._state);\n        // Dispose\n        if (newState === session_state_1.SessionState.Terminated) {\n            this.dispose();\n        }\n    };\n    Session.prototype.copyRequestOptions = function (requestOptions) {\n        if (requestOptions === void 0) { requestOptions = {}; }\n        var extraHeaders = requestOptions.extraHeaders ? requestOptions.extraHeaders.slice() : undefined;\n        var body = requestOptions.body ?\n            {\n                contentDisposition: requestOptions.body.contentDisposition || \"render\",\n                contentType: requestOptions.body.contentType || \"text/plain\",\n                content: requestOptions.body.content || \"\"\n            } : undefined;\n        return {\n            extraHeaders: extraHeaders,\n            body: body\n        };\n    };\n    Session.prototype.getReasonHeaderValue = function (code, reason) {\n        var cause = code;\n        var text = utils_1.getReasonPhrase(code);\n        if (!text && reason) {\n            text = reason;\n        }\n        return \"SIP;cause=\" + cause + ';text=\"' + text + '\"';\n    };\n    Session.prototype.referExtraHeaders = function (referTo) {\n        var extraHeaders = [];\n        extraHeaders.push(\"Referred-By: <\" + this.userAgent.configuration.uri + \">\");\n        extraHeaders.push(\"Contact: \" + this._contact);\n        extraHeaders.push(\"Allow: \" + [\n            \"ACK\",\n            \"CANCEL\",\n            \"INVITE\",\n            \"MESSAGE\",\n            \"BYE\",\n            \"OPTIONS\",\n            \"INFO\",\n            \"NOTIFY\",\n            \"REFER\"\n        ].toString());\n        extraHeaders.push(\"Refer-To: \" + referTo);\n        return extraHeaders;\n    };\n    Session.prototype.referToString = function (target) {\n        var referTo;\n        if (target instanceof core_1.URI) {\n            // REFER without Replaces (Blind Transfer)\n            referTo = target.toString();\n        }\n        else {\n            // REFER with Replaces (Attended Transfer)\n            if (!target.dialog) {\n                throw new Error(\"Dialog undefined.\");\n            }\n            var displayName = target.remoteIdentity.friendlyName;\n            var remoteTarget = target.dialog.remoteTarget.toString();\n            var callId = target.dialog.callId;\n            var remoteTag = target.dialog.remoteTag;\n            var localTag = target.dialog.localTag;\n            var replaces = encodeURIComponent(callId + \";to-tag=\" + remoteTag + \";from-tag=\" + localTag);\n            referTo = \"\\\"\" + displayName + \"\\\" <\" + remoteTarget + \"?Replaces=\" + replaces + \">\";\n        }\n        return referTo;\n    };\n    return Session;\n}());\nexports.Session = Session;\n\n\n/***/ }),\n/* 97 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A request to end a {@link Session} (incoming BYE).\n * @public\n */\nvar Bye = /** @class */ (function () {\n    /** @internal */\n    function Bye(incomingByeRequest) {\n        this.incomingByeRequest = incomingByeRequest;\n    }\n    Object.defineProperty(Bye.prototype, \"request\", {\n        /** Incoming BYE request message. */\n        get: function () {\n            return this.incomingByeRequest.message;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Accept the request. */\n    Bye.prototype.accept = function (options) {\n        this.incomingByeRequest.accept(options);\n        return Promise.resolve();\n    };\n    /** Reject the request. */\n    Bye.prototype.reject = function (options) {\n        this.incomingByeRequest.reject(options);\n        return Promise.resolve();\n    };\n    return Bye;\n}());\nexports.Bye = Bye;\n\n\n/***/ }),\n/* 98 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Creates an {@link Emitter}.\n * @param eventEmitter - An event emitter.\n * @param eventName - Event name.\n * @internal\n */\nfunction _makeEmitter(eventEmitter, eventName) {\n    if (eventName === void 0) { eventName = \"event\"; }\n    return {\n        addListener: function (listener, options) {\n            if (options === void 0) { options = {}; }\n            if (options.once) {\n                eventEmitter.once(eventName, listener);\n            }\n            else {\n                eventEmitter.addListener(eventName, listener);\n            }\n        },\n        removeListener: function (listener) {\n            eventEmitter.removeListener(eventName, listener);\n        },\n        on: function (listener) {\n            eventEmitter.on(eventName, listener);\n        },\n        off: function (listener) {\n            eventEmitter.removeListener(eventName, listener);\n        },\n        once: function (listener) {\n            eventEmitter.once(eventName, listener);\n        }\n    };\n}\nexports._makeEmitter = _makeEmitter;\n\n\n/***/ }),\n/* 99 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\ntslib_1.__exportStar(__webpack_require__(100), exports);\ntslib_1.__exportStar(__webpack_require__(101), exports);\ntslib_1.__exportStar(__webpack_require__(102), exports);\ntslib_1.__exportStar(__webpack_require__(103), exports);\ntslib_1.__exportStar(__webpack_require__(104), exports);\n\n\n/***/ }),\n/* 100 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar core_1 = __webpack_require__(2);\n/**\n * An exception indicating an unsupported content type prevented execution.\n * @public\n */\nvar ContentTypeUnsupportedError = /** @class */ (function (_super) {\n    tslib_1.__extends(ContentTypeUnsupportedError, _super);\n    function ContentTypeUnsupportedError(message) {\n        return _super.call(this, message ? message : \"Unsupported content type.\") || this;\n    }\n    return ContentTypeUnsupportedError;\n}(core_1.Exception));\nexports.ContentTypeUnsupportedError = ContentTypeUnsupportedError;\n\n\n/***/ }),\n/* 101 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar core_1 = __webpack_require__(2);\n/**\n * An exception indicating an outstanding prior request prevented execution.\n * @public\n */\nvar RequestPendingError = /** @class */ (function (_super) {\n    tslib_1.__extends(RequestPendingError, _super);\n    /** @internal */\n    function RequestPendingError(message) {\n        return _super.call(this, message ? message : \"Request pending.\") || this;\n    }\n    return RequestPendingError;\n}(core_1.Exception));\nexports.RequestPendingError = RequestPendingError;\n\n\n/***/ }),\n/* 102 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar core_1 = __webpack_require__(2);\n/**\n * An exception indicating a session description handler error occured.\n * @public\n */\nvar SessionDescriptionHandlerError = /** @class */ (function (_super) {\n    tslib_1.__extends(SessionDescriptionHandlerError, _super);\n    function SessionDescriptionHandlerError(message) {\n        return _super.call(this, message ? message : \"Unspecified session description handler error.\") || this;\n    }\n    return SessionDescriptionHandlerError;\n}(core_1.Exception));\nexports.SessionDescriptionHandlerError = SessionDescriptionHandlerError;\n\n\n/***/ }),\n/* 103 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar core_1 = __webpack_require__(2);\n/**\n * An exception indicating the session terminated before the action completed.\n * @public\n */\nvar SessionTerminatedError = /** @class */ (function (_super) {\n    tslib_1.__extends(SessionTerminatedError, _super);\n    function SessionTerminatedError() {\n        return _super.call(this, \"The session has terminated.\") || this;\n    }\n    return SessionTerminatedError;\n}(core_1.Exception));\nexports.SessionTerminatedError = SessionTerminatedError;\n\n\n/***/ }),\n/* 104 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar core_1 = __webpack_require__(2);\n/**\n * An exception indicating an invalid state transition error occured.\n * @public\n */\nvar StateTransitionError = /** @class */ (function (_super) {\n    tslib_1.__extends(StateTransitionError, _super);\n    function StateTransitionError(message) {\n        return _super.call(this, message ? message : \"An error occurred during state transition.\") || this;\n    }\n    return StateTransitionError;\n}(core_1.Exception));\nexports.StateTransitionError = StateTransitionError;\n\n\n/***/ }),\n/* 105 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * An exchange of information (incoming INFO).\n * @public\n */\nvar Info = /** @class */ (function () {\n    /** @internal */\n    function Info(incomingInfoRequest) {\n        this.incomingInfoRequest = incomingInfoRequest;\n    }\n    Object.defineProperty(Info.prototype, \"request\", {\n        /** Incoming MESSAGE request message. */\n        get: function () {\n            return this.incomingInfoRequest.message;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Accept the request. */\n    Info.prototype.accept = function (options) {\n        this.incomingInfoRequest.accept(options);\n        return Promise.resolve();\n    };\n    /** Reject the request. */\n    Info.prototype.reject = function (options) {\n        this.incomingInfoRequest.reject(options);\n        return Promise.resolve();\n    };\n    return Info;\n}());\nexports.Info = Info;\n\n\n/***/ }),\n/* 106 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A received message (incoming MESSAGE).\n * @public\n */\nvar Message = /** @class */ (function () {\n    /** @internal */\n    function Message(incomingMessageRequest) {\n        this.incomingMessageRequest = incomingMessageRequest;\n    }\n    Object.defineProperty(Message.prototype, \"request\", {\n        /** Incoming MESSAGE request message. */\n        get: function () {\n            return this.incomingMessageRequest.message;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Accept the request. */\n    Message.prototype.accept = function (options) {\n        this.incomingMessageRequest.accept(options);\n        return Promise.resolve();\n    };\n    /** Reject the request. */\n    Message.prototype.reject = function (options) {\n        this.incomingMessageRequest.reject(options);\n        return Promise.resolve();\n    };\n    return Message;\n}());\nexports.Message = Message;\n\n\n/***/ }),\n/* 107 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A notification of an event (incoming NOTIFY).\n * @public\n */\nvar Notification = /** @class */ (function () {\n    /** @internal */\n    function Notification(incomingNotifyRequest) {\n        this.incomingNotifyRequest = incomingNotifyRequest;\n    }\n    Object.defineProperty(Notification.prototype, \"request\", {\n        /** Incoming NOTIFY request message. */\n        get: function () {\n            return this.incomingNotifyRequest.message;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Accept the request. */\n    Notification.prototype.accept = function (options) {\n        this.incomingNotifyRequest.accept(options);\n        return Promise.resolve();\n    };\n    /** Reject the request. */\n    Notification.prototype.reject = function (options) {\n        this.incomingNotifyRequest.reject(options);\n        return Promise.resolve();\n    };\n    return Notification;\n}());\nexports.Notification = Notification;\n\n\n/***/ }),\n/* 108 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = __webpack_require__(2);\n/**\n * A request to establish a {@link Session} elsewhere (incoming REFER).\n * @public\n */\nvar Referral = /** @class */ (function () {\n    /** @internal */\n    function Referral(incomingReferRequest, session) {\n        this.incomingReferRequest = incomingReferRequest;\n        this.session = session;\n    }\n    Object.defineProperty(Referral.prototype, \"referTo\", {\n        get: function () {\n            var referTo = this.incomingReferRequest.message.parseHeader(\"refer-to\");\n            if (!(referTo instanceof core_1.NameAddrHeader)) {\n                throw new Error(\"Failed to parse Refer-To header.\");\n            }\n            return referTo;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Referral.prototype, \"referredBy\", {\n        get: function () {\n            return this.incomingReferRequest.message.getHeader(\"referred-by\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Referral.prototype, \"replaces\", {\n        get: function () {\n            return this.referTo.uri.getHeader(\"replaces\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Referral.prototype, \"request\", {\n        /** Incoming REFER request message. */\n        get: function () {\n            return this.incomingReferRequest.message;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Accept the request. */\n    Referral.prototype.accept = function (options) {\n        if (options === void 0) { options = { statusCode: 202 }; }\n        this.incomingReferRequest.accept(options);\n        return Promise.resolve();\n    };\n    /** Reject the request. */\n    Referral.prototype.reject = function (options) {\n        this.incomingReferRequest.reject(options);\n        return Promise.resolve();\n    };\n    /**\n     * Creates an inviter which may be used to send an out of dialog INVITE request.\n     *\n     * @remarks\n     * This a helper method to create an Inviter which will execute the referral\n     * of the `Session` which was referred. The appropriate headers are set and\n     * the referred `Session` is linked to the new `Session`. Note that only a\n     * single instance of the `Inviter` will be created and returned (if called\n     * more than once a reference to the same `Inviter` will be returned every time).\n     *\n     * @param options - Options bucket.\n     * @param modifiers - Session description handler modifiers.\n     */\n    Referral.prototype.makeInviter = function (options) {\n        if (this.inviter) {\n            return this.inviter;\n        }\n        var targetURI = this.referTo.uri.clone();\n        targetURI.clearHeaders();\n        options = options || {};\n        var extraHeaders = (options.extraHeaders || []).slice();\n        var replaces = this.replaces;\n        if (replaces) {\n            // decodeURIComponent is a holdover from 2c086eb4. Not sure that it is actually necessary\n            extraHeaders.push(\"Replaces: \" + decodeURIComponent(replaces));\n        }\n        var referredBy = this.referredBy;\n        if (referredBy) {\n            extraHeaders.push(\"Referred-By: \" + referredBy);\n        }\n        options.extraHeaders = extraHeaders;\n        this.inviter = this.session.userAgent._makeInviter(targetURI, options);\n        this.inviter._referred = this.session;\n        this.session._referral = this.inviter;\n        return this.inviter;\n    };\n    return Referral;\n}());\nexports.Referral = Referral;\n\n\n/***/ }),\n/* 109 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * {@link Session} state.\n *\n * @remarks\n * The {@link Session} behaves in a deterministic manner according to the following\n * Finite State Machine (FSM).\n * ```txt\n *                   ___________________________________________________________\n *                  |  ____________________________________________             |\n *                  | |            ____________________________    |            |\n * Session          | |           |                            v   v            v\n * Constructed -> Initial -> Establishing -> Established -> Terminating -> Terminated\n *                                |               |___________________________^   ^\n *                                |_______________________________________________|\n * ```\n * @public\n */\nvar SessionState;\n(function (SessionState) {\n    /**\n     * If `Inviter`, INVITE not sent yet.\n     * If `Invitation`, received INVITE (but no final response sent yet).\n     */\n    SessionState[\"Initial\"] = \"Initial\";\n    /**\n     * If `Inviter`, sent INVITE and waiting for a final response.\n     * If `Invitation`, received INVITE and attempting to send 200 final response (but has not sent it yet).\n     */\n    SessionState[\"Establishing\"] = \"Establishing\";\n    /**\n     * If `Inviter`, sent INVITE and received 200 final response and sent ACK.\n     * If `Invitation`, received INVITE and sent 200 final response.\n     */\n    SessionState[\"Established\"] = \"Established\";\n    /**\n     * If `Inviter`, sent INVITE, sent CANCEL and now waiting for 487 final response to ACK (or 200 to ACK & BYE).\n     * If `Invitation`, received INVITE, sent 200 final response and now waiting on ACK and upon receipt will attempt BYE\n     * (as the protocol specification requires, before sending a BYE we must receive the ACK - so we are waiting).\n     */\n    SessionState[\"Terminating\"] = \"Terminating\";\n    /**\n     * If `Inviter`, sent INVITE and received non-200 final response (or sent/received BYE after receiving 200).\n     * If `Invitation`, received INVITE and sent non-200 final response (or sent/received BYE after sending 200).\n     */\n    SessionState[\"Terminated\"] = \"Terminated\";\n})(SessionState = exports.SessionState || (exports.SessionState = {}));\n\n\n/***/ }),\n/* 110 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar stripPayload = function (sdp, payload) {\n    var mediaDescs = [];\n    var lines = sdp.split(/\\r\\n/);\n    var currentMediaDesc;\n    for (var i = 0; i < lines.length;) {\n        var line = lines[i];\n        if (/^m=(?:audio|video)/.test(line)) {\n            currentMediaDesc = {\n                index: i,\n                stripped: []\n            };\n            mediaDescs.push(currentMediaDesc);\n        }\n        else if (currentMediaDesc) {\n            var rtpmap = /^a=rtpmap:(\\d+) ([^/]+)\\//.exec(line);\n            if (rtpmap && payload === rtpmap[2]) {\n                lines.splice(i, 1);\n                currentMediaDesc.stripped.push(rtpmap[1]);\n                continue; // Don't increment 'i'\n            }\n        }\n        i++;\n    }\n    for (var _i = 0, mediaDescs_1 = mediaDescs; _i < mediaDescs_1.length; _i++) {\n        var mediaDesc = mediaDescs_1[_i];\n        var mline = lines[mediaDesc.index].split(\" \");\n        // Ignore the first 3 parameters of the mline. The codec information is after that\n        for (var j = 3; j < mline.length;) {\n            if (mediaDesc.stripped.indexOf(mline[j]) !== -1) {\n                mline.splice(j, 1);\n                continue;\n            }\n            j++;\n        }\n        lines[mediaDesc.index] = mline.join(\" \");\n    }\n    return lines.join(\"\\r\\n\");\n};\nvar stripMediaDescription = function (sdp, description) {\n    var descriptionRegExp = new RegExp(\"m=\" + description + \".*$\", \"gm\");\n    var groupRegExp = new RegExp(\"^a=group:.*$\", \"gm\");\n    if (descriptionRegExp.test(sdp)) {\n        var midLineToRemove_1;\n        sdp = sdp.split(/^m=/gm).filter(function (section) {\n            if (section.substr(0, description.length) === description) {\n                midLineToRemove_1 = section.match(/^a=mid:.*$/gm);\n                if (midLineToRemove_1) {\n                    var step = midLineToRemove_1[0].match(/:.+$/g);\n                    if (step) {\n                        midLineToRemove_1 = step[0].substr(1);\n                    }\n                }\n                return false;\n            }\n            return true;\n        }).join(\"m=\");\n        var groupLine = sdp.match(groupRegExp);\n        if (groupLine && groupLine.length === 1) {\n            var groupLinePortion = groupLine[0];\n            var groupRegExpReplace = new RegExp(\"\\ *\" + midLineToRemove_1 + \"[^\\ ]*\", \"g\");\n            groupLinePortion = groupLinePortion.replace(groupRegExpReplace, \"\");\n            sdp = sdp.split(groupRegExp).join(groupLinePortion);\n        }\n    }\n    return sdp;\n};\nfunction stripTcpCandidates(description) {\n    description.sdp = (description.sdp || \"\").replace(/^a=candidate:\\d+ \\d+ tcp .*?\\r\\n/img, \"\");\n    return Promise.resolve(description);\n}\nexports.stripTcpCandidates = stripTcpCandidates;\nfunction stripTelephoneEvent(description) {\n    description.sdp = stripPayload(description.sdp || \"\", \"telephone-event\");\n    return Promise.resolve(description);\n}\nexports.stripTelephoneEvent = stripTelephoneEvent;\nfunction cleanJitsiSdpImageattr(description) {\n    description.sdp = (description.sdp || \"\").replace(/^(a=imageattr:.*?)(x|y)=\\[0-/gm, \"$1$2=[1:\");\n    return Promise.resolve(description);\n}\nexports.cleanJitsiSdpImageattr = cleanJitsiSdpImageattr;\nfunction stripG722(description) {\n    description.sdp = stripPayload(description.sdp || \"\", \"G722\");\n    return Promise.resolve(description);\n}\nexports.stripG722 = stripG722;\nfunction stripRtpPayload(payload) {\n    return function (description) {\n        description.sdp = stripPayload(description.sdp || \"\", payload);\n        return Promise.resolve(description);\n    };\n}\nexports.stripRtpPayload = stripRtpPayload;\nfunction stripVideo(description) {\n    description.sdp = stripMediaDescription(description.sdp || \"\", \"video\");\n    return Promise.resolve(description);\n}\nexports.stripVideo = stripVideo;\nfunction addMidLines(description) {\n    var sdp = description.sdp || \"\";\n    if (sdp.search(/^a=mid.*$/gm) === -1) {\n        var mlines_1 = sdp.match(/^m=.*$/gm);\n        var sdpArray_1 = sdp.split(/^m=.*$/gm);\n        if (mlines_1) {\n            mlines_1.forEach(function (elem, idx) {\n                mlines_1[idx] = elem + \"\\na=mid:\" + idx;\n            });\n        }\n        sdpArray_1.forEach(function (elem, idx) {\n            if (mlines_1 && mlines_1[idx]) {\n                sdpArray_1[idx] = elem + mlines_1[idx];\n            }\n        });\n        sdp = sdpArray_1.join(\"\");\n        description.sdp = sdp;\n    }\n    return Promise.resolve(description);\n}\nexports.addMidLines = addMidLines;\n\n\n/***/ }),\n/* 111 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar session_1 = __webpack_require__(96);\nvar Enums_1 = __webpack_require__(82);\n/* SessionDescriptionHandlerObserver\n * @class SessionDescriptionHandler Observer Class.\n * @param {SIP.Session} session\n * @param {Object} [options]\n */\nvar SessionDescriptionHandlerObserver = /** @class */ (function () {\n    function SessionDescriptionHandlerObserver(session, options) {\n        this.type = Enums_1.TypeStrings.SessionDescriptionHandlerObserver;\n        this.session = session;\n        this.options = options;\n    }\n    SessionDescriptionHandlerObserver.prototype.trackAdded = function () {\n        if (this.session instanceof session_1.Session) {\n            return;\n        }\n        this.session.emit(\"trackAdded\");\n    };\n    SessionDescriptionHandlerObserver.prototype.directionChanged = function () {\n        if (this.session instanceof session_1.Session) {\n            return;\n        }\n        this.session.emit(\"directionChanged\");\n    };\n    return SessionDescriptionHandlerObserver;\n}());\nexports.SessionDescriptionHandlerObserver = SessionDescriptionHandlerObserver;\n\n\n/***/ }),\n/* 112 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar core_1 = __webpack_require__(2);\nvar Enums_1 = __webpack_require__(82);\nvar Exceptions_1 = __webpack_require__(84);\nvar Transport_1 = __webpack_require__(93);\nvar Utils_1 = __webpack_require__(83);\nvar TransportStatus;\n(function (TransportStatus) {\n    TransportStatus[TransportStatus[\"STATUS_CONNECTING\"] = 0] = \"STATUS_CONNECTING\";\n    TransportStatus[TransportStatus[\"STATUS_OPEN\"] = 1] = \"STATUS_OPEN\";\n    TransportStatus[TransportStatus[\"STATUS_CLOSING\"] = 2] = \"STATUS_CLOSING\";\n    TransportStatus[TransportStatus[\"STATUS_CLOSED\"] = 3] = \"STATUS_CLOSED\";\n})(TransportStatus = exports.TransportStatus || (exports.TransportStatus = {}));\n/**\n * Compute an amount of time in seconds to wait before sending another\n * keep-alive.\n * @returns {Number}\n */\nvar computeKeepAliveTimeout = function (upperBound) {\n    var lowerBound = upperBound * 0.8;\n    return 1000 * (Math.random() * (upperBound - lowerBound) + lowerBound);\n};\n/**\n * @class Transport\n * @param {Object} options\n */\nvar Transport = /** @class */ (function (_super) {\n    tslib_1.__extends(Transport, _super);\n    function Transport(logger, options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, logger) || this;\n        _this.type = Enums_1.TypeStrings.Transport;\n        _this.reconnectionAttempts = 0;\n        _this.status = TransportStatus.STATUS_CONNECTING;\n        _this.configuration = _this.loadConfig(options);\n        _this.server = _this.configuration.wsServers[0];\n        return _this;\n    }\n    /**\n     * @returns {Boolean}\n     */\n    Transport.prototype.isConnected = function () {\n        return this.status === TransportStatus.STATUS_OPEN;\n    };\n    /**\n     * Send a message.\n     * @param message - Outgoing message.\n     * @param options - Options bucket.\n     */\n    Transport.prototype.sendPromise = function (message, options) {\n        if (options === void 0) { options = {}; }\n        if (this.ws === undefined) {\n            this.onError(\"unable to send message - WebSocket undefined\");\n            return Promise.reject(new Error(\"WebSocket undefined.\"));\n        }\n        // FIXME: This check is likely not necessary as WebSocket.send() will\n        // throw INVALID_STATE_ERR if the connection is not currently open\n        // which could happen regardless of what we thing the state is.\n        if (!this.statusAssert(TransportStatus.STATUS_OPEN, options.force)) {\n            this.onError(\"unable to send message - WebSocket not open\");\n            return Promise.reject(new Error(\"WebSocket not open.\"));\n        }\n        if (this.configuration.traceSip === true) {\n            this.logger.log(\"sending WebSocket message:\\n\\n\" + message + \"\\n\");\n        }\n        // WebSocket.send() can throw.\n        // https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n        try {\n            this.ws.send(message);\n        }\n        catch (error) {\n            if (error instanceof error) {\n                Promise.reject(error);\n            }\n            return Promise.reject(new Error(\"Failed to send message.\"));\n        }\n        return Promise.resolve({ msg: message });\n    };\n    /**\n     * Disconnect socket.\n     */\n    Transport.prototype.disconnectPromise = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        if (this.disconnectionPromise) { // Already disconnecting. Just return this.\n            return this.disconnectionPromise;\n        }\n        options.code = options.code || 1000;\n        if (!this.statusTransition(TransportStatus.STATUS_CLOSING, options.force)) {\n            if (this.status === TransportStatus.STATUS_CLOSED) { // Websocket is already closed\n                return Promise.resolve({ overrideEvent: true });\n            }\n            else if (this.connectionPromise) { // Websocket is connecting, cannot move to disconneting yet\n                return this.connectionPromise.then(function () { return Promise.reject(\"The websocket did not disconnect\"); })\n                    .catch(function () { return Promise.resolve({ overrideEvent: true }); });\n            }\n            else {\n                // Cannot move to disconnecting, but not in connecting state.\n                return Promise.reject(\"The websocket did not disconnect\");\n            }\n        }\n        this.emit(\"disconnecting\");\n        this.disconnectionPromise = new Promise(function (resolve, reject) {\n            _this.disconnectDeferredResolve = resolve;\n            if (_this.reconnectTimer) {\n                clearTimeout(_this.reconnectTimer);\n                _this.reconnectTimer = undefined;\n            }\n            if (_this.ws) {\n                _this.stopSendingKeepAlives();\n                _this.logger.log(\"closing WebSocket \" + _this.server.wsUri);\n                _this.ws.close(options.code, options.reason);\n            }\n            else {\n                reject(\"Attempted to disconnect but the websocket doesn't exist\");\n            }\n        });\n        return this.disconnectionPromise;\n    };\n    /**\n     * Connect socket.\n     */\n    Transport.prototype.connectPromise = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        if (this.status === TransportStatus.STATUS_CLOSING && !options.force) {\n            return Promise.reject(\"WebSocket \" + this.server.wsUri + \" is closing\");\n        }\n        if (this.connectionPromise) {\n            return this.connectionPromise;\n        }\n        this.server = this.server || this.getNextWsServer(options.force);\n        this.connectionPromise = new Promise(function (resolve, reject) {\n            if ((_this.status === TransportStatus.STATUS_OPEN || _this.status === TransportStatus.STATUS_CLOSING)\n                && !options.force) {\n                _this.logger.warn(\"WebSocket \" + _this.server.wsUri + \" is already connected\");\n                reject(\"Failed status check - attempted to open a connection but already open/closing\");\n                return;\n            }\n            _this.connectDeferredResolve = resolve;\n            _this.connectDeferredReject = reject;\n            _this.status = TransportStatus.STATUS_CONNECTING;\n            _this.emit(\"connecting\");\n            _this.logger.log(\"connecting to WebSocket \" + _this.server.wsUri);\n            _this.disposeWs();\n            try {\n                _this.ws = new WebSocket(_this.server.wsUri, \"sip\");\n                _this.ws.binaryType = \"arraybuffer\"; // set data type of received binary messages\n            }\n            catch (e) {\n                _this.ws = undefined;\n                _this.statusTransition(TransportStatus.STATUS_CLOSED, true);\n                _this.onError(\"error connecting to WebSocket \" + _this.server.wsUri + \":\" + e);\n                reject(\"Failed to create a websocket\");\n                _this.connectDeferredResolve = undefined;\n                _this.connectDeferredReject = undefined;\n                return;\n            }\n            if (!_this.ws) {\n                reject(\"Unexpected instance websocket not set\");\n                _this.connectDeferredResolve = undefined;\n                _this.connectDeferredReject = undefined;\n                return;\n            }\n            _this.connectionTimeout = setTimeout(function () {\n                _this.statusTransition(TransportStatus.STATUS_CLOSED);\n                _this.logger.warn(\"took too long to connect - exceeded time set in configuration.connectionTimeout: \" +\n                    _this.configuration.connectionTimeout + \"s\");\n                _this.emit(\"disconnected\", { code: 1000 });\n                _this.connectionPromise = undefined;\n                reject(\"Connection timeout\");\n                _this.connectDeferredResolve = undefined;\n                _this.connectDeferredReject = undefined;\n                var ws = _this.ws;\n                _this.disposeWs();\n                if (ws) {\n                    ws.close(1000);\n                }\n            }, _this.configuration.connectionTimeout * 1000);\n            _this.boundOnOpen = _this.onOpen.bind(_this);\n            _this.boundOnMessage = _this.onMessage.bind(_this);\n            _this.boundOnClose = _this.onClose.bind(_this);\n            _this.boundOnError = _this.onWebsocketError.bind(_this);\n            _this.ws.addEventListener(\"open\", _this.boundOnOpen);\n            _this.ws.addEventListener(\"message\", _this.boundOnMessage);\n            _this.ws.addEventListener(\"close\", _this.boundOnClose);\n            _this.ws.addEventListener(\"error\", _this.boundOnError);\n        });\n        return this.connectionPromise;\n    };\n    /**\n     * @event\n     * @param {event} e\n     */\n    Transport.prototype.onMessage = function (e) {\n        var data = e.data;\n        var finishedData;\n        // CRLF Keep Alive response from server. Clear our keep alive timeout.\n        if (/^(\\r\\n)+$/.test(data)) {\n            this.clearKeepAliveTimeout();\n            if (this.configuration.traceSip === true) {\n                this.logger.log(\"received WebSocket message with CRLF Keep Alive response\");\n            }\n            return;\n        }\n        else if (!data) {\n            this.logger.warn(\"received empty message, message discarded\");\n            return;\n        }\n        else if (typeof data !== \"string\") { // WebSocket binary message.\n            try {\n                // the UInt8Data was here prior to types, and doesn't check\n                finishedData = String.fromCharCode.apply(null, new Uint8Array(data));\n            }\n            catch (err) {\n                this.logger.warn(\"received WebSocket binary message failed to be converted into string, message discarded\");\n                return;\n            }\n            if (this.configuration.traceSip === true) {\n                this.logger.log(\"received WebSocket binary message:\\n\\n\" + data + \"\\n\");\n            }\n        }\n        else { // WebSocket text message.\n            if (this.configuration.traceSip === true) {\n                this.logger.log(\"received WebSocket text message:\\n\\n\" + data + \"\\n\");\n            }\n            finishedData = data;\n        }\n        this.emit(\"message\", finishedData);\n    };\n    // Transport Event Handlers\n    /**\n     * @event\n     * @param {event} e\n     */\n    Transport.prototype.onOpen = function () {\n        if (this.status === TransportStatus.STATUS_CLOSED) { // Indicated that the transport thinks the ws is dead already\n            var ws = this.ws;\n            this.disposeWs();\n            if (ws) {\n                ws.close(1000);\n            }\n            return;\n        }\n        this.statusTransition(TransportStatus.STATUS_OPEN, true);\n        this.emit(\"connected\");\n        if (this.connectionTimeout) {\n            clearTimeout(this.connectionTimeout);\n            this.connectionTimeout = undefined;\n        }\n        this.logger.log(\"WebSocket \" + this.server.wsUri + \" connected\");\n        // Clear reconnectTimer since we are not disconnected\n        if (this.reconnectTimer !== undefined) {\n            clearTimeout(this.reconnectTimer);\n            this.reconnectTimer = undefined;\n        }\n        // Reset reconnectionAttempts\n        this.reconnectionAttempts = 0;\n        // Reset disconnection promise so we can disconnect from a fresh state\n        this.disconnectionPromise = undefined;\n        this.disconnectDeferredResolve = undefined;\n        // Start sending keep-alives\n        this.startSendingKeepAlives();\n        if (this.connectDeferredResolve) {\n            this.connectDeferredResolve({ overrideEvent: true });\n            this.connectDeferredResolve = undefined;\n            this.connectDeferredReject = undefined;\n        }\n        else {\n            this.logger.warn(\"Unexpected websocket.onOpen with no connectDeferredResolve\");\n        }\n    };\n    /**\n     * @event\n     * @param {event} e\n     */\n    Transport.prototype.onClose = function (e) {\n        this.logger.log(\"WebSocket disconnected (code: \" + e.code + (e.reason ? \"| reason: \" + e.reason : \"\") + \")\");\n        if (this.status !== TransportStatus.STATUS_CLOSING) {\n            this.logger.warn(\"WebSocket closed without SIP.js requesting it\");\n            this.emit(\"transportError\");\n        }\n        this.stopSendingKeepAlives();\n        // Clean up connection variables so we can connect again from a fresh state\n        if (this.connectionTimeout) {\n            clearTimeout(this.connectionTimeout);\n        }\n        if (this.connectDeferredReject) {\n            this.connectDeferredReject(\"Websocket Closed\");\n        }\n        this.connectionTimeout = undefined;\n        this.connectionPromise = undefined;\n        this.connectDeferredResolve = undefined;\n        this.connectDeferredReject = undefined;\n        // Check whether the user requested to close.\n        if (this.disconnectDeferredResolve) {\n            this.disconnectDeferredResolve({ overrideEvent: true });\n            this.statusTransition(TransportStatus.STATUS_CLOSED);\n            this.disconnectDeferredResolve = undefined;\n            return;\n        }\n        this.statusTransition(TransportStatus.STATUS_CLOSED, true);\n        this.emit(\"disconnected\", { code: e.code, reason: e.reason });\n        this.disposeWs();\n        this.reconnect();\n    };\n    /**\n     * Removes event listeners and clears the instance ws\n     */\n    Transport.prototype.disposeWs = function () {\n        if (this.ws) {\n            this.ws.removeEventListener(\"open\", this.boundOnOpen);\n            this.ws.removeEventListener(\"message\", this.boundOnMessage);\n            this.ws.removeEventListener(\"close\", this.boundOnClose);\n            this.ws.removeEventListener(\"error\", this.boundOnError);\n            this.ws = undefined;\n        }\n    };\n    /**\n     * @event\n     * @param {string} e\n     */\n    Transport.prototype.onError = function (e) {\n        this.logger.warn(\"Transport error: \" + e);\n        this.emit(\"transportError\");\n    };\n    /**\n     * @event\n     * @private\n     */\n    Transport.prototype.onWebsocketError = function () {\n        this.onError(\"The Websocket had an error\");\n    };\n    /**\n     * Reconnection attempt logic.\n     */\n    Transport.prototype.reconnect = function () {\n        var _this = this;\n        if (this.reconnectionAttempts > 0) {\n            this.logger.log(\"Reconnection attempt \" + this.reconnectionAttempts + \" failed\");\n        }\n        if (this.noAvailableServers()) {\n            this.logger.warn(\"attempted to get next ws server but there are no available ws servers left\");\n            this.logger.warn(\"no available ws servers left - going to closed state\");\n            this.statusTransition(TransportStatus.STATUS_CLOSED, true);\n            this.emit(\"closed\");\n            this.resetServerErrorStatus();\n            return;\n        }\n        if (this.isConnected()) {\n            this.logger.warn(\"attempted to reconnect while connected - forcing disconnect\");\n            this.disconnect({ force: true });\n        }\n        this.reconnectionAttempts += 1;\n        if (this.reconnectionAttempts > this.configuration.maxReconnectionAttempts) {\n            this.logger.warn(\"maximum reconnection attempts for WebSocket \" + this.server.wsUri);\n            this.logger.log(\"transport \" + this.server.wsUri + \" failed | connection state set to 'error'\");\n            this.server.isError = true;\n            this.emit(\"transportError\");\n            if (!this.noAvailableServers()) {\n                this.server = this.getNextWsServer();\n            }\n            // When there are no available servers, the reconnect function ends on the next recursive call\n            // after checking for no available servers again.\n            this.reconnectionAttempts = 0;\n            this.reconnect();\n        }\n        else {\n            this.logger.log(\"trying to reconnect to WebSocket \" +\n                this.server.wsUri + \" (reconnection attempt \" + this.reconnectionAttempts + \")\");\n            this.reconnectTimer = setTimeout(function () {\n                _this.connect();\n                _this.reconnectTimer = undefined;\n            }, (this.reconnectionAttempts === 1) ? 0 : this.configuration.reconnectionTimeout * 1000);\n        }\n    };\n    /**\n     * Resets the error state of all servers in the configuration\n     */\n    Transport.prototype.resetServerErrorStatus = function () {\n        for (var _i = 0, _a = this.configuration.wsServers; _i < _a.length; _i++) {\n            var websocket = _a[_i];\n            websocket.isError = false;\n        }\n    };\n    /**\n     * Retrieve the next server to which connect.\n     * @param {Boolean} force allows bypass of server error status checking\n     * @returns {Object} WsServer\n     */\n    Transport.prototype.getNextWsServer = function (force) {\n        if (force === void 0) { force = false; }\n        if (this.noAvailableServers()) {\n            this.logger.warn(\"attempted to get next ws server but there are no available ws servers left\");\n            throw new Error(\"Attempted to get next ws server, but there are no available ws servers left.\");\n        }\n        // Order servers by weight\n        var candidates = [];\n        for (var _i = 0, _a = this.configuration.wsServers; _i < _a.length; _i++) {\n            var wsServer = _a[_i];\n            if (wsServer.isError && !force) {\n                continue;\n            }\n            else if (candidates.length === 0) {\n                candidates.push(wsServer);\n            }\n            else if (wsServer.weight > candidates[0].weight) {\n                candidates = [wsServer];\n            }\n            else if (wsServer.weight === candidates[0].weight) {\n                candidates.push(wsServer);\n            }\n        }\n        var idx = Math.floor(Math.random() * candidates.length);\n        return candidates[idx];\n    };\n    /**\n     * Checks all configuration servers, returns true if all of them have isError: true and false otherwise\n     * @returns {Boolean}\n     */\n    Transport.prototype.noAvailableServers = function () {\n        for (var _i = 0, _a = this.configuration.wsServers; _i < _a.length; _i++) {\n            var server = _a[_i];\n            if (!server.isError) {\n                return false;\n            }\n        }\n        return true;\n    };\n    // ==============================\n    // KeepAlive Stuff\n    // ==============================\n    /**\n     * Send a keep-alive (a double-CRLF sequence).\n     * @returns {Boolean}\n     */\n    Transport.prototype.sendKeepAlive = function () {\n        var _this = this;\n        if (this.keepAliveDebounceTimeout) {\n            // We already have an outstanding keep alive, do not send another.\n            return;\n        }\n        this.keepAliveDebounceTimeout = setTimeout(function () {\n            _this.emit(\"keepAliveDebounceTimeout\");\n            _this.clearKeepAliveTimeout();\n        }, this.configuration.keepAliveDebounce * 1000);\n        return this.send(\"\\r\\n\\r\\n\");\n    };\n    Transport.prototype.clearKeepAliveTimeout = function () {\n        if (this.keepAliveDebounceTimeout) {\n            clearTimeout(this.keepAliveDebounceTimeout);\n        }\n        this.keepAliveDebounceTimeout = undefined;\n    };\n    /**\n     * Start sending keep-alives.\n     */\n    Transport.prototype.startSendingKeepAlives = function () {\n        var _this = this;\n        if (this.configuration.keepAliveInterval && !this.keepAliveInterval) {\n            this.keepAliveInterval = setInterval(function () {\n                _this.sendKeepAlive();\n                _this.startSendingKeepAlives();\n            }, computeKeepAliveTimeout(this.configuration.keepAliveInterval));\n        }\n    };\n    /**\n     * Stop sending keep-alives.\n     */\n    Transport.prototype.stopSendingKeepAlives = function () {\n        if (this.keepAliveInterval) {\n            clearInterval(this.keepAliveInterval);\n        }\n        if (this.keepAliveDebounceTimeout) {\n            clearTimeout(this.keepAliveDebounceTimeout);\n        }\n        this.keepAliveInterval = undefined;\n        this.keepAliveDebounceTimeout = undefined;\n    };\n    // ==============================\n    // Status Stuff\n    // ==============================\n    /**\n     * Checks given status against instance current status. Returns true if they match\n     * @param {Number} status\n     * @param {Boolean} [force]\n     * @returns {Boolean}\n     */\n    Transport.prototype.statusAssert = function (status, force) {\n        if (status === this.status) {\n            return true;\n        }\n        else {\n            if (force) {\n                this.logger.warn(\"Attempted to assert \" +\n                    Object.keys(TransportStatus)[this.status] + \" as \" +\n                    Object.keys(TransportStatus)[status] + \"- continuing with option: 'force'\");\n                return true;\n            }\n            else {\n                this.logger.warn(\"Tried to assert \" +\n                    Object.keys(TransportStatus)[status] + \" but is currently \" +\n                    Object.keys(TransportStatus)[this.status]);\n                return false;\n            }\n        }\n    };\n    /**\n     * Transitions the status. Checks for legal transition via assertion beforehand\n     * @param {Number} status\n     * @param {Boolean} [force]\n     * @returns {Boolean}\n     */\n    Transport.prototype.statusTransition = function (status, force) {\n        if (force === void 0) { force = false; }\n        this.logger.log(\"Attempting to transition status from \" +\n            Object.keys(TransportStatus)[this.status] + \" to \" +\n            Object.keys(TransportStatus)[status]);\n        if ((status === TransportStatus.STATUS_CONNECTING && this.statusAssert(TransportStatus.STATUS_CLOSED, force)) ||\n            (status === TransportStatus.STATUS_OPEN && this.statusAssert(TransportStatus.STATUS_CONNECTING, force)) ||\n            (status === TransportStatus.STATUS_CLOSING && this.statusAssert(TransportStatus.STATUS_OPEN, force)) ||\n            (status === TransportStatus.STATUS_CLOSED)) {\n            this.status = status;\n            return true;\n        }\n        else {\n            this.logger.warn(\"Status transition failed - result: no-op - reason:\" +\n                \" either gave an nonexistent status or attempted illegal transition\");\n            return false;\n        }\n    };\n    // ==============================\n    // Configuration Handling\n    // ==============================\n    /**\n     * Configuration load.\n     * returns {Configuration}\n     */\n    Transport.prototype.loadConfig = function (configuration) {\n        var settings = {\n            wsServers: [{\n                    scheme: \"WSS\",\n                    sipUri: \"<sip:edge.sip.onsip.com;transport=ws;lr>\",\n                    weight: 0,\n                    wsUri: \"wss://edge.sip.onsip.com\",\n                    isError: false\n                }],\n            connectionTimeout: 5,\n            maxReconnectionAttempts: 3,\n            reconnectionTimeout: 4,\n            keepAliveInterval: 0,\n            keepAliveDebounce: 10,\n            // Logging\n            traceSip: false\n        };\n        var configCheck = this.getConfigurationCheck();\n        // Check Mandatory parameters\n        for (var parameter in configCheck.mandatory) {\n            if (!configuration.hasOwnProperty(parameter)) {\n                throw new Exceptions_1.Exceptions.ConfigurationError(parameter);\n            }\n            else {\n                var value = configuration[parameter];\n                var checkedValue = configCheck.mandatory[parameter](value);\n                if (checkedValue !== undefined) {\n                    settings[parameter] = checkedValue;\n                }\n                else {\n                    throw new Exceptions_1.Exceptions.ConfigurationError(parameter, value);\n                }\n            }\n        }\n        // Check Optional parameters\n        for (var parameter in configCheck.optional) {\n            if (configuration.hasOwnProperty(parameter)) {\n                var value = configuration[parameter];\n                // If the parameter value is an empty array, but shouldn't be, apply its default value.\n                // If the parameter value is null, empty string, or undefined then apply its default value.\n                // If it's a number with NaN value then also apply its default value.\n                // NOTE: JS does not allow \"value === NaN\", the following does the work:\n                if ((value instanceof Array && value.length === 0) ||\n                    (value === null || value === \"\" || value === undefined) ||\n                    (typeof (value) === \"number\" && isNaN(value))) {\n                    continue;\n                }\n                var checkedValue = configCheck.optional[parameter](value);\n                if (checkedValue !== undefined) {\n                    settings[parameter] = checkedValue;\n                }\n                else {\n                    throw new Exceptions_1.Exceptions.ConfigurationError(parameter, value);\n                }\n            }\n        }\n        var skeleton = {}; // Fill the value of the configuration_skeleton\n        for (var parameter in settings) {\n            if (settings.hasOwnProperty(parameter)) {\n                skeleton[parameter] = {\n                    value: settings[parameter],\n                };\n            }\n        }\n        var returnConfiguration = Object.defineProperties({}, skeleton);\n        this.logger.log(\"configuration parameters after validation:\");\n        for (var parameter in settings) {\n            if (settings.hasOwnProperty(parameter)) {\n                this.logger.log(\"· \" + parameter + \": \" + JSON.stringify(settings[parameter]));\n            }\n        }\n        return returnConfiguration;\n    };\n    /**\n     * Configuration checker.\n     * @return {Boolean}\n     */\n    Transport.prototype.getConfigurationCheck = function () {\n        return {\n            mandatory: {},\n            optional: {\n                // Note: this function used to call 'this.logger.error' but calling 'this' with anything here is invalid\n                wsServers: function (wsServers) {\n                    /* Allow defining wsServers parameter as:\n                     *  String: \"host\"\n                     *  Array of Strings: [\"host1\", \"host2\"]\n                     *  Array of Objects: [{wsUri:\"host1\", weight:1}, {wsUri:\"host2\", weight:0}]\n                     *  Array of Objects and Strings: [{wsUri:\"host1\"}, \"host2\"]\n                     */\n                    if (typeof wsServers === \"string\") {\n                        wsServers = [{ wsUri: wsServers }];\n                    }\n                    else if (wsServers instanceof Array) {\n                        for (var idx = 0; idx < wsServers.length; idx++) {\n                            if (typeof wsServers[idx] === \"string\") {\n                                wsServers[idx] = { wsUri: wsServers[idx] };\n                            }\n                        }\n                    }\n                    else {\n                        return;\n                    }\n                    if (wsServers.length === 0) {\n                        return false;\n                    }\n                    for (var _i = 0, wsServers_1 = wsServers; _i < wsServers_1.length; _i++) {\n                        var wsServer = wsServers_1[_i];\n                        if (!wsServer.wsUri) {\n                            return;\n                        }\n                        if (wsServer.weight && !Number(wsServer.weight)) {\n                            return;\n                        }\n                        var url = core_1.Grammar.parse(wsServer.wsUri, \"absoluteURI\");\n                        if (url === -1) {\n                            return;\n                        }\n                        else if ([\"wss\", \"ws\", \"udp\"].indexOf(url.scheme) < 0) {\n                            return;\n                        }\n                        else {\n                            wsServer.sipUri = \"<sip:\" + url.host +\n                                (url.port ? \":\" + url.port : \"\") + \";transport=\" + url.scheme.replace(/^wss$/i, \"ws\") + \";lr>\";\n                            if (!wsServer.weight) {\n                                wsServer.weight = 0;\n                            }\n                            wsServer.isError = false;\n                            wsServer.scheme = url.scheme.toUpperCase();\n                        }\n                    }\n                    return wsServers;\n                },\n                keepAliveInterval: function (keepAliveInterval) {\n                    if (Utils_1.Utils.isDecimal(keepAliveInterval)) {\n                        var value = Number(keepAliveInterval);\n                        if (value > 0) {\n                            return value;\n                        }\n                    }\n                },\n                keepAliveDebounce: function (keepAliveDebounce) {\n                    if (Utils_1.Utils.isDecimal(keepAliveDebounce)) {\n                        var value = Number(keepAliveDebounce);\n                        if (value > 0) {\n                            return value;\n                        }\n                    }\n                },\n                traceSip: function (traceSip) {\n                    if (typeof traceSip === \"boolean\") {\n                        return traceSip;\n                    }\n                },\n                connectionTimeout: function (connectionTimeout) {\n                    if (Utils_1.Utils.isDecimal(connectionTimeout)) {\n                        var value = Number(connectionTimeout);\n                        if (value > 0) {\n                            return value;\n                        }\n                    }\n                },\n                maxReconnectionAttempts: function (maxReconnectionAttempts) {\n                    if (Utils_1.Utils.isDecimal(maxReconnectionAttempts)) {\n                        var value = Number(maxReconnectionAttempts);\n                        if (value >= 0) {\n                            return value;\n                        }\n                    }\n                },\n                reconnectionTimeout: function (reconnectionTimeout) {\n                    if (Utils_1.Utils.isDecimal(reconnectionTimeout)) {\n                        var value = Number(reconnectionTimeout);\n                        if (value > 0) {\n                            return value;\n                        }\n                    }\n                }\n            }\n        };\n    };\n    Transport.C = TransportStatus;\n    return Transport;\n}(Transport_1.Transport));\nexports.Transport = Transport;\n\n\n/***/ }),\n/* 113 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar Modifiers = tslib_1.__importStar(__webpack_require__(110));\nexports.Modifiers = Modifiers;\nvar Simple_1 = __webpack_require__(114);\nexports.Simple = Simple_1.Simple;\nvar SessionDescriptionHandler_1 = __webpack_require__(95);\nexports.SessionDescriptionHandler = SessionDescriptionHandler_1.SessionDescriptionHandler;\nvar Transport_1 = __webpack_require__(112);\nexports.Transport = Transport_1.Transport;\n\n\n/***/ }),\n/* 114 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(1);\nvar events_1 = __webpack_require__(31);\nvar UA_1 = __webpack_require__(94);\nvar Modifiers = tslib_1.__importStar(__webpack_require__(110));\n/* Simple\n * @class Simple\n */\nvar SimpleStatus;\n(function (SimpleStatus) {\n    SimpleStatus[SimpleStatus[\"STATUS_NULL\"] = 0] = \"STATUS_NULL\";\n    SimpleStatus[SimpleStatus[\"STATUS_NEW\"] = 1] = \"STATUS_NEW\";\n    SimpleStatus[SimpleStatus[\"STATUS_CONNECTING\"] = 2] = \"STATUS_CONNECTING\";\n    SimpleStatus[SimpleStatus[\"STATUS_CONNECTED\"] = 3] = \"STATUS_CONNECTED\";\n    SimpleStatus[SimpleStatus[\"STATUS_COMPLETED\"] = 4] = \"STATUS_COMPLETED\";\n})(SimpleStatus = exports.SimpleStatus || (exports.SimpleStatus = {}));\nvar Simple = /** @class */ (function (_super) {\n    tslib_1.__extends(Simple, _super);\n    function Simple(options) {\n        var _this = _super.call(this) || this;\n        /*\n        *  {\n        *    media: {\n        *      remote: {\n        *        audio: <DOM element>,\n        *        video: <DOM element>\n        *      },\n        *      local: {\n        *        video: <DOM element>\n        *      }\n        *    },\n        *    ua: {\n        *       <UA Configuration Options>\n        *    }\n        *  }\n        */\n        if (options.media.remote.video) {\n            _this.video = true;\n        }\n        else {\n            _this.video = false;\n        }\n        if (options.media.remote.audio) {\n            _this.audio = true;\n        }\n        else {\n            _this.audio = false;\n        }\n        if (!_this.audio && !_this.video) {\n            // Need to do at least audio or video\n            // Error\n            throw new Error(\"At least one remote audio or video element is required for Simple.\");\n        }\n        _this.options = options;\n        // https://stackoverflow.com/questions/7944460/detect-safari-browser\n        var browserUa = navigator.userAgent.toLowerCase();\n        var isSafari = false;\n        var isFirefox = false;\n        if (browserUa.indexOf(\"safari\") > -1 && browserUa.indexOf(\"chrome\") < 0) {\n            isSafari = true;\n        }\n        else if (browserUa.indexOf(\"firefox\") > -1 && browserUa.indexOf(\"chrome\") < 0) {\n            isFirefox = true;\n        }\n        var sessionDescriptionHandlerFactoryOptions = {};\n        if (isSafari) {\n            sessionDescriptionHandlerFactoryOptions.modifiers = [Modifiers.stripG722];\n        }\n        if (isFirefox) {\n            sessionDescriptionHandlerFactoryOptions.alwaysAcquireMediaFirst = true;\n        }\n        if (!_this.options.ua.uri) {\n            _this.anonymous = true;\n        }\n        else {\n            _this.anonymous = false;\n        }\n        _this.ua = new UA_1.UA({\n            // User Configurable Options\n            uri: _this.options.ua.uri,\n            authorizationUser: _this.options.ua.authorizationUser,\n            password: _this.options.ua.password,\n            displayName: _this.options.ua.displayName,\n            // Undocumented \"Advanced\" Options\n            userAgentString: _this.options.ua.userAgentString,\n            // Fixed Options\n            register: true,\n            sessionDescriptionHandlerFactoryOptions: sessionDescriptionHandlerFactoryOptions,\n            transportOptions: {\n                traceSip: _this.options.ua.traceSip,\n                wsServers: _this.options.ua.wsServers\n            }\n        });\n        _this.state = SimpleStatus.STATUS_NULL;\n        _this.logger = _this.ua.getLogger(\"sip.simple\");\n        _this.ua.on(\"registered\", function () {\n            _this.emit(\"registered\", _this.ua);\n        });\n        _this.ua.on(\"unregistered\", function () {\n            _this.emit(\"unregistered\", _this.ua);\n        });\n        _this.ua.on(\"registrationFailed\", function () {\n            _this.emit(\"unregistered\", _this.ua);\n        });\n        _this.ua.on(\"invite\", function (session) {\n            // If there is already an active session reject the incoming session\n            if (_this.state !== SimpleStatus.STATUS_NULL && _this.state !== SimpleStatus.STATUS_COMPLETED) {\n                _this.logger.warn(\"Rejecting incoming call. Simple only supports 1 call at a time\");\n                session.reject();\n                return;\n            }\n            _this.session = session;\n            _this.setupSession();\n            _this.emit(\"ringing\", _this.session);\n        });\n        _this.ua.on(\"message\", function (message) {\n            _this.emit(\"message\", message);\n        });\n        return _this;\n    }\n    Simple.prototype.call = function (destination) {\n        if (!this.ua || !this.checkRegistration()) {\n            this.logger.warn(\"A registered UA is required for calling\");\n            return;\n        }\n        if (this.state !== SimpleStatus.STATUS_NULL && this.state !== SimpleStatus.STATUS_COMPLETED) {\n            this.logger.warn(\"Cannot make more than a single call with Simple\");\n            return;\n        }\n        // Safari hack, because you cannot call .play() from a non user action\n        if (this.options.media.remote.audio) {\n            this.options.media.remote.audio.autoplay = true;\n        }\n        if (this.options.media.remote.video) {\n            this.options.media.remote.video.autoplay = true;\n        }\n        if (this.options.media.local && this.options.media.local.video) {\n            this.options.media.local.video.autoplay = true;\n            this.options.media.local.video.volume = 0;\n        }\n        this.session = this.ua.invite(destination, {\n            sessionDescriptionHandlerOptions: {\n                constraints: {\n                    audio: this.audio,\n                    video: this.video\n                }\n            }\n        });\n        this.setupSession();\n        return this.session;\n    };\n    Simple.prototype.answer = function () {\n        if (this.state !== SimpleStatus.STATUS_NEW && this.state !== SimpleStatus.STATUS_CONNECTING) {\n            this.logger.warn(\"No call to answer\");\n            return;\n        }\n        // Safari hack, because you cannot call .play() from a non user action\n        if (this.options.media.remote.audio) {\n            this.options.media.remote.audio.autoplay = true;\n        }\n        if (this.options.media.remote.video) {\n            this.options.media.remote.video.autoplay = true;\n        }\n        return this.session.accept({\n            sessionDescriptionHandlerOptions: {\n                constraints: {\n                    audio: this.audio,\n                    video: this.video\n                }\n            }\n        });\n        // emit call is active\n    };\n    Simple.prototype.reject = function () {\n        if (this.state !== SimpleStatus.STATUS_NEW && this.state !== SimpleStatus.STATUS_CONNECTING) {\n            this.logger.warn(\"Call is already answered\");\n            return;\n        }\n        return this.session.reject();\n    };\n    Simple.prototype.hangup = function () {\n        if (this.state !== SimpleStatus.STATUS_CONNECTED &&\n            this.state !== SimpleStatus.STATUS_CONNECTING &&\n            this.state !== SimpleStatus.STATUS_NEW) {\n            this.logger.warn(\"No active call to hang up on\");\n            return;\n        }\n        if (this.state !== SimpleStatus.STATUS_CONNECTED) {\n            return this.session.cancel();\n        }\n        else if (this.session) {\n            return this.session.bye();\n        }\n    };\n    Simple.prototype.hold = function () {\n        if (this.state !== SimpleStatus.STATUS_CONNECTED || !this.session || this.session.localHold) {\n            this.logger.warn(\"Cannot put call on hold\");\n            return;\n        }\n        this.mute();\n        this.logger.log(\"Placing session on hold\");\n        return this.session.hold();\n    };\n    Simple.prototype.unhold = function () {\n        if (this.state !== SimpleStatus.STATUS_CONNECTED || !this.session || !this.session.localHold) {\n            this.logger.warn(\"Cannot unhold a call that is not on hold\");\n            return;\n        }\n        this.unmute();\n        this.logger.log(\"Placing call off hold\");\n        return this.session.unhold();\n    };\n    Simple.prototype.mute = function () {\n        if (this.state !== SimpleStatus.STATUS_CONNECTED) {\n            this.logger.warn(\"An acitve call is required to mute audio\");\n            return;\n        }\n        this.logger.log(\"Muting Audio\");\n        this.toggleMute(true);\n        this.emit(\"mute\", this);\n    };\n    Simple.prototype.unmute = function () {\n        if (this.state !== SimpleStatus.STATUS_CONNECTED) {\n            this.logger.warn(\"An active call is required to unmute audio\");\n            return;\n        }\n        this.logger.log(\"Unmuting Audio\");\n        this.toggleMute(false);\n        this.emit(\"unmute\", this);\n    };\n    Simple.prototype.sendDTMF = function (tone) {\n        if (this.state !== SimpleStatus.STATUS_CONNECTED || !this.session) {\n            this.logger.warn(\"An active call is required to send a DTMF tone\");\n            return;\n        }\n        this.logger.log(\"Sending DTMF tone: \" + tone);\n        this.session.dtmf(tone);\n    };\n    Simple.prototype.message = function (destination, message) {\n        if (!this.ua || !this.checkRegistration()) {\n            this.logger.warn(\"A registered UA is required to send a message\");\n            return;\n        }\n        if (!destination || !message) {\n            this.logger.warn(\"A destination and message are required to send a message\");\n            return;\n        }\n        this.ua.message(destination, message);\n    };\n    // Private Helpers\n    Simple.prototype.checkRegistration = function () {\n        return (this.anonymous || (this.ua && this.ua.isRegistered()));\n    };\n    Simple.prototype.setupRemoteMedia = function () {\n        var _this = this;\n        if (!this.session) {\n            this.logger.warn(\"No session to set remote media on\");\n            return;\n        }\n        // If there is a video track, it will attach the video and audio to the same element\n        var pc = this.session.sessionDescriptionHandler.peerConnection;\n        var remoteStream;\n        if (pc.getReceivers) {\n            remoteStream = new MediaStream();\n            pc.getReceivers().forEach(function (receiver) {\n                var track = receiver.track;\n                if (track) {\n                    remoteStream.addTrack(track);\n                }\n            });\n        }\n        else {\n            remoteStream = pc.getRemoteStreams()[0];\n        }\n        if (this.video) {\n            this.options.media.remote.video.srcObject = remoteStream;\n            this.options.media.remote.video.play().catch(function () {\n                _this.logger.log(\"play was rejected\");\n            });\n        }\n        else if (this.audio) {\n            this.options.media.remote.audio.srcObject = remoteStream;\n            this.options.media.remote.audio.play().catch(function () {\n                _this.logger.log(\"play was rejected\");\n            });\n        }\n    };\n    Simple.prototype.setupLocalMedia = function () {\n        if (!this.session) {\n            this.logger.warn(\"No session to set local media on\");\n            return;\n        }\n        if (this.video && this.options.media.local && this.options.media.local.video) {\n            var pc = this.session.sessionDescriptionHandler.peerConnection;\n            var localStream_1;\n            if (pc.getSenders) {\n                localStream_1 = new MediaStream();\n                pc.getSenders().forEach(function (sender) {\n                    var track = sender.track;\n                    if (track && track.kind === \"video\") {\n                        localStream_1.addTrack(track);\n                    }\n                });\n            }\n            else {\n                localStream_1 = pc.getLocalStreams()[0];\n            }\n            this.options.media.local.video.srcObject = localStream_1;\n            this.options.media.local.video.volume = 0;\n            this.options.media.local.video.play();\n        }\n    };\n    Simple.prototype.cleanupMedia = function () {\n        if (this.video) {\n            this.options.media.remote.video.srcObject = null;\n            this.options.media.remote.video.pause();\n            if (this.options.media.local && this.options.media.local.video) {\n                this.options.media.local.video.srcObject = null;\n                this.options.media.local.video.pause();\n            }\n        }\n        if (this.audio) {\n            this.options.media.remote.audio.srcObject = null;\n            this.options.media.remote.audio.pause();\n        }\n    };\n    Simple.prototype.setupSession = function () {\n        var _this = this;\n        if (!this.session) {\n            this.logger.warn(\"No session to set up\");\n            return;\n        }\n        this.state = SimpleStatus.STATUS_NEW;\n        this.emit(\"new\", this.session);\n        this.session.on(\"progress\", function () { return _this.onProgress(); });\n        this.session.on(\"accepted\", function () { return _this.onAccepted(); });\n        this.session.on(\"rejected\", function () { return _this.onEnded(); });\n        this.session.on(\"failed\", function () { return _this.onFailed(); });\n        this.session.on(\"terminated\", function () { return _this.onEnded(); });\n    };\n    Simple.prototype.destroyMedia = function () {\n        if (this.session && this.session.sessionDescriptionHandler) {\n            this.session.sessionDescriptionHandler.close();\n        }\n    };\n    Simple.prototype.toggleMute = function (mute) {\n        if (!this.session) {\n            this.logger.warn(\"No session to toggle mute\");\n            return;\n        }\n        var pc = this.session.sessionDescriptionHandler.peerConnection;\n        if (pc.getSenders) {\n            pc.getSenders().forEach(function (sender) {\n                if (sender.track) {\n                    sender.track.enabled = !mute;\n                }\n            });\n        }\n        else {\n            pc.getLocalStreams().forEach(function (stream) {\n                stream.getAudioTracks().forEach(function (track) {\n                    track.enabled = !mute;\n                });\n                stream.getVideoTracks().forEach(function (track) {\n                    track.enabled = !mute;\n                });\n            });\n        }\n    };\n    Simple.prototype.onAccepted = function () {\n        var _this = this;\n        if (!this.session) {\n            this.logger.warn(\"No session for accepting\");\n            return;\n        }\n        this.state = SimpleStatus.STATUS_CONNECTED;\n        this.emit(\"connected\", this.session);\n        this.setupLocalMedia();\n        this.setupRemoteMedia();\n        if (this.session.sessionDescriptionHandler) {\n            this.session.sessionDescriptionHandler.on(\"addTrack\", function () {\n                _this.logger.log(\"A track has been added, triggering new remoteMedia setup\");\n                _this.setupRemoteMedia();\n            });\n            this.session.sessionDescriptionHandler.on(\"addStream\", function () {\n                _this.logger.log(\"A stream has been added, trigger new remoteMedia setup\");\n                _this.setupRemoteMedia();\n            });\n        }\n        this.session.on(\"dtmf\", function (request, dtmf) {\n            _this.emit(\"dtmf\", dtmf.tone);\n        });\n        this.session.on(\"bye\", function () { return _this.onEnded(); });\n    };\n    Simple.prototype.onProgress = function () {\n        this.state = SimpleStatus.STATUS_CONNECTING;\n        this.emit(\"connecting\", this.session);\n    };\n    Simple.prototype.onFailed = function () {\n        this.onEnded();\n    };\n    Simple.prototype.onEnded = function () {\n        this.state = SimpleStatus.STATUS_COMPLETED;\n        this.emit(\"ended\", this.session);\n        this.cleanupMedia();\n    };\n    Simple.C = SimpleStatus;\n    return Simple;\n}(events_1.EventEmitter));\nexports.Simple = Simple;\n\n\n/***/ })\n/******/ ]);\n});",{"ruleId":"394","severity":1,"message":"395","line":35,"column":7,"nodeType":"396","messageId":"397","endLine":35,"endColumn":15},{"ruleId":"398","replacedBy":"399"},{"ruleId":"400","replacedBy":"401"},{"ruleId":"394","severity":1,"message":"402","line":9,"column":23,"nodeType":"396","messageId":"397","endLine":9,"endColumn":37},{"ruleId":"394","severity":1,"message":"403","line":14,"column":10,"nodeType":"396","messageId":"397","endLine":14,"endColumn":24},{"ruleId":"394","severity":1,"message":"404","line":38,"column":9,"nodeType":"396","messageId":"397","endLine":38,"endColumn":27},{"ruleId":"405","severity":1,"message":"406","line":120,"column":80,"nodeType":"407","messageId":"408","endLine":120,"endColumn":82},{"ruleId":"405","severity":1,"message":"406","line":120,"column":110,"nodeType":"407","messageId":"408","endLine":120,"endColumn":112},{"ruleId":"405","severity":1,"message":"406","line":123,"column":97,"nodeType":"407","messageId":"408","endLine":123,"endColumn":99},{"ruleId":"409","severity":1,"message":"410","line":128,"column":15,"nodeType":"411","endLine":128,"endColumn":130},{"ruleId":"412","severity":1,"message":"413","line":31,"column":6,"nodeType":"414","endLine":31,"endColumn":8,"suggestions":"415"},{"ruleId":"416","severity":1,"message":"417","line":39,"column":7,"nodeType":"411","endLine":43,"endColumn":9},{"ruleId":"394","severity":1,"message":"418","line":9,"column":9,"nodeType":"396","messageId":"397","endLine":9,"endColumn":19},{"ruleId":"394","severity":1,"message":"419","line":22,"column":10,"nodeType":"396","messageId":"397","endLine":22,"endColumn":22},{"ruleId":"394","severity":1,"message":"420","line":22,"column":24,"nodeType":"396","messageId":"397","endLine":22,"endColumn":39},{"ruleId":"405","severity":1,"message":"406","line":122,"column":22,"nodeType":"407","messageId":"408","endLine":122,"endColumn":24},{"ruleId":"405","severity":1,"message":"406","line":123,"column":26,"nodeType":"407","messageId":"408","endLine":123,"endColumn":28},{"ruleId":"412","severity":1,"message":"421","line":127,"column":6,"nodeType":"414","endLine":127,"endColumn":22,"suggestions":"422"},{"ruleId":"412","severity":1,"message":"423","line":133,"column":6,"nodeType":"414","endLine":133,"endColumn":46,"suggestions":"424"},{"ruleId":"405","severity":1,"message":"406","line":136,"column":56,"nodeType":"407","messageId":"408","endLine":136,"endColumn":58},{"ruleId":"405","severity":1,"message":"406","line":136,"column":100,"nodeType":"407","messageId":"408","endLine":136,"endColumn":102},{"ruleId":"412","severity":1,"message":"425","line":139,"column":6,"nodeType":"414","endLine":139,"endColumn":8,"suggestions":"426"},{"ruleId":"405","severity":1,"message":"406","line":336,"column":18,"nodeType":"407","messageId":"408","endLine":336,"endColumn":20},{"ruleId":"405","severity":1,"message":"406","line":339,"column":24,"nodeType":"407","messageId":"408","endLine":339,"endColumn":26},{"ruleId":"405","severity":1,"message":"406","line":342,"column":24,"nodeType":"407","messageId":"408","endLine":342,"endColumn":26},{"ruleId":"394","severity":1,"message":"427","line":567,"column":9,"nodeType":"396","messageId":"397","endLine":567,"endColumn":25},{"ruleId":"405","severity":1,"message":"406","line":579,"column":13,"nodeType":"407","messageId":"408","endLine":579,"endColumn":15},{"ruleId":"405","severity":1,"message":"406","line":582,"column":13,"nodeType":"407","messageId":"408","endLine":582,"endColumn":15},{"ruleId":"405","severity":1,"message":"406","line":585,"column":13,"nodeType":"407","messageId":"408","endLine":585,"endColumn":15},{"ruleId":"405","severity":1,"message":"406","line":588,"column":13,"nodeType":"407","messageId":"408","endLine":588,"endColumn":15},{"ruleId":"405","severity":1,"message":"406","line":591,"column":13,"nodeType":"407","messageId":"408","endLine":591,"endColumn":15},{"ruleId":"405","severity":1,"message":"406","line":594,"column":13,"nodeType":"407","messageId":"408","endLine":594,"endColumn":15},{"ruleId":"405","severity":1,"message":"406","line":597,"column":13,"nodeType":"407","messageId":"408","endLine":597,"endColumn":15},{"ruleId":"405","severity":1,"message":"406","line":600,"column":13,"nodeType":"407","messageId":"408","endLine":600,"endColumn":15},{"ruleId":"405","severity":1,"message":"406","line":706,"column":53,"nodeType":"407","messageId":"408","endLine":706,"endColumn":55},{"ruleId":"409","severity":1,"message":"410","line":922,"column":25,"nodeType":"411","endLine":928,"endColumn":27},{"ruleId":"409","severity":1,"message":"410","line":942,"column":25,"nodeType":"411","endLine":948,"endColumn":27},{"ruleId":"409","severity":1,"message":"410","line":965,"column":25,"nodeType":"411","endLine":971,"endColumn":27},{"ruleId":"405","severity":1,"message":"406","line":1028,"column":36,"nodeType":"407","messageId":"408","endLine":1028,"endColumn":38},{"ruleId":"405","severity":1,"message":"406","line":1029,"column":36,"nodeType":"407","messageId":"408","endLine":1029,"endColumn":38},{"ruleId":"405","severity":1,"message":"406","line":1030,"column":36,"nodeType":"407","messageId":"408","endLine":1030,"endColumn":38},{"ruleId":"405","severity":1,"message":"406","line":1062,"column":121,"nodeType":"407","messageId":"408","endLine":1062,"endColumn":123},{"ruleId":"428","severity":1,"message":"429","line":1064,"column":33,"nodeType":"430","endLine":1064,"endColumn":46},{"ruleId":"405","severity":1,"message":"406","line":1126,"column":90,"nodeType":"407","messageId":"408","endLine":1126,"endColumn":92},{"ruleId":"431","severity":1,"message":"432","line":1152,"column":11,"nodeType":"411","messageId":"433","endLine":1152,"endColumn":75,"fix":"434"},{"ruleId":"431","severity":1,"message":"432","line":1159,"column":36,"nodeType":"411","messageId":"433","endLine":1159,"endColumn":169,"fix":"435"},{"ruleId":"436","severity":1,"message":"437","line":11,"column":1,"nodeType":"438","messageId":"439","endLine":11,"endColumn":14,"fix":"440"},{"ruleId":"394","severity":1,"message":"441","line":40,"column":5,"nodeType":"396","messageId":"397","endLine":40,"endColumn":20},{"ruleId":"442","severity":1,"message":"443","line":76,"column":34,"nodeType":"444","messageId":"408","endLine":76,"endColumn":45},{"ruleId":"442","severity":1,"message":"445","line":93,"column":7,"nodeType":"444","messageId":"408","endLine":93,"endColumn":12},{"ruleId":"405","severity":1,"message":"446","line":114,"column":32,"nodeType":"407","messageId":"408","endLine":114,"endColumn":34},{"ruleId":"405","severity":1,"message":"446","line":120,"column":33,"nodeType":"407","messageId":"408","endLine":120,"endColumn":35},{"ruleId":"405","severity":1,"message":"406","line":120,"column":84,"nodeType":"407","messageId":"408","endLine":120,"endColumn":86},{"ruleId":"405","severity":1,"message":"446","line":126,"column":33,"nodeType":"407","messageId":"408","endLine":126,"endColumn":35},{"ruleId":"405","severity":1,"message":"406","line":126,"column":83,"nodeType":"407","messageId":"408","endLine":126,"endColumn":85},{"ruleId":"405","severity":1,"message":"446","line":148,"column":33,"nodeType":"407","messageId":"408","endLine":148,"endColumn":35},{"ruleId":"405","severity":1,"message":"406","line":148,"column":83,"nodeType":"407","messageId":"408","endLine":148,"endColumn":85},{"ruleId":"405","severity":1,"message":"446","line":154,"column":35,"nodeType":"407","messageId":"408","endLine":154,"endColumn":37},{"ruleId":"405","severity":1,"message":"406","line":154,"column":87,"nodeType":"407","messageId":"408","endLine":154,"endColumn":89},{"ruleId":"447","severity":1,"message":"448","line":162,"column":13,"nodeType":"396","messageId":"449","endLine":162,"endColumn":24},{"ruleId":"405","severity":1,"message":"446","line":183,"column":35,"nodeType":"407","messageId":"408","endLine":183,"endColumn":37},{"ruleId":"405","severity":1,"message":"446","line":192,"column":31,"nodeType":"407","messageId":"408","endLine":192,"endColumn":33},{"ruleId":"405","severity":1,"message":"406","line":192,"column":79,"nodeType":"407","messageId":"408","endLine":192,"endColumn":81},{"ruleId":"405","severity":1,"message":"446","line":196,"column":34,"nodeType":"407","messageId":"408","endLine":196,"endColumn":36},{"ruleId":"405","severity":1,"message":"406","line":196,"column":85,"nodeType":"407","messageId":"408","endLine":196,"endColumn":87},{"ruleId":"405","severity":1,"message":"446","line":200,"column":34,"nodeType":"407","messageId":"408","endLine":200,"endColumn":36},{"ruleId":"405","severity":1,"message":"406","line":200,"column":85,"nodeType":"407","messageId":"408","endLine":200,"endColumn":87},{"ruleId":"405","severity":1,"message":"446","line":204,"column":40,"nodeType":"407","messageId":"408","endLine":204,"endColumn":42},{"ruleId":"405","severity":1,"message":"406","line":204,"column":97,"nodeType":"407","messageId":"408","endLine":204,"endColumn":99},{"ruleId":"405","severity":1,"message":"446","line":215,"column":43,"nodeType":"407","messageId":"408","endLine":215,"endColumn":45},{"ruleId":"405","severity":1,"message":"446","line":219,"column":42,"nodeType":"407","messageId":"408","endLine":219,"endColumn":44},{"ruleId":"405","severity":1,"message":"446","line":224,"column":42,"nodeType":"407","messageId":"408","endLine":224,"endColumn":44},{"ruleId":"405","severity":1,"message":"446","line":229,"column":38,"nodeType":"407","messageId":"408","endLine":229,"endColumn":40},{"ruleId":"405","severity":1,"message":"406","line":229,"column":93,"nodeType":"407","messageId":"408","endLine":229,"endColumn":95},{"ruleId":"394","severity":1,"message":"450","line":474,"column":9,"nodeType":"396","messageId":"397","endLine":474,"endColumn":15},{"ruleId":"451","severity":1,"message":"452","line":605,"column":40,"nodeType":"453","messageId":"454","endLine":609,"endColumn":10},{"ruleId":"394","severity":1,"message":"450","line":655,"column":11,"nodeType":"396","messageId":"397","endLine":655,"endColumn":17},{"ruleId":"405","severity":1,"message":"406","line":709,"column":38,"nodeType":"407","messageId":"408","endLine":709,"endColumn":40},{"ruleId":"405","severity":1,"message":"406","line":712,"column":38,"nodeType":"407","messageId":"408","endLine":712,"endColumn":40},{"ruleId":"405","severity":1,"message":"406","line":728,"column":36,"nodeType":"407","messageId":"408","endLine":728,"endColumn":38},{"ruleId":"405","severity":1,"message":"406","line":735,"column":36,"nodeType":"407","messageId":"408","endLine":735,"endColumn":38},{"ruleId":"394","severity":1,"message":"455","line":785,"column":9,"nodeType":"396","messageId":"397","endLine":785,"endColumn":27},{"ruleId":"405","severity":1,"message":"406","line":794,"column":62,"nodeType":"407","messageId":"408","endLine":794,"endColumn":64},{"ruleId":"405","severity":1,"message":"406","line":829,"column":63,"nodeType":"407","messageId":"408","endLine":829,"endColumn":65},{"ruleId":"405","severity":1,"message":"406","line":918,"column":32,"nodeType":"407","messageId":"408","endLine":918,"endColumn":34},{"ruleId":"405","severity":1,"message":"406","line":919,"column":21,"nodeType":"407","messageId":"408","endLine":919,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":919,"column":40,"nodeType":"407","messageId":"408","endLine":919,"endColumn":42},{"ruleId":"405","severity":1,"message":"406","line":924,"column":32,"nodeType":"407","messageId":"408","endLine":924,"endColumn":34},{"ruleId":"405","severity":1,"message":"406","line":925,"column":21,"nodeType":"407","messageId":"408","endLine":925,"endColumn":23},{"ruleId":"405","severity":1,"message":"406","line":925,"column":40,"nodeType":"407","messageId":"408","endLine":925,"endColumn":42},{"ruleId":"405","severity":1,"message":"406","line":936,"column":17,"nodeType":"407","messageId":"408","endLine":936,"endColumn":19},{"ruleId":"405","severity":1,"message":"406","line":936,"column":36,"nodeType":"407","messageId":"408","endLine":936,"endColumn":38},{"ruleId":"405","severity":1,"message":"406","line":942,"column":17,"nodeType":"407","messageId":"408","endLine":942,"endColumn":19},{"ruleId":"405","severity":1,"message":"406","line":942,"column":36,"nodeType":"407","messageId":"408","endLine":942,"endColumn":38},{"ruleId":"405","severity":1,"message":"406","line":978,"column":31,"nodeType":"407","messageId":"408","endLine":978,"endColumn":33},{"ruleId":"447","severity":1,"message":"456","line":984,"column":13,"nodeType":"396","messageId":"449","endLine":984,"endColumn":19},{"ruleId":"405","severity":1,"message":"406","line":985,"column":31,"nodeType":"407","messageId":"408","endLine":985,"endColumn":33},{"ruleId":"457","severity":1,"message":"458","line":1033,"column":27,"nodeType":"459","messageId":"460","endLine":1033,"endColumn":29},{"ruleId":"457","severity":1,"message":"458","line":1033,"column":38,"nodeType":"459","messageId":"460","endLine":1033,"endColumn":40},{"ruleId":"405","severity":1,"message":"406","line":1033,"column":54,"nodeType":"407","messageId":"408","endLine":1033,"endColumn":56},{"ruleId":"457","severity":1,"message":"458","line":1080,"column":27,"nodeType":"459","messageId":"460","endLine":1080,"endColumn":29},{"ruleId":"457","severity":1,"message":"458","line":1080,"column":38,"nodeType":"459","messageId":"460","endLine":1080,"endColumn":40},{"ruleId":"405","severity":1,"message":"406","line":1080,"column":54,"nodeType":"407","messageId":"408","endLine":1080,"endColumn":56},{"ruleId":"394","severity":1,"message":"461","line":1109,"column":9,"nodeType":"396","messageId":"397","endLine":1109,"endColumn":20},{"ruleId":"394","severity":1,"message":"462","line":1277,"column":9,"nodeType":"396","messageId":"397","endLine":1277,"endColumn":16},{"ruleId":"447","severity":1,"message":"463","line":1296,"column":17,"nodeType":"396","messageId":"449","endLine":1296,"endColumn":28},{"ruleId":"405","severity":1,"message":"406","line":1373,"column":75,"nodeType":"407","messageId":"408","endLine":1373,"endColumn":77},{"ruleId":"436","severity":1,"message":"437","line":140,"column":1,"nodeType":"438","messageId":"439","endLine":140,"endColumn":14,"fix":"464"},{"ruleId":"436","severity":1,"message":"437","line":210,"column":1,"nodeType":"438","messageId":"439","endLine":210,"endColumn":14,"fix":"465"},{"ruleId":"447","severity":1,"message":"466","line":246,"column":11,"nodeType":"467","messageId":"468","endLine":246,"endColumn":18},{"ruleId":"447","severity":1,"message":"469","line":246,"column":20,"nodeType":"467","messageId":"468","endLine":246,"endColumn":27},{"ruleId":"447","severity":1,"message":"470","line":277,"column":25,"nodeType":"396","messageId":"449","endLine":277,"endColumn":26},{"ruleId":"471","severity":1,"message":"472","line":287,"column":63,"nodeType":"473","messageId":"474","endLine":287,"endColumn":80},{"ruleId":"475","severity":1,"message":"476","line":288,"column":63,"nodeType":"477","messageId":"478","endLine":288,"endColumn":64},{"ruleId":"475","severity":1,"message":"476","line":310,"column":70,"nodeType":"477","messageId":"478","endLine":310,"endColumn":71},{"ruleId":"475","severity":1,"message":"476","line":315,"column":22,"nodeType":"477","messageId":"478","endLine":315,"endColumn":23},{"ruleId":"475","severity":1,"message":"476","line":316,"column":22,"nodeType":"477","messageId":"478","endLine":316,"endColumn":23},{"ruleId":"447","severity":1,"message":"479","line":376,"column":35,"nodeType":"396","messageId":"449","endLine":376,"endColumn":36},{"ruleId":"475","severity":1,"message":"476","line":389,"column":18,"nodeType":"477","messageId":"478","endLine":389,"endColumn":19},{"ruleId":"475","severity":1,"message":"476","line":395,"column":37,"nodeType":"477","messageId":"478","endLine":395,"endColumn":38},{"ruleId":"475","severity":1,"message":"476","line":400,"column":18,"nodeType":"477","messageId":"478","endLine":400,"endColumn":19},{"ruleId":"471","severity":1,"message":"472","line":401,"column":64,"nodeType":"473","messageId":"474","endLine":401,"endColumn":70},{"ruleId":"475","severity":1,"message":"476","line":408,"column":113,"nodeType":"477","messageId":"478","endLine":408,"endColumn":114},{"ruleId":"436","severity":1,"message":"437","line":434,"column":1,"nodeType":"438","messageId":"439","endLine":434,"endColumn":14,"fix":"480"},{"ruleId":"436","severity":1,"message":"437","line":460,"column":1,"nodeType":"438","messageId":"439","endLine":460,"endColumn":14,"fix":"481"},{"ruleId":"436","severity":1,"message":"437","line":473,"column":1,"nodeType":"438","messageId":"439","endLine":473,"endColumn":14,"fix":"482"},{"ruleId":"436","severity":1,"message":"437","line":1054,"column":1,"nodeType":"438","messageId":"439","endLine":1054,"endColumn":14,"fix":"483"},{"ruleId":"436","severity":1,"message":"437","line":1079,"column":1,"nodeType":"438","messageId":"439","endLine":1079,"endColumn":14,"fix":"484"},{"ruleId":"436","severity":1,"message":"437","line":1090,"column":1,"nodeType":"438","messageId":"439","endLine":1090,"endColumn":14,"fix":"485"},{"ruleId":"394","severity":1,"message":"486","line":1113,"column":4,"nodeType":"396","messageId":"397","endLine":1113,"endColumn":5},{"ruleId":"436","severity":1,"message":"437","line":1120,"column":1,"nodeType":"438","messageId":"439","endLine":1120,"endColumn":14,"fix":"487"},{"ruleId":"447","severity":1,"message":"488","line":1163,"column":17,"nodeType":"396","messageId":"449","endLine":1163,"endColumn":22},{"ruleId":"436","severity":1,"message":"437","line":1247,"column":1,"nodeType":"438","messageId":"439","endLine":1247,"endColumn":14,"fix":"489"},{"ruleId":"436","severity":1,"message":"437","line":1270,"column":1,"nodeType":"438","messageId":"439","endLine":1270,"endColumn":14,"fix":"490"},{"ruleId":"436","severity":1,"message":"437","line":1409,"column":1,"nodeType":"438","messageId":"439","endLine":1409,"endColumn":14,"fix":"491"},{"ruleId":"394","severity":1,"message":"492","line":1456,"column":4,"nodeType":"396","messageId":"397","endLine":1456,"endColumn":11},{"ruleId":"436","severity":1,"message":"437","line":1463,"column":1,"nodeType":"438","messageId":"439","endLine":1463,"endColumn":14,"fix":"493"},{"ruleId":"494","severity":1,"message":"495","line":1521,"column":26,"nodeType":"496","messageId":"408","endLine":1521,"endColumn":40},{"ruleId":"494","severity":1,"message":"497","line":1522,"column":26,"nodeType":"496","messageId":"408","endLine":1522,"endColumn":49},{"ruleId":"494","severity":1,"message":"495","line":1534,"column":26,"nodeType":"496","messageId":"408","endLine":1534,"endColumn":40},{"ruleId":"494","severity":1,"message":"497","line":1535,"column":26,"nodeType":"496","messageId":"408","endLine":1535,"endColumn":49},{"ruleId":"498","severity":1,"message":"499","line":1538,"column":13,"nodeType":"500","messageId":"501","endLine":1554,"endColumn":14},{"ruleId":"494","severity":1,"message":"502","line":1703,"column":9,"nodeType":"496","messageId":"408","endLine":1703,"endColumn":21},{"ruleId":"494","severity":1,"message":"503","line":1705,"column":9,"nodeType":"496","messageId":"408","endLine":1705,"endColumn":23},{"ruleId":"504","severity":1,"message":"505","line":1755,"column":22,"nodeType":"496","messageId":"506","endLine":1755,"endColumn":23,"suggestions":"507"},{"ruleId":"504","severity":1,"message":"505","line":1757,"column":21,"nodeType":"496","messageId":"506","endLine":1757,"endColumn":22,"suggestions":"508"},{"ruleId":"504","severity":1,"message":"509","line":1980,"column":37,"nodeType":"496","messageId":"506","endLine":1980,"endColumn":38,"suggestions":"510"},{"ruleId":"394","severity":1,"message":"511","line":2647,"column":14,"nodeType":"396","messageId":"397","endLine":2647,"endColumn":22},{"ruleId":"394","severity":1,"message":"512","line":2653,"column":14,"nodeType":"396","messageId":"397","endLine":2653,"endColumn":19},{"ruleId":"394","severity":1,"message":"513","line":2665,"column":14,"nodeType":"396","messageId":"397","endLine":2665,"endColumn":32},{"ruleId":"436","severity":1,"message":"437","line":2978,"column":1,"nodeType":"438","messageId":"439","endLine":2978,"endColumn":14,"fix":"514"},{"ruleId":"436","severity":1,"message":"437","line":3041,"column":1,"nodeType":"438","messageId":"439","endLine":3041,"endColumn":14,"fix":"515"},{"ruleId":"436","severity":1,"message":"437","line":3092,"column":1,"nodeType":"438","messageId":"439","endLine":3092,"endColumn":14,"fix":"516"},{"ruleId":"436","severity":1,"message":"437","line":3316,"column":1,"nodeType":"438","messageId":"439","endLine":3316,"endColumn":14,"fix":"517"},{"ruleId":"436","severity":1,"message":"437","line":3468,"column":1,"nodeType":"438","messageId":"439","endLine":3468,"endColumn":14,"fix":"518"},{"ruleId":"436","severity":1,"message":"437","line":3491,"column":1,"nodeType":"438","messageId":"439","endLine":3491,"endColumn":14,"fix":"519"},{"ruleId":"447","severity":1,"message":"520","line":3702,"column":17,"nodeType":"396","messageId":"449","endLine":3702,"endColumn":23},{"ruleId":"436","severity":1,"message":"437","line":3737,"column":1,"nodeType":"438","messageId":"439","endLine":3737,"endColumn":14,"fix":"521"},{"ruleId":"522","severity":1,"message":"523","line":4167,"column":17,"nodeType":"396","messageId":"524","endLine":4167,"endColumn":25},{"ruleId":"525","severity":1,"message":"526","line":4167,"column":46,"nodeType":"396","messageId":"527","endLine":4167,"endColumn":55},{"ruleId":"405","severity":1,"message":"446","line":4342,"column":27,"nodeType":"407","messageId":"408","endLine":4342,"endColumn":29},{"ruleId":"447","severity":1,"message":"479","line":4396,"column":27,"nodeType":"396","messageId":"449","endLine":4396,"endColumn":28},{"ruleId":"447","severity":1,"message":"528","line":4456,"column":22,"nodeType":"396","messageId":"449","endLine":4456,"endColumn":25},{"ruleId":"394","severity":1,"message":"529","line":4769,"column":10,"nodeType":"396","messageId":"397","endLine":4769,"endColumn":16},{"ruleId":"436","severity":1,"message":"437","line":4914,"column":1,"nodeType":"438","messageId":"439","endLine":4914,"endColumn":14,"fix":"530"},{"ruleId":"436","severity":1,"message":"437","line":5050,"column":1,"nodeType":"438","messageId":"439","endLine":5050,"endColumn":14,"fix":"531"},{"ruleId":"394","severity":1,"message":"532","line":5286,"column":4,"nodeType":"396","messageId":"397","endLine":5286,"endColumn":10},{"ruleId":"436","severity":1,"message":"437","line":5293,"column":1,"nodeType":"438","messageId":"439","endLine":5293,"endColumn":14,"fix":"533"},{"ruleId":"534","severity":1,"message":"535","line":5791,"column":17,"nodeType":"536","messageId":"537","endLine":5797,"endColumn":18},{"ruleId":"534","severity":1,"message":"535","line":5805,"column":17,"nodeType":"536","messageId":"537","endLine":5813,"endColumn":18},{"ruleId":"447","severity":1,"message":"538","line":5806,"column":25,"nodeType":"396","messageId":"449","endLine":5806,"endColumn":28},{"ruleId":"534","severity":1,"message":"535","line":5820,"column":17,"nodeType":"536","messageId":"537","endLine":5826,"endColumn":18},{"ruleId":"447","severity":1,"message":"538","line":5821,"column":25,"nodeType":"396","messageId":"449","endLine":5821,"endColumn":28},{"ruleId":"534","severity":1,"message":"535","line":5829,"column":17,"nodeType":"536","messageId":"537","endLine":5834,"endColumn":18},{"ruleId":"447","severity":1,"message":"538","line":5830,"column":25,"nodeType":"396","messageId":"449","endLine":5830,"endColumn":28},{"ruleId":"534","severity":1,"message":"535","line":5838,"column":17,"nodeType":"536","messageId":"537","endLine":5843,"endColumn":18},{"ruleId":"447","severity":1,"message":"538","line":5839,"column":25,"nodeType":"396","messageId":"449","endLine":5839,"endColumn":28},{"ruleId":"534","severity":1,"message":"535","line":5847,"column":17,"nodeType":"536","messageId":"537","endLine":5852,"endColumn":18},{"ruleId":"447","severity":1,"message":"538","line":5848,"column":25,"nodeType":"396","messageId":"449","endLine":5848,"endColumn":28},{"ruleId":"534","severity":1,"message":"535","line":5856,"column":17,"nodeType":"536","messageId":"537","endLine":5861,"endColumn":18},{"ruleId":"447","severity":1,"message":"538","line":5857,"column":25,"nodeType":"396","messageId":"449","endLine":5857,"endColumn":28},{"ruleId":"534","severity":1,"message":"535","line":5864,"column":17,"nodeType":"536","messageId":"537","endLine":5867,"endColumn":18},{"ruleId":"436","severity":1,"message":"437","line":6149,"column":1,"nodeType":"438","messageId":"439","endLine":6149,"endColumn":14,"fix":"539"},{"ruleId":"436","severity":1,"message":"437","line":6160,"column":1,"nodeType":"438","messageId":"439","endLine":6160,"endColumn":14,"fix":"540"},{"ruleId":"394","severity":1,"message":"541","line":6176,"column":4,"nodeType":"396","messageId":"397","endLine":6176,"endColumn":16},{"ruleId":"394","severity":1,"message":"542","line":6202,"column":4,"nodeType":"396","messageId":"397","endLine":6202,"endColumn":18},{"ruleId":"436","severity":1,"message":"437","line":6209,"column":1,"nodeType":"438","messageId":"439","endLine":6209,"endColumn":14,"fix":"543"},{"ruleId":"436","severity":1,"message":"437","line":6241,"column":1,"nodeType":"438","messageId":"439","endLine":6241,"endColumn":14,"fix":"544"},{"ruleId":"436","severity":1,"message":"437","line":6260,"column":1,"nodeType":"438","messageId":"439","endLine":6260,"endColumn":14,"fix":"545"},{"ruleId":"436","severity":1,"message":"437","line":6338,"column":1,"nodeType":"438","messageId":"439","endLine":6338,"endColumn":14,"fix":"546"},{"ruleId":"436","severity":1,"message":"437","line":6469,"column":1,"nodeType":"438","messageId":"439","endLine":6469,"endColumn":14,"fix":"547"},{"ruleId":"548","severity":1,"message":"549","line":6519,"column":10,"nodeType":"407","messageId":"550","endLine":6519,"endColumn":25},{"ruleId":"447","severity":1,"message":"479","line":6625,"column":14,"nodeType":"396","messageId":"449","endLine":6625,"endColumn":15},{"ruleId":"436","severity":1,"message":"437","line":6922,"column":1,"nodeType":"438","messageId":"439","endLine":6922,"endColumn":14,"fix":"551"},{"ruleId":"436","severity":1,"message":"437","line":6935,"column":1,"nodeType":"438","messageId":"439","endLine":6935,"endColumn":14,"fix":"552"},{"ruleId":"436","severity":1,"message":"437","line":6961,"column":1,"nodeType":"438","messageId":"439","endLine":6961,"endColumn":14,"fix":"553"},{"ruleId":"436","severity":1,"message":"437","line":6984,"column":1,"nodeType":"438","messageId":"439","endLine":6984,"endColumn":14,"fix":"554"},{"ruleId":"436","severity":1,"message":"437","line":7007,"column":1,"nodeType":"438","messageId":"439","endLine":7007,"endColumn":14,"fix":"555"},{"ruleId":"436","severity":1,"message":"437","line":7498,"column":1,"nodeType":"438","messageId":"439","endLine":7498,"endColumn":14,"fix":"556"},{"ruleId":"394","severity":1,"message":"557","line":7514,"column":4,"nodeType":"396","messageId":"397","endLine":7514,"endColumn":20},{"ruleId":"436","severity":1,"message":"437","line":7521,"column":1,"nodeType":"438","messageId":"439","endLine":7521,"endColumn":14,"fix":"558"},{"ruleId":"436","severity":1,"message":"437","line":7919,"column":1,"nodeType":"438","messageId":"439","endLine":7919,"endColumn":14,"fix":"559"},{"ruleId":"436","severity":1,"message":"437","line":7960,"column":1,"nodeType":"438","messageId":"439","endLine":7960,"endColumn":14,"fix":"560"},{"ruleId":"561","severity":1,"message":"562","line":8087,"column":13,"nodeType":"563","messageId":"564","endLine":8092,"endColumn":24},{"ruleId":"436","severity":1,"message":"437","line":8213,"column":1,"nodeType":"438","messageId":"439","endLine":8213,"endColumn":14,"fix":"565"},{"ruleId":"436","severity":1,"message":"437","line":8451,"column":1,"nodeType":"438","messageId":"439","endLine":8451,"endColumn":14,"fix":"566"},{"ruleId":"436","severity":1,"message":"437","line":8480,"column":1,"nodeType":"438","messageId":"439","endLine":8480,"endColumn":14,"fix":"567"},{"ruleId":"394","severity":1,"message":"568","line":8589,"column":17,"nodeType":"396","messageId":"397","endLine":8589,"endColumn":20},{"ruleId":"394","severity":1,"message":"568","line":8594,"column":25,"nodeType":"396","messageId":"397","endLine":8594,"endColumn":28},{"ruleId":"436","severity":1,"message":"437","line":8808,"column":1,"nodeType":"438","messageId":"439","endLine":8808,"endColumn":14,"fix":"569"},{"ruleId":"436","severity":1,"message":"437","line":8832,"column":1,"nodeType":"438","messageId":"439","endLine":8832,"endColumn":14,"fix":"570"},{"ruleId":"571","severity":1,"message":"572","line":8917,"column":30,"nodeType":"573","messageId":"574","endLine":8917,"endColumn":41},{"ruleId":"436","severity":1,"message":"437","line":9100,"column":1,"nodeType":"438","messageId":"439","endLine":9100,"endColumn":14,"fix":"575"},{"ruleId":"436","severity":1,"message":"437","line":9128,"column":1,"nodeType":"438","messageId":"439","endLine":9128,"endColumn":14,"fix":"576"},{"ruleId":"436","severity":1,"message":"437","line":9152,"column":1,"nodeType":"438","messageId":"439","endLine":9152,"endColumn":14,"fix":"577"},{"ruleId":"436","severity":1,"message":"437","line":9176,"column":1,"nodeType":"438","messageId":"439","endLine":9176,"endColumn":14,"fix":"578"},{"ruleId":"436","severity":1,"message":"437","line":9200,"column":1,"nodeType":"438","messageId":"439","endLine":9200,"endColumn":14,"fix":"579"},{"ruleId":"436","severity":1,"message":"437","line":9228,"column":1,"nodeType":"438","messageId":"439","endLine":9228,"endColumn":14,"fix":"580"},{"ruleId":"436","severity":1,"message":"437","line":9265,"column":1,"nodeType":"438","messageId":"439","endLine":9265,"endColumn":14,"fix":"581"},{"ruleId":"436","severity":1,"message":"437","line":9294,"column":1,"nodeType":"438","messageId":"439","endLine":9294,"endColumn":14,"fix":"582"},{"ruleId":"436","severity":1,"message":"437","line":9334,"column":1,"nodeType":"438","messageId":"439","endLine":9334,"endColumn":14,"fix":"583"},{"ruleId":"436","severity":1,"message":"437","line":9457,"column":1,"nodeType":"438","messageId":"439","endLine":9457,"endColumn":14,"fix":"584"},{"ruleId":"436","severity":1,"message":"437","line":9560,"column":1,"nodeType":"438","messageId":"439","endLine":9560,"endColumn":14,"fix":"585"},{"ruleId":"436","severity":1,"message":"437","line":9588,"column":1,"nodeType":"438","messageId":"439","endLine":9588,"endColumn":14,"fix":"586"},{"ruleId":"436","severity":1,"message":"437","line":9625,"column":1,"nodeType":"438","messageId":"439","endLine":9625,"endColumn":14,"fix":"587"},{"ruleId":"436","severity":1,"message":"437","line":10126,"column":1,"nodeType":"438","messageId":"439","endLine":10126,"endColumn":14,"fix":"588"},{"ruleId":"436","severity":1,"message":"437","line":10137,"column":1,"nodeType":"438","messageId":"439","endLine":10137,"endColumn":14,"fix":"589"},{"ruleId":"394","severity":1,"message":"590","line":10153,"column":4,"nodeType":"396","messageId":"397","endLine":10153,"endColumn":21},{"ruleId":"436","severity":1,"message":"437","line":10160,"column":1,"nodeType":"438","messageId":"439","endLine":10160,"endColumn":14,"fix":"591"},{"ruleId":"436","severity":1,"message":"437","line":10187,"column":1,"nodeType":"438","messageId":"439","endLine":10187,"endColumn":14,"fix":"592"},{"ruleId":"436","severity":1,"message":"437","line":10267,"column":1,"nodeType":"438","messageId":"439","endLine":10267,"endColumn":14,"fix":"593"},{"ruleId":"436","severity":1,"message":"437","line":10280,"column":1,"nodeType":"438","messageId":"439","endLine":10280,"endColumn":14,"fix":"594"},{"ruleId":"394","severity":1,"message":"595","line":10293,"column":4,"nodeType":"396","messageId":"397","endLine":10293,"endColumn":10},{"ruleId":"436","severity":1,"message":"437","line":10300,"column":1,"nodeType":"438","messageId":"439","endLine":10300,"endColumn":14,"fix":"596"},{"ruleId":"436","severity":1,"message":"437","line":10414,"column":1,"nodeType":"438","messageId":"439","endLine":10414,"endColumn":14,"fix":"597"},{"ruleId":"436","severity":1,"message":"437","line":10444,"column":1,"nodeType":"438","messageId":"439","endLine":10444,"endColumn":14,"fix":"598"},{"ruleId":"436","severity":1,"message":"437","line":10455,"column":1,"nodeType":"438","messageId":"439","endLine":10455,"endColumn":14,"fix":"599"},{"ruleId":"600","severity":1,"message":"601","line":11102,"column":17,"nodeType":"602","messageId":"603","endLine":11102,"endColumn":23},{"ruleId":"534","severity":1,"message":"535","line":11113,"column":17,"nodeType":"536","messageId":"537","endLine":11118,"endColumn":18},{"ruleId":"534","severity":1,"message":"535","line":11126,"column":17,"nodeType":"536","messageId":"537","endLine":11131,"endColumn":18},{"ruleId":"447","severity":1,"message":"538","line":11127,"column":25,"nodeType":"396","messageId":"449","endLine":11127,"endColumn":28},{"ruleId":"534","severity":1,"message":"535","line":11157,"column":17,"nodeType":"536","messageId":"537","endLine":11162,"endColumn":18},{"ruleId":"447","severity":1,"message":"538","line":11158,"column":25,"nodeType":"396","messageId":"449","endLine":11158,"endColumn":28},{"ruleId":"534","severity":1,"message":"535","line":11166,"column":17,"nodeType":"536","messageId":"537","endLine":11173,"endColumn":18},{"ruleId":"534","severity":1,"message":"535","line":11177,"column":17,"nodeType":"536","messageId":"537","endLine":11182,"endColumn":18},{"ruleId":"447","severity":1,"message":"538","line":11178,"column":25,"nodeType":"396","messageId":"449","endLine":11178,"endColumn":28},{"ruleId":"534","severity":1,"message":"535","line":11186,"column":17,"nodeType":"536","messageId":"537","endLine":11191,"endColumn":18},{"ruleId":"447","severity":1,"message":"538","line":11187,"column":25,"nodeType":"396","messageId":"449","endLine":11187,"endColumn":28},{"ruleId":"534","severity":1,"message":"535","line":11195,"column":17,"nodeType":"536","messageId":"537","endLine":11200,"endColumn":18},{"ruleId":"447","severity":1,"message":"538","line":11196,"column":25,"nodeType":"396","messageId":"449","endLine":11196,"endColumn":28},{"ruleId":"436","severity":1,"message":"437","line":11276,"column":1,"nodeType":"438","messageId":"439","endLine":11276,"endColumn":14,"fix":"604"},{"ruleId":"436","severity":1,"message":"437","line":11312,"column":1,"nodeType":"438","messageId":"439","endLine":11312,"endColumn":14,"fix":"605"},{"ruleId":"436","severity":1,"message":"437","line":11336,"column":1,"nodeType":"438","messageId":"439","endLine":11336,"endColumn":14,"fix":"606"},{"ruleId":"534","severity":1,"message":"535","line":11429,"column":17,"nodeType":"536","messageId":"537","endLine":11479,"endColumn":18},{"ruleId":"534","severity":1,"message":"535","line":11494,"column":17,"nodeType":"536","messageId":"537","endLine":11591,"endColumn":18},{"ruleId":"447","severity":1,"message":"607","line":11496,"column":25,"nodeType":"396","messageId":"449","endLine":11496,"endColumn":36},{"ruleId":"447","severity":1,"message":"608","line":11515,"column":33,"nodeType":"396","messageId":"449","endLine":11515,"endColumn":44},{"ruleId":"447","severity":1,"message":"608","line":11541,"column":29,"nodeType":"396","messageId":"449","endLine":11541,"endColumn":40},{"ruleId":"447","severity":1,"message":"609","line":11588,"column":29,"nodeType":"396","messageId":"449","endLine":11588,"endColumn":47},{"ruleId":"600","severity":1,"message":"601","line":11655,"column":9,"nodeType":"610","messageId":"603","endLine":11655,"endColumn":117},{"ruleId":"436","severity":1,"message":"437","line":11666,"column":1,"nodeType":"438","messageId":"439","endLine":11666,"endColumn":14,"fix":"611"},{"ruleId":"436","severity":1,"message":"437","line":11920,"column":1,"nodeType":"438","messageId":"439","endLine":11920,"endColumn":14,"fix":"612"},{"ruleId":"436","severity":1,"message":"437","line":11944,"column":1,"nodeType":"438","messageId":"439","endLine":11944,"endColumn":14,"fix":"613"},{"ruleId":"436","severity":1,"message":"437","line":11968,"column":1,"nodeType":"438","messageId":"439","endLine":11968,"endColumn":14,"fix":"614"},{"ruleId":"436","severity":1,"message":"437","line":11992,"column":1,"nodeType":"438","messageId":"439","endLine":11992,"endColumn":14,"fix":"615"},{"ruleId":"436","severity":1,"message":"437","line":12018,"column":1,"nodeType":"438","messageId":"439","endLine":12018,"endColumn":14,"fix":"616"},{"ruleId":"436","severity":1,"message":"437","line":12322,"column":1,"nodeType":"438","messageId":"439","endLine":12322,"endColumn":14,"fix":"617"},{"ruleId":"436","severity":1,"message":"437","line":12348,"column":1,"nodeType":"438","messageId":"439","endLine":12348,"endColumn":14,"fix":"618"},{"ruleId":"436","severity":1,"message":"437","line":12478,"column":1,"nodeType":"438","messageId":"439","endLine":12478,"endColumn":14,"fix":"619"},{"ruleId":"394","severity":1,"message":"620","line":12518,"column":8,"nodeType":"396","messageId":"397","endLine":12518,"endColumn":14},{"ruleId":"394","severity":1,"message":"621","line":12524,"column":8,"nodeType":"396","messageId":"397","endLine":12524,"endColumn":17},{"ruleId":"394","severity":1,"message":"622","line":12669,"column":8,"nodeType":"396","messageId":"397","endLine":12669,"endColumn":16},{"ruleId":"394","severity":1,"message":"486","line":12670,"column":4,"nodeType":"396","messageId":"397","endLine":12670,"endColumn":5},{"ruleId":"436","severity":1,"message":"437","line":12677,"column":1,"nodeType":"438","messageId":"439","endLine":12677,"endColumn":14,"fix":"623"},{"ruleId":"436","severity":1,"message":"437","line":12687,"column":1,"nodeType":"438","messageId":"439","endLine":12687,"endColumn":14,"fix":"624"},{"ruleId":"394","severity":1,"message":"625","line":12696,"column":4,"nodeType":"396","messageId":"397","endLine":12696,"endColumn":16},{"ruleId":"394","severity":1,"message":"626","line":12713,"column":4,"nodeType":"396","messageId":"397","endLine":12713,"endColumn":17},{"ruleId":"394","severity":1,"message":"627","line":12749,"column":4,"nodeType":"396","messageId":"397","endLine":12749,"endColumn":15},{"ruleId":"394","severity":1,"message":"628","line":12758,"column":4,"nodeType":"396","messageId":"397","endLine":12758,"endColumn":12},{"ruleId":"436","severity":1,"message":"437","line":12765,"column":1,"nodeType":"438","messageId":"439","endLine":12765,"endColumn":14,"fix":"629"},{"ruleId":"504","severity":1,"message":"505","line":12877,"column":20,"nodeType":"496","messageId":"506","endLine":12877,"endColumn":21,"suggestions":"630"},{"ruleId":"504","severity":1,"message":"631","line":12877,"column":22,"nodeType":"496","messageId":"506","endLine":12877,"endColumn":23,"suggestions":"632"},{"ruleId":"504","severity":1,"message":"633","line":12877,"column":24,"nodeType":"496","messageId":"506","endLine":12877,"endColumn":25,"suggestions":"634"},{"ruleId":"504","severity":1,"message":"635","line":12877,"column":26,"nodeType":"496","messageId":"506","endLine":12877,"endColumn":27,"suggestions":"636"},{"ruleId":"504","severity":1,"message":"631","line":12877,"column":39,"nodeType":"496","messageId":"506","endLine":12877,"endColumn":40,"suggestions":"637"},{"ruleId":"504","severity":1,"message":"633","line":12877,"column":41,"nodeType":"496","messageId":"506","endLine":12877,"endColumn":42,"suggestions":"638"},{"ruleId":"504","severity":1,"message":"635","line":12877,"column":43,"nodeType":"496","messageId":"506","endLine":12877,"endColumn":44,"suggestions":"639"},{"ruleId":"504","severity":1,"message":"505","line":12878,"column":51,"nodeType":"496","messageId":"506","endLine":12878,"endColumn":52,"suggestions":"640"},{"ruleId":"504","severity":1,"message":"631","line":12878,"column":53,"nodeType":"496","messageId":"506","endLine":12878,"endColumn":54,"suggestions":"641"},{"ruleId":"504","severity":1,"message":"633","line":12878,"column":55,"nodeType":"496","messageId":"506","endLine":12878,"endColumn":56,"suggestions":"642"},{"ruleId":"504","severity":1,"message":"635","line":12878,"column":57,"nodeType":"496","messageId":"506","endLine":12878,"endColumn":58,"suggestions":"643"},{"ruleId":"457","severity":1,"message":"644","line":12947,"column":18,"nodeType":"459","messageId":"460","endLine":12947,"endColumn":20},{"ruleId":"457","severity":1,"message":"644","line":12947,"column":32,"nodeType":"459","messageId":"460","endLine":12947,"endColumn":34},{"ruleId":"394","severity":1,"message":"645","line":13003,"column":4,"nodeType":"396","messageId":"397","endLine":13003,"endColumn":9},{"ruleId":"436","severity":1,"message":"437","line":13010,"column":1,"nodeType":"438","messageId":"439","endLine":13010,"endColumn":14,"fix":"646"},{"ruleId":"394","severity":1,"message":"647","line":13147,"column":4,"nodeType":"396","messageId":"397","endLine":13147,"endColumn":14},{"ruleId":"436","severity":1,"message":"437","line":13154,"column":1,"nodeType":"438","messageId":"439","endLine":13154,"endColumn":14,"fix":"648"},{"ruleId":"436","severity":1,"message":"437","line":13433,"column":1,"nodeType":"438","messageId":"439","endLine":13433,"endColumn":14,"fix":"649"},{"ruleId":"394","severity":1,"message":"650","line":13772,"column":13,"nodeType":"396","messageId":"397","endLine":13772,"endColumn":16},{"ruleId":"436","severity":1,"message":"437","line":13784,"column":1,"nodeType":"438","messageId":"439","endLine":13784,"endColumn":14,"fix":"651"},{"ruleId":"436","severity":1,"message":"437","line":13910,"column":1,"nodeType":"438","messageId":"439","endLine":13910,"endColumn":14,"fix":"652"},{"ruleId":"447","severity":1,"message":"653","line":13952,"column":14,"nodeType":"396","messageId":"449","endLine":13952,"endColumn":23},{"ruleId":"447","severity":1,"message":"654","line":13954,"column":17,"nodeType":"396","messageId":"449","endLine":13954,"endColumn":22},{"ruleId":"447","severity":1,"message":"655","line":13966,"column":17,"nodeType":"396","messageId":"449","endLine":13966,"endColumn":29},{"ruleId":"436","severity":1,"message":"437","line":14328,"column":1,"nodeType":"438","messageId":"439","endLine":14328,"endColumn":14,"fix":"656"},{"ruleId":"498","severity":1,"message":"499","line":14631,"column":9,"nodeType":"500","messageId":"501","endLine":14713,"endColumn":10},{"ruleId":"436","severity":1,"message":"437","line":16535,"column":1,"nodeType":"438","messageId":"439","endLine":16535,"endColumn":14,"fix":"657"},{"ruleId":"436","severity":1,"message":"437","line":16682,"column":1,"nodeType":"438","messageId":"439","endLine":16682,"endColumn":14,"fix":"658"},{"ruleId":"436","severity":1,"message":"437","line":16720,"column":1,"nodeType":"438","messageId":"439","endLine":16720,"endColumn":14,"fix":"659"},{"ruleId":"498","severity":1,"message":"499","line":16993,"column":25,"nodeType":"500","messageId":"501","endLine":17013,"endColumn":26},{"ruleId":"457","severity":1,"message":"644","line":17057,"column":37,"nodeType":"459","messageId":"460","endLine":17057,"endColumn":39},{"ruleId":"457","severity":1,"message":"644","line":17057,"column":61,"nodeType":"459","messageId":"460","endLine":17057,"endColumn":63},{"ruleId":"436","severity":1,"message":"437","line":17160,"column":1,"nodeType":"438","messageId":"439","endLine":17160,"endColumn":14,"fix":"660"},{"ruleId":"436","severity":1,"message":"437","line":17287,"column":1,"nodeType":"438","messageId":"439","endLine":17287,"endColumn":14,"fix":"661"},{"ruleId":"447","severity":1,"message":"662","line":17870,"column":17,"nodeType":"396","messageId":"449","endLine":17870,"endColumn":20},{"ruleId":"447","severity":1,"message":"663","line":17871,"column":17,"nodeType":"396","messageId":"449","endLine":17871,"endColumn":30},{"ruleId":"447","severity":1,"message":"653","line":17985,"column":18,"nodeType":"396","messageId":"449","endLine":17985,"endColumn":27},{"ruleId":"447","severity":1,"message":"654","line":17987,"column":21,"nodeType":"396","messageId":"449","endLine":17987,"endColumn":26},{"ruleId":"447","severity":1,"message":"655","line":17997,"column":21,"nodeType":"396","messageId":"449","endLine":17997,"endColumn":33},{"ruleId":"447","severity":1,"message":"653","line":18067,"column":18,"nodeType":"396","messageId":"449","endLine":18067,"endColumn":27},{"ruleId":"447","severity":1,"message":"653","line":18074,"column":18,"nodeType":"396","messageId":"449","endLine":18074,"endColumn":27},{"ruleId":"664","severity":1,"message":"665","line":18082,"column":65,"nodeType":"407","messageId":"666","endLine":18082,"endColumn":66},{"ruleId":"394","severity":1,"message":"667","line":18328,"column":8,"nodeType":"396","messageId":"397","endLine":18328,"endColumn":16},{"ruleId":"436","severity":1,"message":"437","line":18400,"column":1,"nodeType":"438","messageId":"439","endLine":18400,"endColumn":14,"fix":"668"},{"ruleId":"498","severity":1,"message":"499","line":18847,"column":13,"nodeType":"500","messageId":"501","endLine":18862,"endColumn":14},{"ruleId":"436","severity":1,"message":"437","line":19051,"column":1,"nodeType":"438","messageId":"439","endLine":19051,"endColumn":14,"fix":"669"},{"ruleId":"447","severity":1,"message":"670","line":19374,"column":25,"nodeType":"396","messageId":"449","endLine":19374,"endColumn":38},{"ruleId":"447","severity":1,"message":"671","line":19696,"column":21,"nodeType":"396","messageId":"449","endLine":19696,"endColumn":33},{"ruleId":"447","severity":1,"message":"671","line":19705,"column":21,"nodeType":"396","messageId":"449","endLine":19705,"endColumn":33},{"ruleId":"447","severity":1,"message":"672","line":19879,"column":17,"nodeType":"396","messageId":"449","endLine":19879,"endColumn":29},{"ruleId":"447","severity":1,"message":"673","line":20083,"column":17,"nodeType":"396","messageId":"449","endLine":20083,"endColumn":18},{"ruleId":"447","severity":1,"message":"673","line":20122,"column":17,"nodeType":"396","messageId":"449","endLine":20122,"endColumn":18},{"ruleId":"436","severity":1,"message":"437","line":20271,"column":1,"nodeType":"438","messageId":"439","endLine":20271,"endColumn":14,"fix":"674"},{"ruleId":"436","severity":1,"message":"437","line":20310,"column":1,"nodeType":"438","messageId":"439","endLine":20310,"endColumn":14,"fix":"675"},{"ruleId":"436","severity":1,"message":"437","line":20352,"column":1,"nodeType":"438","messageId":"439","endLine":20352,"endColumn":14,"fix":"676"},{"ruleId":"436","severity":1,"message":"437","line":20367,"column":1,"nodeType":"438","messageId":"439","endLine":20367,"endColumn":14,"fix":"677"},{"ruleId":"436","severity":1,"message":"437","line":20390,"column":1,"nodeType":"438","messageId":"439","endLine":20390,"endColumn":14,"fix":"678"},{"ruleId":"436","severity":1,"message":"437","line":20414,"column":1,"nodeType":"438","messageId":"439","endLine":20414,"endColumn":14,"fix":"679"},{"ruleId":"436","severity":1,"message":"437","line":20437,"column":1,"nodeType":"438","messageId":"439","endLine":20437,"endColumn":14,"fix":"680"},{"ruleId":"436","severity":1,"message":"437","line":20460,"column":1,"nodeType":"438","messageId":"439","endLine":20460,"endColumn":14,"fix":"681"},{"ruleId":"436","severity":1,"message":"437","line":20483,"column":1,"nodeType":"438","messageId":"439","endLine":20483,"endColumn":14,"fix":"682"},{"ruleId":"436","severity":1,"message":"437","line":20522,"column":1,"nodeType":"438","messageId":"439","endLine":20522,"endColumn":14,"fix":"683"},{"ruleId":"436","severity":1,"message":"437","line":20561,"column":1,"nodeType":"438","messageId":"439","endLine":20561,"endColumn":14,"fix":"684"},{"ruleId":"436","severity":1,"message":"437","line":20600,"column":1,"nodeType":"438","messageId":"439","endLine":20600,"endColumn":14,"fix":"685"},{"ruleId":"436","severity":1,"message":"437","line":20703,"column":1,"nodeType":"438","messageId":"439","endLine":20703,"endColumn":14,"fix":"686"},{"ruleId":"394","severity":1,"message":"541","line":20751,"column":4,"nodeType":"396","messageId":"397","endLine":20751,"endColumn":16},{"ruleId":"436","severity":1,"message":"437","line":20758,"column":1,"nodeType":"438","messageId":"439","endLine":20758,"endColumn":14,"fix":"687"},{"ruleId":"504","severity":1,"message":"688","line":20820,"column":50,"nodeType":"496","messageId":"506","endLine":20820,"endColumn":51,"suggestions":"689"},{"ruleId":"504","severity":1,"message":"688","line":20820,"column":80,"nodeType":"496","messageId":"506","endLine":20820,"endColumn":81,"suggestions":"690"},{"ruleId":"436","severity":1,"message":"437","line":20886,"column":1,"nodeType":"438","messageId":"439","endLine":20886,"endColumn":14,"fix":"691"},{"ruleId":"436","severity":1,"message":"437","line":20923,"column":1,"nodeType":"438","messageId":"439","endLine":20923,"endColumn":14,"fix":"692"},{"ruleId":"447","severity":1,"message":"653","line":21499,"column":18,"nodeType":"396","messageId":"449","endLine":21499,"endColumn":27},{"ruleId":"447","severity":1,"message":"654","line":21501,"column":21,"nodeType":"396","messageId":"449","endLine":21501,"endColumn":26},{"ruleId":"447","severity":1,"message":"655","line":21511,"column":21,"nodeType":"396","messageId":"449","endLine":21511,"endColumn":33},{"ruleId":"447","severity":1,"message":"653","line":21521,"column":18,"nodeType":"396","messageId":"449","endLine":21521,"endColumn":27},{"ruleId":"447","severity":1,"message":"653","line":21530,"column":18,"nodeType":"396","messageId":"449","endLine":21530,"endColumn":27},{"ruleId":"436","severity":1,"message":"437","line":21654,"column":1,"nodeType":"438","messageId":"439","endLine":21654,"endColumn":14,"fix":"693"},{"ruleId":"436","severity":1,"message":"437","line":21672,"column":1,"nodeType":"438","messageId":"439","endLine":21672,"endColumn":14,"fix":"694"},"no-unused-vars","'observer' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["695"],"no-negated-in-lhs",["696"],"'setDestination' is assigned a value but never used.","'showMediaError' is assigned a value but never used.","'handleFetchAccount' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'apiToken' and 'apiUsername'. Either include them or remove the dependency array.","ArrayExpression",["697"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'futureDate' is assigned a value but never used.","'selectedDate' is assigned a value but never used.","'setSelectedDate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleVehicleSelect' and 'prevStep'. Either include them or remove the dependency array.",["698"],"React Hook useEffect has a missing dependency: 'filterAvailability'. Either include it or remove the dependency array.",["699"],"React Hook useEffect has missing dependencies: 'handleFetchAccount' and 'targetAccount'. Either include them or remove the dependency array.",["700"],"'resetPhoneNumber' is assigned a value but never used.","jsx-a11y/role-has-required-aria-props","Elements with the ARIA role \"option\" must have the following attributes defined: aria-selected","JSXAttribute","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"701","text":"702"},{"range":"703","text":"702"},"strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"704","text":"705"},"'recordingStatus' is assigned a value but never used.","no-dupe-keys","Duplicate key 'destination'.","ObjectExpression","Duplicate key 'video'.","Expected '!==' and instead saw '!='.","no-redeclare","'testorstart' is already defined.","redeclared","'parent' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'streamId'.","ArrowFunctionExpression","unsafeRefs","'lastSBytesReceived' is assigned a value but never used.","'sender' is already defined.","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'remoteVideo' is assigned a value but never used.","'session' is assigned a value but never used.","'remoteVideo' is already defined.",{"range":"706","text":"705"},{"range":"707","text":"705"},"'Reflect' is already defined as a built-in global variable.","Block","redeclaredAsBuiltin","'Promise' is already defined as a built-in global variable.","'p' is already defined.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'i' is already defined.",{"range":"708","text":"705"},{"range":"709","text":"705"},{"range":"710","text":"705"},{"range":"711","text":"705"},{"range":"712","text":"705"},{"range":"713","text":"705"},"'C' is assigned a value but never used.",{"range":"714","text":"705"},"'parse' is already defined.",{"range":"715","text":"705"},{"range":"716","text":"705"},{"range":"717","text":"705"},"'Grammar' is assigned a value but never used.",{"range":"718","text":"705"},"no-control-regex","Unexpected control character(s) in regular expression: \\x00, \\x0f.","Literal","Unexpected control character(s) in regular expression: \\x10, \\x1f.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","Unexpected control character(s) in regular expression: \\x0b.","Unexpected control character(s) in regular expression: \\x0e.","no-useless-escape","Unnecessary escape character: \\-.","unnecessaryEscape",["719","720"],["721","722"],"Unnecessary escape character: \\\".",["723","724"],"'expected' is defined but never used.","'error' is defined but never used.","'peg$anyExpectation' is defined but never used.",{"range":"725","text":"705"},{"range":"726","text":"705"},{"range":"727","text":"705"},{"range":"728","text":"705"},{"range":"729","text":"705"},{"range":"730","text":"705"},"'header' is already defined.",{"range":"731","text":"705"},"no-use-before-define","'CryptoJS' was used before it was defined.","usedBeforeDefined","no-shadow-restricted-names","Shadowing of global property 'undefined'.","shadowingRestrictedName","'m_w' is already defined.","'Hasher' is assigned a value but never used.",{"range":"732","text":"705"},{"range":"733","text":"705"},"'Parser' is assigned a value but never used.",{"range":"734","text":"705"},"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'uas' is already defined.",{"range":"735","text":"705"},{"range":"736","text":"705"},"'SessionState' is assigned a value but never used.","'SignalingState' is assigned a value but never used.",{"range":"737","text":"705"},{"range":"738","text":"705"},{"range":"739","text":"705"},{"range":"740","text":"705"},{"range":"741","text":"705"},"no-self-compare","Comparing to itself is potentially pointless.","comparingToSelf",{"range":"742","text":"705"},{"range":"743","text":"705"},{"range":"744","text":"705"},{"range":"745","text":"705"},{"range":"746","text":"705"},{"range":"747","text":"705"},"'TransactionState' is assigned a value but never used.",{"range":"748","text":"705"},{"range":"749","text":"705"},{"range":"750","text":"705"},"no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case",{"range":"751","text":"705"},{"range":"752","text":"705"},{"range":"753","text":"705"},"'uac' is assigned a value but never used.",{"range":"754","text":"705"},{"range":"755","text":"705"},"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral",{"range":"756","text":"705"},{"range":"757","text":"705"},{"range":"758","text":"705"},{"range":"759","text":"705"},{"range":"760","text":"705"},{"range":"761","text":"705"},{"range":"762","text":"705"},{"range":"763","text":"705"},{"range":"764","text":"705"},{"range":"765","text":"705"},{"range":"766","text":"705"},{"range":"767","text":"705"},{"range":"768","text":"705"},{"range":"769","text":"705"},{"range":"770","text":"705"},"'SubscriptionState' is assigned a value but never used.",{"range":"771","text":"705"},{"range":"772","text":"705"},{"range":"773","text":"705"},{"range":"774","text":"705"},"'Levels' is assigned a value but never used.",{"range":"775","text":"705"},{"range":"776","text":"705"},{"range":"777","text":"705"},{"range":"778","text":"705"},"no-unreachable","Unreachable code.","BreakStatement","unreachableCode",{"range":"779","text":"705"},{"range":"780","text":"705"},{"range":"781","text":"705"},"'dialogState' is already defined.","'transaction' is already defined.","'outgoingAckRequest' is already defined.","ThrowStatement",{"range":"782","text":"705"},{"range":"783","text":"705"},{"range":"784","text":"705"},{"range":"785","text":"705"},{"range":"786","text":"705"},{"range":"787","text":"705"},{"range":"788","text":"705"},{"range":"789","text":"705"},{"range":"790","text":"705"},"'causes' is assigned a value but never used.","'supported' is assigned a value but never used.","'dtmfType' is assigned a value but never used.",{"range":"791","text":"705"},{"range":"792","text":"705"},"'DialogStatus' is assigned a value but never used.","'SessionStatus' is assigned a value but never used.","'TypeStrings' is assigned a value but never used.","'UAStatus' is assigned a value but never used.",{"range":"793","text":"705"},["794","795"],"Unnecessary escape character: \\..",["796","797"],"Unnecessary escape character: \\(.",["798","799"],"Unnecessary escape character: \\).",["800","801"],["802","803"],["804","805"],["806","807"],["808","809"],["810","811"],["812","813"],["814","815"],"Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","'Utils' is assigned a value but never used.",{"range":"816","text":"705"},"'Exceptions' is assigned a value but never used.",{"range":"817","text":"705"},{"range":"818","text":"705"},"'nic' is assigned a value but never used.",{"range":"819","text":"705"},{"range":"820","text":"705"},"'parameter' is already defined.","'value' is already defined.","'checkedValue' is already defined.",{"range":"821","text":"705"},{"range":"822","text":"705"},{"range":"823","text":"705"},{"range":"824","text":"705"},{"range":"825","text":"705"},{"range":"826","text":"705"},"'len' is already defined.","'contentLength' is already defined.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'DtmfType' is assigned a value but never used.",{"range":"827","text":"705"},{"range":"828","text":"705"},"'answerOptions' is already defined.","'extraHeaders' is already defined.","'notification' is already defined.","'e' is already defined.",{"range":"829","text":"705"},{"range":"830","text":"705"},{"range":"831","text":"705"},{"range":"832","text":"705"},{"range":"833","text":"705"},{"range":"834","text":"705"},{"range":"835","text":"705"},{"range":"836","text":"705"},{"range":"837","text":"705"},{"range":"838","text":"705"},{"range":"839","text":"705"},{"range":"840","text":"705"},{"range":"841","text":"705"},{"range":"842","text":"705"},"Unnecessary escape character: \\ .",["843","844"],["845","846"],{"range":"847","text":"705"},{"range":"848","text":"705"},{"range":"849","text":"705"},{"range":"850","text":"705"},"no-global-assign","no-unsafe-negation",{"desc":"851","fix":"852"},{"desc":"853","fix":"854"},{"desc":"855","fix":"856"},{"desc":"857","fix":"858"},[48626,48626]," rel=\"noreferrer\"",[52074,52074],[265,278],"",[5654,5667],[8569,8582],[20318,20331],[21190,21203],[21550,21563],[50523,50536],[51465,51478],[51713,51726],[52312,52325],[56999,57012],[57630,57643],[62077,62090],[63594,63607],{"messageId":"859","fix":"860","desc":"861"},{"messageId":"862","fix":"863","desc":"864"},{"messageId":"859","fix":"865","desc":"861"},{"messageId":"862","fix":"866","desc":"864"},{"messageId":"859","fix":"867","desc":"861"},{"messageId":"862","fix":"868","desc":"864"},[135337,135350],[137360,137373],[138836,138849],[146259,146272],[150132,150145],[150770,150783],[160463,160476],[198130,198143],[204873,204886],[214197,214210],[258994,259007],[259244,259257],[260949,260962],[261527,261540],[262225,262238],[265438,265451],[270631,270644],[283974,283987],[284336,284349],[285139,285152],[285862,285875],[286475,286488],[312441,312454],[313110,313123],[333846,333859],[335291,335304],[347440,347453],[359438,359451],[360387,360400],[375799,375812],[376546,376559],[389134,389147],[390065,390078],[390819,390832],[391576,391589],[392333,392346],[393280,393293],[394524,394537],[395513,395526],[396937,396950],[402737,402750],[407530,407543],[408469,408482],[409703,409716],[433629,433642],[433879,433892],[434524,434537],[435104,435117],[439141,439154],[439503,439516],[439946,439959],[443634,443647],[444643,444656],[444893,444906],[486681,486694],[488331,488344],[489081,489094],[508830,508843],[522852,522865],[523609,523622],[524413,524426],[525177,525190],[525995,526008],[541580,541593],[542405,542418],[547737,547750],[554318,554331],[554511,554524],[559293,559306],{"messageId":"859","fix":"869","desc":"861"},{"messageId":"862","fix":"870","desc":"864"},{"messageId":"859","fix":"871","desc":"861"},{"messageId":"862","fix":"872","desc":"864"},{"messageId":"859","fix":"873","desc":"861"},{"messageId":"862","fix":"874","desc":"864"},{"messageId":"859","fix":"875","desc":"861"},{"messageId":"862","fix":"876","desc":"864"},{"messageId":"859","fix":"877","desc":"861"},{"messageId":"862","fix":"878","desc":"864"},{"messageId":"859","fix":"879","desc":"861"},{"messageId":"862","fix":"880","desc":"864"},{"messageId":"859","fix":"881","desc":"861"},{"messageId":"862","fix":"882","desc":"864"},{"messageId":"859","fix":"883","desc":"861"},{"messageId":"862","fix":"884","desc":"864"},{"messageId":"859","fix":"885","desc":"861"},{"messageId":"862","fix":"886","desc":"864"},{"messageId":"859","fix":"887","desc":"861"},{"messageId":"862","fix":"888","desc":"864"},{"messageId":"859","fix":"889","desc":"861"},{"messageId":"862","fix":"890","desc":"864"},[568079,568092],[574971,574984],[587192,587205],[603250,603263],[608495,608508],[626398,626411],[740324,740337],[746064,746077],[747268,747281],[765523,765536],[770343,770356],[818826,818839],[848433,848446],[904656,904669],[905673,905686],[906856,906869],[907336,907349],[908070,908083],[908769,908782],[909538,909551],[910220,910233],[910923,910936],[911952,911965],[913018,913031],[914124,914137],[917831,917844],[920214,920227],{"messageId":"859","fix":"891","desc":"861"},{"messageId":"862","fix":"892","desc":"864"},{"messageId":"859","fix":"893","desc":"861"},{"messageId":"862","fix":"894","desc":"864"},[924904,924917],[926139,926152],[956872,956885],[957474,957487],"Update the dependencies array to be: [apiToken, apiUsername]",{"range":"895","text":"896"},"Update the dependencies array to be: [handleVehicleSelect, prevStep, step, vehicles]",{"range":"897","text":"898"},"Update the dependencies array to be: [availability, filterAvailability, formData.appointmentDate]",{"range":"899","text":"900"},"Update the dependencies array to be: [handleFetchAccount, targetAccount]",{"range":"901","text":"902"},"removeEscape",{"range":"903","text":"705"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"904","text":"905"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"906","text":"705"},{"range":"907","text":"905"},{"range":"908","text":"705"},{"range":"909","text":"905"},{"range":"910","text":"705"},{"range":"911","text":"905"},{"range":"912","text":"705"},{"range":"913","text":"905"},{"range":"914","text":"705"},{"range":"915","text":"905"},{"range":"916","text":"705"},{"range":"917","text":"905"},{"range":"918","text":"705"},{"range":"919","text":"905"},{"range":"920","text":"705"},{"range":"921","text":"905"},{"range":"922","text":"705"},{"range":"923","text":"905"},{"range":"924","text":"705"},{"range":"925","text":"905"},{"range":"926","text":"705"},{"range":"927","text":"905"},{"range":"928","text":"705"},{"range":"929","text":"905"},{"range":"930","text":"705"},{"range":"931","text":"905"},{"range":"932","text":"705"},{"range":"933","text":"905"},{"range":"934","text":"705"},{"range":"935","text":"905"},[852,854],"[apiToken, apiUsername]",[6635,6651],"[handleVehicleSelect, prevStep, step, vehicles]",[6801,6841],"[availability, filterAvailability, formData.appointmentDate]",[7011,7013],"[handleFetchAccount, targetAccount]",[75000,75001],[75000,75000],"\\",[75118,75119],[75118,75118],[83051,83052],[83051,83051],[563464,563465],[563464,563464],[563466,563467],[563466,563466],[563468,563469],[563468,563468],[563470,563471],[563470,563470],[563483,563484],[563483,563483],[563485,563486],[563485,563485],[563487,563488],[563487,563487],[563564,563565],[563564,563564],[563566,563567],[563566,563566],[563568,563569],[563568,563568],[563570,563571],[563570,563570],[922603,922604],[922603,922603],[922633,922634],[922633,922633]]