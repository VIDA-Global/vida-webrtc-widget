[{"H:\\vida-webrtc-widget\\src\\index.js":"1","H:\\vida-webrtc-widget\\src\\App.js":"2","H:\\vida-webrtc-widget\\src\\components\\EmbedSchedulingForm.js":"3","H:\\vida-webrtc-widget\\src\\components\\EmbedVidaAgent.js":"4","H:\\vida-webrtc-widget\\src\\components\\EmbedVidaChat.js":"5","H:\\vida-webrtc-widget\\src\\components\\WebRTCClient.js":"6","H:\\vida-webrtc-widget\\src\\components\\CustomSip.js":"7"},{"size":2124,"mtime":1722634200849,"results":"8","hashOfConfig":"9"},{"size":625,"mtime":1722634200825,"results":"10","hashOfConfig":"9"},{"size":29246,"mtime":1723150540468,"results":"11","hashOfConfig":"9"},{"size":6730,"mtime":1722634200845,"results":"12","hashOfConfig":"9"},{"size":2126,"mtime":1722634200846,"results":"13","hashOfConfig":"9"},{"size":51328,"mtime":1722634200848,"results":"14","hashOfConfig":"9"},{"size":995477,"mtime":1722634200842,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"bkfo0p",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":61,"fixableErrorCount":0,"fixableWarningCount":1,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":251,"fixableErrorCount":0,"fixableWarningCount":113,"source":"34","usedDeprecatedRules":"18"},"H:\\vida-webrtc-widget\\src\\index.js",[],["35","36"],"H:\\vida-webrtc-widget\\src\\App.js",[],"H:\\vida-webrtc-widget\\src\\components\\EmbedSchedulingForm.js",["37","38","39","40","41","42","43","44","45","46","47","48","49","50"],"H:\\vida-webrtc-widget\\src\\components\\EmbedVidaAgent.js",["51","52","53","54","55","56","57"],"import 'regenerator-runtime/runtime';\r\nimport React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport WebRTCClient from \"./WebRTCClient\";\r\n\r\nexport default function EmbedVidaAgent(props) {\r\n  const [status, setStatus] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [destination, setDestination] = useState(props.agent);\r\n  const [targetAccount, setTargetAccount] = useState(null);\r\n  const [hangupCallNow, setHangupCallNow] = useState(false);\r\n  const [toggleAudioMute, setToggleAudioMute] = useState(false);\r\n  const [initiateCallNow, setInitiateCallNow] = useState(false);\r\n  const [showMediaError, setShowMediaError] = useState(false);\r\n  const [autoRegister, setAutoRegister] = useState(false);\r\n  const [apiUsername, setApiUsername] = useState(null);\r\n  const [apiToken, setApiToken] = useState(null);\r\n\r\n  const handleFetchTempUser = async () => {\r\n    return fetch(`https://api.vida.dev/api/v1/allocateTempUserSession`)\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          console.log(\"Error fetching temp user session!\");\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        setApiToken(data.token);\r\n        setApiUsername(data.username);\r\n        return data;\r\n      })\r\n      .catch(function () {\r\n        console.log(\"Error fetching temp user session\");\r\n        return false;\r\n      });\r\n  }\r\n\r\n  const handleFetchAccount = async () => {\r\n    return fetch(`https://api.vida.dev/api/v1/account/${destination}`)\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          console.log(\"Error fetching account!\");\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        setTargetAccount(data);\r\n        setLoading(false);\r\n        return data;\r\n      })\r\n      .catch(function () {\r\n        console.log(\"Error fetching temp user session\");\r\n        setLoading(false);\r\n        return false;\r\n      });\r\n  };\r\n\r\n  const handleStartCall = async () => {\r\n    console.log(\"Starting call...\")\r\n    if(!apiUsername || !apiToken) {\r\n      console.log(\"fetching temp account first\")\r\n      await handleFetchTempUser()\r\n    }\r\n    setAutoRegister(true)\r\n    setStatus(\"CONNECTING\");\r\n    setTimeout(function() {\r\n      setInitiateCallNow(true);\r\n    }, 1000);\r\n    \r\n  };\r\n\r\n  const handleDisconnect = () => {\r\n    console.log(\"disconnect\");\r\n\r\n    setInitiateCallNow(false);\r\n    setHangupCallNow(false);\r\n    setStatus(\"DISCONNECTED\");\r\n    setTimeout(function() {\r\n      setStatus(null);\r\n    }, 3000)\r\n  };\r\n\r\n  const handleHangup = () => {\r\n    console.log(\"hangup\");\r\n\r\n    setHangupCallNow(true);\r\n    setInitiateCallNow(false);\r\n    setStatus(\"DISCONNECTED\");\r\n    setTimeout(function() {\r\n      setStatus(null);\r\n    }, 3000)\r\n  };\r\n\r\n  const handleConnected = () => {\r\n    setStatus(\"CONNECTED\");\r\n  };\r\n\r\n  const handleMediaError = (error) => {\r\n    console.log(\"MEDIA ACCESS ERROR\");\r\n    console.log(error);\r\n    setShowMediaError(true);\r\n  };\r\n\r\n  const handleToggleAudio = async () => {\r\n    setToggleAudioMute(!toggleAudioMute);\r\n  };\r\n\r\n  \r\n  useEffect(() => {\r\n    if((!apiUsername || !apiToken) && autoRegister) {\r\n      handleFetchTempUser();\r\n    }\r\n    //if(!targetAccount) {\r\n    //  handleFetchAccount();\r\n    //}    \r\n  }, [apiUsername, apiToken, targetAccount, autoRegister]);\r\n\r\n  return (\r\n    <> \r\n      <div className={`main-container flex flex-row gap-4 ${((status && status == \"CONNECTED\") || props.size == \"expanded\") ? \"main-container-expanded\" : \"\"}`}>\r\n        {destination && \r\n        <>\r\n          <div className={`avatar-container flex flex-row items-center gap-1 ${status && status == \"CONNECTING\" ? \"call-loading\" : \"\"}`}>\r\n            <button\r\n              className=\"avatar-button curser-pointer\"\r\n              onClick={() => handleStartCall()}\r\n              >\r\n              <img src=\"https://vidapublic.s3.us-east-2.amazonaws.com/vida-icon-blue.png\" className=\"avatar-logo rounded-full\" />\r\n            </button>\r\n            {(!status || (status === \"DISCONNECTED\" || status === \"CONNECTING\")) && \r\n            <div className=\"avatar-text font-bold\">\r\n              <div className=\"mt-1 text-xs text-center\">\r\n                {!status  && <div className=\"welcome-text\">{props.welcome || \"Talk to our AI!\"}</div>}\r\n                {status === \"CONNECTING\" && <div className=\"welcome-text\">calling...</div>}\r\n                {status === \"DISCONNECTED\" && <div className=\"welcome-text\">ended...</div>}\r\n              </div>\r\n            </div>\r\n            }\r\n            {(status && status === \"CONNECTED\") && \r\n            <div className=\"call-buttons flex flex-col content-center place-content-end gap-2 text-xs \">\r\n              <div className=\"flex items-center\">\r\n                <button\r\n                  className=\"rounded-2xl bg-gray py-1 px-2\"\r\n                  onClick={handleToggleAudio}\r\n                >\r\n                  {toggleAudioMute ? \"Unmute\" : \"Mute\"}\r\n                </button>\r\n              </div>\r\n              <div className=\"flex items-center\">\r\n                <button\r\n                  className=\"rounded-2xl bg-warning py-1 px-2\"\r\n                  onClick={handleHangup}\r\n                >\r\n                  End\r\n                </button>\r\n              </div>\r\n            </div>\r\n            }\r\n          </div>          \r\n        </>\r\n        }\r\n        {!destination && !loading && \r\n          <div className=\"flex flex-row items-center text-center gap-2\">You must configure a Vida Agent username on your HTML element.</div>\r\n        }\r\n      </div>\r\n      <video id=\"localVideo\" className=\"hidden\" autoPlay playsInline />\r\n      <video id=\"remoteVideo\" className=\"hidden\" autoPlay playsInline />\r\n      {apiUsername && apiToken && autoRegister &&\r\n        <div className=\"hidden\">\r\n          <WebRTCClient\r\n            video={false}\r\n            autoRegister={true}\r\n            sipDomain={\"sip.vida.dev\"}\r\n            sipServer={\"sip.vida.dev\"}\r\n            sipUser={apiUsername}\r\n            sipPassword={apiToken}\r\n            iceTransportPolicy={\"relay\"}\r\n            destination={destination}\r\n            autoConnect={false}\r\n            autoAnswer={false}\r\n            hideControls={true}\r\n            hideConnectionStatus={true}\r\n            traceSip={false}\r\n            alertVideoUrl=\"/alert.mp4\"\r\n            ringbackVideoUrl=\"/ringback.mp4\"\r\n            onHangup={handleDisconnect}\r\n            onDisconnected={handleDisconnect}\r\n            onConnected={handleConnected}\r\n            onMediaError={handleMediaError}\r\n            hangupCallNow={hangupCallNow}\r\n            toggleAudioNow={toggleAudioMute}\r\n            initiateCallNow={initiateCallNow}\r\n          />\r\n        </div>\r\n      }      \r\n    </>\r\n  );\r\n}\r\n","H:\\vida-webrtc-widget\\src\\components\\EmbedVidaChat.js",["58","59","60","61","62","63"],"import 'regenerator-runtime/runtime';\r\nimport React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport default function EmbedVidaChat(props) {\r\n  const [status, setStatus] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [destination, setDestination] = useState(props.agent);\r\n  const [targetAccount, setTargetAccount] = useState(null);  \r\n  const [apiUsername, setApiUsername] = useState(null);\r\n  const [apiToken, setApiToken] = useState(null);\r\n\r\n  const handleFetchTempUser = async () => {\r\n    return fetch(`https://api.vida.dev/api/v1/allocateTempUserSession`)\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          console.log(\"Error fetching temp user session!\");\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        setApiToken(data.token);\r\n        setApiUsername(data.username);\r\n        return data;\r\n      })\r\n      .catch(function () {\r\n        console.log(\"Error fetching temp user session\");\r\n        return false;\r\n      });\r\n  }\r\n\r\n  const handleFetchAccount = async () => {\r\n    return fetch(`https://api.vida.dev/api/v1/account/${destination}`)\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          console.log(\"Error fetching account!\");\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        setTargetAccount(data);\r\n        setLoading(false);\r\n        return data;\r\n      })\r\n      .catch(function () {\r\n        console.log(\"Error fetching temp user session\");\r\n        setLoading(false);\r\n        return false;\r\n      });\r\n  };\r\n\r\n  \r\n  useEffect(() => {\r\n    if((!apiUsername || !apiToken)) {\r\n      handleFetchTempUser();\r\n    }\r\n    //if(!targetAccount) {\r\n    //  handleFetchAccount();\r\n    //}    \r\n  }, [apiUsername, apiToken, targetAccount]);\r\n\r\n  return (\r\n    <> \r\n      <div className={`main-container flex flex-row gap-4`}>\r\n        {destination && \r\n        <>\r\n          <iframe src={`https://vida.io/embedChat?chat=true&chatTarget=${destination}&username=${apiUsername}&token=${apiToken}`} className=\"iframe-embed\"/>\r\n        </>\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","H:\\vida-webrtc-widget\\src\\components\\WebRTCClient.js",["64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124"],"/* eslint-disable no-console */\r\n//\r\n// Copyright (c) IOT Communications International . All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\n//\r\n\r\n/*jslint node: true */\r\n/*jslint white:true */\r\n/*jslint for:true */\r\n\r\n\"use strict\";\r\n\r\nimport React, { Component } from \"react\";\r\nimport * as SIP from './CustomSip.js'\r\n\r\n//import ringback from \"./ringback.mp4\";\r\n//import alert from \"./alert.mp4\";\r\nimport PropTypes from \"prop-types\";\r\nconst {detect} = require(\"detect-browser\");\r\n\r\n// eslint-disable-next-line\r\nconst adapter = require('webrtc-adapter');\r\n/*\r\nvar videoResolutionConstraints = {\r\n  width: {min: 640, max: 1280, ideal: 1280},\r\n  height: {min: 360, max: 720, ideal: 720},\r\n  frameRate: {min: 30, max: 60, ideal: 30, exact: 30},\r\n};\r\n*/\r\nvar videoResolutionConstraints = {\r\n  width: 1280,\r\n  height: 720\r\n};\r\n\r\nvar audioInputOptions = []\r\nvar audioOutputOptions = []\r\nvar videoInputOptions = []\r\nvar inputOutputSelectors = [audioInputOptions, audioOutputOptions, videoInputOptions];\r\n//var recordingData = [];\r\nvar recordingStatus = [];\r\nvar bwInterval = null;\r\nvar allMediaStreams = [];\r\n\r\nclass WebRTCClient extends Component {\r\n\r\n\r\n\r\n  constructor(props,context) {\r\n    super(props,context);\r\n    var sipServer = props.sipDomain;\r\n    if(props.sipServer) {\r\n      sipServer=props.sipServer;\r\n    }\r\n\r\n    var callLabel = \"Call\";\r\n    if(this.props.callLabel) {\r\n      callLabel = this.props.callLabel;\r\n    }\r\n\r\n\r\n    var remoteVideo = \"remoteVideo\";\r\n    if(props.remoteVideo) {\r\n      remoteVideo = props.remoteVideo;\r\n    }\r\n\r\n    var localVideo = \"localVideo\";\r\n    if(props.localVideo) {\r\n      localVideo = props.localVideo;\r\n    }\r\n    this.initialState = {\r\n      userid:props.sipUser,\r\n      video:props.video,\r\n      domain:props.sipDomain,\r\n      destination: props.destination,\r\n      sipServer:sipServer,\r\n      password:props.sipPassword,destination:props.destination,\r\n      metaData:props.metaData,\r\n      jwtAuth: props.jwtAuth,\r\n      autoRegister: props.autoRegister,callState:\"Idle\",\r\n      enableButtons:true,\r\n      ringbackVideoUrl:props.ringbackVideoUrl,\r\n      alertVideoUrl:props.alertVideoUrl,\r\n      callLabel: callLabel,\r\n      remoteVideo : remoteVideo,\r\n      localVideo: localVideo,\r\n      isAudioMuted: false,\r\n      isVideoMuted: false,\r\n      isScreenSharing: false,\r\n      isRecording: false,\r\n      mediaTested:false,\r\n      mediaSupported:false,\r\n      usingHttps: false,\r\n      video: props.video,\r\n      removeCodecs: props.removeCodecs,\r\n      campaignId: props.campaignId\r\n    }\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // console.log(\"componentDidUpdate prevProps\",prevProps, \"props\",this.props);\r\n    if(this.props.removeCodecs !== prevProps.removeCodecs) {\r\n      console.log(\"Setting removeCodecs\")\r\n      this.setState({\"removeCodecs\": this.props.removeCodecs})\r\n    }\r\n    if(this.props.campaignId !== prevProps.campaignId) {\r\n      console.log(\"Setting campaignId\")\r\n      this.setState({\"campaignId\": this.props.campaignId})\r\n    }\r\n    if(this.props.video !== prevProps.video) {\r\n      console.log(\"Setting video\")\r\n      this.setState({\"video\": this.props.video})\r\n    }\r\n    if(this.props.testMediaNow != prevProps.testMediaNow) {\r\n      if(this.props.testMediaNow) {\r\n        console.log(\"testing media\")\r\n        this.testMedia();\r\n      }\r\n    }\r\n    if(this.props.hangupCallNow != prevProps.hangupCallNow  && this.state.callState==\"InCall\") {\r\n      if(this.props.hangupCallNow) {\r\n        console.log(\"hanging up call\")\r\n        this.hangupCall();\r\n      }\r\n    }\r\n    if(this.props.answerCallNow != prevProps.answerCallNow && this.state.callState==\"Alerting\") {\r\n      if(this.props.answerCallNow) {\r\n        console.log(\"answering call\")\r\n        var testorstart = function(parent) {\r\n          if(!parent.state.mediaTested) {\r\n            console.log(\"waiting for media\")\r\n            setTimeout(testorstart.bind(null, parent), 2000);\r\n          }\r\n          else {\r\n            var context = this;\r\n            setTimeout(function() {\r\n              context.testMedia();  \r\n            }, 2000);\r\n            \r\n            parent.setState({\"video\": parent.props.video})\r\n            parent.answerCall(parent.props.video);\r\n          }\r\n        }\r\n        this.testMedia();\r\n        testorstart(this);\r\n      }\r\n    }\r\n    if(this.props.rejectCallNow != prevProps.rejectCallNow && this.state.callState==\"Alerting\") {\r\n      if(this.props.rejectCallNow) {\r\n        console.log(\"rejecting call\")\r\n        this.rejectCall();\r\n      }\r\n    }\r\n    if(this.props.initiateCallNow != prevProps.initiateCallNow && this.state.callState==\"Idle\") {\r\n      if(this.props.initiateCallNow) {\r\n        console.log(\"initiating call\")\r\n        console.log(this.state.destination)\r\n        console.log(\"video state\")\r\n        console.log(this.state.video)\r\n        var testCounter = 0;\r\n        var errorShown = false;\r\n        var testorstart = function(parent) {\r\n          if(!parent.state.mediaTested) {\r\n            console.log(\"waiting for media\")\r\n            testCounter = testCounter + 1;\r\n            setTimeout(testorstart.bind(null, parent), 2000);\r\n            if(testCounter > 5 && !errorShown) {\r\n              errorShown = true;\r\n              console.log(\"invoking onMediaError callback in waiter\");\r\n              if(parent.props.onMediaError) {\r\n                parent.props.onMediaError();\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            parent.placeCall();\r\n          }\r\n        }\r\n        this.testMedia();\r\n        testorstart(this);\r\n      }\r\n    }\r\n    if(this.props.reinviteCallNow != prevProps.reinviteCallNow) {\r\n      if(this.props.reinviteCallNow) {\r\n        console.log(\"reinviting call\")\r\n        console.log(this.state.destination)\r\n        console.log(\"video state\")\r\n        console.log(this.state.video);\r\n        this.reinvite();\r\n      }\r\n    }\r\n    if(this.props.destination != prevProps.destination && this.state.callState==\"Idle\") {\r\n      console.log(\"Setting Destination\")\r\n      this.setState({\"destination\": this.props.destination})\r\n    }\r\n    if(this.props.toggleAudioNow != prevProps.toggleAudioNow && this.state.callState==\"InCall\") {\r\n      console.log(\"Toggling Audio\")\r\n      this.toggleMute(\"audio\");\r\n    }\r\n    if(this.props.toggleVideoNow != prevProps.toggleVideoNow && this.state.callState==\"InCall\") {\r\n      console.log(\"Toggling Video\")\r\n      this.toggleMute(\"video\");\r\n    }\r\n    if(this.props.toggleScreenshareNow != prevProps.toggleScreenshareNow && this.state.callState==\"InCall\") {\r\n\r\n      if(!this.state.isScreenSharing) {\r\n        console.log(\"Enabling Screenshare\")\r\n        this.startScreenShare();\r\n      }\r\n      else {\r\n        console.log(\"Disabling Screenshare\")\r\n        this.stopScreenShare();\r\n      }\r\n    }\r\n    if(this.props.updateAudioOutputDevice != prevProps.updateAudioOutputDevice) {\r\n      console.log(\"Updating Audio Output Device ID: \"+this.props.updateAudioOutputDevice)\r\n      this.props.setDefaultAudioOutputDevice(this.props.updateAudioOutputDevice)\r\n    }\r\n    if(this.props.updateAudioInputDevice != prevProps.updateAudioInputDevice) {\r\n      console.log(\"Updating Audio Input Device ID: \"+this.props.updateAudioInputDevice)\r\n      this.props.setDefaultAudioInputDevice(this.props.updateAudioInputDevice)\r\n      this.replaceAudioVideoTrack(this.props.updateAudioInputDevice, this.props.updateVideoInputDevice)\r\n    }\r\n    if(this.props.updateVideoInputDevice != prevProps.updateVideoInputDevice) {\r\n      console.log(\"Updating Video Input Device ID: \"+this.props.updateVideoInputDevice)\r\n      this.props.setDefaultVideoInputDevice(this.props.updateVideoInputDevice)\r\n      this.replaceAudioVideoTrack(this.props.updateAudioInputDevice, this.props.updateVideoInputDevice)\r\n    }\r\n    if(this.props.toggleRecordingNow != prevProps.toggleRecordingNow && this.state.callState==\"InCall\") {\r\n\r\n      if(!this.state.isRecording) {\r\n        console.log(\"Enabling Recording\")\r\n        this.startLocalRecording();\r\n      }\r\n      else {\r\n        console.log(\"Disabling Recording\")\r\n        this.stopLocalRecording();\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  //UNSAFE_componentWillMount() {\r\n  //  this.setState(this.initialState);\r\n  //}\r\n\r\n  async componentDidMount() {\r\n    this.setState(this.initialState);\r\n    //this.testMedia();\r\n    var traceSip = false;\r\n    if(this.props.traceSip) {\r\n      traceSip = this.props.traceSip;\r\n    }\r\n\r\n    /*\r\n    {\r\n        audio: true,\r\n        video: {\r\n          width: { exact: 1280 },\r\n          height: { exact: 720 }\r\n        }\r\n      }\r\n    */    \r\n\r\n    var options = {\r\n      uri: this.state.userid +\"@\" + this.state.domain,\r\n      transportOptions: {\r\n        wsServers: [\"wss://\"+this.state.sipServer+\":7443/ws\"],\r\n        traceSip:traceSip\r\n      },\r\n       sessionDescriptionHandlerFactoryOptions: {\r\n        peerConnectionOptions: {          \r\n          iceCheckingTimeout: 6000,\r\n          iceTransportPolicy: (this.props.iceTransportPolicy) ? this.props.iceTransportPolicy : \"all\",\r\n          iceCandidatePoolSize: 3,\r\n          rtcConfiguration: {\r\n            rtcpMuxPolicy: 'negotiate',\r\n            iceServers: [\r\n              {\r\n                urls: 'stun:stun3.l.google.com:19302'\r\n              },\r\n              {\r\n                urls: 'stun:turn.vida.dev:3478'\r\n              },\r\n              {\r\n                urls: 'turn:turn.vida.dev:3478?transport=udp',\r\n                username: '4ea629e2e2efe065f4ccb3bdfd6b6b083fed0808',\r\n                credential: '4so7NvXYWsV45T03Errjiap2PJ8'\r\n              },\r\n              {\r\n                urls: 'turn:turn.vida.dev:3478?transport=tcp',\r\n                username: '4ea629e2e2efe065f4ccb3bdfd6b6b083fed0808',\r\n                credential: '4so7NvXYWsV45T03Errjiap2PJ8'\r\n              },\r\n            ],\r\n            iceCheckingTimeout: 6000,\r\n            iceTransportPolicy: (this.props.iceTransportPolicy) ? this.props.iceTransportPolicy : \"all\",\r\n            iceCandidatePoolSize: 3,\r\n          }          \r\n        },\r\n        constraints: {\r\n          audio: true,\r\n          video: (this.state.video) ? videoResolutionConstraints : this.state.video \r\n        }\r\n      },\r\n      log: {\r\n        builtinEnabled: true\r\n      },\r\n      authorizationUser: this.state.userid,\r\n      password: this.state.password,\r\n      autostart: false,\r\n      //hackIpInContact:true,\r\n      hackWssInTransport:true,\r\n      register: false\r\n    };\r\n\r\n    this.connectionStateChanged(\"Disconnected\");\r\n\r\n\r\n    this.sipUa = new  SIP.UA(options);\r\n    console.log(\"SIP UA\")\r\n    console.log(this.sipUa)\r\n\r\n    this.sipUa.once(\"transportCreated\",  (transport) =>  {\r\n\r\n      transport.on(\"transportError\", () => {\r\n        this.setState({error:\"Network connection error\"});\r\n      });\r\n\r\n      transport.on(\"connecting\", () => {\r\n        this.connectionStateChanged(\"Connecting...\");\r\n      });\r\n\r\n      transport.on(\"connected\", () => {\r\n        console.log(\"Transport connected, props\",this.props);\r\n        this.connectionStateChanged(\"Connected\");\r\n        this.setState({error:\"\"});\r\n        if(this.props.autoRegister) {\r\n          this.register();\r\n        }\r\n\r\n        if(this.props.autoConnect) {\r\n          console.log(\"Auto connecting\");\r\n          this.placeCall();\r\n        }\r\n      });\r\n\r\n      transport.on(\"disconnecting\", () => {\r\n        this.connectionStateChanged(\"Disonnecting...\");\r\n      });\r\n\r\n      transport.on(\"disconnected\", () => {\r\n        this.connectionStateChanged(\"Disonnected\");\r\n      });\r\n\r\n\r\n\r\n\r\n    });\r\n\r\n    this.sipUa.on(\"invite\", (session)=>{\r\n      this.incomingCall(session);\r\n    });\r\n\r\n\r\n\r\n\r\n    this.sipUa.start();\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //this.setState({userid: localStorage.getItem('userid'), domain: localStorage.getItem('domain'),websocket: localStorage.getItem('websocket'),routes: localStorage.getItem('routes'), password: localStorage.getItem('password')},()=>{this.updateSIPSettings()});\r\n  }\r\n\r\n  connectionStateChanged(newState) {\r\n    this.setState({connectionState:newState});\r\n  }\r\n\r\n  handleError(error) {\r\n    console.log('navigator.MediaDevices.getUserMedia error: ', error.message, error.name);\r\n  }\r\n  gotDevices(deviceInfos, context) {\r\n    // Handles being called several times to update labels. Preserve values.\r\n    var parent = this;\r\n\r\n    /*\r\n    const values = inputOutputSelectors.map(select => select.value);\r\n    inputOutputSelectors.forEach(select => {\r\n      while (select.firstChild) {\r\n        select.removeChild(select.firstChild);\r\n      }\r\n    });\r\n    */\r\n\r\n    //var audioInputOptions = []\r\n    //var audioOutputOptions = []\r\n    //var videoInputOptions = []\r\n    //var inputOutputSelectors =\r\n    var audioSupported = false;\r\n    var videoSupported = false;\r\n    for (let i = 0; i !== deviceInfos.length; ++i) {\r\n      const deviceInfo = deviceInfos[i];\r\n      console.log(deviceInfo)\r\n      //const option = document.createElement('option');\r\n      var option = {\r\n        value: \"\",\r\n        text: \"\"\r\n      }\r\n      option.value = deviceInfo.deviceId;\r\n      if (deviceInfo.kind === 'audioinput') {\r\n        audioSupported = true;\r\n        option.text = deviceInfo.label || `microphone ${audioInputOptions.length + 1}`;\r\n        audioInputOptions.push(option);\r\n      } else if (deviceInfo.kind === 'audiooutput') {\r\n        option.text = deviceInfo.label || `speaker ${audioOutputOptions.length + 1}`;\r\n        audioOutputOptions.push(option);\r\n      } else if (deviceInfo.kind === 'videoinput') {\r\n        videoSupported = true;\r\n        option.text = deviceInfo.label || `camera ${videoInputOptions.length + 1}`;\r\n        videoInputOptions.push(option);\r\n      } else {\r\n        console.log('Some other kind of source/device: ', deviceInfo);\r\n      }\r\n    }    \r\n    console.log(inputOutputSelectors)\r\n    console.log(\"running device list\")\r\n    if(context.props.onDeviceOptions) {\r\n      console.log(\"running device list callback\")\r\n      context.props.onDeviceOptions(inputOutputSelectors);\r\n    }\r\n\r\n    var usingHttps=false;\r\n    if (window.location.protocol === \"https:\") {\r\n      usingHttps=true;\r\n    }\r\n    if(!videoSupported) {\r\n      console.log(\"no camera attached. setting video off.\")\r\n      if(this.props.onNoCameraDetected) {\r\n        console.log(\"invoking onNoCameraDetected callback 1\");\r\n        this.props.onNoCameraDetected();\r\n      }\r\n      this.setState({\"video\": false})\r\n      videoSupported = false;\r\n      //videoResolutionConstraints = {mediaSource: 'screen'}\r\n    }\r\n    navigator.mediaDevices.getUserMedia({ audio: true, video: (this.state.video && videoSupported) ? videoResolutionConstraints : false })\r\n    //navigator.mediaDevices.getDisplayMedia({ audio: true, video: {mediaSource: 'screen'}})\r\n      .then( (stream) =>  {\r\n        console.log(\"adding stream in main getUserMedia\")\r\n        allMediaStreams.push(stream);\r\n        console.log(\"getUserMedia stream\")\r\n        console.log(stream)\r\n        parent.origStream = stream;\r\n        this.setState({mediaTested:true,mediaSupported:true,  audioSupported: audioSupported, videoSupported: videoSupported, usingHttps:usingHttps});\r\n      })\r\n      .catch((e) => {\r\n        console.log(e)\r\n        if(this.props.onMediaError) {\r\n          console.log(\"invoking onMediaError callback 1\");\r\n          this.props.onMediaError(e);\r\n        }\r\n        this.setState({mediaTested:true,mediaSupported:false, audioSupported: audioSupported, videoSupported: videoSupported, usingHttps:usingHttps});\r\n      });\r\n  }\r\n\r\n  testMedia() {\r\n    var usingHttps=false;\r\n    if (window.location.protocol === \"https:\") {\r\n      usingHttps=true;\r\n    }\r\n    var parent = this;\r\n    if(navigator.mediaDevices) {\r\n      console.log(\"RUNNING FETCH DEVICES\")\r\n      var context = this;\r\n      try {\r\n        navigator.mediaDevices.enumerateDevices().then(function(devices) {\r\n          context.gotDevices(devices, context)\r\n        })\r\n      }\r\n      catch(e) {\r\n        /*\r\n        if(this.props.onMediaError) {\r\n          console.log(\"invoking onMediaError Device Fetch callback\");\r\n          this.props.onMediaError(e);\r\n        }\r\n        */\r\n        this.handleError(e)\r\n      }\r\n\r\n    } else {\r\n      var browser = detect();\r\n      if(this.props.onMediaError) {\r\n        console.log(\"invoking onMediaError callback 2\");\r\n        this.props.onMediaError(browser);\r\n      }\r\n      this.setState({mediaTested:true,mediaSupported:false, audioSupported: false, videoSupported: false, usingHttps:usingHttps,browser:browser.name, os:browser.os});\r\n\r\n    }\r\n  }\r\n\r\n  hangupCall() {\r\n    console.log(\"hangupCall called\");\r\n\r\n    try {\r\n      this.currentSession.bye();\r\n    }\r\n    catch(e) {\r\n      try {\r\n        this.currentSession.cancel();\r\n      }\r\n      catch(e) {\r\n        console.log(e)\r\n      }\r\n\r\n    }\r\n\r\n    try {\r\n      this.currentSession.terminate();\r\n      // eslint-disable-next-line\r\n    } catch (e) {\r\n      console.log(e)\r\n      console.log(\"error ending call\")\r\n    }\r\n\r\n  }\r\n\r\n\r\n  handleCall(session) {\r\n    var localVideo = document.getElementById(this.state.localVideo);\r\n    this.currentSession = session;\r\n    var context = this;\r\n    setTimeout(function() {\r\n      console.log(\"getting devices again\")\r\n      context.testMedia();  \r\n    }, 2000);\r\n\r\n\r\n    this.currentSession.on(\"terminated\", () => {\r\n      //alert(\"terminated\")\r\n      console.log(\"fest -- terminated\")\r\n\r\n      //if(this.state.isRecording) {\r\n      //  this.stopLocalRecording();\r\n      //}\r\n\r\n      if(this.localStream) {\r\n\r\n        //alert(\"stop local\")      \r\n        console.log(\"fest -- stop local\")\r\n        console.log(this.localStream)\r\n        //console.log(this.localStream)\r\n        this.localStream.getTracks().forEach(track => {\r\n          console.log(\"stopping local stream\")\r\n          track.stop();\r\n          track.enabled = false\r\n        });\r\n        this.localStream = null;\r\n      }\r\n      if(this.remoteStream) {\r\n        //alert(\"stop remote\")\r\n        console.log(\"fest -- stop remote\")\r\n        console.log(this.remoteStream)\r\n        //console.log(this.remoteStream)\r\n        this.remoteStream.getTracks().forEach(track => {\r\n          console.log(\"stopping remote stream\")\r\n          track.stop();\r\n          track.enabled = false\r\n        });\r\n        this.remoteStream = null;\r\n      }\r\n      if(this.screenshareStream) {\r\n        //alert(\"stop screenshare\")\r\n        console.log(\"fest -- stop screenshare\")\r\n        this.screenshareStream.getTracks().forEach(track => {\r\n          console.log(\"stopping screenshare stream\")\r\n          track.stop();\r\n          track.enabled = false\r\n        });\r\n        this.screenshareStream = null;\r\n      }\r\n      if(this.origStream) {        \r\n        //alert(\"stop orig\")\r\n        console.log(\"fest -- stop orig\")\r\n        console.log(this.origStream)\r\n        //console.log(this.origStream)\r\n        this.origStream.getTracks().forEach(track => {\r\n          console.log(\"stopping orig stream\")\r\n          track.stop();\r\n          track.enabled = false\r\n        });\r\n        console.log(this.origStream)\r\n        this.origStream = null;\r\n      }      \r\n\r\n      console.log(\"allMediaStreams\")\r\n      console.log(allMediaStreams)\r\n      for(var streamId in allMediaStreams) {\r\n        var thisStream = allMediaStreams[streamId];\r\n        console.log(\"fest -- stop stream\" +streamId)\r\n        console.log(thisStream)\r\n        //console.log(thisStream)\r\n        thisStream.getTracks().forEach(track => {\r\n          console.log(\"stopping stream \"+streamId)\r\n          track.stop();\r\n          track.enabled = false\r\n        });\r\n        console.log(thisStream)\r\n        thisStream = null;\r\n      }\r\n      allMediaStreams = [];\r\n\r\n      var localVideo = document.getElementById(this.state.localVideo);\r\n      console.log(this.state.localVideo)\r\n      var remoteVideo = document.getElementById(this.state.remoteVideo);\r\n      console.log(this.state.remoteVideo)\r\n      if(localVideo) {\r\n        //alert(\"killing local\")\r\n        console.log(\"fest -- killing local\")\r\n        localVideo.pause();\r\n        localVideo.src=\"\";\r\n        localVideo.srcObject = null;\r\n        localVideo.removeAttribute(\"src\");\r\n        localVideo.removeAttribute(\"loop\");\r\n      }\r\n      if(remoteVideo) {\r\n        //alert(\"killing remote\")\r\n        console.log(\"fest -- killing remote\")\r\n        remoteVideo.pause();\r\n        remoteVideo.src=\"\";\r\n        remoteVideo.srcObject = null;\r\n        remoteVideo.removeAttribute(\"src\");\r\n        remoteVideo.removeAttribute(\"loop\");\r\n      }\r\n      \r\n      this.setState({callState:\"Idle\"});\r\n\r\n      if(this.props.onDisconnected) {\r\n        console.log(\"invoking onDisconnected callback\");\r\n        this.props.onDisconnected(this);\r\n      }\r\n      if(bwInterval) {\r\n        clearInterval(bwInterval)  \r\n      }\r\n    });\r\n\r\n    this.currentSession.on(\"accepted\", () => {\r\n      this.setState({callState:\"InCall\"});\r\n      localVideo = document.getElementById(this.state.localVideo);\r\n      console.log(\"on accepted\")\r\n      console.log(localVideo)\r\n      this.callConnected();\r\n      var parent = this;\r\n      //setTimeout(function() {parent.reinvite()}, 5000)      \r\n\r\n      if(this.props.onConnected) {\r\n        console.log(\"invoking onConnected callback\");\r\n        this.props.onConnected(this);\r\n      }\r\n\r\n    });\r\n\r\n    this.currentSession.on(\"cancel\", () => {\r\n      this.setState({callState:\"Canceling\"});\r\n    });\r\n\r\n    this.currentSession.on(\"rejected\", (response,cause) => {\r\n      this.setState({error:\"Call failed: \" + cause});\r\n    });\r\n\r\n\r\n    this.currentSession.on(\"SessionDescriptionHandler-created\", () => {\r\n      //const pc = this.currentSession.sessionDescriptionHandler.peerConnection;\r\n      //const videoSender = pc.getSenders().find(sender => sender.track.kind === 'video');\r\n      //pc.removeTrack(videoSender);\r\n      this.currentSession.sessionDescriptionHandler.on(\"getDescription\", (sdpWrapper)=> {\r\n        console.log(\"sdpWrapper\")\r\n        console.log(sdpWrapper)\r\n      });\r\n      this.currentSession.sessionDescriptionHandler.on(\"userMediaRequest\", (constraints)=> {\r\n        console.log(\"user media request\")\r\n        console.log(constraints)\r\n      });\r\n      this.currentSession.sessionDescriptionHandler.on(\"userMediaFailed\", (e)=> {\r\n        console.log(\"Local User Media Failed!\")\r\n        console.log(e)\r\n      });\r\n    });\r\n\r\n    \r\n    this.currentSession.on(\"trackAdded\", async (event) => {\r\n      console.log(\"On TrackAdded!!!!!!!!!!!!\")\r\n      console.log(event)\r\n      \r\n      localVideo = document.getElementById(this.state.localVideo);\r\n      // We need to check the peer connection to determine which track was added\r\n      if(this.currentSession.sessionDescriptionHandler) {\r\n        if(this.currentSession.sessionDescriptionHandler.peerConnection) {\r\n          var parent = this;          \r\n          var pc = this.currentSession.sessionDescriptionHandler.peerConnection;\r\n          // Gets remote tracks\r\n          parent.remoteStream = new MediaStream();\r\n          parent.receiverStatsTrack = null;\r\n          parent.senderStatsTrack = null;\r\n          pc.getReceivers().forEach(function(receiver) {\r\n            if(receiver.track) {\r\n              if(receiver.track.kind == \"audio\") {\r\n                console.log(\"tracking audio receiver track\")\r\n              }\r\n              if(receiver.track.kind == \"video\") {\r\n                console.log(\"tracking video receiver track\")\r\n                parent.receiverStatsTrack = receiver.track;\r\n              }\r\n              parent.remoteStream.addTrack(receiver.track);              \r\n            }\r\n          });\r\n\r\n          // Gets local tracks\r\n          parent.localStream = new MediaStream();\r\n\r\n          pc.getSenders().forEach(function(sender) {\r\n            if(sender.track) {\r\n              parent.localStream.addTrack(sender.track);              \r\n              console.log(\"Local stream sender track!\")\r\n              console.log(sender.track)\r\n              if(sender.track.kind == \"audio\") {\r\n                console.log(\"setting default audio device ID\")\r\n                console.log(sender.track.getSettings().deviceId)\r\n                if(parent?.props?.setDefaultAudioInputDevice) {\r\n                  parent.props.setDefaultAudioInputDevice(sender.track.getSettings().deviceId)  \r\n                }                \r\n              }\r\n              if(sender.track.kind == \"video\") {\r\n                console.log(\"setting default video device ID\")\r\n                console.log(sender.track.getSettings().deviceId)\r\n                if(parent?.props?.setDefaultVideoInputDevice) {\r\n                  parent.props.setDefaultVideoInputDevice(sender.track.getSettings().deviceId)\r\n                }\r\n                console.log(\"tracking video sender track\")\r\n                parent.senderStatsTrack = sender.track;\r\n              }\r\n\r\n            }\r\n          });          \r\n          if(this.state.video) {\r\n            this.props.onLocalVideo(parent.localStream);\r\n            setTimeout(() => {\r\n              localVideo = document.getElementById(this.state.localVideo);\r\n              //console.log(\"local video while looping tracks\")\r\n              //console.log(localVideo)\r\n              try {\r\n                localVideo.srcObject = parent.localStream;\r\n                localVideo.play().catch(()=>{});\r\n              }\r\n              catch(e) {\r\n                console.log(e)\r\n                console.log(\"problem setting local video\")\r\n              }\r\n            }, 2000);\r\n          }\r\n          \r\n          if(parent.receiverStatsTrack && parent.senderStatsTrack && !bwInterval) {\r\n            console.log(\"setting bw interval!\")\r\n            parent.restartStatInterval()\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  restartStatInterval() {\r\n    if(!this.state.video) {\r\n      return;\r\n    }\r\n    console.log(\"restarting bw stats interval\")\r\n    var parent = this;\r\n    var lastRTimestamp = null;\r\n    var lastRBytesReceived = null;\r\n    var lastRPacketsLost = null;\r\n    var lastSTimestamp = null;\r\n    var lastSBytesSent = null;\r\n    var lastSPacketsRetry = null;\r\n    var lastSBytesReceived = null;\r\n    if(bwInterval) {\r\n      clearInterval(bwInterval);\r\n    }\r\n    bwInterval = setInterval(() => {\r\n      this.currentSession.sessionDescriptionHandler.peerConnection.getStats(parent.receiverStatsTrack)\r\n        .then(stats => {\r\n          var timestamp = null;\r\n          stats.forEach(report => {\r\n            if (report.type === 'inbound-rtp' && report.kind == \"video\") {\r\n              const bytesReceived = report.bytesReceived;\r\n              const packetsLost = report.packetsLost;\r\n              //console.log(`packetsLost: ${packetsLost}`)\r\n              timestamp = report.timestamp;\r\n              if(lastRBytesReceived !== null && lastRTimestamp !== null) {\r\n                var downBw = ((bytesReceived - lastRBytesReceived) / (timestamp - lastRTimestamp)) * 8;\r\n                //console.log(\"==========================\")\r\n                //console.log(`Receiver Inbound bandwidth: ${downBw} kbps`);\r\n                if(parent.props.onDownloadBandwidth) {\r\n                  this.props.onDownloadBandwidth(downBw);\r\n                }                \r\n              }\r\n              if(lastRPacketsLost !== null && lastRTimestamp !== null) {\r\n                var downPacketsLost = ((packetsLost - lastRPacketsLost) / (timestamp - lastRTimestamp));\r\n                //console.log(`downPacketsLost: ${downPacketsLost}`)\r\n                if(parent.props.onDownloadPacketsLost) {\r\n                  this.props.onDownloadPacketsLost(downPacketsLost);\r\n                }\r\n              }\r\n              lastRBytesReceived = bytesReceived;\r\n              lastRPacketsLost = packetsLost;\r\n            }\r\n          });\r\n          lastRTimestamp = timestamp;\r\n        })\r\n        .catch(error => {\r\n          console.log(\"errror in receiver Video track stats\")\r\n          console.error(error);\r\n        });\r\n      \r\n      this.currentSession.sessionDescriptionHandler.peerConnection.getStats(parent.senderStatsTrack)\r\n        .then(stats => {\r\n          var timestamp = null;\r\n          stats.forEach(report => {\r\n            if (report.type === 'outbound-rtp' && report.kind == \"video\") {\r\n              const bytesSent = report.bytesSent;\r\n              const packetsRetry = report.retransmittedPacketsSent;\r\n              //console.log(`packetsRetry: ${packetsRetry}`)\r\n              timestamp = report.timestamp;                    \r\n              if(lastSBytesSent !== null && lastSTimestamp !== null) {\r\n                var upBw = ((bytesSent - lastSBytesSent) / (timestamp - lastSTimestamp)) * 8;                \r\n                //console.log(\"==========================\")\r\n                //console.log(`Sender Upload bandwidth: ${upBw} kbps`);\r\n                if(parent.props.onUploadBandwidth) {\r\n                  this.props.onUploadBandwidth(upBw);\r\n                }                \r\n              }\r\n              if(lastSPacketsRetry !== null && lastSTimestamp !== null) {\r\n                //var upPacketsRetry = ((packetsRetry - lastSPacketsRetry) / (timestamp - lastSTimestamp)) * 8;\r\n                var upPacketsRetry = ((packetsRetry - lastSPacketsRetry) / (timestamp - lastSTimestamp));\r\n                //console.log(`upPacketsRetry: ${upPacketsRetry}`)\r\n                if(parent.props.onUploadPacketsRetry) {\r\n                  this.props.onUploadPacketsRetry(upPacketsRetry);\r\n                }\r\n              }\r\n              lastSBytesSent = bytesSent;\r\n              lastSPacketsRetry = packetsRetry;\r\n            }\r\n          });\r\n          lastSTimestamp = timestamp;\r\n        })\r\n        .catch(error => {\r\n          console.log(\"errror in sender Video track stats\")\r\n          console.error(error);\r\n        });\r\n    }, 1000); // Get stats every second\r\n  }\r\n\r\n  answerCall(overrideVideo) {\r\n    var parent = this;\r\n    var answerVideo = this.state.video;\r\n    if(overrideVideo !== undefined) {\r\n      answerVideo = overrideVideo;\r\n    }\r\n    if(this.currentSession) {\r\n      try {\r\n        console.log(\"ANSWERING WITH VIDEO ENABLED\")\r\n        console.log(overrideVideo)\r\n        this.setState({error:\"\"});\r\n        var myModifier = function(description) {\r\n          if(parent.state.removeCodecs) {\r\n            var codecs = parent.state.removeCodecs.split(\",\")\r\n            for(var codecIn in codecs) {\r\n              console.log(\"removing codec from offer: \"+codecs[codecIn])\r\n              description.sdp = parent.removeCodec(description.sdp, codecs[codecIn])\r\n            }\r\n          }\r\n          return Promise.resolve(description);\r\n        };\r\n        this.currentSession.accept({\r\n          sessionDescriptionHandlerOptions: {\r\n            constraints: {\r\n              audio: true,\r\n              video: (answerVideo) ? videoResolutionConstraints : answerVideo\r\n            }\r\n          }\r\n        }, [myModifier]);\r\n        // eslint-disable-next-line\r\n      } catch (e) {\r\n        console.log(\"Error answering call\")\r\n        console.log(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  rejectCall() {\r\n    if(this.currentSession) {\r\n      try {\r\n        this.setState({error:\"\"});\r\n        this.currentSession.reject();\r\n        // eslint-disable-next-line\r\n      } catch (e) {\r\n        console.log(\"Error rejecting call\")\r\n        console.log(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  toggleMute(type) {\r\n    var parentState = this.state;\r\n    if (this.currentSession.sessionDescriptionHandler.peerConnection.getSenders) {\r\n      this.currentSession.sessionDescriptionHandler.peerConnection.getSenders().forEach(function(sender) {\r\n        if (sender.track) {\r\n          if(sender.track.kind == \"audio\") {\r\n            if(type == \"audio\" || type == \"both\") {\r\n                parentState.isAudioMuted = !parentState.isAudioMuted;\r\n                sender.track.enabled = !parentState.isAudioMuted;\r\n            }\r\n          }\r\n          if(sender.track.kind == \"video\") {\r\n            if(type == \"video\" || type == \"both\") {\r\n              parentState.isVideoMuted = !parentState.isVideoMuted;\r\n              sender.track.enabled = !parentState.isVideoMuted;\r\n            }\r\n          }\r\n        }\r\n\r\n      });\r\n    }\r\n    else {\r\n      this.currentSession.sessionDescriptionHandler.peerConnection.getLocalStreams().forEach(function(stream) {\r\n        if(type == \"audio\" || type == \"both\") {\r\n          parentState.isAudioMuted = !parentState.isAudioMuted;\r\n          stream.getAudioTracks().forEach(function(track) {\r\n            track.enabled = !parentState.isAudioMuted;\r\n          });\r\n        }\r\n        if(type == \"video\" || type == \"both\") {\r\n          parentState.isVideoMuted = !parentState.isVideoMuted;\r\n          stream.getVideoTracks().forEach(function(track) {\r\n            track.enabled = !parentState.isVideoMuted;\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n  replaceAudioVideoTrack(audioSourceId, videoSourceId) {\r\n    console.log(\"Updating Audio Video Tracks\")\r\n    var parent = this;\r\n    var wasRecording = false;\r\n    //this.state.isScreenSharing = true;\r\n    //var option = {video: {mediaSource: 'screen'}, audio: true};\r\n    const constraints = {\r\n      audio: {deviceId: audioSourceId ? {exact: audioSourceId} : true},\r\n      video: {deviceId: videoSourceId ? {exact: videoSourceId} : undefined, width: 1280, height: 720}\r\n    };\r\n    console.log(constraints)\r\n    if(navigator.mediaDevices) {\r\n      if(parent.localStream) {\r\n        console.log(\"stopping existing streams\")\r\n        parent.localStream.getTracks().forEach(track => {\r\n          track.stop();\r\n        });\r\n      }\r\n      if(this.state.isRecording) {\r\n        wasRecording = true;\r\n      }\r\n      navigator.mediaDevices.getUserMedia(constraints)\r\n      .then(function(streams){\r\n        console.log(\"adding stream in replaceAudioTrack\")\r\n        allMediaStreams.push(streams);\r\n        var videoTrack = streams.getVideoTracks()[0];\r\n        var sender = parent.currentSession.sessionDescriptionHandler.peerConnection.getSenders().find(function(s) {\r\n          return s.track.kind == videoTrack.kind;\r\n        });\r\n        sender.replaceTrack(videoTrack);\r\n        parent.senderStatsTrack = videoTrack;\r\n\r\n        var audioTrack = streams.getAudioTracks()[0];\r\n        var sender = parent.currentSession.sessionDescriptionHandler.peerConnection.getSenders().find(function(s) {\r\n          return s.track.kind == audioTrack.kind;\r\n        });\r\n        sender.replaceTrack(audioTrack);\r\n\r\n        if(parent.localStream) {\r\n          var localAudio = parent.localStream.getAudioTracks();\r\n          if(localAudio) {\r\n            if (localAudio.length > 0) {\r\n              parent.localStream.removeTrack(localAudio[0]);\r\n            }\r\n          }\r\n\r\n          var localVideo = parent.localStream.getVideoTracks();\r\n          if(localVideo) {\r\n            if (localVideo.length > 0) {\r\n              parent.localStream.removeTrack(localVideo[0]);\r\n            }\r\n          }\r\n\r\n          parent.localStream.addTrack(videoTrack);\r\n          parent.localStream.addTrack(audioTrack);\r\n\r\n        }\r\n        if(wasRecording) {\r\n          console.log(\"restarting local recording\")\r\n          parent.startLocalRecording()\r\n        }\r\n        parent.restartStatInterval()\r\n\r\n      }, function(error){\r\n       console.log(\"error \", error);\r\n      });\r\n    }\r\n  }\r\n\r\n  startScreenShare() {\r\n    var parent = this;\r\n    this.setState({\"isScreenSharing\": true})\r\n    //this.state.isScreenSharing = true;\r\n    var option = {video: {mediaSource: 'screen', maxWidth: 1280, maxHeight: 720}, audio: true};\r\n    if(navigator.mediaDevices) {\r\n      navigator.mediaDevices.getDisplayMedia(option)\r\n      .then(function(streams){\r\n        parent.screenshareStream = streams;\r\n        var videoTrack = streams.getVideoTracks()[0];\r\n        var sender = parent.currentSession.sessionDescriptionHandler.peerConnection.getSenders().find(function(s) {\r\n          console.log(\"sender track\")\r\n          console.log(s)          \r\n          return !s.track || s.track && s.track.kind == videoTrack.kind;\r\n        });\r\n        console.log('sender')\r\n        console.log(sender)\r\n        sender.replaceTrack(videoTrack);          \r\n        parent.senderStatsTrack = videoTrack;\r\n        parent.restartStatInterval()\r\n\r\n        /*\r\n        // may need something like this for local recording\r\n        if(parent.localStream) {\r\n          var localVideo = parent.localStream.getVideoTracks();\r\n          if(localVideo) {\r\n            if (localVideo.length > 0) {\r\n              parent.localStream.removeTrack(localVideo[0]);\r\n            }\r\n          }\r\n          parent.localStream.addTrack(videoTrack);\r\n        }\r\n        */\r\n\r\n        parent.props.toggleScreenshareCallback(true)\r\n      }, function(error){\r\n        console.log(\"error \", error);\r\n        parent.props.toggleScreenshareCallback(false)\r\n      });\r\n    }\r\n  }\r\n\r\n  stopScreenShare() {\r\n    var parent = this;\r\n    //this.state.isScreenSharing = false;\r\n    this.setState({\"isScreenSharing\": false})\r\n    if(navigator.mediaDevices) {\r\n      if(parent.screenshareStream) {\r\n        console.log(\"stopping screenshare streams\")\r\n        parent.screenshareStream.getTracks().forEach(track => {\r\n          track.stop();\r\n        });\r\n      }\r\n      //var option = {video: true, audio: true};\r\n      //navigator.mediaDevices.getUserMedia(option)\r\n      //.then(function(streams){\r\n      var streams = parent.localStream;\r\n       var videoTrack = streams.getVideoTracks()[0];\r\n       var sender = parent.currentSession.sessionDescriptionHandler.peerConnection.getSenders().find(function(s) {\r\n         //return s.track.kind == videoTrack.kind;\r\n          return !s.track || s.track && s.track.kind == \"video\";\r\n       });\r\n       sender.replaceTrack(videoTrack);\r\n       parent.senderStatsTrack = videoTrack;\r\n       parent.restartStatInterval()\r\n       parent.props.toggleScreenshareCallback(false)\r\n      //}, function(error){\r\n      // console.log(\"error \", error);\r\n      // parent.props.toggleScreenshareCallback(false)\r\n      //});\r\n    }\r\n  }\r\n\r\n\r\n  getHeaderValue(header) {\r\n    if(this.req) {\r\n      return  this.req.getHeader(header);\r\n    }\r\n  }\r\n\r\n  incomingCall(session) {\r\n    this.setState({callState:\"Alerting\"});\r\n\r\n    if(this.props.onConnecting) {\r\n      console.log(\"invoking onConnecting callback\");\r\n      this.props.onConnecting(this, session);\r\n    }\r\n\r\n\r\n    var remoteVideo = document.getElementById(this.state.remoteVideo);\r\n    /*\r\n    if(this.state.alertVideoUrl) {\r\n      remoteVideo.src = this.state.alertVideoUrl;\r\n    }\r\n\r\n\r\n    remoteVideo.setAttribute(\"loop\",true);\r\n    remoteVideo.play();\r\n    */\r\n\r\n    this.handleCall(session);\r\n\r\n    var req = session.request;\r\n    this.req = req;\r\n    var encodedMeta = req.getHeader(\"X-MetaData\");\r\n    if(encodedMeta) {\r\n      try {\r\n        this.setState({receivedMeta:JSON.parse(decodeURIComponent(encodedMeta))});\r\n      } catch(e) {\r\n        console.warn(\"Could not parse meta data header\");\r\n      }\r\n    }\r\n\r\n    if(this.props.autoAnswer) {\r\n      console.log(\"Auto answering\");\r\n      this.answerCall();\r\n      return;\r\n    }\r\n    if(this.props.onRinging) {\r\n      console.log(\"invoking onRinging callback\");\r\n      this.props.onRinging(this, session);\r\n    }\r\n    return;\r\n  }\r\n\r\n  register() {\r\n    var registerOptions = {};\r\n    registerOptions.extraHeaders = [];\r\n    if(this.state.jwtAuth) {\r\n      registerOptions.extraHeaders.push(\"X-JWTAuth:\"+this.state.jwtAuth);\r\n    }\r\n\r\n    this.sipUa.register(registerOptions);\r\n\r\n\r\n  }\r\n\r\n  placeCall() {\r\n    var parent = this;\r\n    this.setState({callState:\"Calling\", error:\"\"});\r\n    var inviteOptions = {};\r\n    inviteOptions.extraHeaders = [];\r\n    if(this.state.metaData) {\r\n      var encodedMeta = encodeURIComponent(JSON.stringify(this.state.metaData));\r\n      inviteOptions.extraHeaders.push(\"X-MetaData:\"+encodedMeta);\r\n    }\r\n\r\n    if(this.state.jwtAuth) {\r\n      inviteOptions.extraHeaders.push(\"X-JWTAuth:\"+this.state.jwtAuth);\r\n    }\r\n    if(this.state.campaignId) {\r\n      inviteOptions.extraHeaders.push(\"X-ForceCampaignId:\"+this.state.campaignId);\r\n    }\r\n    inviteOptions.sessionDescriptionHandlerOptions = {\r\n      /*\r\n      RTCOfferOptions: {\r\n        offerToReceiveAudio: true,\r\n        offerToReceiveVideo: true,\r\n        iceRestart: true\r\n      },\r\n      */\r\n      constraints: {\r\n        audio: true,\r\n        video: (this.state.video) ? videoResolutionConstraints : this.state.video\r\n        //video: videoResolutionConstraints\r\n        //video: {mediaSource: 'screen'}\r\n      }\r\n    }\r\n    if(this.state.video && !inviteOptions.sessionDescriptionHandlerOptions.constraints.video) {\r\n      inviteOptions.sessionDescriptionHandlerOptions.RTCOfferOptions = {\r\n        offerToReceiveVideo: true\r\n      }\r\n    }\r\n    var myModifier = function(description) {\r\n      if(parent.state.removeCodecs) {\r\n        var codecs = parent.state.removeCodecs.split(\",\")\r\n        for(var codecIn in codecs) {\r\n          console.log(\"removing codec from offer: \"+codecs[codecIn])\r\n          description.sdp = parent.removeCodec(description.sdp, codecs[codecIn])\r\n        }\r\n      }\r\n      return Promise.resolve(description);\r\n    };\r\n    var session = this.sipUa.invite(this.state.destination, inviteOptions, [myModifier]);\r\n    this.handleCall(session);    \r\n  }\r\n\r\n  removeCodec(sdp, codecName) {\r\n      const lines = sdp.split('\\r\\n');\r\n      let codecPayloadType = null;\r\n\r\n      // First, identify the payload type for the specified codec.\r\n      for (const line of lines) {\r\n          const rtpmapMatch = line.match(new RegExp(`a=rtpmap:(\\\\d+) ${codecName}\\\\/`, 'i'));\r\n          if (rtpmapMatch) {\r\n              codecPayloadType = rtpmapMatch[1];\r\n              break;\r\n          }\r\n      }\r\n\r\n      if (codecPayloadType) {\r\n          let mAudioLineProcessed = false;\r\n          const processedLines = lines.map(line => {\r\n              // Special handling for the m=audio line\r\n              if (line.startsWith('m=audio ') && !mAudioLineProcessed) {\r\n                  mAudioLineProcessed = true; // Ensure we only process the m=audio line once\r\n                  const parts = line.split(' ');\r\n                  // The first three parts are \"m=audio\", port, and protocol, which should be preserved\r\n                  const mAudioHeader = parts.slice(0, 3);\r\n                  const codecList = parts.slice(3);\r\n                  // Remove only the codec payload type from the list of codecs\r\n                  const filteredCodecList = codecList.filter(part => part !== codecPayloadType);\r\n                  return [...mAudioHeader, ...filteredCodecList].join(' ');\r\n              } else if (line.includes(`a=rtpmap:${codecPayloadType} `) || line.includes(`a=fmtp:${codecPayloadType}`) || line.includes(`a=rtcp-fb:${codecPayloadType}`)) {\r\n                  // Remove lines defining the codec being removed\r\n                  return null;\r\n              }\r\n              return line; // Preserve all other lines\r\n          }).filter(line => line !== null); // Remove null entries (lines marked for removal)\r\n\r\n          return processedLines.join('\\r\\n');\r\n      } else {\r\n          // Codec was not found, return the original SDP unchanged.\r\n          return sdp;\r\n      }\r\n  }\r\n\r\n  reinvite() {\r\n    var parent = this;\r\n    console.log(\"reinviting\")\r\n    //this.setState({callState:\"Calling\", error:\"\"});\r\n    var inviteOptions = {};\r\n    inviteOptions.extraHeaders = [];\r\n    inviteOptions.sessionDescriptionHandlerOptions = {      \r\n      /*\r\n      RTCOfferOptions: {\r\n        offerToReceiveAudio: true,\r\n        offerToReceiveVideo: (this.state.video) ? true : false,\r\n        iceRestart: true\r\n      },\r\n      */\r\n      constraints: {\r\n        audio: true,\r\n        video: (this.state.video) ? videoResolutionConstraints : this.state.video\r\n        //video: {mediaSource: 'screen'}\r\n      }\r\n    }\r\n    var myModifier = function(description) {\r\n      if(parent.state.removeCodecs) {\r\n        var codecs = parent.state.removeCodecs.split(\",\")\r\n        for(var codecIn in codecs) {\r\n          console.log(\"removing codec from offer: \"+codecs[codecIn])\r\n          description.sdp = parent.removeCodec(description.sdp, codecs[codecIn])\r\n        }\r\n      }\r\n      return Promise.resolve(description);\r\n    };\r\n    var session = this.currentSession.reinvite(inviteOptions, [myModifier]);\r\n    //this.handleCall(session);\r\n  }\r\n\r\n\r\n  callConnected() {\r\n\r\n\r\n    console.log(\"callConnected\");\r\n\r\n\r\n    var remoteStream = this.remoteStream;\r\n    if(this.remoteStream) {\r\n      setTimeout(function() {\r\n        try {\r\n          try {\r\n            var remoteVideo = document.getElementById(this.state.remoteVideo);\r\n          }\r\n          catch(e) {\r\n            var remoteVideo = document.getElementById(\"remoteVideo\");\r\n          }\r\n\r\n          remoteVideo.srcObject = remoteStream;\r\n          remoteVideo.play().catch(()=>{});\r\n          // eslint-disable-next-line\r\n        } catch (e) {\r\n          console.log(\"problem playing remote video\")\r\n          console.log(e)\r\n          console.log(remoteVideo)\r\n        }\r\n      }, 1000)\r\n    }\r\n\r\n  }\r\n\r\n  /*\r\n  * Local Recording\r\n  */\r\n\r\n  checkCodecsSupported() {\r\n    let options = {mimeType: 'video/mp4'};\r\n    if (!MediaRecorder.isTypeSupported(options.mimeType)) {\r\n      console.log(`${options.mimeType} is not supported`);\r\n      options = {mimeType: 'video/webm;codecs=vp8,opus'};      \r\n      if (!MediaRecorder.isTypeSupported(options.mimeType)) {\r\n        console.log(`${options.mimeType} is not supported`);\r\n        options = {mimeType: 'video/webm'};\r\n        if (!MediaRecorder.isTypeSupported(options.mimeType)) {\r\n          console.log(`${options.mimeType} is not supported`);\r\n          options = {mimeType: ''};\r\n        }\r\n      }\r\n    }\r\n    console.log(\"Recording codecs!\")\r\n    console.log(options)\r\n    return options;\r\n  }\r\n\r\n  /*\r\n  downloadLocalRecording() {\r\n      var blob = new Blob(recordingData, {type: recordingData[0].type});\r\n      var url = window.URL.createObjectURL(blob);\r\n      var a = document.createElement('a');\r\n      a.style.display = 'none';\r\n      a.href = url;\r\n      a.download = 'recording.webm';\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      setTimeout(function() {\r\n          document.body.removeChild(a);\r\n          window.URL.revokeObjectURL(url);\r\n      }, 100);\r\n  }\r\n  */\r\n\r\n  startLocalRecording() {\r\n    console.log(\"Starting local recording\")\r\n    const options = this.checkCodecsSupported();\r\n    if(this.localStream) {\r\n      const MIN_BLOB_SIZE = 5 * 1024 * 1024;\r\n      var partSize = 0;\r\n      var parts = [];\r\n      this.recorder = new MediaRecorder(this.localStream, options);\r\n      this.localRecordingStart = Math.floor(new Date().getTime() / 1000);\r\n      this.localRecordingStop = null;\r\n      var parent = this;\r\n      var firstChunk = true;\r\n\r\n      this.recorder.ondataavailable = e => {\r\n        console.log(\"on recording data\")\r\n        if (e.data && e.data.size > 0) {\r\n          //recordingData.push(e.data);\r\n          //console.log(recordingData)\r\n          const blob = e.data;\r\n          partSize += blob.size;\r\n          parts.push(blob);\r\n          var final = (!parent.state.isRecording || parent.recorder.state == \"inactive\") ? true : false\r\n          if (partSize > MIN_BLOB_SIZE || final) {\r\n            let bigBlob = new Blob(parts, { type: blob.type });\r\n            partSize = 0;\r\n            parts = [];\r\n            var reader = new FileReader();\r\n            //reader.readAsArrayBuffer(e.data);\r\n            reader.readAsDataURL(bigBlob);\r\n            reader.onloadend = async function(event) {\r\n              let base64Data = reader.result;\r\n              //console.log(base64Data)\r\n              //let uint8View = new Uint8Array(arrayBuffer);\r\n              //console.log(\"recorder in onloadend\")\r\n              //console.log(parent.recorder)\r\n              if(!parent.localRecordingStop) {\r\n                parent.localRecordingStop = Math.floor(new Date().getTime() / 1000);  \r\n              }\r\n              var resultDict = {\r\n                first: firstChunk,\r\n                uploaded: false,\r\n                recordingStart: parent.localRecordingStart,\r\n                recordingStop: parent.localRecordingStop,\r\n                final: final,\r\n                chunk: base64Data,\r\n                mimeType: options.mimeType\r\n              }\r\n              firstChunk = false;\r\n              //recordingStatus.push(resultDict)\r\n              parent.props.recordingChunkCallback(resultDict)\r\n\r\n              if(!parent.state.isRecording) {\r\n                console.log(\"finalized recording\")\r\n                //parent.downloadLocalRecording()\r\n                //recordingData = [];\r\n                //console.log(recordingData)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      this.recorder.onStop = () => {\r\n        console.log(\"recording stopped\")\r\n        //console.log(\"this recorder in onStop\")\r\n        //console.log(parent.recorder)\r\n        //this.localStream.getTracks().forEach(track => track.stop());\r\n        parent.setState({\"isRecording\": false})\r\n        parent.localRecordingStop = Math.floor(new Date().getTime() / 1000);\r\n      };\r\n\r\n      this.localStream.addEventListener('inactive', () => {\r\n        console.log('Recording inactive');\r\n        this.stopLocalRecording();\r\n      });\r\n      this.setState({\"isRecording\": true})\r\n      this.setState({\"isRecordingUploading\": true})\r\n      this.recorder.start(15000);\r\n      console.log(\"started recording\");\r\n    }\r\n    else {\r\n      console.log(\"No local stream to record!\")\r\n    }\r\n  }\r\n  stopLocalRecording() {\r\n    console.log(\"Stopping local recording\")\r\n    this.setState({\"isRecording\": false})\r\n    try {\r\n      this.recorder.stop();\r\n      //console.log(\"this recorder\")\r\n      //console.log(this.recorder)\r\n    }\r\n    catch(e) {\r\n      console.log(\"Recording already stopped\")\r\n    }\r\n    \r\n    //recordingData = [];\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"vida-webrtc-agent-sip\"></div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nWebRTCClient.propTypes = {\r\n  sipUser: PropTypes.string.isRequired,\r\n  sipDomain: PropTypes.string.isRequired,\r\n  sipServer: PropTypes.string,\r\n  metaData: PropTypes.object,\r\n  sipPassword: PropTypes.string.isRequired,\r\n  video: PropTypes.bool,\r\n  autoRegister: PropTypes.bool,\r\n  autoConnect: PropTypes.bool,\r\n  destination: PropTypes.string.isRequired,\r\n  alertVideoUrl: PropTypes.string,\r\n  ringbackVideoUrl: PropTypes.string,\r\n  autoAnswer: PropTypes.bool,\r\n  hangupCallNow: PropTypes.bool,\r\n  answerCallNow: PropTypes.bool,\r\n  rejectCallNow: PropTypes.bool,\r\n  initiateCallNow: PropTypes.bool,\r\n  reinviteCallNow: PropTypes.bool,\r\n  toggleAudioNow: PropTypes.bool,\r\n  toggleVideoNow: PropTypes.bool,\r\n  toggleScreenshareNow: PropTypes.bool,\r\n  toggleRecordingNow: PropTypes.bool,\r\n  traceSip: PropTypes.bool,\r\n  callLabel: PropTypes.string,\r\n  remoteVideo: PropTypes.string,\r\n  localVideo: PropTypes.string,\r\n  jwtAuth: PropTypes.object,\r\n  onConnected : PropTypes.func,\r\n  onConnecting : PropTypes.func,\r\n  onRinging : PropTypes.func,\r\n  onDisconnected: PropTypes.func,\r\n  onUploadBandwidth: PropTypes.func,\r\n  onDownloadBandwidth: PropTypes.func,\r\n  onHangup : PropTypes.func,\r\n  mediaTested:PropTypes.bool,\r\n  mediaSupported:PropTypes.bool,\r\n  usingHttps: PropTypes.bool\r\n\r\n};\r\n\r\nexport default WebRTCClient;\r\n","H:\\vida-webrtc-widget\\src\\components\\CustomSip.js",["125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375"],"/*!\r\n * \r\n *  SIP version 0.15.11\r\n *  Copyright (c) 2014-2020 Junction Networks, Inc <http://www.onsip.com>\r\n *  Homepage: https://sipjs.com\r\n *  License: https://sipjs.com/license/\r\n * \r\n * \r\n *  ~~~SIP.js contains substantial portions of JsSIP under the following license~~~\r\n *  Homepage: http://jssip.net\r\n *  Copyright (c) 2012-2013 José Luis Millán - Versatica <http://www.versatica.com>\r\n * \r\n *  Permission is hereby granted, free of charge, to any person obtaining\r\n *  a copy of this software and associated documentation files (the\r\n *  \"Software\"), to deal in the Software without restriction, including\r\n *  without limitation the rights to use, copy, modify, merge, publish,\r\n *  distribute, sublicense, and/or sell copies of the Software, and to\r\n *  permit persons to whom the Software is furnished to do so, subject to\r\n *  the following conditions:\r\n * \r\n *  The above copyright notice and this permission notice shall be\r\n *  included in all copies or substantial portions of the Software.\r\n * \r\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n * \r\n *  ~~~ end JsSIP license ~~~\r\n * \r\n * \r\n * \r\n * \r\n */\r\n/* eslint no-undef: \"off\"*/\r\n/* eslint no-unused-expressions: \"off\"*/\r\n(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(typeof exports === 'object' && typeof module === 'object')\r\n\t\tmodule.exports = factory();\r\n\telse if(typeof define === 'function' && define.amd)\r\n\t\tdefine([], factory);\r\n\telse if(typeof exports === 'object')\r\n\t\texports[\"SIP\"] = factory();\r\n\telse\r\n\t\troot[\"SIP\"] = factory();\r\n})(this, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __webpack_require__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar thisModule = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(thisModule.exports, thisModule, thisModule.exports, __webpack_require__);\r\n/******/\r\n/******/ \t\t// Flag the thisModule as loaded\r\n/******/ \t\tthisModule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the thisModule\r\n/******/ \t\treturn thisModule.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__webpack_require__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__webpack_require__.c = installedModules;\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// define __esModule on exports\r\n/******/ \t__webpack_require__.r = function(exports) {\r\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\r\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\r\n/******/ \t\t}\r\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\r\n/******/ \t};\r\n/******/\r\n/******/ \t// create a fake namespace object\r\n/******/ \t// mode & 1: value is a module id, require it\r\n/******/ \t// mode & 2: merge all properties of value into the ns\r\n/******/ \t// mode & 4: return value when already ns object\r\n/******/ \t// mode & 8|1: behave like require\r\n/******/ \t__webpack_require__.t = function(value, mode) {\r\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\r\n/******/ \t\tif(mode & 8) return value;\r\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\r\n/******/ \t\tvar ns = Object.create(null);\r\n/******/ \t\t__webpack_require__.r(ns);\r\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\r\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\r\n/******/ \t\treturn ns;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__webpack_require__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__webpack_require__.p = \"\";\r\n/******/\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar core_1 = __webpack_require__(2);\r\nexports.DigestAuthentication = core_1.DigestAuthentication;\r\nexports.Grammar = core_1.Grammar;\r\nexports.IncomingRequest = core_1.IncomingRequestMessage;\r\nexports.IncomingResponse = core_1.IncomingResponseMessage;\r\nexports.LoggerFactory = core_1.LoggerFactory;\r\nexports.NameAddrHeader = core_1.NameAddrHeader;\r\nexports.OutgoingRequest = core_1.OutgoingRequestMessage;\r\nexports.Parser = core_1.Parser;\r\nexports.Timers = core_1.Timers;\r\nexports.URI = core_1.URI;\r\nvar ClientContext_1 = __webpack_require__(79);\r\nexports.ClientContext = ClientContext_1.ClientContext;\r\nvar Constants_1 = __webpack_require__(80);\r\nexports.C = Constants_1.C;\r\nvar Enums_1 = __webpack_require__(82);\r\nexports.DialogStatus = Enums_1.DialogStatus;\r\nexports.SessionStatus = Enums_1.SessionStatus;\r\nexports.TypeStrings = Enums_1.TypeStrings;\r\nexports.UAStatus = Enums_1.UAStatus;\r\nvar Exceptions_1 = __webpack_require__(84);\r\nexports.Exceptions = Exceptions_1.Exceptions;\r\nvar PublishContext_1 = __webpack_require__(85);\r\nexports.PublishContext = PublishContext_1.PublishContext;\r\nvar ReferContext_1 = __webpack_require__(86);\r\nexports.ReferClientContext = ReferContext_1.ReferClientContext;\r\nexports.ReferServerContext = ReferContext_1.ReferServerContext;\r\nvar RegisterContext_1 = __webpack_require__(88);\r\nexports.RegisterContext = RegisterContext_1.RegisterContext;\r\nvar ServerContext_1 = __webpack_require__(87);\r\nexports.ServerContext = ServerContext_1.ServerContext;\r\nvar Session_1 = __webpack_require__(89);\r\nexports.InviteClientContext = Session_1.InviteClientContext;\r\nexports.InviteServerContext = Session_1.InviteServerContext;\r\nexports.Session = Session_1.Session;\r\nvar Subscription_1 = __webpack_require__(92);\r\nexports.Subscription = Subscription_1.Subscription;\r\nvar Transport_1 = __webpack_require__(93);\r\nexports.Transport = Transport_1.Transport;\r\nvar transactions_1 = __webpack_require__(28);\r\nvar Transactions = {\r\n    InviteClientTransaction: transactions_1.InviteClientTransaction,\r\n    InviteServerTransaction: transactions_1.InviteServerTransaction,\r\n    NonInviteClientTransaction: transactions_1.NonInviteClientTransaction,\r\n    NonInviteServerTransaction: transactions_1.NonInviteServerTransaction\r\n};\r\nexports.Transactions = Transactions;\r\nvar UA_1 = __webpack_require__(94);\r\nexports.makeUserAgentCoreConfigurationFromUA = UA_1.makeUserAgentCoreConfigurationFromUA;\r\nexports.UA = UA_1.UA;\r\nvar Utils_1 = __webpack_require__(83);\r\nexports.Utils = Utils_1.Utils;\r\nvar Web = tslib_1.__importStar(__webpack_require__(113));\r\nexports.Web = Web;\r\nvar version = Constants_1.C.version;\r\nexports.version = version;\r\nvar name = \"sip.js\";\r\nexports.name = name;\r\nvar Core = tslib_1.__importStar(__webpack_require__(2));\r\nexports.Core = Core;\r\n\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\r\n\r\n\"use strict\";\r\n__webpack_require__.r(__webpack_exports__);\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__extends\", function() { return __extends; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__assign\", function() { return __assign; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__rest\", function() { return __rest; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__decorate\", function() { return __decorate; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__param\", function() { return __param; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__metadata\", function() { return __metadata; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__awaiter\", function() { return __awaiter; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__generator\", function() { return __generator; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__exportStar\", function() { return __exportStar; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__values\", function() { return __values; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__read\", function() { return __read; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__spread\", function() { return __spread; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__spreadArrays\", function() { return __spreadArrays; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__await\", function() { return __await; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__asyncGenerator\", function() { return __asyncGenerator; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__asyncDelegator\", function() { return __asyncDelegator; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__asyncValues\", function() { return __asyncValues; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__makeTemplateObject\", function() { return __makeTemplateObject; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__importStar\", function() { return __importStar; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__importDefault\", function() { return __importDefault; });\r\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n/**\r\n * A core library implementing low level SIP protocol elements.\r\n * @packageDocumentation\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\n// Directories\r\ntslib_1.__exportStar(__webpack_require__(3), exports);\r\ntslib_1.__exportStar(__webpack_require__(32), exports);\r\ntslib_1.__exportStar(__webpack_require__(63), exports);\r\ntslib_1.__exportStar(__webpack_require__(5), exports);\r\ntslib_1.__exportStar(__webpack_require__(25), exports);\r\ntslib_1.__exportStar(__webpack_require__(59), exports);\r\ntslib_1.__exportStar(__webpack_require__(28), exports);\r\ntslib_1.__exportStar(__webpack_require__(67), exports);\r\ntslib_1.__exportStar(__webpack_require__(69), exports);\r\n// Files\r\ntslib_1.__exportStar(__webpack_require__(27), exports);\r\n\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\ntslib_1.__exportStar(__webpack_require__(4), exports);\r\ntslib_1.__exportStar(__webpack_require__(24), exports);\r\ntslib_1.__exportStar(__webpack_require__(58), exports);\r\n\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar messages_1 = __webpack_require__(5);\r\n/**\r\n * Dialog.\r\n * @remarks\r\n * A key concept for a user agent is that of a dialog.  A dialog\r\n * represents a peer-to-peer SIP relationship between two user agents\r\n * that persists for some time.  The dialog facilitates sequencing of\r\n * messages between the user agents and proper routing of requests\r\n * between both of them.  The dialog represents a context in which to\r\n * interpret SIP messages.\r\n * https://tools.ietf.org/html/rfc3261#section-12\r\n * @public\r\n */\r\nvar Dialog = /** @class */ (function () {\r\n    /**\r\n     * Dialog constructor.\r\n     * @param core - User agent core.\r\n     * @param dialogState - Initial dialog state.\r\n     */\r\n    function Dialog(core, dialogState) {\r\n        this.core = core;\r\n        this.dialogState = dialogState;\r\n        this.core.dialogs.set(this.id, this);\r\n    }\r\n    /**\r\n     * When a UAC receives a response that establishes a dialog, it\r\n     * constructs the state of the dialog.  This state MUST be maintained\r\n     * for the duration of the dialog.\r\n     * https://tools.ietf.org/html/rfc3261#section-12.1.2\r\n     * @param outgoingRequestMessage - Outgoing request message for dialog.\r\n     * @param incomingResponseMessage - Incoming response message creating dialog.\r\n     */\r\n    Dialog.initialDialogStateForUserAgentClient = function (outgoingRequestMessage, incomingResponseMessage) {\r\n        // If the request was sent over TLS, and the Request-URI contained a\r\n        // SIPS URI, the \"secure\" flag is set to TRUE.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.1.2\r\n        var secure = false; // FIXME: Currently no support for TLS.\r\n        // The route set MUST be set to the list of URIs in the Record-Route\r\n        // header field from the response, taken in reverse order and preserving\r\n        // all URI parameters.  If no Record-Route header field is present in\r\n        // the response, the route set MUST be set to the empty set.  This route\r\n        // set, even if empty, overrides any pre-existing route set for future\r\n        // requests in this dialog.  The remote target MUST be set to the URI\r\n        // from the Contact header field of the response.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.1.2\r\n        var routeSet = incomingResponseMessage.getHeaders(\"record-route\").reverse();\r\n        var contact = incomingResponseMessage.parseHeader(\"contact\");\r\n        if (!contact) { // TODO: Review to make sure this will never happen\r\n            throw new Error(\"Contact undefined.\");\r\n        }\r\n        if (!(contact instanceof messages_1.NameAddrHeader)) {\r\n            throw new Error(\"Contact not instance of NameAddrHeader.\");\r\n        }\r\n        var remoteTarget = contact.uri;\r\n        // The local sequence number MUST be set to the value of the sequence\r\n        // number in the CSeq header field of the request.  The remote sequence\r\n        // number MUST be empty (it is established when the remote UA sends a\r\n        // request within the dialog).  The call identifier component of the\r\n        // dialog ID MUST be set to the value of the Call-ID in the request.\r\n        // The local tag component of the dialog ID MUST be set to the tag in\r\n        // the From field in the request, and the remote tag component of the\r\n        // dialog ID MUST be set to the tag in the To field of the response.  A\r\n        // UAC MUST be prepared to receive a response without a tag in the To\r\n        // field, in which case the tag is considered to have a value of null.\r\n        //\r\n        //    This is to maintain backwards compatibility with RFC 2543, which\r\n        //    did not mandate To tags.\r\n        //\r\n        // https://tools.ietf.org/html/rfc3261#section-12.1.2\r\n        var localSequenceNumber = outgoingRequestMessage.cseq;\r\n        var remoteSequenceNumber = undefined;\r\n        var callId = outgoingRequestMessage.callId;\r\n        var localTag = outgoingRequestMessage.fromTag;\r\n        var remoteTag = incomingResponseMessage.toTag;\r\n        if (!callId) { // TODO: Review to make sure this will never happen\r\n            throw new Error(\"Call id undefined.\");\r\n        }\r\n        if (!localTag) { // TODO: Review to make sure this will never happen\r\n            throw new Error(\"From tag undefined.\");\r\n        }\r\n        if (!remoteTag) { // TODO: Review to make sure this will never happen\r\n            throw new Error(\"To tag undefined.\"); // FIXME: No backwards compatibility with RFC 2543\r\n        }\r\n        // The remote URI MUST be set to the URI in the To field, and the local\r\n        // URI MUST be set to the URI in the From field.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.1.2\r\n        if (!outgoingRequestMessage.from) { // TODO: Review to make sure this will never happen\r\n            throw new Error(\"From undefined.\");\r\n        }\r\n        if (!outgoingRequestMessage.to) { // TODO: Review to make sure this will never happen\r\n            throw new Error(\"To undefined.\");\r\n        }\r\n        var localURI = outgoingRequestMessage.from.uri;\r\n        var remoteURI = outgoingRequestMessage.to.uri;\r\n        // A dialog can also be in the \"early\" state, which occurs when it is\r\n        // created with a provisional response, and then transition to the\r\n        // \"confirmed\" state when a 2xx final response arrives.\r\n        // https://tools.ietf.org/html/rfc3261#section-12\r\n        if (!incomingResponseMessage.statusCode) {\r\n            throw new Error(\"Incoming response status code undefined.\");\r\n        }\r\n        var early = incomingResponseMessage.statusCode < 200 ? true : false;\r\n        var dialogState = {\r\n            id: callId + localTag + remoteTag,\r\n            early: early,\r\n            callId: callId,\r\n            localTag: localTag,\r\n            remoteTag: remoteTag,\r\n            localSequenceNumber: localSequenceNumber,\r\n            remoteSequenceNumber: remoteSequenceNumber,\r\n            localURI: localURI,\r\n            remoteURI: remoteURI,\r\n            remoteTarget: remoteTarget,\r\n            routeSet: routeSet,\r\n            secure: secure\r\n        };\r\n        return dialogState;\r\n    };\r\n    /**\r\n     * The UAS then constructs the state of the dialog.  This state MUST be\r\n     * maintained for the duration of the dialog.\r\n     * https://tools.ietf.org/html/rfc3261#section-12.1.1\r\n     * @param incomingRequestMessage - Incoming request message creating dialog.\r\n     * @param toTag - Tag in the To field in the response to the incoming request.\r\n     */\r\n    Dialog.initialDialogStateForUserAgentServer = function (incomingRequestMessage, toTag, early) {\r\n        if (early === void 0) { early = false; }\r\n        // If the request arrived over TLS, and the Request-URI contained a SIPS\r\n        // URI, the \"secure\" flag is set to TRUE.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.1.1\r\n        var secure = false; // FIXME: Currently no support for TLS.\r\n        // The route set MUST be set to the list of URIs in the Record-Route\r\n        // header field from the request, taken in order and preserving all URI\r\n        // parameters.  If no Record-Route header field is present in the\r\n        // request, the route set MUST be set to the empty set.  This route set,\r\n        // even if empty, overrides any pre-existing route set for future\r\n        // requests in this dialog.  The remote target MUST be set to the URI\r\n        // from the Contact header field of the request.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.1.1\r\n        var routeSet = incomingRequestMessage.getHeaders(\"record-route\");\r\n        var contact = incomingRequestMessage.parseHeader(\"contact\");\r\n        if (!contact) { // TODO: Review to make sure this will never happen\r\n            throw new Error(\"Contact undefined.\");\r\n        }\r\n        if (!(contact instanceof messages_1.NameAddrHeader)) {\r\n            throw new Error(\"Contact not instance of NameAddrHeader.\");\r\n        }\r\n        var remoteTarget = contact.uri;\r\n        // The remote sequence number MUST be set to the value of the sequence\r\n        // number in the CSeq header field of the request.  The local sequence\r\n        // number MUST be empty.  The call identifier component of the dialog ID\r\n        // MUST be set to the value of the Call-ID in the request.  The local\r\n        // tag component of the dialog ID MUST be set to the tag in the To field\r\n        // in the response to the request (which always includes a tag), and the\r\n        // remote tag component of the dialog ID MUST be set to the tag from the\r\n        // From field in the request.  A UAS MUST be prepared to receive a\r\n        // request without a tag in the From field, in which case the tag is\r\n        // considered to have a value of null.\r\n        //\r\n        //    This is to maintain backwards compatibility with RFC 2543, which\r\n        //    did not mandate From tags.\r\n        //\r\n        // https://tools.ietf.org/html/rfc3261#section-12.1.1\r\n        var remoteSequenceNumber = incomingRequestMessage.cseq;\r\n        var localSequenceNumber = undefined;\r\n        var callId = incomingRequestMessage.callId;\r\n        var localTag = toTag;\r\n        var remoteTag = incomingRequestMessage.fromTag;\r\n        // The remote URI MUST be set to the URI in the From field, and the\r\n        // local URI MUST be set to the URI in the To field.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.1.1\r\n        var remoteURI = incomingRequestMessage.from.uri;\r\n        var localURI = incomingRequestMessage.to.uri;\r\n        var dialogState = {\r\n            id: callId + localTag + remoteTag,\r\n            early: early,\r\n            callId: callId,\r\n            localTag: localTag,\r\n            remoteTag: remoteTag,\r\n            localSequenceNumber: localSequenceNumber,\r\n            remoteSequenceNumber: remoteSequenceNumber,\r\n            localURI: localURI,\r\n            remoteURI: remoteURI,\r\n            remoteTarget: remoteTarget,\r\n            routeSet: routeSet,\r\n            secure: secure\r\n        };\r\n        return dialogState;\r\n    };\r\n    /** Destructor. */\r\n    Dialog.prototype.dispose = function () {\r\n        this.core.dialogs.delete(this.id);\r\n    };\r\n    Object.defineProperty(Dialog.prototype, \"id\", {\r\n        /**\r\n         * A dialog is identified at each UA with a dialog ID, which consists of\r\n         * a Call-ID value, a local tag and a remote tag.  The dialog ID at each\r\n         * UA involved in the dialog is not the same.  Specifically, the local\r\n         * tag at one UA is identical to the remote tag at the peer UA.  The\r\n         * tags are opaque tokens that facilitate the generation of unique\r\n         * dialog IDs.\r\n         * https://tools.ietf.org/html/rfc3261#section-12\r\n         */\r\n        get: function () {\r\n            return this.dialogState.id;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Dialog.prototype, \"early\", {\r\n        /**\r\n         * A dialog can also be in the \"early\" state, which occurs when it is\r\n         * created with a provisional response, and then it transition to the\r\n         * \"confirmed\" state when a 2xx final response received or is sent.\r\n         *\r\n         * Note: RFC 3261 is concise on when a dialog is \"confirmed\", but it\r\n         * can be a point of confusion if an INVITE dialog is \"confirmed\" after\r\n         * a 2xx is sent or after receiving the ACK for the 2xx response.\r\n         * With careful reading it can be inferred a dialog is always is\r\n         * \"confirmed\" when the 2xx is sent (regardless of type of dialog).\r\n         * However a INVITE dialog does have additional considerations\r\n         * when it is confirmed but an ACK has not yet been received (in\r\n         * particular with regard to a callee sending BYE requests).\r\n         */\r\n        get: function () {\r\n            return this.dialogState.early;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Dialog.prototype, \"callId\", {\r\n        /** Call identifier component of the dialog id. */\r\n        get: function () {\r\n            return this.dialogState.callId;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Dialog.prototype, \"localTag\", {\r\n        /** Local tag component of the dialog id. */\r\n        get: function () {\r\n            return this.dialogState.localTag;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Dialog.prototype, \"remoteTag\", {\r\n        /** Remote tag component of the dialog id. */\r\n        get: function () {\r\n            return this.dialogState.remoteTag;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Dialog.prototype, \"localSequenceNumber\", {\r\n        /** Local sequence number (used to order requests from the UA to its peer). */\r\n        get: function () {\r\n            return this.dialogState.localSequenceNumber;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Dialog.prototype, \"remoteSequenceNumber\", {\r\n        /** Remote sequence number (used to order requests from its peer to the UA). */\r\n        get: function () {\r\n            return this.dialogState.remoteSequenceNumber;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Dialog.prototype, \"localURI\", {\r\n        /** Local URI. */\r\n        get: function () {\r\n            return this.dialogState.localURI;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Dialog.prototype, \"remoteURI\", {\r\n        /** Remote URI. */\r\n        get: function () {\r\n            return this.dialogState.remoteURI;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Dialog.prototype, \"remoteTarget\", {\r\n        /** Remote target. */\r\n        get: function () {\r\n            return this.dialogState.remoteTarget;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Dialog.prototype, \"routeSet\", {\r\n        /**\r\n         * Route set, which is an ordered list of URIs. The route set is the\r\n         * list of servers that need to be traversed to send a request to the peer.\r\n         */\r\n        get: function () {\r\n            return this.dialogState.routeSet;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Dialog.prototype, \"secure\", {\r\n        /**\r\n         * If the request was sent over TLS, and the Request-URI contained\r\n         * a SIPS URI, the \"secure\" flag is set to true. *NOT IMPLEMENTED*\r\n         */\r\n        get: function () {\r\n            return this.dialogState.secure;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Dialog.prototype, \"userAgentCore\", {\r\n        /** The user agent core servicing this dialog. */\r\n        get: function () {\r\n            return this.core;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** Confirm the dialog. Only matters if dialog is currently early. */\r\n    Dialog.prototype.confirm = function () {\r\n        this.dialogState.early = false;\r\n    };\r\n    /**\r\n     * Requests sent within a dialog, as any other requests, are atomic.  If\r\n     * a particular request is accepted by the UAS, all the state changes\r\n     * associated with it are performed.  If the request is rejected, none\r\n     * of the state changes are performed.\r\n     *\r\n     *    Note that some requests, such as INVITEs, affect several pieces of\r\n     *    state.\r\n     *\r\n     * https://tools.ietf.org/html/rfc3261#section-12.2.2\r\n     * @param message - Incoming request message within this dialog.\r\n     */\r\n    Dialog.prototype.receiveRequest = function (message) {\r\n        // ACK guard.\r\n        // By convention, the handling of ACKs is the responsibility\r\n        // the particular dialog implementation. For example, see SessionDialog.\r\n        // Furthermore, ACKs have same sequence number as the associated INVITE.\r\n        if (message.method === messages_1.C.ACK) {\r\n            return;\r\n        }\r\n        // If the remote sequence number was not empty, but the sequence number\r\n        // of the request is lower than the remote sequence number, the request\r\n        // is out of order and MUST be rejected with a 500 (Server Internal\r\n        // Error) response.  If the remote sequence number was not empty, and\r\n        // the sequence number of the request is greater than the remote\r\n        // sequence number, the request is in order.  It is possible for the\r\n        // CSeq sequence number to be higher than the remote sequence number by\r\n        // more than one.  This is not an error condition, and a UAS SHOULD be\r\n        // prepared to receive and process requests with CSeq values more than\r\n        // one higher than the previous received request.  The UAS MUST then set\r\n        // the remote sequence number to the value of the sequence number in the\r\n        // CSeq header field value in the request.\r\n        //\r\n        //    If a proxy challenges a request generated by the UAC, the UAC has\r\n        //    to resubmit the request with credentials.  The resubmitted request\r\n        //    will have a new CSeq number.  The UAS will never see the first\r\n        //    request, and thus, it will notice a gap in the CSeq number space.\r\n        //    Such a gap does not represent any error condition.\r\n        //\r\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\r\n        if (this.remoteSequenceNumber) {\r\n            if (message.cseq <= this.remoteSequenceNumber) {\r\n                throw new Error(\"Out of sequence in dialog request. Did you forget to call sequenceGuard()?\");\r\n            }\r\n            this.dialogState.remoteSequenceNumber = message.cseq;\r\n        }\r\n        // If the remote sequence number is empty, it MUST be set to the value\r\n        // of the sequence number in the CSeq header field value in the request.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\r\n        if (!this.remoteSequenceNumber) {\r\n            this.dialogState.remoteSequenceNumber = message.cseq;\r\n        }\r\n        // When a UAS receives a target refresh request, it MUST replace the\r\n        // dialog's remote target URI with the URI from the Contact header field\r\n        // in that request, if present.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\r\n        // Note: \"target refresh request\" processing delegated to sub-class.\r\n    };\r\n    /**\r\n     * If the dialog identifier in the 2xx response matches the dialog\r\n     * identifier of an existing dialog, the dialog MUST be transitioned to\r\n     * the \"confirmed\" state, and the route set for the dialog MUST be\r\n     * recomputed based on the 2xx response using the procedures of Section\r\n     * 12.2.1.2.  Otherwise, a new dialog in the \"confirmed\" state MUST be\r\n     * constructed using the procedures of Section 12.1.2.\r\n     *\r\n     * Note that the only piece of state that is recomputed is the route\r\n     * set.  Other pieces of state such as the highest sequence numbers\r\n     * (remote and local) sent within the dialog are not recomputed.  The\r\n     * route set only is recomputed for backwards compatibility.  RFC\r\n     * 2543 did not mandate mirroring of the Record-Route header field in\r\n     * a 1xx, only 2xx.  However, we cannot update the entire state of\r\n     * the dialog, since mid-dialog requests may have been sent within\r\n     * the early dialog, modifying the sequence numbers, for example.\r\n     *\r\n     *  https://tools.ietf.org/html/rfc3261#section-13.2.2.4\r\n     */\r\n    Dialog.prototype.recomputeRouteSet = function (message) {\r\n        this.dialogState.routeSet = message.getHeaders(\"record-route\").reverse();\r\n    };\r\n    /**\r\n     * A request within a dialog is constructed by using many of the\r\n     * components of the state stored as part of the dialog.\r\n     * https://tools.ietf.org/html/rfc3261#section-12.2.1.1\r\n     * @param method - Outgoing request method.\r\n     */\r\n    Dialog.prototype.createOutgoingRequestMessage = function (method, options) {\r\n        // The URI in the To field of the request MUST be set to the remote URI\r\n        // from the dialog state.  The tag in the To header field of the request\r\n        // MUST be set to the remote tag of the dialog ID.  The From URI of the\r\n        // request MUST be set to the local URI from the dialog state.  The tag\r\n        // in the From header field of the request MUST be set to the local tag\r\n        // of the dialog ID.  If the value of the remote or local tags is null,\r\n        // the tag parameter MUST be omitted from the To or From header fields,\r\n        // respectively.\r\n        //\r\n        //    Usage of the URI from the To and From fields in the original\r\n        //    request within subsequent requests is done for backwards\r\n        //    compatibility with RFC 2543, which used the URI for dialog\r\n        //    identification.  In this specification, only the tags are used for\r\n        //    dialog identification.  It is expected that mandatory reflection\r\n        //    of the original To and From URI in mid-dialog requests will be\r\n        //    deprecated in a subsequent revision of this specification.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.2.1.1\r\n        var toUri = this.remoteURI;\r\n        var toTag = this.remoteTag;\r\n        var fromUri = this.localURI;\r\n        var fromTag = this.localTag;\r\n        // The Call-ID of the request MUST be set to the Call-ID of the dialog.\r\n        // Requests within a dialog MUST contain strictly monotonically\r\n        // increasing and contiguous CSeq sequence numbers (increasing-by-one)\r\n        // in each direction (excepting ACK and CANCEL of course, whose numbers\r\n        // equal the requests being acknowledged or cancelled).  Therefore, if\r\n        // the local sequence number is not empty, the value of the local\r\n        // sequence number MUST be incremented by one, and this value MUST be\r\n        // placed into the CSeq header field.  If the local sequence number is\r\n        // empty, an initial value MUST be chosen using the guidelines of\r\n        // Section 8.1.1.5.  The method field in the CSeq header field value\r\n        // MUST match the method of the request.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.2.1.1\r\n        var callId = this.callId;\r\n        var cseq;\r\n        if (options && options.cseq) {\r\n            cseq = options.cseq;\r\n        }\r\n        else if (!this.dialogState.localSequenceNumber) {\r\n            cseq = this.dialogState.localSequenceNumber = 1; // https://tools.ietf.org/html/rfc3261#section-8.1.1.5\r\n        }\r\n        else {\r\n            cseq = this.dialogState.localSequenceNumber += 1;\r\n        }\r\n        // The UAC uses the remote target and route set to build the Request-URI\r\n        // and Route header field of the request.\r\n        //\r\n        // If the route set is empty, the UAC MUST place the remote target URI\r\n        // into the Request-URI.  The UAC MUST NOT add a Route header field to\r\n        // the request.\r\n        //\r\n        // If the route set is not empty, and the first URI in the route set\r\n        // contains the lr parameter (see Section 19.1.1), the UAC MUST place\r\n        // the remote target URI into the Request-URI and MUST include a Route\r\n        // header field containing the route set values in order, including all\r\n        // parameters.\r\n        //\r\n        // If the route set is not empty, and its first URI does not contain the\r\n        // lr parameter, the UAC MUST place the first URI from the route set\r\n        // into the Request-URI, stripping any parameters that are not allowed\r\n        // in a Request-URI.  The UAC MUST add a Route header field containing\r\n        // the remainder of the route set values in order, including all\r\n        // parameters.  The UAC MUST then place the remote target URI into the\r\n        // Route header field as the last value.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.2.1.1\r\n        // The lr parameter, when present, indicates that the element\r\n        // responsible for this resource implements the routing mechanisms\r\n        // specified in this document.  This parameter will be used in the\r\n        // URIs proxies place into Record-Route header field values, and\r\n        // may appear in the URIs in a pre-existing route set.\r\n        //\r\n        // This parameter is used to achieve backwards compatibility with\r\n        // systems implementing the strict-routing mechanisms of RFC 2543\r\n        // and the rfc2543bis drafts up to bis-05.  An element preparing\r\n        // to send a request based on a URI not containing this parameter\r\n        // can assume the receiving element implements strict-routing and\r\n        // reformat the message to preserve the information in the\r\n        // Request-URI.\r\n        // https://tools.ietf.org/html/rfc3261#section-19.1.1\r\n        // NOTE: Not backwards compatible with RFC 2543 (no support for strict-routing).\r\n        var ruri = this.remoteTarget;\r\n        var routeSet = this.routeSet;\r\n        var extraHeaders = options && options.extraHeaders;\r\n        var body = options && options.body;\r\n        // The relative order of header fields with different field names is not\r\n        // significant.  However, it is RECOMMENDED that header fields which are\r\n        // needed for proxy processing (Via, Route, Record-Route, Proxy-Require,\r\n        // Max-Forwards, and Proxy-Authorization, for example) appear towards\r\n        // the top of the message to facilitate rapid parsing.\r\n        // https://tools.ietf.org/html/rfc3261#section-7.3.1\r\n        var message = this.userAgentCore.makeOutgoingRequestMessage(method, ruri, fromUri, toUri, {\r\n            callId: callId,\r\n            cseq: cseq,\r\n            fromTag: fromTag,\r\n            toTag: toTag,\r\n            routeSet: routeSet\r\n        }, extraHeaders, body);\r\n        return message;\r\n    };\r\n    /**\r\n     * Increment the local sequence number by one.\r\n     * It feels like this should be protected, but the current authentication handling currently\r\n     * needs this to keep the dialog in sync when \"auto re-sends\" request messages.\r\n     * @internal\r\n     */\r\n    Dialog.prototype.incrementLocalSequenceNumber = function () {\r\n        if (!this.dialogState.localSequenceNumber) {\r\n            throw new Error(\"Local sequence number undefined.\");\r\n        }\r\n        this.dialogState.localSequenceNumber += 1;\r\n    };\r\n    /**\r\n     * If the remote sequence number was not empty, but the sequence number\r\n     * of the request is lower than the remote sequence number, the request\r\n     * is out of order and MUST be rejected with a 500 (Server Internal\r\n     * Error) response.\r\n     * https://tools.ietf.org/html/rfc3261#section-12.2.2\r\n     * @param request - Incoming request to guard.\r\n     * @returns True if the program execution is to continue in the branch in question.\r\n     *          Otherwise a 500 Server Internal Error was stateless sent and request processing must stop.\r\n     */\r\n    Dialog.prototype.sequenceGuard = function (message) {\r\n        // ACK guard.\r\n        // By convention, handling of unexpected ACKs is responsibility\r\n        // the particular dialog implementation. For example, see SessionDialog.\r\n        // Furthermore, we cannot reply to an \"out of sequence\" ACK.\r\n        if (message.method === messages_1.C.ACK) {\r\n            return true;\r\n        }\r\n        // Note: We are rejecting on \"less than or equal to\" the remote\r\n        // sequence number (excepting ACK whose numbers equal the requests\r\n        // being acknowledged or cancelled), which is the correct thing to\r\n        // do in our case. The only time a request with the same sequence number\r\n        // will show up here if is a) it is a very late retransmission of a\r\n        // request we already handled or b) it is a different request with the\r\n        // same sequence number which would be violation of the standard.\r\n        // Request retransmissions are absorbed by the transaction layer,\r\n        // so any request with a duplicate sequence number getting here\r\n        // would have to be a retransmission after the transaction terminated\r\n        // or a broken request (with unique via branch value).\r\n        // Requests within a dialog MUST contain strictly monotonically\r\n        // increasing and contiguous CSeq sequence numbers (increasing-by-one)\r\n        // in each direction (excepting ACK and CANCEL of course, whose numbers\r\n        // equal the requests being acknowledged or cancelled).  Therefore, if\r\n        // the local sequence number is not empty, the value of the local\r\n        // sequence number MUST be incremented by one, and this value MUST be\r\n        // placed into the CSeq header field.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.2.1.1\r\n        if (this.remoteSequenceNumber && message.cseq <= this.remoteSequenceNumber) {\r\n            this.core.replyStateless(message, { statusCode: 500 });\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    return Dialog;\r\n}());\r\nexports.Dialog = Dialog;\r\n\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\n// Directories\r\ntslib_1.__exportStar(__webpack_require__(6), exports);\r\n// Files\r\ntslib_1.__exportStar(__webpack_require__(8), exports);\r\ntslib_1.__exportStar(__webpack_require__(19), exports);\r\ntslib_1.__exportStar(__webpack_require__(11), exports);\r\ntslib_1.__exportStar(__webpack_require__(10), exports);\r\ntslib_1.__exportStar(__webpack_require__(9), exports);\r\ntslib_1.__exportStar(__webpack_require__(17), exports);\r\ntslib_1.__exportStar(__webpack_require__(13), exports);\r\ntslib_1.__exportStar(__webpack_require__(18), exports);\r\ntslib_1.__exportStar(__webpack_require__(22), exports);\r\ntslib_1.__exportStar(__webpack_require__(14), exports);\r\ntslib_1.__exportStar(__webpack_require__(23), exports);\r\ntslib_1.__exportStar(__webpack_require__(15), exports);\r\n\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\ntslib_1.__exportStar(__webpack_require__(7), exports);\r\n\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * SIP Methods\r\n * @internal\r\n */\r\nvar C;\r\n(function (C) {\r\n    C.ACK = \"ACK\";\r\n    C.BYE = \"BYE\";\r\n    C.CANCEL = \"CANCEL\";\r\n    C.INFO = \"INFO\";\r\n    C.INVITE = \"INVITE\";\r\n    C.MESSAGE = \"MESSAGE\";\r\n    C.NOTIFY = \"NOTIFY\";\r\n    C.OPTIONS = \"OPTIONS\";\r\n    C.REGISTER = \"REGISTER\";\r\n    C.UPDATE = \"UPDATE\";\r\n    C.SUBSCRIBE = \"SUBSCRIBE\";\r\n    C.PUBLISH = \"PUBLISH\";\r\n    C.REFER = \"REFER\";\r\n    C.PRACK = \"PRACK\";\r\n})(C = exports.C || (exports.C = {}));\r\n\r\n\r\n/***/ }),\r\n/* 8 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar incoming_request_message_1 = __webpack_require__(9);\r\nvar incoming_response_message_1 = __webpack_require__(17);\r\nvar outgoing_request_message_1 = __webpack_require__(18);\r\n/**\r\n * Create a Body given a legacy body type.\r\n * @param bodyLegacy - Body Object\r\n * @internal\r\n */\r\nfunction fromBodyLegacy(bodyLegacy) {\r\n    var content = (typeof bodyLegacy === \"string\") ? bodyLegacy : bodyLegacy.body;\r\n    var contentType = (typeof bodyLegacy === \"string\") ? \"application/sdp\" : bodyLegacy.contentType;\r\n    var contentDisposition = contentTypeToContentDisposition(contentType);\r\n    var body = { contentDisposition: contentDisposition, contentType: contentType, content: content };\r\n    return body;\r\n}\r\nexports.fromBodyLegacy = fromBodyLegacy;\r\n/**\r\n * Given a message, get a normalized body.\r\n * The content disposition is inferred if not set.\r\n * @param message - The message.\r\n * @internal\r\n */\r\nfunction getBody(message) {\r\n    var contentDisposition;\r\n    var contentType;\r\n    var content;\r\n    // We're in UAS role, receiving incoming request\r\n    if (message instanceof incoming_request_message_1.IncomingRequestMessage) {\r\n        if (message.body) {\r\n            // FIXME: Parsing needs typing\r\n            var parse = message.parseHeader(\"Content-Disposition\");\r\n            contentDisposition = parse ? parse.type : undefined;\r\n            contentType = message.parseHeader(\"Content-Type\");\r\n            content = message.body;\r\n        }\r\n    }\r\n    // We're in UAC role, receiving incoming response\r\n    if (message instanceof incoming_response_message_1.IncomingResponseMessage) {\r\n        if (message.body) {\r\n            // FIXME: Parsing needs typing\r\n            var parse = message.parseHeader(\"Content-Disposition\");\r\n            contentDisposition = parse ? parse.type : undefined;\r\n            contentType = message.parseHeader(\"Content-Type\");\r\n            content = message.body;\r\n        }\r\n    }\r\n    // We're in UAC role, sending outgoing request\r\n    if (message instanceof outgoing_request_message_1.OutgoingRequestMessage) {\r\n        if (message.body) {\r\n            contentDisposition = message.getHeader(\"Content-Disposition\");\r\n            contentType = message.getHeader(\"Content-Type\");\r\n            if (typeof message.body === \"string\") {\r\n                // FIXME: OutgoingRequest should not allow a \"string\" body without a \"Content-Type\" header.\r\n                if (!contentType) {\r\n                    throw new Error(\"Header content type header does not equal body content type.\");\r\n                }\r\n                content = message.body;\r\n            }\r\n            else {\r\n                // FIXME: OutgoingRequest should not allow the \"Content-Type\" header not to match th body content type\r\n                if (contentType && contentType !== message.body.contentType) {\r\n                    throw new Error(\"Header content type header does not equal body content type.\");\r\n                }\r\n                contentType = message.body.contentType;\r\n                content = message.body.body;\r\n            }\r\n        }\r\n    }\r\n    // We're in UAS role, sending outgoing response\r\n    if (isBody(message)) {\r\n        contentDisposition = message.contentDisposition;\r\n        contentType = message.contentType;\r\n        content = message.content;\r\n    }\r\n    // No content, no body.\r\n    if (!content) {\r\n        return undefined;\r\n    }\r\n    if (contentType && !contentDisposition) {\r\n        contentDisposition = contentTypeToContentDisposition(contentType);\r\n    }\r\n    if (!contentDisposition) {\r\n        throw new Error(\"Content disposition undefined.\");\r\n    }\r\n    if (!contentType) {\r\n        throw new Error(\"Content type undefined.\");\r\n    }\r\n    return {\r\n        contentDisposition: contentDisposition,\r\n        contentType: contentType,\r\n        content: content\r\n    };\r\n}\r\nexports.getBody = getBody;\r\n/**\r\n * User-Defined Type Guard for Body.\r\n * @param body - Body to check.\r\n * @internal\r\n */\r\nfunction isBody(body) {\r\n    return body &&\r\n        typeof body.content === \"string\" &&\r\n        typeof body.contentType === \"string\" &&\r\n        body.contentDisposition === undefined ? true : typeof body.contentDisposition === \"string\";\r\n}\r\nexports.isBody = isBody;\r\n// If the Content-Disposition header field is missing, bodies of\r\n// Content-Type application/sdp imply the disposition \"session\", while\r\n// other content types imply \"render\".\r\n// https://tools.ietf.org/html/rfc3261#section-13.2.1\r\nfunction contentTypeToContentDisposition(contentType) {\r\n    if (contentType === \"application/sdp\") {\r\n        return \"session\";\r\n    }\r\n    else {\r\n        return \"render\";\r\n    }\r\n}\r\n\r\n\r\n/***/ }),\r\n/* 9 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar incoming_message_1 = __webpack_require__(10);\r\n/**\r\n * Incoming request message.\r\n * @public\r\n */\r\nvar IncomingRequestMessage = /** @class */ (function (_super) {\r\n    tslib_1.__extends(IncomingRequestMessage, _super);\r\n    function IncomingRequestMessage() {\r\n        return _super.call(this) || this;\r\n    }\r\n    return IncomingRequestMessage;\r\n}(incoming_message_1.IncomingMessage));\r\nexports.IncomingRequestMessage = IncomingRequestMessage;\r\n\r\n\r\n/***/ }),\r\n/* 10 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar grammar_1 = __webpack_require__(11);\r\nvar utils_1 = __webpack_require__(16);\r\n/**\r\n * Incoming message.\r\n * @public\r\n */\r\nvar IncomingMessage = /** @class */ (function () {\r\n    function IncomingMessage() {\r\n        this.headers = {};\r\n    }\r\n    /**\r\n     * Insert a header of the given name and value into the last position of the\r\n     * header array.\r\n     * @param name - header name\r\n     * @param value - header value\r\n     */\r\n    IncomingMessage.prototype.addHeader = function (name, value) {\r\n        var header = { raw: value };\r\n        name = utils_1.headerize(name);\r\n        if (this.headers[name]) {\r\n            this.headers[name].push(header);\r\n        }\r\n        else {\r\n            this.headers[name] = [header];\r\n        }\r\n    };\r\n    /**\r\n     * Get the value of the given header name at the given position.\r\n     * @param name - header name\r\n     * @returns Returns the specified header, undefined if header doesn't exist.\r\n     */\r\n    IncomingMessage.prototype.getHeader = function (name) {\r\n        var header = this.headers[utils_1.headerize(name)];\r\n        if (header) {\r\n            if (header[0]) {\r\n                return header[0].raw;\r\n            }\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    };\r\n    /**\r\n     * Get the header/s of the given name.\r\n     * @param name - header name\r\n     * @returns Array - with all the headers of the specified name.\r\n     */\r\n    IncomingMessage.prototype.getHeaders = function (name) {\r\n        var header = this.headers[utils_1.headerize(name)];\r\n        var result = [];\r\n        if (!header) {\r\n            return [];\r\n        }\r\n        for (var _i = 0, header_1 = header; _i < header_1.length; _i++) {\r\n            var headerPart = header_1[_i];\r\n            result.push(headerPart.raw);\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Verify the existence of the given header.\r\n     * @param name - header name\r\n     * @returns true if header with given name exists, false otherwise\r\n     */\r\n    IncomingMessage.prototype.hasHeader = function (name) {\r\n        return !!this.headers[utils_1.headerize(name)];\r\n    };\r\n    /**\r\n     * Parse the given header on the given index.\r\n     * @param name - header name\r\n     * @param idx - header index\r\n     * @returns Parsed header object, undefined if the\r\n     *   header is not present or in case of a parsing error.\r\n     */\r\n    IncomingMessage.prototype.parseHeader = function (name, idx) {\r\n        if (idx === void 0) { idx = 0; }\r\n        name = utils_1.headerize(name);\r\n        if (!this.headers[name]) {\r\n            // this.logger.log(\"header '\" + name + \"' not present\");\r\n            return;\r\n        }\r\n        else if (idx >= this.headers[name].length) {\r\n            // this.logger.log(\"not so many '\" + name + \"' headers present\");\r\n            return;\r\n        }\r\n        var header = this.headers[name][idx];\r\n        var value = header.raw;\r\n        if (header.parsed) {\r\n            return header.parsed;\r\n        }\r\n        // substitute '-' by '_' for grammar rule matching.\r\n        var parsed = grammar_1.Grammar.parse(value, name.replace(/-/g, \"_\"));\r\n        if (parsed === -1) {\r\n            this.headers[name].splice(idx, 1); // delete from headers\r\n            // this.logger.warn('error parsing \"' + name + '\" header field with value \"' + value + '\"');\r\n            return;\r\n        }\r\n        else {\r\n            header.parsed = parsed;\r\n            return parsed;\r\n        }\r\n    };\r\n    /**\r\n     * Message Header attribute selector. Alias of parseHeader.\r\n     * @param name - header name\r\n     * @param idx - header index\r\n     * @returns Parsed header object, undefined if the\r\n     *   header is not present or in case of a parsing error.\r\n     *\r\n     * @example\r\n     * message.s('via',3).port\r\n     */\r\n    IncomingMessage.prototype.s = function (name, idx) {\r\n        if (idx === void 0) { idx = 0; }\r\n        return this.parseHeader(name, idx);\r\n    };\r\n    /**\r\n     * Replace the value of the given header by the value.\r\n     * @param name - header name\r\n     * @param value - header value\r\n     */\r\n    IncomingMessage.prototype.setHeader = function (name, value) {\r\n        this.headers[utils_1.headerize(name)] = [{ raw: value }];\r\n    };\r\n    IncomingMessage.prototype.toString = function () {\r\n        return this.data;\r\n    };\r\n    return IncomingMessage;\r\n}());\r\nexports.IncomingMessage = IncomingMessage;\r\n\r\n\r\n/***/ }),\r\n/* 11 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar pegGrammar = tslib_1.__importStar(__webpack_require__(12));\r\n/**\r\n * Grammar.\r\n * @internal\r\n */\r\nvar Grammar;\r\n(function (Grammar) {\r\n    /**\r\n     * Parse.\r\n     * @param input -\r\n     * @param startRule -\r\n     */\r\n    function parse(input, startRule) {\r\n        var options = { startRule: startRule };\r\n        try {\r\n            pegGrammar.parse(input, options);\r\n        }\r\n        catch (e) {\r\n            options.data = -1;\r\n        }\r\n        return options.data;\r\n    }\r\n    Grammar.parse = parse;\r\n    /**\r\n     * Parse the given string and returns a SIP.NameAddrHeader instance or undefined if\r\n     * it is an invalid NameAddrHeader.\r\n     * @param name_addr_header -\r\n     */\r\n    function nameAddrHeaderParse(nameAddrHeader) {\r\n        var parsedNameAddrHeader = Grammar.parse(nameAddrHeader, \"Name_Addr_Header\");\r\n        return parsedNameAddrHeader !== -1 ? parsedNameAddrHeader : undefined;\r\n    }\r\n    Grammar.nameAddrHeaderParse = nameAddrHeaderParse;\r\n    /**\r\n     * Parse the given string and returns a SIP.URI instance or undefined if\r\n     * it is an invalid URI.\r\n     * @param uri -\r\n     */\r\n    function URIParse(uri) {\r\n        var parsedUri = Grammar.parse(uri, \"SIP_URI\");\r\n        return parsedUri !== -1 ? parsedUri : undefined;\r\n    }\r\n    Grammar.URIParse = URIParse;\r\n})(Grammar = exports.Grammar || (exports.Grammar = {}));\r\n\r\n\r\n/***/ }),\r\n/* 12 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n// tslint:disable:interface-name\r\n// tslint:disable: trailing-comma\r\n// tslint:disable: object-literal-sort-keys\r\n// tslint:disable: max-line-length\r\n// tslint:disable: only-arrow-functions\r\n// tslint:disable: one-variable-per-declaration\r\n// tslint:disable: no-consecutive-blank-lines\r\n// tslint:disable: align\r\n// tslint:disable: radix\r\n// tslint:disable: quotemark\r\n// tslint:disable: semicolon\r\n// tslint:disable: object-literal-shorthand\r\n// tslint:disable: variable-name\r\n// tslint:disable: no-var-keyword\r\n// tslint:disable: whitespace\r\n// tslint:disable: curly\r\n// tslint:disable: prefer-const\r\n// tslint:disable: object-literal-key-quotes\r\n// tslint:disable: no-string-literal\r\n// tslint:disable: one-line\r\n// tslint:disable: no-unused-expression\r\n// tslint:disable: space-before-function-paren\r\n// tslint:disable: arrow-return-shorthand\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\n// Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.2.6 )\r\n//\r\n// https://pegjs.org/   https://github.com/metadevpro/ts-pegjs\r\nvar name_addr_header_1 = __webpack_require__(13);\r\nvar uri_1 = __webpack_require__(15);\r\nvar SyntaxError = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SyntaxError, _super);\r\n    function SyntaxError(message, expected, found, location) {\r\n        var _this = _super.call(this) || this;\r\n        _this.message = message;\r\n        _this.expected = expected;\r\n        _this.found = found;\r\n        _this.location = location;\r\n        _this.name = \"SyntaxError\";\r\n        if (typeof Error.captureStackTrace === \"function\") {\r\n            Error.captureStackTrace(_this, SyntaxError);\r\n        }\r\n        return _this;\r\n    }\r\n    SyntaxError.buildMessage = function (expected, found) {\r\n        function hex(ch) {\r\n            return ch.charCodeAt(0).toString(16).toUpperCase();\r\n        }\r\n        function literalEscape(s) {\r\n            return s\r\n                .replace(/\\\\/g, \"\\\\\\\\\")\r\n                .replace(/\"/g, \"\\\\\\\"\")\r\n                .replace(/\\0/g, \"\\\\0\")\r\n                .replace(/\\t/g, \"\\\\t\")\r\n                .replace(/\\n/g, \"\\\\n\")\r\n                .replace(/\\r/g, \"\\\\r\")\r\n                .replace(/[\\x00-\\x0F]/g, function (ch) { return \"\\\\x0\" + hex(ch); })\r\n                .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return \"\\\\x\" + hex(ch); });\r\n        }\r\n        function classEscape(s) {\r\n            return s\r\n                .replace(/\\\\/g, \"\\\\\\\\\")\r\n                .replace(/\\]/g, \"\\\\]\")\r\n                .replace(/\\^/g, \"\\\\^\")\r\n                .replace(/-/g, \"\\\\-\")\r\n                .replace(/\\0/g, \"\\\\0\")\r\n                .replace(/\\t/g, \"\\\\t\")\r\n                .replace(/\\n/g, \"\\\\n\")\r\n                .replace(/\\r/g, \"\\\\r\")\r\n                .replace(/[\\x00-\\x0F]/g, function (ch) { return \"\\\\x0\" + hex(ch); })\r\n                .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return \"\\\\x\" + hex(ch); });\r\n        }\r\n        function describeExpectation(expectation) {\r\n            switch (expectation.type) {\r\n                case \"literal\":\r\n                    return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\r\n                case \"class\":\r\n                    var escapedParts = expectation.parts.map(function (part) {\r\n                        return Array.isArray(part)\r\n                            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\r\n                            : classEscape(part);\r\n                    });\r\n                    return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\r\n                case \"any\":\r\n                    return \"any character\";\r\n                case \"end\":\r\n                    return \"end of input\";\r\n                case \"other\":\r\n                    return expectation.description;\r\n            }\r\n        }\r\n        function describeExpected(expected1) {\r\n            var descriptions = expected1.map(describeExpectation);\r\n            var i;\r\n            var j;\r\n            descriptions.sort();\r\n            if (descriptions.length > 0) {\r\n                for (i = 1, j = 1; i < descriptions.length; i++) {\r\n                    if (descriptions[i - 1] !== descriptions[i]) {\r\n                        descriptions[j] = descriptions[i];\r\n                        j++;\r\n                    }\r\n                }\r\n                descriptions.length = j;\r\n            }\r\n            switch (descriptions.length) {\r\n                case 1:\r\n                    return descriptions[0];\r\n                case 2:\r\n                    return descriptions[0] + \" or \" + descriptions[1];\r\n                default:\r\n                    return descriptions.slice(0, -1).join(\", \")\r\n                        + \", or \"\r\n                        + descriptions[descriptions.length - 1];\r\n            }\r\n        }\r\n        function describeFound(found1) {\r\n            return found1 ? \"\\\"\" + literalEscape(found1) + \"\\\"\" : \"end of input\";\r\n        }\r\n        return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\r\n    };\r\n    return SyntaxError;\r\n}(Error));\r\nexports.SyntaxError = SyntaxError;\r\nfunction peg$parse(input, options) {\r\n    options = options !== undefined ? options : {};\r\n    var peg$FAILED = {};\r\n    var peg$startRuleIndices = { Contact: 119, Name_Addr_Header: 156, Record_Route: 176, Request_Response: 81, SIP_URI: 45, Subscription_State: 186, Supported: 191, Require: 182, Via: 194, absoluteURI: 84, Call_ID: 118, Content_Disposition: 130, Content_Length: 135, Content_Type: 136, CSeq: 146, displayName: 122, Event: 149, From: 151, host: 52, Max_Forwards: 154, Min_SE: 213, Proxy_Authenticate: 157, quoted_string: 40, Refer_To: 178, Replaces: 179, Session_Expires: 210, stun_URI: 217, To: 192, turn_URI: 223, uuid: 226, WWW_Authenticate: 209, challenge: 158, sipfrag: 230, Referred_By: 231 };\r\n    var peg$startRuleIndex = 119;\r\n    var peg$consts = [\r\n        \"\\r\\n\",\r\n        peg$literalExpectation(\"\\r\\n\", false),\r\n        /^[0-9]/,\r\n        peg$classExpectation([[\"0\", \"9\"]], false, false),\r\n        /^[a-zA-Z]/,\r\n        peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false),\r\n        /^[0-9a-fA-F]/,\r\n        peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\r\n        /^[\\0-\\xFF]/,\r\n        peg$classExpectation([[\"\\0\", \"\\xFF\"]], false, false),\r\n        /^[\"]/,\r\n        peg$classExpectation([\"\\\"\"], false, false),\r\n        \" \",\r\n        peg$literalExpectation(\" \", false),\r\n        \"\\t\",\r\n        peg$literalExpectation(\"\\t\", false),\r\n        /^[a-zA-Z0-9]/,\r\n        peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"]], false, false),\r\n        \";\",\r\n        peg$literalExpectation(\";\", false),\r\n        \"/\",\r\n        peg$literalExpectation(\"/\", false),\r\n        \"?\",\r\n        peg$literalExpectation(\"?\", false),\r\n        \":\",\r\n        peg$literalExpectation(\":\", false),\r\n        \"@\",\r\n        peg$literalExpectation(\"@\", false),\r\n        \"&\",\r\n        peg$literalExpectation(\"&\", false),\r\n        \"=\",\r\n        peg$literalExpectation(\"=\", false),\r\n        \"+\",\r\n        peg$literalExpectation(\"+\", false),\r\n        \"$\",\r\n        peg$literalExpectation(\"$\", false),\r\n        \",\",\r\n        peg$literalExpectation(\",\", false),\r\n        \"-\",\r\n        peg$literalExpectation(\"-\", false),\r\n        \"_\",\r\n        peg$literalExpectation(\"_\", false),\r\n        \".\",\r\n        peg$literalExpectation(\".\", false),\r\n        \"!\",\r\n        peg$literalExpectation(\"!\", false),\r\n        \"~\",\r\n        peg$literalExpectation(\"~\", false),\r\n        \"*\",\r\n        peg$literalExpectation(\"*\", false),\r\n        \"'\",\r\n        peg$literalExpectation(\"'\", false),\r\n        \"(\",\r\n        peg$literalExpectation(\"(\", false),\r\n        \")\",\r\n        peg$literalExpectation(\")\", false),\r\n        \"%\",\r\n        peg$literalExpectation(\"%\", false),\r\n        function () { return \" \"; },\r\n        function () { return ':'; },\r\n        /^[!-~]/,\r\n        peg$classExpectation([[\"!\", \"~\"]], false, false),\r\n        /^[\\x80-\\uFFFF]/,\r\n        peg$classExpectation([[\"\\x80\", \"\\uFFFF\"]], false, false),\r\n        /^[\\x80-\\xBF]/,\r\n        peg$classExpectation([[\"\\x80\", \"\\xBF\"]], false, false),\r\n        /^[a-f]/,\r\n        peg$classExpectation([[\"a\", \"f\"]], false, false),\r\n        \"`\",\r\n        peg$literalExpectation(\"`\", false),\r\n        \"<\",\r\n        peg$literalExpectation(\"<\", false),\r\n        \">\",\r\n        peg$literalExpectation(\">\", false),\r\n        \"\\\\\",\r\n        peg$literalExpectation(\"\\\\\", false),\r\n        \"[\",\r\n        peg$literalExpectation(\"[\", false),\r\n        \"]\",\r\n        peg$literalExpectation(\"]\", false),\r\n        \"{\",\r\n        peg$literalExpectation(\"{\", false),\r\n        \"}\",\r\n        peg$literalExpectation(\"}\", false),\r\n        function () { return \"*\"; },\r\n        function () { return \"/\"; },\r\n        function () { return \"=\"; },\r\n        function () { return \"(\"; },\r\n        function () { return \")\"; },\r\n        function () { return \">\"; },\r\n        function () { return \"<\"; },\r\n        function () { return \",\"; },\r\n        function () { return \";\"; },\r\n        function () { return \":\"; },\r\n        function () { return \"\\\"\"; },\r\n        /^[!-']/,\r\n        peg$classExpectation([[\"!\", \"'\"]], false, false),\r\n        /^[*-[]/,\r\n        peg$classExpectation([[\"*\", \"[\"]], false, false),\r\n        /^[\\]-~]/,\r\n        peg$classExpectation([[\"]\", \"~\"]], false, false),\r\n        function (contents) {\r\n            return contents;\r\n        },\r\n        /^[#-[]/,\r\n        peg$classExpectation([[\"#\", \"[\"]], false, false),\r\n        /^[\\0-\\t]/,\r\n        peg$classExpectation([[\"\\0\", \"\\t\"]], false, false),\r\n        /^[\\x0B-\\f]/,\r\n        peg$classExpectation([[\"\\x0B\", \"\\f\"]], false, false),\r\n        /^[\\x0E-\\x7F]/,\r\n        peg$classExpectation([[\"\\x0E\", \"\\x7F\"]], false, false),\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data.uri = new uri_1.URI(options.data.scheme, options.data.user, options.data.host, options.data.port);\r\n            delete options.data.scheme;\r\n            delete options.data.user;\r\n            delete options.data.host;\r\n            delete options.data.host_type;\r\n            delete options.data.port;\r\n        },\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data.uri = new uri_1.URI(options.data.scheme, options.data.user, options.data.host, options.data.port, options.data.uri_params, options.data.uri_headers);\r\n            delete options.data.scheme;\r\n            delete options.data.user;\r\n            delete options.data.host;\r\n            delete options.data.host_type;\r\n            delete options.data.port;\r\n            delete options.data.uri_params;\r\n            if (options.startRule === 'SIP_URI') {\r\n                options.data = options.data.uri;\r\n            }\r\n        },\r\n        \"sips\",\r\n        peg$literalExpectation(\"sips\", true),\r\n        \"sip\",\r\n        peg$literalExpectation(\"sip\", true),\r\n        function (uri_scheme) {\r\n            options = options || { data: {} };\r\n            options.data.scheme = uri_scheme;\r\n        },\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data.user = decodeURIComponent(text().slice(0, -1));\r\n        },\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data.password = text();\r\n        },\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data.host = text();\r\n            return options.data.host;\r\n        },\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data.host_type = 'domain';\r\n            return text();\r\n        },\r\n        /^[a-zA-Z0-9_\\-]/,\r\n        peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \"_\", \"-\"], false, false),\r\n        /^[a-zA-Z0-9\\-]/,\r\n        peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \"-\"], false, false),\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data.host_type = 'IPv6';\r\n            return text();\r\n        },\r\n        \"::\",\r\n        peg$literalExpectation(\"::\", false),\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data.host_type = 'IPv6';\r\n            return text();\r\n        },\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data.host_type = 'IPv4';\r\n            return text();\r\n        },\r\n        \"25\",\r\n        peg$literalExpectation(\"25\", false),\r\n        /^[0-5]/,\r\n        peg$classExpectation([[\"0\", \"5\"]], false, false),\r\n        \"2\",\r\n        peg$literalExpectation(\"2\", false),\r\n        /^[0-4]/,\r\n        peg$classExpectation([[\"0\", \"4\"]], false, false),\r\n        \"1\",\r\n        peg$literalExpectation(\"1\", false),\r\n        /^[1-9]/,\r\n        peg$classExpectation([[\"1\", \"9\"]], false, false),\r\n        function (port) {\r\n            options = options || { data: {} };\r\n            port = parseInt(port.join(''));\r\n            options.data.port = port;\r\n            return port;\r\n        },\r\n        \"transport=\",\r\n        peg$literalExpectation(\"transport=\", true),\r\n        \"udp\",\r\n        peg$literalExpectation(\"udp\", true),\r\n        \"tcp\",\r\n        peg$literalExpectation(\"tcp\", true),\r\n        \"sctp\",\r\n        peg$literalExpectation(\"sctp\", true),\r\n        \"tls\",\r\n        peg$literalExpectation(\"tls\", true),\r\n        function (transport) {\r\n            options = options || { data: {} };\r\n            if (!options.data.uri_params)\r\n                options.data.uri_params = {};\r\n            options.data.uri_params['transport'] = transport.toLowerCase();\r\n        },\r\n        \"user=\",\r\n        peg$literalExpectation(\"user=\", true),\r\n        \"phone\",\r\n        peg$literalExpectation(\"phone\", true),\r\n        \"ip\",\r\n        peg$literalExpectation(\"ip\", true),\r\n        function (user) {\r\n            options = options || { data: {} };\r\n            if (!options.data.uri_params)\r\n                options.data.uri_params = {};\r\n            options.data.uri_params['user'] = user.toLowerCase();\r\n        },\r\n        \"method=\",\r\n        peg$literalExpectation(\"method=\", true),\r\n        function (method) {\r\n            options = options || { data: {} };\r\n            if (!options.data.uri_params)\r\n                options.data.uri_params = {};\r\n            options.data.uri_params['method'] = method;\r\n        },\r\n        \"ttl=\",\r\n        peg$literalExpectation(\"ttl=\", true),\r\n        function (ttl) {\r\n            options = options || { data: {} };\r\n            if (!options.data.params)\r\n                options.data.params = {};\r\n            options.data.params['ttl'] = ttl;\r\n        },\r\n        \"maddr=\",\r\n        peg$literalExpectation(\"maddr=\", true),\r\n        function (maddr) {\r\n            options = options || { data: {} };\r\n            if (!options.data.uri_params)\r\n                options.data.uri_params = {};\r\n            options.data.uri_params['maddr'] = maddr;\r\n        },\r\n        \"lr\",\r\n        peg$literalExpectation(\"lr\", true),\r\n        function () {\r\n            options = options || { data: {} };\r\n            if (!options.data.uri_params)\r\n                options.data.uri_params = {};\r\n            options.data.uri_params['lr'] = undefined;\r\n        },\r\n        function (param, value) {\r\n            options = options || { data: {} };\r\n            if (!options.data.uri_params)\r\n                options.data.uri_params = {};\r\n            if (value === null) {\r\n                value = undefined;\r\n            }\r\n            else {\r\n                value = value[1];\r\n            }\r\n            options.data.uri_params[param.toLowerCase()] = value;\r\n        },\r\n        function (hname, hvalue) {\r\n            hname = hname.join('').toLowerCase();\r\n            hvalue = hvalue.join('');\r\n            options = options || { data: {} };\r\n            if (!options.data.uri_headers)\r\n                options.data.uri_headers = {};\r\n            if (!options.data.uri_headers[hname]) {\r\n                options.data.uri_headers[hname] = [hvalue];\r\n            }\r\n            else {\r\n                options.data.uri_headers[hname].push(hvalue);\r\n            }\r\n        },\r\n        function () {\r\n            options = options || { data: {} };\r\n            // lots of tests fail if this isn't guarded...\r\n            if (options.startRule === 'Refer_To') {\r\n                options.data.uri = new uri_1.URI(options.data.scheme, options.data.user, options.data.host, options.data.port, options.data.uri_params, options.data.uri_headers);\r\n                delete options.data.scheme;\r\n                delete options.data.user;\r\n                delete options.data.host;\r\n                delete options.data.host_type;\r\n                delete options.data.port;\r\n                delete options.data.uri_params;\r\n            }\r\n        },\r\n        \"//\",\r\n        peg$literalExpectation(\"//\", false),\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data.scheme = text();\r\n        },\r\n        peg$literalExpectation(\"SIP\", true),\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data.sip_version = text();\r\n        },\r\n        \"INVITE\",\r\n        peg$literalExpectation(\"INVITE\", false),\r\n        \"ACK\",\r\n        peg$literalExpectation(\"ACK\", false),\r\n        \"VXACH\",\r\n        peg$literalExpectation(\"VXACH\", false),\r\n        \"OPTIONS\",\r\n        peg$literalExpectation(\"OPTIONS\", false),\r\n        \"BYE\",\r\n        peg$literalExpectation(\"BYE\", false),\r\n        \"CANCEL\",\r\n        peg$literalExpectation(\"CANCEL\", false),\r\n        \"REGISTER\",\r\n        peg$literalExpectation(\"REGISTER\", false),\r\n        \"SUBSCRIBE\",\r\n        peg$literalExpectation(\"SUBSCRIBE\", false),\r\n        \"NOTIFY\",\r\n        peg$literalExpectation(\"NOTIFY\", false),\r\n        \"REFER\",\r\n        peg$literalExpectation(\"REFER\", false),\r\n        \"PUBLISH\",\r\n        peg$literalExpectation(\"PUBLISH\", false),\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data.method = text();\r\n            return options.data.method;\r\n        },\r\n        function (status_code) {\r\n            options = options || { data: {} };\r\n            options.data.status_code = parseInt(status_code.join(''));\r\n        },\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data.reason_phrase = text();\r\n        },\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data = text();\r\n        },\r\n        function () {\r\n            var idx, length;\r\n            options = options || { data: {} };\r\n            length = options.data.multi_header.length;\r\n            for (idx = 0; idx < length; idx++) {\r\n                if (options.data.multi_header[idx].parsed === null) {\r\n                    options.data = null;\r\n                    break;\r\n                }\r\n            }\r\n            if (options.data !== null) {\r\n                options.data = options.data.multi_header;\r\n            }\r\n            else {\r\n                options.data = -1;\r\n            }\r\n        },\r\n        function () {\r\n            var header;\r\n            options = options || { data: {} };\r\n            if (!options.data.multi_header)\r\n                options.data.multi_header = [];\r\n            try {\r\n                header = new name_addr_header_1.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);\r\n                delete options.data.uri;\r\n                delete options.data.displayName;\r\n                delete options.data.params;\r\n            }\r\n            catch (e) {\r\n                header = null;\r\n            }\r\n            options.data.multi_header.push({ 'position': peg$currPos,\r\n                'offset': location().start.offset,\r\n                'parsed': header\r\n            });\r\n        },\r\n        function (displayName) {\r\n            displayName = text().trim();\r\n            if (displayName[0] === '\\\"') {\r\n                displayName = displayName.substring(1, displayName.length - 1);\r\n            }\r\n            options = options || { data: {} };\r\n            options.data.displayName = displayName;\r\n        },\r\n        \"q\",\r\n        peg$literalExpectation(\"q\", true),\r\n        function (q) {\r\n            options = options || { data: {} };\r\n            if (!options.data.params)\r\n                options.data.params = {};\r\n            options.data.params['q'] = q;\r\n        },\r\n        \"expires\",\r\n        peg$literalExpectation(\"expires\", true),\r\n        function (expires) {\r\n            options = options || { data: {} };\r\n            if (!options.data.params)\r\n                options.data.params = {};\r\n            options.data.params['expires'] = expires;\r\n        },\r\n        function (delta_seconds) {\r\n            return parseInt(delta_seconds.join(''));\r\n        },\r\n        \"0\",\r\n        peg$literalExpectation(\"0\", false),\r\n        function () {\r\n            return parseFloat(text());\r\n        },\r\n        function (param, value) {\r\n            options = options || { data: {} };\r\n            if (!options.data.params)\r\n                options.data.params = {};\r\n            if (value === null) {\r\n                value = undefined;\r\n            }\r\n            else {\r\n                value = value[1];\r\n            }\r\n            options.data.params[param.toLowerCase()] = value;\r\n        },\r\n        \"render\",\r\n        peg$literalExpectation(\"render\", true),\r\n        \"session\",\r\n        peg$literalExpectation(\"session\", true),\r\n        \"icon\",\r\n        peg$literalExpectation(\"icon\", true),\r\n        \"alert\",\r\n        peg$literalExpectation(\"alert\", true),\r\n        function () {\r\n            options = options || { data: {} };\r\n            if (options.startRule === 'Content_Disposition') {\r\n                options.data.type = text().toLowerCase();\r\n            }\r\n        },\r\n        \"handling\",\r\n        peg$literalExpectation(\"handling\", true),\r\n        \"optional\",\r\n        peg$literalExpectation(\"optional\", true),\r\n        \"required\",\r\n        peg$literalExpectation(\"required\", true),\r\n        function (length) {\r\n            options = options || { data: {} };\r\n            options.data = parseInt(length.join(''));\r\n        },\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data = text();\r\n        },\r\n        \"text\",\r\n        peg$literalExpectation(\"text\", true),\r\n        \"image\",\r\n        peg$literalExpectation(\"image\", true),\r\n        \"audio\",\r\n        peg$literalExpectation(\"audio\", true),\r\n        \"video\",\r\n        peg$literalExpectation(\"video\", true),\r\n        \"application\",\r\n        peg$literalExpectation(\"application\", true),\r\n        \"message\",\r\n        peg$literalExpectation(\"message\", true),\r\n        \"multipart\",\r\n        peg$literalExpectation(\"multipart\", true),\r\n        \"x-\",\r\n        peg$literalExpectation(\"x-\", true),\r\n        function (cseq_value) {\r\n            options = options || { data: {} };\r\n            options.data.value = parseInt(cseq_value.join(''));\r\n        },\r\n        function (expires) { options = options || { data: {} }; options.data = expires; },\r\n        function (event_type) {\r\n            options = options || { data: {} };\r\n            options.data.event = event_type.toLowerCase();\r\n        },\r\n        function () {\r\n            options = options || { data: {} };\r\n            var tag = options.data.tag;\r\n            options.data = new name_addr_header_1.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);\r\n            if (tag) {\r\n                options.data.setParam('tag', tag);\r\n            }\r\n        },\r\n        \"tag\",\r\n        peg$literalExpectation(\"tag\", true),\r\n        function (tag) { options = options || { data: {} }; options.data.tag = tag; },\r\n        function (forwards) {\r\n            options = options || { data: {} };\r\n            options.data = parseInt(forwards.join(''));\r\n        },\r\n        function (min_expires) { options = options || { data: {} }; options.data = min_expires; },\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data = new name_addr_header_1.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);\r\n        },\r\n        \"digest\",\r\n        peg$literalExpectation(\"Digest\", true),\r\n        \"realm\",\r\n        peg$literalExpectation(\"realm\", true),\r\n        function (realm) { options = options || { data: {} }; options.data.realm = realm; },\r\n        \"domain\",\r\n        peg$literalExpectation(\"domain\", true),\r\n        \"nonce\",\r\n        peg$literalExpectation(\"nonce\", true),\r\n        function (nonce) { options = options || { data: {} }; options.data.nonce = nonce; },\r\n        \"opaque\",\r\n        peg$literalExpectation(\"opaque\", true),\r\n        function (opaque) { options = options || { data: {} }; options.data.opaque = opaque; },\r\n        \"stale\",\r\n        peg$literalExpectation(\"stale\", true),\r\n        \"true\",\r\n        peg$literalExpectation(\"true\", true),\r\n        function () { options = options || { data: {} }; options.data.stale = true; },\r\n        \"false\",\r\n        peg$literalExpectation(\"false\", true),\r\n        function () { options = options || { data: {} }; options.data.stale = false; },\r\n        \"algorithm\",\r\n        peg$literalExpectation(\"algorithm\", true),\r\n        \"md5\",\r\n        peg$literalExpectation(\"MD5\", true),\r\n        \"md5-sess\",\r\n        peg$literalExpectation(\"MD5-sess\", true),\r\n        function (algorithm) {\r\n            options = options || { data: {} };\r\n            options.data.algorithm = algorithm.toUpperCase();\r\n        },\r\n        \"qop\",\r\n        peg$literalExpectation(\"qop\", true),\r\n        \"auth-int\",\r\n        peg$literalExpectation(\"auth-int\", true),\r\n        \"auth\",\r\n        peg$literalExpectation(\"auth\", true),\r\n        function (qop_value) {\r\n            options = options || { data: {} };\r\n            options.data.qop || (options.data.qop = []);\r\n            options.data.qop.push(qop_value.toLowerCase());\r\n        },\r\n        function (rack_value) {\r\n            options = options || { data: {} };\r\n            options.data.value = parseInt(rack_value.join(''));\r\n        },\r\n        function () {\r\n            var idx, length;\r\n            options = options || { data: {} };\r\n            length = options.data.multi_header.length;\r\n            for (idx = 0; idx < length; idx++) {\r\n                if (options.data.multi_header[idx].parsed === null) {\r\n                    options.data = null;\r\n                    break;\r\n                }\r\n            }\r\n            if (options.data !== null) {\r\n                options.data = options.data.multi_header;\r\n            }\r\n            else {\r\n                options.data = -1;\r\n            }\r\n        },\r\n        function () {\r\n            var header;\r\n            options = options || { data: {} };\r\n            if (!options.data.multi_header)\r\n                options.data.multi_header = [];\r\n            try {\r\n                header = new name_addr_header_1.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);\r\n                delete options.data.uri;\r\n                delete options.data.displayName;\r\n                delete options.data.params;\r\n            }\r\n            catch (e) {\r\n                header = null;\r\n            }\r\n            options.data.multi_header.push({ 'position': peg$currPos,\r\n                'offset': location().start.offset,\r\n                'parsed': header\r\n            });\r\n        },\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data = new name_addr_header_1.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);\r\n        },\r\n        function () {\r\n            options = options || { data: {} };\r\n            if (!(options.data.replaces_from_tag && options.data.replaces_to_tag)) {\r\n                options.data = -1;\r\n            }\r\n        },\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data = {\r\n                call_id: options.data\r\n            };\r\n        },\r\n        \"from-tag\",\r\n        peg$literalExpectation(\"from-tag\", true),\r\n        function (from_tag) {\r\n            options = options || { data: {} };\r\n            options.data.replaces_from_tag = from_tag;\r\n        },\r\n        \"to-tag\",\r\n        peg$literalExpectation(\"to-tag\", true),\r\n        function (to_tag) {\r\n            options = options || { data: {} };\r\n            options.data.replaces_to_tag = to_tag;\r\n        },\r\n        \"early-only\",\r\n        peg$literalExpectation(\"early-only\", true),\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data.early_only = true;\r\n        },\r\n        function (head, r) { return r; },\r\n        function (head, tail) { return list(head, tail); },\r\n        function (value) {\r\n            options = options || { data: {} };\r\n            if (options.startRule === 'Require') {\r\n                options.data = value || [];\r\n            }\r\n        },\r\n        function (rseq_value) {\r\n            options = options || { data: {} };\r\n            options.data.value = parseInt(rseq_value.join(''));\r\n        },\r\n        \"active\",\r\n        peg$literalExpectation(\"active\", true),\r\n        \"pending\",\r\n        peg$literalExpectation(\"pending\", true),\r\n        \"terminated\",\r\n        peg$literalExpectation(\"terminated\", true),\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data.state = text();\r\n        },\r\n        \"reason\",\r\n        peg$literalExpectation(\"reason\", true),\r\n        function (reason) {\r\n            options = options || { data: {} };\r\n            if (typeof reason !== 'undefined')\r\n                options.data.reason = reason;\r\n        },\r\n        function (expires) {\r\n            options = options || { data: {} };\r\n            if (typeof expires !== 'undefined')\r\n                options.data.expires = expires;\r\n        },\r\n        \"retry_after\",\r\n        peg$literalExpectation(\"retry_after\", true),\r\n        function (retry_after) {\r\n            options = options || { data: {} };\r\n            if (typeof retry_after !== 'undefined')\r\n                options.data.retry_after = retry_after;\r\n        },\r\n        \"deactivated\",\r\n        peg$literalExpectation(\"deactivated\", true),\r\n        \"probation\",\r\n        peg$literalExpectation(\"probation\", true),\r\n        \"rejected\",\r\n        peg$literalExpectation(\"rejected\", true),\r\n        \"timeout\",\r\n        peg$literalExpectation(\"timeout\", true),\r\n        \"giveup\",\r\n        peg$literalExpectation(\"giveup\", true),\r\n        \"noresource\",\r\n        peg$literalExpectation(\"noresource\", true),\r\n        \"invariant\",\r\n        peg$literalExpectation(\"invariant\", true),\r\n        function (value) {\r\n            options = options || { data: {} };\r\n            if (options.startRule === 'Supported') {\r\n                options.data = value || [];\r\n            }\r\n        },\r\n        function () {\r\n            options = options || { data: {} };\r\n            var tag = options.data.tag;\r\n            options.data = new name_addr_header_1.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);\r\n            if (tag) {\r\n                options.data.setParam('tag', tag);\r\n            }\r\n        },\r\n        \"ttl\",\r\n        peg$literalExpectation(\"ttl\", true),\r\n        function (via_ttl_value) {\r\n            options = options || { data: {} };\r\n            options.data.ttl = via_ttl_value;\r\n        },\r\n        \"maddr\",\r\n        peg$literalExpectation(\"maddr\", true),\r\n        function (via_maddr) {\r\n            options = options || { data: {} };\r\n            options.data.maddr = via_maddr;\r\n        },\r\n        \"received\",\r\n        peg$literalExpectation(\"received\", true),\r\n        function (via_received) {\r\n            options = options || { data: {} };\r\n            options.data.received = via_received;\r\n        },\r\n        \"branch\",\r\n        peg$literalExpectation(\"branch\", true),\r\n        function (via_branch) {\r\n            options = options || { data: {} };\r\n            options.data.branch = via_branch;\r\n        },\r\n        \"rport\",\r\n        peg$literalExpectation(\"rport\", true),\r\n        function (response_port) {\r\n            options = options || { data: {} };\r\n            if (typeof response_port !== 'undefined')\r\n                options.data.rport = response_port.join('');\r\n        },\r\n        function (via_protocol) {\r\n            options = options || { data: {} };\r\n            options.data.protocol = via_protocol;\r\n        },\r\n        peg$literalExpectation(\"UDP\", true),\r\n        peg$literalExpectation(\"TCP\", true),\r\n        peg$literalExpectation(\"TLS\", true),\r\n        peg$literalExpectation(\"SCTP\", true),\r\n        function (via_transport) {\r\n            options = options || { data: {} };\r\n            options.data.transport = via_transport;\r\n        },\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data.host = text();\r\n        },\r\n        function (via_sent_by_port) {\r\n            options = options || { data: {} };\r\n            options.data.port = parseInt(via_sent_by_port.join(''));\r\n        },\r\n        function (ttl) {\r\n            return parseInt(ttl.join(''));\r\n        },\r\n        function (deltaSeconds) {\r\n            options = options || { data: {} };\r\n            if (options.startRule === 'Session_Expires') {\r\n                options.data.deltaSeconds = deltaSeconds;\r\n            }\r\n        },\r\n        \"refresher\",\r\n        peg$literalExpectation(\"refresher\", false),\r\n        \"uas\",\r\n        peg$literalExpectation(\"uas\", false),\r\n        \"uac\",\r\n        peg$literalExpectation(\"uac\", false),\r\n        function (endpoint) {\r\n            options = options || { data: {} };\r\n            if (options.startRule === 'Session_Expires') {\r\n                options.data.refresher = endpoint;\r\n            }\r\n        },\r\n        function (deltaSeconds) {\r\n            options = options || { data: {} };\r\n            if (options.startRule === 'Min_SE') {\r\n                options.data = deltaSeconds;\r\n            }\r\n        },\r\n        \"stuns\",\r\n        peg$literalExpectation(\"stuns\", true),\r\n        \"stun\",\r\n        peg$literalExpectation(\"stun\", true),\r\n        function (scheme) {\r\n            options = options || { data: {} };\r\n            options.data.scheme = scheme;\r\n        },\r\n        function (host) {\r\n            options = options || { data: {} };\r\n            options.data.host = host;\r\n        },\r\n        \"?transport=\",\r\n        peg$literalExpectation(\"?transport=\", false),\r\n        \"turns\",\r\n        peg$literalExpectation(\"turns\", true),\r\n        \"turn\",\r\n        peg$literalExpectation(\"turn\", true),\r\n        function (transport) {\r\n            options = options || { data: {} };\r\n            options.data.transport = transport;\r\n        },\r\n        function () {\r\n            options = options || { data: {} };\r\n            options.data = text();\r\n        },\r\n        \"Referred-By\",\r\n        peg$literalExpectation(\"Referred-By\", false),\r\n        \"b\",\r\n        peg$literalExpectation(\"b\", false),\r\n        \"cid\",\r\n        peg$literalExpectation(\"cid\", false)\r\n    ];\r\n    var peg$bytecode = [\r\n        peg$decode(\"2 \\\"\\\"6 7!\"),\r\n        peg$decode(\"4\\\"\\\"\\\"5!7#\"),\r\n        peg$decode(\"4$\\\"\\\"5!7%\"),\r\n        peg$decode(\"4&\\\"\\\"5!7'\"),\r\n        peg$decode(\";'.# &;(\"),\r\n        peg$decode(\"4(\\\"\\\"5!7)\"),\r\n        peg$decode(\"4*\\\"\\\"5!7+\"),\r\n        peg$decode(\"2,\\\"\\\"6,7-\"),\r\n        peg$decode(\"2.\\\"\\\"6.7/\"),\r\n        peg$decode(\"40\\\"\\\"5!71\"),\r\n        peg$decode(\"22\\\"\\\"6273.\\x89 &24\\\"\\\"6475.} &26\\\"\\\"6677.q &28\\\"\\\"6879.e &2:\\\"\\\"6:7;.Y &2<\\\"\\\"6<7=.M &2>\\\"\\\"6>7?.A &2@\\\"\\\"6@7A.5 &2B\\\"\\\"6B7C.) &2D\\\"\\\"6D7E\"),\r\n        peg$decode(\";).# &;,\"),\r\n        peg$decode(\"2F\\\"\\\"6F7G.} &2H\\\"\\\"6H7I.q &2J\\\"\\\"6J7K.e &2L\\\"\\\"6L7M.Y &2N\\\"\\\"6N7O.M &2P\\\"\\\"6P7Q.A &2R\\\"\\\"6R7S.5 &2T\\\"\\\"6T7U.) &2V\\\"\\\"6V7W\"),\r\n        peg$decode(\"%%2X\\\"\\\"6X7Y/5#;#/,$;#/#$+#)(#'#(\\\"'#&'#/\\\"!&,)\"),\r\n        peg$decode(\"%%$;$0#*;$&/,#; /#$+\\\")(\\\"'#&'#.\\\" &\\\"/=#$;$/&#0#*;$&&&#/'$8\\\":Z\\\" )(\\\"'#&'#\"),\r\n        peg$decode(\";..\\\" &\\\"\"),\r\n        peg$decode(\"%$;'.# &;(0)*;'.# &;(&/?#28\\\"\\\"6879/0$;//'$8#:[# )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%%$;2/&#0#*;2&&&#/g#$%$;.0#*;.&/,#;2/#$+\\\")(\\\"'#&'#0=*%$;.0#*;.&/,#;2/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#/\\\"!&,)\"),\r\n        peg$decode(\"4\\\\\\\"\\\"5!7].# &;3\"),\r\n        peg$decode(\"4^\\\"\\\"5!7_\"),\r\n        peg$decode(\"4`\\\"\\\"5!7a\"),\r\n        peg$decode(\";!.) &4b\\\"\\\"5!7c\"),\r\n        peg$decode(\"%$;).\\x95 &2F\\\"\\\"6F7G.\\x89 &2J\\\"\\\"6J7K.} &2L\\\"\\\"6L7M.q &2X\\\"\\\"6X7Y.e &2P\\\"\\\"6P7Q.Y &2H\\\"\\\"6H7I.M &2@\\\"\\\"6@7A.A &2d\\\"\\\"6d7e.5 &2R\\\"\\\"6R7S.) &2N\\\"\\\"6N7O/\\x9E#0\\x9B*;).\\x95 &2F\\\"\\\"6F7G.\\x89 &2J\\\"\\\"6J7K.} &2L\\\"\\\"6L7M.q &2X\\\"\\\"6X7Y.e &2P\\\"\\\"6P7Q.Y &2H\\\"\\\"6H7I.M &2@\\\"\\\"6@7A.A &2d\\\"\\\"6d7e.5 &2R\\\"\\\"6R7S.) &2N\\\"\\\"6N7O&&&#/\\\"!&,)\"),\r\n        peg$decode(\"%$;).\\x89 &2F\\\"\\\"6F7G.} &2L\\\"\\\"6L7M.q &2X\\\"\\\"6X7Y.e &2P\\\"\\\"6P7Q.Y &2H\\\"\\\"6H7I.M &2@\\\"\\\"6@7A.A &2d\\\"\\\"6d7e.5 &2R\\\"\\\"6R7S.) &2N\\\"\\\"6N7O/\\x92#0\\x8F*;).\\x89 &2F\\\"\\\"6F7G.} &2L\\\"\\\"6L7M.q &2X\\\"\\\"6X7Y.e &2P\\\"\\\"6P7Q.Y &2H\\\"\\\"6H7I.M &2@\\\"\\\"6@7A.A &2d\\\"\\\"6d7e.5 &2R\\\"\\\"6R7S.) &2N\\\"\\\"6N7O&&&#/\\\"!&,)\"),\r\n        peg$decode(\"2T\\\"\\\"6T7U.\\xE3 &2V\\\"\\\"6V7W.\\xD7 &2f\\\"\\\"6f7g.\\xCB &2h\\\"\\\"6h7i.\\xBF &2:\\\"\\\"6:7;.\\xB3 &2D\\\"\\\"6D7E.\\xA7 &22\\\"\\\"6273.\\x9B &28\\\"\\\"6879.\\x8F &2j\\\"\\\"6j7k.\\x83 &;&.} &24\\\"\\\"6475.q &2l\\\"\\\"6l7m.e &2n\\\"\\\"6n7o.Y &26\\\"\\\"6677.M &2>\\\"\\\"6>7?.A &2p\\\"\\\"6p7q.5 &2r\\\"\\\"6r7s.) &;'.# &;(\"),\r\n        peg$decode(\"%$;).\\u012B &2F\\\"\\\"6F7G.\\u011F &2J\\\"\\\"6J7K.\\u0113 &2L\\\"\\\"6L7M.\\u0107 &2X\\\"\\\"6X7Y.\\xFB &2P\\\"\\\"6P7Q.\\xEF &2H\\\"\\\"6H7I.\\xE3 &2@\\\"\\\"6@7A.\\xD7 &2d\\\"\\\"6d7e.\\xCB &2R\\\"\\\"6R7S.\\xBF &2N\\\"\\\"6N7O.\\xB3 &2T\\\"\\\"6T7U.\\xA7 &2V\\\"\\\"6V7W.\\x9B &2f\\\"\\\"6f7g.\\x8F &2h\\\"\\\"6h7i.\\x83 &28\\\"\\\"6879.w &2j\\\"\\\"6j7k.k &;&.e &24\\\"\\\"6475.Y &2l\\\"\\\"6l7m.M &2n\\\"\\\"6n7o.A &26\\\"\\\"6677.5 &2p\\\"\\\"6p7q.) &2r\\\"\\\"6r7s/\\u0134#0\\u0131*;).\\u012B &2F\\\"\\\"6F7G.\\u011F &2J\\\"\\\"6J7K.\\u0113 &2L\\\"\\\"6L7M.\\u0107 &2X\\\"\\\"6X7Y.\\xFB &2P\\\"\\\"6P7Q.\\xEF &2H\\\"\\\"6H7I.\\xE3 &2@\\\"\\\"6@7A.\\xD7 &2d\\\"\\\"6d7e.\\xCB &2R\\\"\\\"6R7S.\\xBF &2N\\\"\\\"6N7O.\\xB3 &2T\\\"\\\"6T7U.\\xA7 &2V\\\"\\\"6V7W.\\x9B &2f\\\"\\\"6f7g.\\x8F &2h\\\"\\\"6h7i.\\x83 &28\\\"\\\"6879.w &2j\\\"\\\"6j7k.k &;&.e &24\\\"\\\"6475.Y &2l\\\"\\\"6l7m.M &2n\\\"\\\"6n7o.A &26\\\"\\\"6677.5 &2p\\\"\\\"6p7q.) &2r\\\"\\\"6r7s&&&#/\\\"!&,)\"),\r\n        peg$decode(\"%;//?#2P\\\"\\\"6P7Q/0$;//'$8#:t# )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;//?#24\\\"\\\"6475/0$;//'$8#:u# )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;//?#2>\\\"\\\"6>7?/0$;//'$8#:v# )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;//?#2T\\\"\\\"6T7U/0$;//'$8#:w# )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;//?#2V\\\"\\\"6V7W/0$;//'$8#:x# )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%2h\\\"\\\"6h7i/0#;//'$8\\\":y\\\" )(\\\"'#&'#\"),\r\n        peg$decode(\"%;//6#2f\\\"\\\"6f7g/'$8\\\":z\\\" )(\\\"'#&'#\"),\r\n        peg$decode(\"%;//?#2D\\\"\\\"6D7E/0$;//'$8#:{# )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;//?#22\\\"\\\"6273/0$;//'$8#:|# )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;//?#28\\\"\\\"6879/0$;//'$8#:}# )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;//0#;&/'$8\\\":~\\\" )(\\\"'#&'#\"),\r\n        peg$decode(\"%;&/0#;//'$8\\\":~\\\" )(\\\"'#&'#\"),\r\n        peg$decode(\"%;=/T#$;G.) &;K.# &;F0/*;G.) &;K.# &;F&/,$;>/#$+#)(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"4\\x7F\\\"\\\"5!7\\x80.A &4\\x81\\\"\\\"5!7\\x82.5 &4\\x83\\\"\\\"5!7\\x84.) &;3.# &;.\"),\r\n        peg$decode(\"%%;//Q#;&/H$$;J.# &;K0)*;J.# &;K&/,$;&/#$+$)($'#(#'#(\\\"'#&'#/\\\"!&,)\"),\r\n        peg$decode(\"%;//]#;&/T$%$;J.# &;K0)*;J.# &;K&/\\\"!&,)/1$;&/($8$:\\x85$!!)($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\";..G &2L\\\"\\\"6L7M.; &4\\x86\\\"\\\"5!7\\x87./ &4\\x83\\\"\\\"5!7\\x84.# &;3\"),\r\n        peg$decode(\"%2j\\\"\\\"6j7k/J#4\\x88\\\"\\\"5!7\\x89.5 &4\\x8A\\\"\\\"5!7\\x8B.) &4\\x8C\\\"\\\"5!7\\x8D/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\"%;N/M#28\\\"\\\"6879/>$;O.\\\" &\\\"/0$;S/'$8$:\\x8E$ )($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;N/d#28\\\"\\\"6879/U$;O.\\\" &\\\"/G$;S/>$;_/5$;l.\\\" &\\\"/'$8&:\\x8F& )(&'#(%'#($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\x90\\\"\\\"5$7\\x91.) &3\\x92\\\"\\\"5#7\\x93/' 8!:\\x94!! )\"),\r\n        peg$decode(\"%;P/]#%28\\\"\\\"6879/,#;R/#$+\\\")(\\\"'#&'#.\\\" &\\\"/6$2:\\\"\\\"6:7;/'$8#:\\x95# )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"$;+.) &;-.# &;Q/2#0/*;+.) &;-.# &;Q&&&#\"),\r\n        peg$decode(\"2<\\\"\\\"6<7=.q &2>\\\"\\\"6>7?.e &2@\\\"\\\"6@7A.Y &2B\\\"\\\"6B7C.M &2D\\\"\\\"6D7E.A &22\\\"\\\"6273.5 &26\\\"\\\"6677.) &24\\\"\\\"6475\"),\r\n        peg$decode(\"%$;+._ &;-.Y &2<\\\"\\\"6<7=.M &2>\\\"\\\"6>7?.A &2@\\\"\\\"6@7A.5 &2B\\\"\\\"6B7C.) &2D\\\"\\\"6D7E0e*;+._ &;-.Y &2<\\\"\\\"6<7=.M &2>\\\"\\\"6>7?.A &2@\\\"\\\"6@7A.5 &2B\\\"\\\"6B7C.) &2D\\\"\\\"6D7E&/& 8!:\\x96! )\"),\r\n        peg$decode(\"%;T/J#%28\\\"\\\"6879/,#;^/#$+\\\")(\\\"'#&'#.\\\" &\\\"/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\"%;U.) &;\\\\.# &;X/& 8!:\\x97! )\"),\r\n        peg$decode(\"%$%;V/2#2J\\\"\\\"6J7K/#$+\\\")(\\\"'#&'#0<*%;V/2#2J\\\"\\\"6J7K/#$+\\\")(\\\"'#&'#&/D#;W/;$2J\\\"\\\"6J7K.\\\" &\\\"/'$8#:\\x98# )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"$4\\x99\\\"\\\"5!7\\x9A/,#0)*4\\x99\\\"\\\"5!7\\x9A&&&#\"),\r\n        peg$decode(\"%4$\\\"\\\"5!7%/?#$4\\x9B\\\"\\\"5!7\\x9C0)*4\\x9B\\\"\\\"5!7\\x9C&/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\"%2l\\\"\\\"6l7m/?#;Y/6$2n\\\"\\\"6n7o/'$8#:\\x9D# )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%%;Z/\\xB3#28\\\"\\\"6879/\\xA4$;Z/\\x9B$28\\\"\\\"6879/\\x8C$;Z/\\x83$28\\\"\\\"6879/t$;Z/k$28\\\"\\\"6879/\\\\$;Z/S$28\\\"\\\"6879/D$;Z/;$28\\\"\\\"6879/,$;[/#$+-)(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u0790 &%2\\x9E\\\"\\\"6\\x9E7\\x9F/\\xA4#;Z/\\x9B$28\\\"\\\"6879/\\x8C$;Z/\\x83$28\\\"\\\"6879/t$;Z/k$28\\\"\\\"6879/\\\\$;Z/S$28\\\"\\\"6879/D$;Z/;$28\\\"\\\"6879/,$;[/#$+,)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u06F9 &%2\\x9E\\\"\\\"6\\x9E7\\x9F/\\x8C#;Z/\\x83$28\\\"\\\"6879/t$;Z/k$28\\\"\\\"6879/\\\\$;Z/S$28\\\"\\\"6879/D$;Z/;$28\\\"\\\"6879/,$;[/#$+*)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u067A &%2\\x9E\\\"\\\"6\\x9E7\\x9F/t#;Z/k$28\\\"\\\"6879/\\\\$;Z/S$28\\\"\\\"6879/D$;Z/;$28\\\"\\\"6879/,$;[/#$+()(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u0613 &%2\\x9E\\\"\\\"6\\x9E7\\x9F/\\\\#;Z/S$28\\\"\\\"6879/D$;Z/;$28\\\"\\\"6879/,$;[/#$+&)(&'#(%'#($'#(#'#(\\\"'#&'#.\\u05C4 &%2\\x9E\\\"\\\"6\\x9E7\\x9F/D#;Z/;$28\\\"\\\"6879/,$;[/#$+$)($'#(#'#(\\\"'#&'#.\\u058D &%2\\x9E\\\"\\\"6\\x9E7\\x9F/,#;[/#$+\\\")(\\\"'#&'#.\\u056E &%2\\x9E\\\"\\\"6\\x9E7\\x9F/,#;Z/#$+\\\")(\\\"'#&'#.\\u054F &%;Z/\\x9B#2\\x9E\\\"\\\"6\\x9E7\\x9F/\\x8C$;Z/\\x83$28\\\"\\\"6879/t$;Z/k$28\\\"\\\"6879/\\\\$;Z/S$28\\\"\\\"6879/D$;Z/;$28\\\"\\\"6879/,$;[/#$++)(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u04C7 &%;Z/\\xAA#%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\x83$2\\x9E\\\"\\\"6\\x9E7\\x9F/t$;Z/k$28\\\"\\\"6879/\\\\$;Z/S$28\\\"\\\"6879/D$;Z/;$28\\\"\\\"6879/,$;[/#$+*)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u0430 &%;Z/\\xB9#%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\x92$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/k$2\\x9E\\\"\\\"6\\x9E7\\x9F/\\\\$;Z/S$28\\\"\\\"6879/D$;Z/;$28\\\"\\\"6879/,$;[/#$+))()'#(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u038A &%;Z/\\xC8#%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\xA1$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/z$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/S$2\\x9E\\\"\\\"6\\x9E7\\x9F/D$;Z/;$28\\\"\\\"6879/,$;[/#$+()(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u02D5 &%;Z/\\xD7#%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\xB0$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\x89$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/b$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/;$2\\x9E\\\"\\\"6\\x9E7\\x9F/,$;[/#$+')(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u0211 &%;Z/\\xFE#%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\xD7$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\xB0$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\x89$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/b$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/;$2\\x9E\\\"\\\"6\\x9E7\\x9F/,$;Z/#$+()(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#.\\u0126 &%;Z/\\u011C#%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\xF5$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\xCE$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\xA7$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/\\x80$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/Y$%28\\\"\\\"6879/,#;Z/#$+\\\")(\\\"'#&'#.\\\" &\\\"/2$2\\x9E\\\"\\\"6\\x9E7\\x9F/#$+()(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#/& 8!:\\xA0! )\"),\r\n        peg$decode(\"%;#/M#;#.\\\" &\\\"/?$;#.\\\" &\\\"/1$;#.\\\" &\\\"/#$+$)($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;Z/;#28\\\"\\\"6879/,$;Z/#$+#)(#'#(\\\"'#&'#.# &;\\\\\"),\r\n        peg$decode(\"%;]/o#2J\\\"\\\"6J7K/`$;]/W$2J\\\"\\\"6J7K/H$;]/?$2J\\\"\\\"6J7K/0$;]/'$8':\\xA1' )(''#(&'#(%'#($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%2\\xA2\\\"\\\"6\\xA27\\xA3/2#4\\xA4\\\"\\\"5!7\\xA5/#$+\\\")(\\\"'#&'#.\\x98 &%2\\xA6\\\"\\\"6\\xA67\\xA7/;#4\\xA8\\\"\\\"5!7\\xA9/,$;!/#$+#)(#'#(\\\"'#&'#.j &%2\\xAA\\\"\\\"6\\xAA7\\xAB/5#;!/,$;!/#$+#)(#'#(\\\"'#&'#.B &%4\\xAC\\\"\\\"5!7\\xAD/,#;!/#$+\\\")(\\\"'#&'#.# &;!\"),\r\n        peg$decode(\"%%;!.\\\" &\\\"/[#;!.\\\" &\\\"/M$;!.\\\" &\\\"/?$;!.\\\" &\\\"/1$;!.\\\" &\\\"/#$+%)(%'#($'#(#'#(\\\"'#&'#/' 8!:\\xAE!! )\"),\r\n        peg$decode(\"$%22\\\"\\\"6273/,#;`/#$+\\\")(\\\"'#&'#0<*%22\\\"\\\"6273/,#;`/#$+\\\")(\\\"'#&'#&\"),\r\n        peg$decode(\";a.A &;b.; &;c.5 &;d./ &;e.) &;f.# &;g\"),\r\n        peg$decode(\"%3\\xAF\\\"\\\"5*7\\xB0/a#3\\xB1\\\"\\\"5#7\\xB2.G &3\\xB3\\\"\\\"5#7\\xB4.; &3\\xB5\\\"\\\"5$7\\xB6./ &3\\xB7\\\"\\\"5#7\\xB8.# &;6/($8\\\":\\xB9\\\"! )(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\xBA\\\"\\\"5%7\\xBB/I#3\\xBC\\\"\\\"5%7\\xBD./ &3\\xBE\\\"\\\"5\\\"7\\xBF.# &;6/($8\\\":\\xC0\\\"! )(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\xC1\\\"\\\"5'7\\xC2/1#;\\x90/($8\\\":\\xC3\\\"! )(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\xC4\\\"\\\"5$7\\xC5/1#;\\xF0/($8\\\":\\xC6\\\"! )(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\xC7\\\"\\\"5&7\\xC8/1#;T/($8\\\":\\xC9\\\"! )(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\xCA\\\"\\\"5\\\"7\\xCB/N#%2>\\\"\\\"6>7?/,#;6/#$+\\\")(\\\"'#&'#.\\\" &\\\"/'$8\\\":\\xCC\\\" )(\\\"'#&'#\"),\r\n        peg$decode(\"%;h/P#%2>\\\"\\\"6>7?/,#;i/#$+\\\")(\\\"'#&'#.\\\" &\\\"/)$8\\\":\\xCD\\\"\\\"! )(\\\"'#&'#\"),\r\n        peg$decode(\"%$;j/&#0#*;j&&&#/\\\"!&,)\"),\r\n        peg$decode(\"%$;j/&#0#*;j&&&#/\\\"!&,)\"),\r\n        peg$decode(\";k.) &;+.# &;-\"),\r\n        peg$decode(\"2l\\\"\\\"6l7m.e &2n\\\"\\\"6n7o.Y &24\\\"\\\"6475.M &28\\\"\\\"6879.A &2<\\\"\\\"6<7=.5 &2@\\\"\\\"6@7A.) &2B\\\"\\\"6B7C\"),\r\n        peg$decode(\"%26\\\"\\\"6677/n#;m/e$$%2<\\\"\\\"6<7=/,#;m/#$+\\\")(\\\"'#&'#0<*%2<\\\"\\\"6<7=/,#;m/#$+\\\")(\\\"'#&'#&/#$+#)(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;n/A#2>\\\"\\\"6>7?/2$;o/)$8#:\\xCE#\\\"\\\" )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"$;p.) &;+.# &;-/2#0/*;p.) &;+.# &;-&&&#\"),\r\n        peg$decode(\"$;p.) &;+.# &;-0/*;p.) &;+.# &;-&\"),\r\n        peg$decode(\"2l\\\"\\\"6l7m.e &2n\\\"\\\"6n7o.Y &24\\\"\\\"6475.M &26\\\"\\\"6677.A &28\\\"\\\"6879.5 &2@\\\"\\\"6@7A.) &2B\\\"\\\"6B7C\"),\r\n        peg$decode(\";\\x91.# &;r\"),\r\n        peg$decode(\"%;\\x90/G#;'/>$;s/5$;'/,$;\\x84/#$+%)(%'#($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\";M.# &;t\"),\r\n        peg$decode(\"%;\\x7F/E#28\\\"\\\"6879/6$;u.# &;x/'$8#:\\xCF# )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;v.# &;w/J#%26\\\"\\\"6677/,#;\\x83/#$+\\\")(\\\"'#&'#.\\\" &\\\"/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\"%2\\xD0\\\"\\\"6\\xD07\\xD1/:#;\\x80/1$;w.\\\" &\\\"/#$+#)(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%24\\\"\\\"6475/,#;{/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\"%;z/3#$;y0#*;y&/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\";*.) &;+.# &;-\"),\r\n        peg$decode(\";+.\\x8F &;-.\\x89 &22\\\"\\\"6273.} &26\\\"\\\"6677.q &28\\\"\\\"6879.e &2:\\\"\\\"6:7;.Y &2<\\\"\\\"6<7=.M &2>\\\"\\\"6>7?.A &2@\\\"\\\"6@7A.5 &2B\\\"\\\"6B7C.) &2D\\\"\\\"6D7E\"),\r\n        peg$decode(\"%;|/e#$%24\\\"\\\"6475/,#;|/#$+\\\")(\\\"'#&'#0<*%24\\\"\\\"6475/,#;|/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\"%$;~0#*;~&/e#$%22\\\"\\\"6273/,#;}/#$+\\\")(\\\"'#&'#0<*%22\\\"\\\"6273/,#;}/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\"$;~0#*;~&\"),\r\n        peg$decode(\";+.w &;-.q &28\\\"\\\"6879.e &2:\\\"\\\"6:7;.Y &2<\\\"\\\"6<7=.M &2>\\\"\\\"6>7?.A &2@\\\"\\\"6@7A.5 &2B\\\"\\\"6B7C.) &2D\\\"\\\"6D7E\"),\r\n        peg$decode(\"%%;\\\"/\\x87#$;\\\".G &;!.A &2@\\\"\\\"6@7A.5 &2F\\\"\\\"6F7G.) &2J\\\"\\\"6J7K0M*;\\\".G &;!.A &2@\\\"\\\"6@7A.5 &2F\\\"\\\"6F7G.) &2J\\\"\\\"6J7K&/#$+\\\")(\\\"'#&'#/& 8!:\\xD2! )\"),\r\n        peg$decode(\";\\x81.# &;\\x82\"),\r\n        peg$decode(\"%%;O/2#2:\\\"\\\"6:7;/#$+\\\")(\\\"'#&'#.\\\" &\\\"/,#;S/#$+\\\")(\\\"'#&'#.\\\" &\\\"\"),\r\n        peg$decode(\"$;+.\\x83 &;-.} &2B\\\"\\\"6B7C.q &2D\\\"\\\"6D7E.e &22\\\"\\\"6273.Y &28\\\"\\\"6879.M &2:\\\"\\\"6:7;.A &2<\\\"\\\"6<7=.5 &2>\\\"\\\"6>7?.) &2@\\\"\\\"6@7A/\\x8C#0\\x89*;+.\\x83 &;-.} &2B\\\"\\\"6B7C.q &2D\\\"\\\"6D7E.e &22\\\"\\\"6273.Y &28\\\"\\\"6879.M &2:\\\"\\\"6:7;.A &2<\\\"\\\"6<7=.5 &2>\\\"\\\"6>7?.) &2@\\\"\\\"6@7A&&&#\"),\r\n        peg$decode(\"$;y0#*;y&\"),\r\n        peg$decode(\"%3\\x92\\\"\\\"5#7\\xD3/q#24\\\"\\\"6475/b$$;!/&#0#*;!&&&#/L$2J\\\"\\\"6J7K/=$$;!/&#0#*;!&&&#/'$8%:\\xD4% )(%'#($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"2\\xD5\\\"\\\"6\\xD57\\xD6\"),\r\n        peg$decode(\"2\\xD7\\\"\\\"6\\xD77\\xD8\"),\r\n        peg$decode(\"2\\xD9\\\"\\\"6\\xD97\\xDA\"),\r\n        peg$decode(\"2\\xDB\\\"\\\"6\\xDB7\\xDC\"),\r\n        peg$decode(\"2\\xDD\\\"\\\"6\\xDD7\\xDE\"),\r\n        peg$decode(\"2\\xDF\\\"\\\"6\\xDF7\\xE0\"),\r\n        peg$decode(\"2\\xE1\\\"\\\"6\\xE17\\xE2\"),\r\n        peg$decode(\"2\\xE3\\\"\\\"6\\xE37\\xE4\"),\r\n        peg$decode(\"2\\xE5\\\"\\\"6\\xE57\\xE6\"),\r\n        peg$decode(\"2\\xE7\\\"\\\"6\\xE77\\xE8\"),\r\n        peg$decode(\"2\\xE9\\\"\\\"6\\xE97\\xEA\"),\r\n        peg$decode(\"%;\\x85.Y &;\\x86.S &;\\x88.M &;\\x89.G &;\\x8A.A &;\\x8B.; &;\\x8C.5 &;\\x8F./ &;\\x8D.) &;\\x8E.# &;6/& 8!:\\xEB! )\"),\r\n        peg$decode(\"%;\\x84/G#;'/>$;\\x92/5$;'/,$;\\x94/#$+%)(%'#($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;\\x93/' 8!:\\xEC!! )\"),\r\n        peg$decode(\"%;!/5#;!/,$;!/#$+#)(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%$;*.A &;+.; &;-.5 &;3./ &;4.) &;'.# &;(0G*;*.A &;+.; &;-.5 &;3./ &;4.) &;'.# &;(&/& 8!:\\xED! )\"),\r\n        peg$decode(\"%;\\xB6/Y#$%;A/,#;\\xB6/#$+\\\")(\\\"'#&'#06*%;A/,#;\\xB6/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\"%;9/N#%2:\\\"\\\"6:7;/,#;9/#$+\\\")(\\\"'#&'#.\\\" &\\\"/'$8\\\":\\xEE\\\" )(\\\"'#&'#\"),\r\n        peg$decode(\"%;:.c &%;\\x98/Y#$%;A/,#;\\x98/#$+\\\")(\\\"'#&'#06*%;A/,#;\\x98/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#/& 8!:\\xEF! )\"),\r\n        peg$decode(\"%;L.# &;\\x99/]#$%;B/,#;\\x9B/#$+\\\")(\\\"'#&'#06*%;B/,#;\\x9B/#$+\\\")(\\\"'#&'#&/'$8\\\":\\xF0\\\" )(\\\"'#&'#\"),\r\n        peg$decode(\"%;\\x9A.\\\" &\\\"/>#;@/5$;M/,$;?/#$+$)($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%%;6/Y#$%;./,#;6/#$+\\\")(\\\"'#&'#06*%;./,#;6/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#.# &;H/' 8!:\\xF1!! )\"),\r\n        peg$decode(\";\\x9C.) &;\\x9D.# &;\\xA0\"),\r\n        peg$decode(\"%3\\xF2\\\"\\\"5!7\\xF3/:#;</1$;\\x9F/($8#:\\xF4#! )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\xF5\\\"\\\"5'7\\xF6/:#;</1$;\\x9E/($8#:\\xF7#! )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%$;!/&#0#*;!&&&#/' 8!:\\xF8!! )\"),\r\n        peg$decode(\"%2\\xF9\\\"\\\"6\\xF97\\xFA/o#%2J\\\"\\\"6J7K/M#;!.\\\" &\\\"/?$;!.\\\" &\\\"/1$;!.\\\" &\\\"/#$+$)($'#(#'#(\\\"'#&'#.\\\" &\\\"/'$8\\\":\\xFB\\\" )(\\\"'#&'#\"),\r\n        peg$decode(\"%;6/J#%;</,#;\\xA1/#$+\\\")(\\\"'#&'#.\\\" &\\\"/)$8\\\":\\xFC\\\"\\\"! )(\\\"'#&'#\"),\r\n        peg$decode(\";6.) &;T.# &;H\"),\r\n        peg$decode(\"%;\\xA3/Y#$%;B/,#;\\xA4/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xA4/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\xFD\\\"\\\"5&7\\xFE.G &3\\xFF\\\"\\\"5'7\\u0100.; &3\\u0101\\\"\\\"5$7\\u0102./ &3\\u0103\\\"\\\"5%7\\u0104.# &;6/& 8!:\\u0105! )\"),\r\n        peg$decode(\";\\xA5.# &;\\xA0\"),\r\n        peg$decode(\"%3\\u0106\\\"\\\"5(7\\u0107/M#;</D$3\\u0108\\\"\\\"5(7\\u0109./ &3\\u010A\\\"\\\"5(7\\u010B.# &;6/#$+#)(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;6/Y#$%;A/,#;6/#$+\\\")(\\\"'#&'#06*%;A/,#;6/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\"%$;!/&#0#*;!&&&#/' 8!:\\u010C!! )\"),\r\n        peg$decode(\"%;\\xA9/& 8!:\\u010D! )\"),\r\n        peg$decode(\"%;\\xAA/k#;;/b$;\\xAF/Y$$%;B/,#;\\xB0/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xB0/#$+\\\")(\\\"'#&'#&/#$+$)($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\";\\xAB.# &;\\xAC\"),\r\n        peg$decode(\"3\\u010E\\\"\\\"5$7\\u010F.S &3\\u0110\\\"\\\"5%7\\u0111.G &3\\u0112\\\"\\\"5%7\\u0113.; &3\\u0114\\\"\\\"5%7\\u0115./ &3\\u0116\\\"\\\"5+7\\u0117.# &;\\xAD\"),\r\n        peg$decode(\"3\\u0118\\\"\\\"5'7\\u0119./ &3\\u011A\\\"\\\"5)7\\u011B.# &;\\xAD\"),\r\n        peg$decode(\";6.# &;\\xAE\"),\r\n        peg$decode(\"%3\\u011C\\\"\\\"5\\\"7\\u011D/,#;6/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\";\\xAD.# &;6\"),\r\n        peg$decode(\"%;6/5#;</,$;\\xB1/#$+#)(#'#(\\\"'#&'#\"),\r\n        peg$decode(\";6.# &;H\"),\r\n        peg$decode(\"%;\\xB3/5#;./,$;\\x90/#$+#)(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%$;!/&#0#*;!&&&#/' 8!:\\u011E!! )\"),\r\n        peg$decode(\"%;\\x9E/' 8!:\\u011F!! )\"),\r\n        peg$decode(\"%;\\xB6/^#$%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#&/($8\\\":\\u0120\\\"!!)(\\\"'#&'#\"),\r\n        peg$decode(\"%%;7/e#$%2J\\\"\\\"6J7K/,#;7/#$+\\\")(\\\"'#&'#0<*%2J\\\"\\\"6J7K/,#;7/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#/\\\"!&,)\"),\r\n        peg$decode(\"%;L.# &;\\x99/]#$%;B/,#;\\xB8/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xB8/#$+\\\")(\\\"'#&'#&/'$8\\\":\\u0121\\\" )(\\\"'#&'#\"),\r\n        peg$decode(\";\\xB9.# &;\\xA0\"),\r\n        peg$decode(\"%3\\u0122\\\"\\\"5#7\\u0123/:#;</1$;6/($8#:\\u0124#! )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%$;!/&#0#*;!&&&#/' 8!:\\u0125!! )\"),\r\n        peg$decode(\"%;\\x9E/' 8!:\\u0126!! )\"),\r\n        peg$decode(\"%$;\\x9A0#*;\\x9A&/x#;@/o$;M/f$;?/]$$%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#&/'$8%:\\u0127% )(%'#($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\";\\xBE\"),\r\n        peg$decode(\"%3\\u0128\\\"\\\"5&7\\u0129/k#;./b$;\\xC1/Y$$%;A/,#;\\xC1/#$+\\\")(\\\"'#&'#06*%;A/,#;\\xC1/#$+\\\")(\\\"'#&'#&/#$+$)($'#(#'#(\\\"'#&'#.# &;\\xBF\"),\r\n        peg$decode(\"%;6/k#;./b$;\\xC0/Y$$%;A/,#;\\xC0/#$+\\\")(\\\"'#&'#06*%;A/,#;\\xC0/#$+\\\")(\\\"'#&'#&/#$+$)($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;6/;#;</2$;6.# &;H/#$+#)(#'#(\\\"'#&'#\"),\r\n        peg$decode(\";\\xC2.G &;\\xC4.A &;\\xC6.; &;\\xC8.5 &;\\xC9./ &;\\xCA.) &;\\xCB.# &;\\xC0\"),\r\n        peg$decode(\"%3\\u012A\\\"\\\"5%7\\u012B/5#;</,$;\\xC3/#$+#)(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;I/' 8!:\\u012C!! )\"),\r\n        peg$decode(\"%3\\u012D\\\"\\\"5&7\\u012E/\\x97#;</\\x8E$;D/\\x85$;\\xC5/|$$%$;'/&#0#*;'&&&#/,#;\\xC5/#$+\\\")(\\\"'#&'#0C*%$;'/&#0#*;'&&&#/,#;\\xC5/#$+\\\")(\\\"'#&'#&/,$;E/#$+&)(&'#(%'#($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\";t.# &;w\"),\r\n        peg$decode(\"%3\\u012F\\\"\\\"5%7\\u0130/5#;</,$;\\xC7/#$+#)(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;I/' 8!:\\u0131!! )\"),\r\n        peg$decode(\"%3\\u0132\\\"\\\"5&7\\u0133/:#;</1$;I/($8#:\\u0134#! )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\u0135\\\"\\\"5%7\\u0136/]#;</T$%3\\u0137\\\"\\\"5$7\\u0138/& 8!:\\u0139! ).4 &%3\\u013A\\\"\\\"5%7\\u013B/& 8!:\\u013C! )/#$+#)(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\u013D\\\"\\\"5)7\\u013E/R#;</I$3\\u013F\\\"\\\"5#7\\u0140./ &3\\u0141\\\"\\\"5(7\\u0142.# &;6/($8#:\\u0143#! )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\u0144\\\"\\\"5#7\\u0145/\\x93#;</\\x8A$;D/\\x81$%;\\xCC/e#$%2D\\\"\\\"6D7E/,#;\\xCC/#$+\\\")(\\\"'#&'#0<*%2D\\\"\\\"6D7E/,#;\\xCC/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#/,$;E/#$+%)(%'#($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\u0146\\\"\\\"5(7\\u0147./ &3\\u0148\\\"\\\"5$7\\u0149.# &;6/' 8!:\\u014A!! )\"),\r\n        peg$decode(\"%;6/Y#$%;A/,#;6/#$+\\\")(\\\"'#&'#06*%;A/,#;6/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\"%;\\xCF/G#;./>$;\\xCF/5$;./,$;\\x90/#$+%)(%'#($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%$;!/&#0#*;!&&&#/' 8!:\\u014B!! )\"),\r\n        peg$decode(\"%;\\xD1/]#$%;A/,#;\\xD1/#$+\\\")(\\\"'#&'#06*%;A/,#;\\xD1/#$+\\\")(\\\"'#&'#&/'$8\\\":\\u014C\\\" )(\\\"'#&'#\"),\r\n        peg$decode(\"%;\\x99/]#$%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#&/'$8\\\":\\u014D\\\" )(\\\"'#&'#\"),\r\n        peg$decode(\"%;L.O &;\\x99.I &%;@.\\\" &\\\"/:#;t/1$;?.\\\" &\\\"/#$+#)(#'#(\\\"'#&'#/]#$%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#&/'$8\\\":\\u014E\\\" )(\\\"'#&'#\"),\r\n        peg$decode(\"%;\\xD4/]#$%;B/,#;\\xD5/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xD5/#$+\\\")(\\\"'#&'#&/'$8\\\":\\u014F\\\" )(\\\"'#&'#\"),\r\n        peg$decode(\"%;\\x96/& 8!:\\u0150! )\"),\r\n        peg$decode(\"%3\\u0151\\\"\\\"5(7\\u0152/:#;</1$;6/($8#:\\u0153#! )(#'#(\\\"'#&'#.g &%3\\u0154\\\"\\\"5&7\\u0155/:#;</1$;6/($8#:\\u0156#! )(#'#(\\\"'#&'#.: &%3\\u0157\\\"\\\"5*7\\u0158/& 8!:\\u0159! ).# &;\\xA0\"),\r\n        peg$decode(\"%%;6/k#$%;A/2#;6/)$8\\\":\\u015A\\\"\\\"$ )(\\\"'#&'#0<*%;A/2#;6/)$8\\\":\\u015A\\\"\\\"$ )(\\\"'#&'#&/)$8\\\":\\u015B\\\"\\\"! )(\\\"'#&'#.\\\" &\\\"/' 8!:\\u015C!! )\"),\r\n        peg$decode(\"%;\\xD8/Y#$%;A/,#;\\xD8/#$+\\\")(\\\"'#&'#06*%;A/,#;\\xD8/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\"%;\\x99/Y#$%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\"%$;!/&#0#*;!&&&#/' 8!:\\u015D!! )\"),\r\n        peg$decode(\"%;\\xDB/Y#$%;B/,#;\\xDC/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xDC/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\u015E\\\"\\\"5&7\\u015F.; &3\\u0160\\\"\\\"5'7\\u0161./ &3\\u0162\\\"\\\"5*7\\u0163.# &;6/& 8!:\\u0164! )\"),\r\n        peg$decode(\"%3\\u0165\\\"\\\"5&7\\u0166/:#;</1$;\\xDD/($8#:\\u0167#! )(#'#(\\\"'#&'#.} &%3\\xF5\\\"\\\"5'7\\xF6/:#;</1$;\\x9E/($8#:\\u0168#! )(#'#(\\\"'#&'#.P &%3\\u0169\\\"\\\"5+7\\u016A/:#;</1$;\\x9E/($8#:\\u016B#! )(#'#(\\\"'#&'#.# &;\\xA0\"),\r\n        peg$decode(\"3\\u016C\\\"\\\"5+7\\u016D.k &3\\u016E\\\"\\\"5)7\\u016F._ &3\\u0170\\\"\\\"5(7\\u0171.S &3\\u0172\\\"\\\"5'7\\u0173.G &3\\u0174\\\"\\\"5&7\\u0175.; &3\\u0176\\\"\\\"5*7\\u0177./ &3\\u0178\\\"\\\"5)7\\u0179.# &;6\"),\r\n        peg$decode(\";1.\\\" &\\\"\"),\r\n        peg$decode(\"%%;6/k#$%;A/2#;6/)$8\\\":\\u015A\\\"\\\"$ )(\\\"'#&'#0<*%;A/2#;6/)$8\\\":\\u015A\\\"\\\"$ )(\\\"'#&'#&/)$8\\\":\\u015B\\\"\\\"! )(\\\"'#&'#.\\\" &\\\"/' 8!:\\u017A!! )\"),\r\n        peg$decode(\"%;L.# &;\\x99/]#$%;B/,#;\\xE1/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xE1/#$+\\\")(\\\"'#&'#&/'$8\\\":\\u017B\\\" )(\\\"'#&'#\"),\r\n        peg$decode(\";\\xB9.# &;\\xA0\"),\r\n        peg$decode(\"%;\\xE3/Y#$%;A/,#;\\xE3/#$+\\\")(\\\"'#&'#06*%;A/,#;\\xE3/#$+\\\")(\\\"'#&'#&/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\"%;\\xEA/k#;./b$;\\xED/Y$$%;B/,#;\\xE4/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xE4/#$+\\\")(\\\"'#&'#&/#$+$)($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\";\\xE5.; &;\\xE6.5 &;\\xE7./ &;\\xE8.) &;\\xE9.# &;\\xA0\"),\r\n        peg$decode(\"%3\\u017C\\\"\\\"5#7\\u017D/:#;</1$;\\xF0/($8#:\\u017E#! )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\u017F\\\"\\\"5%7\\u0180/:#;</1$;T/($8#:\\u0181#! )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\u0182\\\"\\\"5(7\\u0183/F#;</=$;\\\\.) &;Y.# &;X/($8#:\\u0184#! )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\u0185\\\"\\\"5&7\\u0186/:#;</1$;6/($8#:\\u0187#! )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\u0188\\\"\\\"5%7\\u0189/A#;</8$$;!0#*;!&/($8#:\\u018A#! )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;\\xEB/G#;;/>$;6/5$;;/,$;\\xEC/#$+%)(%'#($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\x92\\\"\\\"5#7\\xD3.# &;6/' 8!:\\u018B!! )\"),\r\n        peg$decode(\"%3\\xB1\\\"\\\"5#7\\u018C.G &3\\xB3\\\"\\\"5#7\\u018D.; &3\\xB7\\\"\\\"5#7\\u018E./ &3\\xB5\\\"\\\"5$7\\u018F.# &;6/' 8!:\\u0190!! )\"),\r\n        peg$decode(\"%;\\xEE/D#%;C/,#;\\xEF/#$+\\\")(\\\"'#&'#.\\\" &\\\"/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\"%;U.) &;\\\\.# &;X/& 8!:\\u0191! )\"),\r\n        peg$decode(\"%%;!.\\\" &\\\"/[#;!.\\\" &\\\"/M$;!.\\\" &\\\"/?$;!.\\\" &\\\"/1$;!.\\\" &\\\"/#$+%)(%'#($'#(#'#(\\\"'#&'#/' 8!:\\u0192!! )\"),\r\n        peg$decode(\"%%;!/?#;!.\\\" &\\\"/1$;!.\\\" &\\\"/#$+#)(#'#(\\\"'#&'#/' 8!:\\u0193!! )\"),\r\n        peg$decode(\";\\xBE\"),\r\n        peg$decode(\"%;\\x9E/^#$%;B/,#;\\xF3/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xF3/#$+\\\")(\\\"'#&'#&/($8\\\":\\u0194\\\"!!)(\\\"'#&'#\"),\r\n        peg$decode(\";\\xF4.# &;\\xA0\"),\r\n        peg$decode(\"%2\\u0195\\\"\\\"6\\u01957\\u0196/L#;</C$2\\u0197\\\"\\\"6\\u01977\\u0198.) &2\\u0199\\\"\\\"6\\u01997\\u019A/($8#:\\u019B#! )(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;\\x9E/^#$%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#06*%;B/,#;\\xA0/#$+\\\")(\\\"'#&'#&/($8\\\":\\u019C\\\"!!)(\\\"'#&'#\"),\r\n        peg$decode(\"%;6/5#;0/,$;\\xF7/#$+#)(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"$;2.) &;4.# &;.0/*;2.) &;4.# &;.&\"),\r\n        peg$decode(\"$;%0#*;%&\"),\r\n        peg$decode(\"%;\\xFA/;#28\\\"\\\"6879/,$;\\xFB/#$+#)(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\u019D\\\"\\\"5%7\\u019E.) &3\\u019F\\\"\\\"5$7\\u01A0/' 8!:\\u01A1!! )\"),\r\n        peg$decode(\"%;\\xFC/J#%28\\\"\\\"6879/,#;^/#$+\\\")(\\\"'#&'#.\\\" &\\\"/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\"%;\\\\.) &;X.# &;\\x82/' 8!:\\u01A2!! )\"),\r\n        peg$decode(\";\\\".S &;!.M &2F\\\"\\\"6F7G.A &2J\\\"\\\"6J7K.5 &2H\\\"\\\"6H7I.) &2N\\\"\\\"6N7O\"),\r\n        peg$decode(\"2L\\\"\\\"6L7M.\\x95 &2B\\\"\\\"6B7C.\\x89 &2<\\\"\\\"6<7=.} &2R\\\"\\\"6R7S.q &2T\\\"\\\"6T7U.e &2V\\\"\\\"6V7W.Y &2P\\\"\\\"6P7Q.M &2@\\\"\\\"6@7A.A &2D\\\"\\\"6D7E.5 &22\\\"\\\"6273.) &2>\\\"\\\"6>7?\"),\r\n        peg$decode(\"%;\\u0100/b#28\\\"\\\"6879/S$;\\xFB/J$%2\\u01A3\\\"\\\"6\\u01A37\\u01A4/,#;\\xEC/#$+\\\")(\\\"'#&'#.\\\" &\\\"/#$+$)($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%3\\u01A5\\\"\\\"5%7\\u01A6.) &3\\u01A7\\\"\\\"5$7\\u01A8/' 8!:\\u01A1!! )\"),\r\n        peg$decode(\"%3\\xB1\\\"\\\"5#7\\xB2.6 &3\\xB3\\\"\\\"5#7\\xB4.* &$;+0#*;+&/' 8!:\\u01A9!! )\"),\r\n        peg$decode(\"%;\\u0104/\\x87#2F\\\"\\\"6F7G/x$;\\u0103/o$2F\\\"\\\"6F7G/`$;\\u0103/W$2F\\\"\\\"6F7G/H$;\\u0103/?$2F\\\"\\\"6F7G/0$;\\u0105/'$8):\\u01AA) )()'#(('#(''#(&'#(%'#($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;#/>#;#/5$;#/,$;#/#$+$)($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;\\u0103/,#;\\u0103/#$+\\\")(\\\"'#&'#\"),\r\n        peg$decode(\"%;\\u0103/5#;\\u0103/,$;\\u0103/#$+#)(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;q/T#$;m0#*;m&/D$%; /,#;\\xF8/#$+\\\")(\\\"'#&'#.\\\" &\\\"/#$+#)(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%2\\u01AB\\\"\\\"6\\u01AB7\\u01AC.) &2\\u01AD\\\"\\\"6\\u01AD7\\u01AE/w#;0/n$;\\u0108/e$$%;B/2#;\\u0109.# &;\\xA0/#$+\\\")(\\\"'#&'#0<*%;B/2#;\\u0109.# &;\\xA0/#$+\\\")(\\\"'#&'#&/#$+$)($'#(#'#(\\\"'#&'#\"),\r\n        peg$decode(\";\\x99.# &;L\"),\r\n        peg$decode(\"%2\\u01AF\\\"\\\"6\\u01AF7\\u01B0/5#;</,$;\\u010A/#$+#)(#'#(\\\"'#&'#\"),\r\n        peg$decode(\"%;D/S#;,/J$2:\\\"\\\"6:7;/;$;,.# &;T/,$;E/#$+%)(%'#($'#(#'#(\\\"'#&'#\")\r\n    ];\r\n    var peg$currPos = 0;\r\n    var peg$savedPos = 0;\r\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\r\n    var peg$maxFailPos = 0;\r\n    var peg$maxFailExpected = [];\r\n    var peg$silentFails = 0;\r\n    var peg$result;\r\n    if (options.startRule !== undefined) {\r\n        if (!(options.startRule in peg$startRuleIndices)) {\r\n            throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\r\n        }\r\n        peg$startRuleIndex = peg$startRuleIndices[options.startRule];\r\n    }\r\n    function text() {\r\n        return input.substring(peg$savedPos, peg$currPos);\r\n    }\r\n    function location() {\r\n        return peg$computeLocation(peg$savedPos, peg$currPos);\r\n    }\r\n    function expected(description, location1) {\r\n        location1 = location1 !== undefined\r\n            ? location1\r\n            : peg$computeLocation(peg$savedPos, peg$currPos);\r\n        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location1);\r\n    }\r\n    function error(message, location1) {\r\n        location1 = location1 !== undefined\r\n            ? location1\r\n            : peg$computeLocation(peg$savedPos, peg$currPos);\r\n        throw peg$buildSimpleError(message, location1);\r\n    }\r\n    function peg$literalExpectation(text1, ignoreCase) {\r\n        return { type: \"literal\", text: text1, ignoreCase: ignoreCase };\r\n    }\r\n    function peg$classExpectation(parts, inverted, ignoreCase) {\r\n        return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\r\n    }\r\n    function peg$anyExpectation() {\r\n        return { type: \"any\" };\r\n    }\r\n    function peg$endExpectation() {\r\n        return { type: \"end\" };\r\n    }\r\n    function peg$otherExpectation(description) {\r\n        return { type: \"other\", description: description };\r\n    }\r\n    function peg$computePosDetails(pos) {\r\n        var details = peg$posDetailsCache[pos];\r\n        var p;\r\n        if (details) {\r\n            return details;\r\n        }\r\n        else {\r\n            p = pos - 1;\r\n            while (!peg$posDetailsCache[p]) {\r\n                p--;\r\n            }\r\n            details = peg$posDetailsCache[p];\r\n            details = {\r\n                line: details.line,\r\n                column: details.column\r\n            };\r\n            while (p < pos) {\r\n                if (input.charCodeAt(p) === 10) {\r\n                    details.line++;\r\n                    details.column = 1;\r\n                }\r\n                else {\r\n                    details.column++;\r\n                }\r\n                p++;\r\n            }\r\n            peg$posDetailsCache[pos] = details;\r\n            return details;\r\n        }\r\n    }\r\n    function peg$computeLocation(startPos, endPos) {\r\n        var startPosDetails = peg$computePosDetails(startPos);\r\n        var endPosDetails = peg$computePosDetails(endPos);\r\n        return {\r\n            start: {\r\n                offset: startPos,\r\n                line: startPosDetails.line,\r\n                column: startPosDetails.column\r\n            },\r\n            end: {\r\n                offset: endPos,\r\n                line: endPosDetails.line,\r\n                column: endPosDetails.column\r\n            }\r\n        };\r\n    }\r\n    function peg$fail(expected1) {\r\n        if (peg$currPos < peg$maxFailPos) {\r\n            return;\r\n        }\r\n        if (peg$currPos > peg$maxFailPos) {\r\n            peg$maxFailPos = peg$currPos;\r\n            peg$maxFailExpected = [];\r\n        }\r\n        peg$maxFailExpected.push(expected1);\r\n    }\r\n    function peg$buildSimpleError(message, location1) {\r\n        return new SyntaxError(message, [], \"\", location1);\r\n    }\r\n    function peg$buildStructuredError(expected1, found, location1) {\r\n        return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);\r\n    }\r\n    function peg$decode(s) {\r\n        return s.split(\"\").map(function (ch) { return ch.charCodeAt(0) - 32; });\r\n    }\r\n    function peg$parseRule(index) {\r\n        var bc = peg$bytecode[index];\r\n        var ip = 0;\r\n        var ips = [];\r\n        var end = bc.length;\r\n        var ends = [];\r\n        var stack = [];\r\n        var params;\r\n        while (true) {\r\n            while (ip < end) {\r\n                switch (bc[ip]) {\r\n                    case 0:\r\n                        stack.push(peg$consts[bc[ip + 1]]);\r\n                        ip += 2;\r\n                        break;\r\n                    case 1:\r\n                        stack.push(undefined);\r\n                        ip++;\r\n                        break;\r\n                    case 2:\r\n                        stack.push(null);\r\n                        ip++;\r\n                        break;\r\n                    case 3:\r\n                        stack.push(peg$FAILED);\r\n                        ip++;\r\n                        break;\r\n                    case 4:\r\n                        stack.push([]);\r\n                        ip++;\r\n                        break;\r\n                    case 5:\r\n                        stack.push(peg$currPos);\r\n                        ip++;\r\n                        break;\r\n                    case 6:\r\n                        stack.pop();\r\n                        ip++;\r\n                        break;\r\n                    case 7:\r\n                        peg$currPos = stack.pop();\r\n                        ip++;\r\n                        break;\r\n                    case 8:\r\n                        stack.length -= bc[ip + 1];\r\n                        ip += 2;\r\n                        break;\r\n                    case 9:\r\n                        stack.splice(-2, 1);\r\n                        ip++;\r\n                        break;\r\n                    case 10:\r\n                        stack[stack.length - 2].push(stack.pop());\r\n                        ip++;\r\n                        break;\r\n                    case 11:\r\n                        stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));\r\n                        ip += 2;\r\n                        break;\r\n                    case 12:\r\n                        stack.push(input.substring(stack.pop(), peg$currPos));\r\n                        ip++;\r\n                        break;\r\n                    case 13:\r\n                        ends.push(end);\r\n                        ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\r\n                        if (stack[stack.length - 1]) {\r\n                            end = ip + 3 + bc[ip + 1];\r\n                            ip += 3;\r\n                        }\r\n                        else {\r\n                            end = ip + 3 + bc[ip + 1] + bc[ip + 2];\r\n                            ip += 3 + bc[ip + 1];\r\n                        }\r\n                        break;\r\n                    case 14:\r\n                        ends.push(end);\r\n                        ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\r\n                        if (stack[stack.length - 1] === peg$FAILED) {\r\n                            end = ip + 3 + bc[ip + 1];\r\n                            ip += 3;\r\n                        }\r\n                        else {\r\n                            end = ip + 3 + bc[ip + 1] + bc[ip + 2];\r\n                            ip += 3 + bc[ip + 1];\r\n                        }\r\n                        break;\r\n                    case 15:\r\n                        ends.push(end);\r\n                        ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\r\n                        if (stack[stack.length - 1] !== peg$FAILED) {\r\n                            end = ip + 3 + bc[ip + 1];\r\n                            ip += 3;\r\n                        }\r\n                        else {\r\n                            end = ip + 3 + bc[ip + 1] + bc[ip + 2];\r\n                            ip += 3 + bc[ip + 1];\r\n                        }\r\n                        break;\r\n                    case 16:\r\n                        if (stack[stack.length - 1] !== peg$FAILED) {\r\n                            ends.push(end);\r\n                            ips.push(ip);\r\n                            end = ip + 2 + bc[ip + 1];\r\n                            ip += 2;\r\n                        }\r\n                        else {\r\n                            ip += 2 + bc[ip + 1];\r\n                        }\r\n                        break;\r\n                    case 17:\r\n                        ends.push(end);\r\n                        ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\r\n                        if (input.length > peg$currPos) {\r\n                            end = ip + 3 + bc[ip + 1];\r\n                            ip += 3;\r\n                        }\r\n                        else {\r\n                            end = ip + 3 + bc[ip + 1] + bc[ip + 2];\r\n                            ip += 3 + bc[ip + 1];\r\n                        }\r\n                        break;\r\n                    case 18:\r\n                        ends.push(end);\r\n                        ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\r\n                        if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {\r\n                            end = ip + 4 + bc[ip + 2];\r\n                            ip += 4;\r\n                        }\r\n                        else {\r\n                            end = ip + 4 + bc[ip + 2] + bc[ip + 3];\r\n                            ip += 4 + bc[ip + 2];\r\n                        }\r\n                        break;\r\n                    case 19:\r\n                        ends.push(end);\r\n                        ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\r\n                        if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {\r\n                            end = ip + 4 + bc[ip + 2];\r\n                            ip += 4;\r\n                        }\r\n                        else {\r\n                            end = ip + 4 + bc[ip + 2] + bc[ip + 3];\r\n                            ip += 4 + bc[ip + 2];\r\n                        }\r\n                        break;\r\n                    case 20:\r\n                        ends.push(end);\r\n                        ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\r\n                        if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {\r\n                            end = ip + 4 + bc[ip + 2];\r\n                            ip += 4;\r\n                        }\r\n                        else {\r\n                            end = ip + 4 + bc[ip + 2] + bc[ip + 3];\r\n                            ip += 4 + bc[ip + 2];\r\n                        }\r\n                        break;\r\n                    case 21:\r\n                        stack.push(input.substr(peg$currPos, bc[ip + 1]));\r\n                        peg$currPos += bc[ip + 1];\r\n                        ip += 2;\r\n                        break;\r\n                    case 22:\r\n                        stack.push(peg$consts[bc[ip + 1]]);\r\n                        peg$currPos += peg$consts[bc[ip + 1]].length;\r\n                        ip += 2;\r\n                        break;\r\n                    case 23:\r\n                        stack.push(peg$FAILED);\r\n                        if (peg$silentFails === 0) {\r\n                            peg$fail(peg$consts[bc[ip + 1]]);\r\n                        }\r\n                        ip += 2;\r\n                        break;\r\n                    case 24:\r\n                        peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];\r\n                        ip += 2;\r\n                        break;\r\n                    case 25:\r\n                        peg$savedPos = peg$currPos;\r\n                        ip++;\r\n                        break;\r\n                    case 26:\r\n                        params = bc.slice(ip + 4, ip + 4 + bc[ip + 3])\r\n                            .map(function (p) { return stack[stack.length - 1 - p]; });\r\n                        stack.splice(stack.length - bc[ip + 2], bc[ip + 2], peg$consts[bc[ip + 1]].apply(null, params));\r\n                        ip += 4 + bc[ip + 3];\r\n                        break;\r\n                    case 27:\r\n                        stack.push(peg$parseRule(bc[ip + 1]));\r\n                        ip += 2;\r\n                        break;\r\n                    case 28:\r\n                        peg$silentFails++;\r\n                        ip++;\r\n                        break;\r\n                    case 29:\r\n                        peg$silentFails--;\r\n                        ip++;\r\n                        break;\r\n                    default:\r\n                        throw new Error(\"Invalid opcode: \" + bc[ip] + \".\");\r\n                }\r\n            }\r\n            if (ends.length > 0) {\r\n                end = ends.pop();\r\n                ip = ips.pop();\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return stack[0];\r\n    }\r\n    options.data = {}; // Object to which header attributes will be assigned during parsing\r\n    function list(head, tail) {\r\n        return [head].concat(tail);\r\n    }\r\n    peg$result = peg$parseRule(peg$startRuleIndex);\r\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\r\n        return peg$result;\r\n    }\r\n    else {\r\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\r\n            peg$fail(peg$endExpectation());\r\n        }\r\n        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length\r\n            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\r\n            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\r\n    }\r\n}\r\nexports.parse = peg$parse;\r\n\r\n\r\n/***/ }),\r\n/* 13 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar parameters_1 = __webpack_require__(14);\r\n/**\r\n * Name Address SIP header.\r\n * @public\r\n */\r\nvar NameAddrHeader = /** @class */ (function (_super) {\r\n    tslib_1.__extends(NameAddrHeader, _super);\r\n    /**\r\n     * Constructor\r\n     * @param uri -\r\n     * @param displayName -\r\n     * @param parameters -\r\n     */\r\n    function NameAddrHeader(uri, displayName, parameters) {\r\n        var _this = _super.call(this, parameters) || this;\r\n        _this.uri = uri;\r\n        _this._displayName = displayName;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(NameAddrHeader.prototype, \"friendlyName\", {\r\n        get: function () {\r\n            return this.displayName || this.uri.aor;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NameAddrHeader.prototype, \"displayName\", {\r\n        get: function () { return this._displayName; },\r\n        set: function (value) {\r\n            this._displayName = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    NameAddrHeader.prototype.clone = function () {\r\n        return new NameAddrHeader(this.uri.clone(), this._displayName, JSON.parse(JSON.stringify(this.parameters)));\r\n    };\r\n    NameAddrHeader.prototype.toString = function () {\r\n        var body = (this.displayName || this.displayName === \"0\") ? '\"' + this.displayName + '\" ' : \"\";\r\n        body += \"<\" + this.uri.toString() + \">\";\r\n        for (var parameter in this.parameters) {\r\n            if (this.parameters.hasOwnProperty(parameter)) {\r\n                body += \";\" + parameter;\r\n                if (this.parameters[parameter] !== null) {\r\n                    body += \"=\" + this.parameters[parameter];\r\n                }\r\n            }\r\n        }\r\n        return body;\r\n    };\r\n    return NameAddrHeader;\r\n}(parameters_1.Parameters));\r\nexports.NameAddrHeader = NameAddrHeader;\r\n\r\n\r\n/***/ }),\r\n/* 14 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * @internal\r\n */\r\nvar Parameters = /** @class */ (function () {\r\n    function Parameters(parameters) {\r\n        this.parameters = {};\r\n        for (var param in parameters) {\r\n            if (parameters.hasOwnProperty(param)) {\r\n                this.setParam(param, parameters[param]);\r\n            }\r\n        }\r\n    }\r\n    Parameters.prototype.setParam = function (key, value) {\r\n        if (key) {\r\n            this.parameters[key.toLowerCase()] = (typeof value === \"undefined\" || value === null) ? null : value.toString();\r\n        }\r\n    };\r\n    Parameters.prototype.getParam = function (key) {\r\n        if (key) {\r\n            return this.parameters[key.toLowerCase()];\r\n        }\r\n    };\r\n    Parameters.prototype.hasParam = function (key) {\r\n        if (key) {\r\n            return !!this.parameters.hasOwnProperty(key.toLowerCase());\r\n        }\r\n        return false;\r\n    };\r\n    Parameters.prototype.deleteParam = function (parameter) {\r\n        parameter = parameter.toLowerCase();\r\n        if (this.parameters.hasOwnProperty(parameter)) {\r\n            var value = this.parameters[parameter];\r\n            delete this.parameters[parameter];\r\n            return value;\r\n        }\r\n    };\r\n    Parameters.prototype.clearParams = function () {\r\n        this.parameters = {};\r\n    };\r\n    return Parameters;\r\n}());\r\nexports.Parameters = Parameters;\r\n\r\n\r\n/***/ }),\r\n/* 15 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar parameters_1 = __webpack_require__(14);\r\n/**\r\n * URI.\r\n * @public\r\n */\r\nvar URI = /** @class */ (function (_super) {\r\n    tslib_1.__extends(URI, _super);\r\n    /**\r\n     * Constructor\r\n     * @param scheme -\r\n     * @param user -\r\n     * @param host -\r\n     * @param port -\r\n     * @param parameters -\r\n     * @param headers -\r\n     */\r\n    function URI(scheme, user, host, port, parameters, headers) {\r\n        var _this = _super.call(this, parameters) || this;\r\n        _this.headers = {};\r\n        // Checks\r\n        if (!host) {\r\n            throw new TypeError('missing or invalid \"host\" parameter');\r\n        }\r\n        // Initialize parameters\r\n        scheme = scheme || \"sip\";\r\n        for (var header in headers) {\r\n            if (headers.hasOwnProperty(header)) {\r\n                _this.setHeader(header, headers[header]);\r\n            }\r\n        }\r\n        // Raw URI\r\n        _this.raw = {\r\n            scheme: scheme,\r\n            user: user,\r\n            host: host,\r\n            port: port\r\n        };\r\n        // Normalized URI\r\n        _this.normal = {\r\n            scheme: scheme.toLowerCase(),\r\n            user: user,\r\n            host: host.toLowerCase(),\r\n            port: port\r\n        };\r\n        return _this;\r\n    }\r\n    Object.defineProperty(URI.prototype, \"scheme\", {\r\n        get: function () { return this.normal.scheme; },\r\n        set: function (value) {\r\n            this.raw.scheme = value;\r\n            this.normal.scheme = value.toLowerCase();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(URI.prototype, \"user\", {\r\n        get: function () { return this.normal.user; },\r\n        set: function (value) {\r\n            this.normal.user = this.raw.user = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(URI.prototype, \"host\", {\r\n        get: function () { return this.normal.host; },\r\n        set: function (value) {\r\n            this.raw.host = value;\r\n            this.normal.host = value.toLowerCase();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(URI.prototype, \"aor\", {\r\n        get: function () { return this.normal.user + \"@\" + this.normal.host; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(URI.prototype, \"port\", {\r\n        get: function () { return this.normal.port; },\r\n        set: function (value) {\r\n            this.normal.port = this.raw.port = value === 0 ? value : value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    URI.prototype.setHeader = function (name, value) {\r\n        this.headers[this.headerize(name)] = (value instanceof Array) ? value : [value];\r\n    };\r\n    URI.prototype.getHeader = function (name) {\r\n        if (name) {\r\n            return this.headers[this.headerize(name)];\r\n        }\r\n    };\r\n    URI.prototype.hasHeader = function (name) {\r\n        return !!name && !!this.headers.hasOwnProperty(this.headerize(name));\r\n    };\r\n    URI.prototype.deleteHeader = function (header) {\r\n        header = this.headerize(header);\r\n        if (this.headers.hasOwnProperty(header)) {\r\n            var value = this.headers[header];\r\n            delete this.headers[header];\r\n            return value;\r\n        }\r\n    };\r\n    URI.prototype.clearHeaders = function () {\r\n        this.headers = {};\r\n    };\r\n    URI.prototype.clone = function () {\r\n        return new URI(this._raw.scheme, this._raw.user || \"\", this._raw.host, this._raw.port, JSON.parse(JSON.stringify(this.parameters)), JSON.parse(JSON.stringify(this.headers)));\r\n    };\r\n    URI.prototype.toRaw = function () {\r\n        return this._toString(this._raw);\r\n    };\r\n    URI.prototype.toString = function () {\r\n        return this._toString(this._normal);\r\n    };\r\n    Object.defineProperty(URI.prototype, \"_normal\", {\r\n        get: function () { return this.normal; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(URI.prototype, \"_raw\", {\r\n        get: function () { return this.raw; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    URI.prototype._toString = function (uri) {\r\n        var uriString = uri.scheme + \":\";\r\n        // add slashes if it's not a sip(s) URI\r\n        if (!uri.scheme.toLowerCase().match(\"^sips?$\")) {\r\n            uriString += \"//\";\r\n        }\r\n        if (uri.user) {\r\n            uriString += this.escapeUser(uri.user) + \"@\";\r\n        }\r\n        uriString += uri.host;\r\n        if (uri.port || uri.port === 0) {\r\n            uriString += \":\" + uri.port;\r\n        }\r\n        for (var parameter in this.parameters) {\r\n            if (this.parameters.hasOwnProperty(parameter)) {\r\n                uriString += \";\" + parameter;\r\n                if (this.parameters[parameter] !== null) {\r\n                    uriString += \"=\" + this.parameters[parameter];\r\n                }\r\n            }\r\n        }\r\n        var headers = [];\r\n        for (var header in this.headers) {\r\n            if (this.headers.hasOwnProperty(header)) {\r\n                for (var idx in this.headers[header]) {\r\n                    if (this.headers[header].hasOwnProperty(idx)) {\r\n                        headers.push(header + \"=\" + this.headers[header][idx]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (headers.length > 0) {\r\n            uriString += \"?\" + headers.join(\"&\");\r\n        }\r\n        return uriString;\r\n    };\r\n    /*\r\n     * Hex-escape a SIP URI user.\r\n     * @private\r\n     * @param {String} user\r\n     */\r\n    URI.prototype.escapeUser = function (user) {\r\n        var decodedUser;\r\n        // FIXME: This is called by toString above which should never throw, but\r\n        // decodeURIComponent can throw and I've seen one case in production where\r\n        // it did throw resulting in a cascading failure. This class should be\r\n        // fixed so that decodeURIComponent is not called at this point (in toString).\r\n        // The user should be decoded when the URI is constructor or some other\r\n        // place where we can catch the error before the URI is created or somesuch.\r\n        try {\r\n            decodedUser = decodeURIComponent(user);\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n        // Don't hex-escape ':' (%3A), '+' (%2B), '?' (%3F\"), '/' (%2F).\r\n        return encodeURIComponent(decodedUser)\r\n            .replace(/%3A/ig, \":\")\r\n            .replace(/%2B/ig, \"+\")\r\n            .replace(/%3F/ig, \"?\")\r\n            .replace(/%2F/ig, \"/\");\r\n    };\r\n    URI.prototype.headerize = function (str) {\r\n        var exceptions = {\r\n            \"Call-Id\": \"Call-ID\",\r\n            \"Cseq\": \"CSeq\",\r\n            \"Min-Se\": \"Min-SE\",\r\n            \"Rack\": \"RAck\",\r\n            \"Rseq\": \"RSeq\",\r\n            \"Www-Authenticate\": \"WWW-Authenticate\",\r\n        };\r\n        var name = str.toLowerCase().replace(/_/g, \"-\").split(\"-\");\r\n        var parts = name.length;\r\n        var hname = \"\";\r\n        for (var part = 0; part < parts; part++) {\r\n            if (part !== 0) {\r\n                hname += \"-\";\r\n            }\r\n            hname += name[part].charAt(0).toUpperCase() + name[part].substring(1);\r\n        }\r\n        if (exceptions[hname]) {\r\n            hname = exceptions[hname];\r\n        }\r\n        return hname;\r\n    };\r\n    return URI;\r\n}(parameters_1.Parameters));\r\nexports.URI = URI;\r\n\r\n\r\n/***/ }),\r\n/* 16 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * @param size -\r\n * @param base -\r\n * @internal\r\n */\r\nfunction createRandomToken(size, base) {\r\n    if (base === void 0) { base = 32; }\r\n    var token = \"\";\r\n    for (var i = 0; i < size; i++) {\r\n        var r = Math.floor(Math.random() * base);\r\n        token += r.toString(base);\r\n    }\r\n    return token;\r\n}\r\nexports.createRandomToken = createRandomToken;\r\n/**\r\n * @internal\r\n */\r\nfunction getReasonPhrase(code) {\r\n    return REASON_PHRASE[code] || \"\";\r\n}\r\nexports.getReasonPhrase = getReasonPhrase;\r\n/**\r\n * @internal\r\n */\r\nfunction newTag() {\r\n    return createRandomToken(10);\r\n}\r\nexports.newTag = newTag;\r\n/**\r\n * @param str -\r\n * @internal\r\n */\r\nfunction headerize(str) {\r\n    var exceptions = {\r\n        \"Call-Id\": \"Call-ID\",\r\n        \"Cseq\": \"CSeq\",\r\n        \"Min-Se\": \"Min-SE\",\r\n        \"Rack\": \"RAck\",\r\n        \"Rseq\": \"RSeq\",\r\n        \"Www-Authenticate\": \"WWW-Authenticate\",\r\n    };\r\n    var name = str.toLowerCase().replace(/_/g, \"-\").split(\"-\");\r\n    var parts = name.length;\r\n    var hname = \"\";\r\n    for (var part = 0; part < parts; part++) {\r\n        if (part !== 0) {\r\n            hname += \"-\";\r\n        }\r\n        hname += name[part].charAt(0).toUpperCase() + name[part].substring(1);\r\n    }\r\n    if (exceptions[hname]) {\r\n        hname = exceptions[hname];\r\n    }\r\n    return hname;\r\n}\r\nexports.headerize = headerize;\r\n/**\r\n * @param str -\r\n * @internal\r\n */\r\nfunction str_utf8_length(str) {\r\n    return encodeURIComponent(str).replace(/%[A-F\\d]{2}/g, \"U\").length;\r\n}\r\nexports.str_utf8_length = str_utf8_length;\r\n/**\r\n * SIP Response Reasons\r\n * DOC: http://www.iana.org/assignments/sip-parameters\r\n * @internal\r\n */\r\nvar REASON_PHRASE = {\r\n    100: \"Trying\",\r\n    180: \"Ringing\",\r\n    181: \"Call Is Being Forwarded\",\r\n    182: \"Queued\",\r\n    183: \"Session Progress\",\r\n    199: \"Early Dialog Terminated\",\r\n    200: \"OK\",\r\n    202: \"Accepted\",\r\n    204: \"No Notification\",\r\n    300: \"Multiple Choices\",\r\n    301: \"Moved Permanently\",\r\n    302: \"Moved Temporarily\",\r\n    305: \"Use Proxy\",\r\n    380: \"Alternative Service\",\r\n    400: \"Bad Request\",\r\n    401: \"Unauthorized\",\r\n    402: \"Payment Required\",\r\n    403: \"Forbidden\",\r\n    404: \"Not Found\",\r\n    405: \"Method Not Allowed\",\r\n    406: \"Not Acceptable\",\r\n    407: \"Proxy Authentication Required\",\r\n    408: \"Request Timeout\",\r\n    410: \"Gone\",\r\n    412: \"Conditional Request Failed\",\r\n    413: \"Request Entity Too Large\",\r\n    414: \"Request-URI Too Long\",\r\n    415: \"Unsupported Media Type\",\r\n    416: \"Unsupported URI Scheme\",\r\n    417: \"Unknown Resource-Priority\",\r\n    420: \"Bad Extension\",\r\n    421: \"Extension Required\",\r\n    422: \"Session Interval Too Small\",\r\n    423: \"Interval Too Brief\",\r\n    428: \"Use Identity Header\",\r\n    429: \"Provide Referrer Identity\",\r\n    430: \"Flow Failed\",\r\n    433: \"Anonymity Disallowed\",\r\n    436: \"Bad Identity-Info\",\r\n    437: \"Unsupported Certificate\",\r\n    438: \"Invalid Identity Header\",\r\n    439: \"First Hop Lacks Outbound Support\",\r\n    440: \"Max-Breadth Exceeded\",\r\n    469: \"Bad Info Package\",\r\n    470: \"Consent Needed\",\r\n    478: \"Unresolvable Destination\",\r\n    480: \"Temporarily Unavailable\",\r\n    481: \"Call/Transaction Does Not Exist\",\r\n    482: \"Loop Detected\",\r\n    483: \"Too Many Hops\",\r\n    484: \"Address Incomplete\",\r\n    485: \"Ambiguous\",\r\n    486: \"Busy Here\",\r\n    487: \"Request Terminated\",\r\n    488: \"Not Acceptable Here\",\r\n    489: \"Bad Event\",\r\n    491: \"Request Pending\",\r\n    493: \"Undecipherable\",\r\n    494: \"Security Agreement Required\",\r\n    500: \"Internal Server Error\",\r\n    501: \"Not Implemented\",\r\n    502: \"Bad Gateway\",\r\n    503: \"Service Unavailable\",\r\n    504: \"Server Time-out\",\r\n    505: \"Version Not Supported\",\r\n    513: \"Message Too Large\",\r\n    580: \"Precondition Failure\",\r\n    600: \"Busy Everywhere\",\r\n    603: \"Decline\",\r\n    604: \"Does Not Exist Anywhere\",\r\n    606: \"Not Acceptable\"\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 17 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar incoming_message_1 = __webpack_require__(10);\r\n/**\r\n * Incoming response message.\r\n * @public\r\n */\r\nvar IncomingResponseMessage = /** @class */ (function (_super) {\r\n    tslib_1.__extends(IncomingResponseMessage, _super);\r\n    function IncomingResponseMessage() {\r\n        return _super.call(this) || this;\r\n    }\r\n    return IncomingResponseMessage;\r\n}(incoming_message_1.IncomingMessage));\r\nexports.IncomingResponseMessage = IncomingResponseMessage;\r\n\r\n\r\n/***/ }),\r\n/* 18 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar name_addr_header_1 = __webpack_require__(13);\r\nvar utils_1 = __webpack_require__(16);\r\n/**\r\n * Outgoing SIP request message.\r\n * @public\r\n */\r\nvar OutgoingRequestMessage = /** @class */ (function () {\r\n    function OutgoingRequestMessage(method, ruri, fromURI, toURI, options, extraHeaders, body) {\r\n        this.headers = {};\r\n        this.extraHeaders = [];\r\n        this.options = OutgoingRequestMessage.getDefaultOptions();\r\n        // Options - merge a deep copy\r\n        if (options) {\r\n            this.options = tslib_1.__assign(tslib_1.__assign({}, this.options), options);\r\n            if (this.options.optionTags && this.options.optionTags.length) {\r\n                this.options.optionTags = this.options.optionTags.slice();\r\n            }\r\n            if (this.options.routeSet && this.options.routeSet.length) {\r\n                this.options.routeSet = this.options.routeSet.slice();\r\n            }\r\n        }\r\n        // Extra headers - deep copy\r\n        if (extraHeaders && extraHeaders.length) {\r\n            this.extraHeaders = extraHeaders.slice();\r\n        }\r\n        // Body - deep copy\r\n        if (body) {\r\n            // TODO: internal representation should be Body\r\n            // this.body = { ...body };\r\n            this.body = {\r\n                body: body.content,\r\n                contentType: body.contentType\r\n            };\r\n        }\r\n        // Method\r\n        this.method = method;\r\n        // RURI\r\n        this.ruri = ruri.clone();\r\n        // From\r\n        this.fromURI = fromURI.clone();\r\n        this.fromTag = this.options.fromTag ? this.options.fromTag : utils_1.newTag();\r\n        this.from = OutgoingRequestMessage.makeNameAddrHeader(this.fromURI, this.options.fromDisplayName, this.fromTag);\r\n        // To\r\n        this.toURI = toURI.clone();\r\n        this.toTag = this.options.toTag;\r\n        this.to = OutgoingRequestMessage.makeNameAddrHeader(this.toURI, this.options.toDisplayName, this.toTag);\r\n        // Call-ID\r\n        this.callId = this.options.callId ? this.options.callId : this.options.callIdPrefix + utils_1.createRandomToken(15);\r\n        // CSeq\r\n        this.cseq = this.options.cseq;\r\n        // The relative order of header fields with different field names is not\r\n        // significant.  However, it is RECOMMENDED that header fields which are\r\n        // needed for proxy processing (Via, Route, Record-Route, Proxy-Require,\r\n        // Max-Forwards, and Proxy-Authorization, for example) appear towards\r\n        // the top of the message to facilitate rapid parsing.\r\n        // https://tools.ietf.org/html/rfc3261#section-7.3.1\r\n        this.setHeader(\"route\", this.options.routeSet);\r\n        this.setHeader(\"via\", \"\");\r\n        this.setHeader(\"to\", this.to.toString());\r\n        this.setHeader(\"from\", this.from.toString());\r\n        this.setHeader(\"cseq\", this.cseq + \" \" + this.method);\r\n        this.setHeader(\"call-id\", this.callId);\r\n        this.setHeader(\"max-forwards\", \"70\");\r\n    }\r\n    /** Get a copy of the default options. */\r\n    OutgoingRequestMessage.getDefaultOptions = function () {\r\n        return {\r\n            callId: \"\",\r\n            callIdPrefix: \"\",\r\n            cseq: 1,\r\n            toDisplayName: \"\",\r\n            toTag: \"\",\r\n            fromDisplayName: \"\",\r\n            fromTag: \"\",\r\n            forceRport: false,\r\n            hackViaTcp: false,\r\n            optionTags: [\"outbound\"],\r\n            routeSet: [],\r\n            userAgentString: \"sip.js\",\r\n            viaHost: \"\"\r\n        };\r\n    };\r\n    OutgoingRequestMessage.makeNameAddrHeader = function (uri, displayName, tag) {\r\n        var parameters = {};\r\n        if (tag) {\r\n            parameters.tag = tag;\r\n        }\r\n        return new name_addr_header_1.NameAddrHeader(uri, displayName, parameters);\r\n    };\r\n    /**\r\n     * Get the value of the given header name at the given position.\r\n     * @param name - header name\r\n     * @returns Returns the specified header, undefined if header doesn't exist.\r\n     */\r\n    OutgoingRequestMessage.prototype.getHeader = function (name) {\r\n        var header = this.headers[utils_1.headerize(name)];\r\n        if (header) {\r\n            if (header[0]) {\r\n                return header[0];\r\n            }\r\n        }\r\n        else {\r\n            var regexp = new RegExp(\"^\\\\s*\" + name + \"\\\\s*:\", \"i\");\r\n            for (var _i = 0, _a = this.extraHeaders; _i < _a.length; _i++) {\r\n                var exHeader = _a[_i];\r\n                if (regexp.test(exHeader)) {\r\n                    return exHeader.substring(exHeader.indexOf(\":\") + 1).trim();\r\n                }\r\n            }\r\n        }\r\n        return;\r\n    };\r\n    /**\r\n     * Get the header/s of the given name.\r\n     * @param name - header name\r\n     * @returns Array with all the headers of the specified name.\r\n     */\r\n    OutgoingRequestMessage.prototype.getHeaders = function (name) {\r\n        var result = [];\r\n        var headerArray = this.headers[utils_1.headerize(name)];\r\n        if (headerArray) {\r\n            for (var _i = 0, headerArray_1 = headerArray; _i < headerArray_1.length; _i++) {\r\n                var headerPart = headerArray_1[_i];\r\n                result.push(headerPart);\r\n            }\r\n        }\r\n        else {\r\n            var regexp = new RegExp(\"^\\\\s*\" + name + \"\\\\s*:\", \"i\");\r\n            for (var _a = 0, _b = this.extraHeaders; _a < _b.length; _a++) {\r\n                var exHeader = _b[_a];\r\n                if (regexp.test(exHeader)) {\r\n                    result.push(exHeader.substring(exHeader.indexOf(\":\") + 1).trim());\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Verify the existence of the given header.\r\n     * @param name - header name\r\n     * @returns true if header with given name exists, false otherwise\r\n     */\r\n    OutgoingRequestMessage.prototype.hasHeader = function (name) {\r\n        if (this.headers[utils_1.headerize(name)]) {\r\n            return true;\r\n        }\r\n        else {\r\n            var regexp = new RegExp(\"^\\\\s*\" + name + \"\\\\s*:\", \"i\");\r\n            for (var _i = 0, _a = this.extraHeaders; _i < _a.length; _i++) {\r\n                var extraHeader = _a[_i];\r\n                if (regexp.test(extraHeader)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Replace the the given header by the given value.\r\n     * @param name - header name\r\n     * @param value - header value\r\n     */\r\n    OutgoingRequestMessage.prototype.setHeader = function (name, value) {\r\n        this.headers[utils_1.headerize(name)] = (value instanceof Array) ? value : [value];\r\n    };\r\n    /**\r\n     * The Via header field indicates the transport used for the transaction\r\n     * and identifies the location where the response is to be sent.  A Via\r\n     * header field value is added only after the transport that will be\r\n     * used to reach the next hop has been selected (which may involve the\r\n     * usage of the procedures in [4]).\r\n     *\r\n     * When the UAC creates a request, it MUST insert a Via into that\r\n     * request.  The protocol name and protocol version in the header field\r\n     * MUST be SIP and 2.0, respectively.  The Via header field value MUST\r\n     * contain a branch parameter.  This parameter is used to identify the\r\n     * transaction created by that request.  This parameter is used by both\r\n     * the client and the server.\r\n     * https://tools.ietf.org/html/rfc3261#section-8.1.1.7\r\n     * @param branchParameter - The branch parameter.\r\n     * @param transport - The sent protocol transport.\r\n     */\r\n    OutgoingRequestMessage.prototype.setViaHeader = function (branch, transport) {\r\n        // FIXME: Hack\r\n        if (this.options.hackViaTcp) {\r\n            transport = \"TCP\";\r\n        }\r\n        var via = \"SIP/2.0/\" + transport;\r\n        via += \" \" + this.options.viaHost + \";branch=\" + branch;\r\n        if (this.options.forceRport) {\r\n            via += \";rport\";\r\n        }\r\n        this.setHeader(\"via\", via);\r\n        this.branch = branch;\r\n    };\r\n    OutgoingRequestMessage.prototype.toString = function () {\r\n        var msg = \"\";\r\n        msg += this.method + \" \" + this.ruri.toRaw() + \" SIP/2.0\\r\\n\";\r\n        for (var header in this.headers) {\r\n            if (this.headers[header]) {\r\n                for (var _i = 0, _a = this.headers[header]; _i < _a.length; _i++) {\r\n                    var headerPart = _a[_i];\r\n                    msg += header + \": \" + headerPart + \"\\r\\n\";\r\n                }\r\n            }\r\n        }\r\n        for (var _b = 0, _c = this.extraHeaders; _b < _c.length; _b++) {\r\n            var header = _c[_b];\r\n            msg += header.trim() + \"\\r\\n\";\r\n        }\r\n        msg += \"Supported: \" + this.options.optionTags.join(\", \") + \"\\r\\n\";\r\n        msg += \"User-Agent: \" + this.options.userAgentString + \"\\r\\n\";\r\n        if (this.body) {\r\n            if (typeof this.body === \"string\") {\r\n                msg += \"Content-Length: \" + utils_1.str_utf8_length(this.body) + \"\\r\\n\\r\\n\";\r\n                msg += this.body;\r\n            }\r\n            else {\r\n                if (this.body.body && this.body.contentType) {\r\n                    msg += \"Content-Type: \" + this.body.contentType + \"\\r\\n\";\r\n                    msg += \"Content-Length: \" + utils_1.str_utf8_length(this.body.body) + \"\\r\\n\\r\\n\";\r\n                    msg += this.body.body;\r\n                }\r\n                else {\r\n                    msg += \"Content-Length: \" + 0 + \"\\r\\n\\r\\n\";\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            msg += \"Content-Length: \" + 0 + \"\\r\\n\\r\\n\";\r\n        }\r\n        return msg;\r\n    };\r\n    return OutgoingRequestMessage;\r\n}());\r\nexports.OutgoingRequestMessage = OutgoingRequestMessage;\r\n\r\n\r\n/***/ }),\r\n/* 19 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar md5_1 = tslib_1.__importDefault(__webpack_require__(20));\r\nvar utils_1 = __webpack_require__(16);\r\n/**\r\n * Digest Authentication.\r\n * @internal\r\n */\r\nvar DigestAuthentication = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     * @param loggerFactory - LoggerFactory.\r\n     * @param username - Username.\r\n     * @param password - Password.\r\n     */\r\n    function DigestAuthentication(loggerFactory, username, password) {\r\n        this.logger = loggerFactory.getLogger(\"sipjs.digestauthentication\");\r\n        this.username = username;\r\n        this.password = password;\r\n        this.nc = 0;\r\n        this.ncHex = \"00000000\";\r\n    }\r\n    /**\r\n     * Performs Digest authentication given a SIP request and the challenge\r\n     * received in a response to that request.\r\n     * @param request -\r\n     * @param challenge -\r\n     * @returns true if credentials were successfully generated, false otherwise.\r\n     */\r\n    DigestAuthentication.prototype.authenticate = function (request, challenge, body) {\r\n        // Inspect and validate the challenge.\r\n        this.algorithm = challenge.algorithm;\r\n        this.realm = challenge.realm;\r\n        this.nonce = challenge.nonce;\r\n        this.opaque = challenge.opaque;\r\n        this.stale = challenge.stale;\r\n        if (this.algorithm) {\r\n            if (this.algorithm !== \"MD5\") {\r\n                this.logger.warn(\"challenge with Digest algorithm different than 'MD5', authentication aborted\");\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            this.algorithm = \"MD5\";\r\n        }\r\n        if (!this.realm) {\r\n            this.logger.warn(\"challenge without Digest realm, authentication aborted\");\r\n            return false;\r\n        }\r\n        if (!this.nonce) {\r\n            this.logger.warn(\"challenge without Digest nonce, authentication aborted\");\r\n            return false;\r\n        }\r\n        // 'qop' can contain a list of values (Array). Let's choose just one.\r\n        if (challenge.qop) {\r\n            if (challenge.qop.indexOf(\"auth\") > -1) {\r\n                this.qop = \"auth\";\r\n            }\r\n            else if (challenge.qop.indexOf(\"auth-int\") > -1) {\r\n                this.qop = \"auth-int\";\r\n            }\r\n            else {\r\n                // Otherwise 'qop' is present but does not contain 'auth' or 'auth-int', so abort here.\r\n                this.logger.warn(\"challenge without Digest qop different than 'auth' or 'auth-int', authentication aborted\");\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            this.qop = undefined;\r\n        }\r\n        // Fill other attributes.\r\n        this.method = request.method;\r\n        this.uri = request.ruri;\r\n        this.cnonce = utils_1.createRandomToken(12);\r\n        this.nc += 1;\r\n        this.updateNcHex();\r\n        // nc-value = 8LHEX. Max value = 'FFFFFFFF'.\r\n        if (this.nc === 4294967296) {\r\n            this.nc = 1;\r\n            this.ncHex = \"00000001\";\r\n        }\r\n        // Calculate the Digest \"response\" value.\r\n        this.calculateResponse(body);\r\n        return true;\r\n    };\r\n    /**\r\n     * Return the Proxy-Authorization or WWW-Authorization header value.\r\n     */\r\n    DigestAuthentication.prototype.toString = function () {\r\n        var authParams = [];\r\n        if (!this.response) {\r\n            throw new Error(\"response field does not exist, cannot generate Authorization header\");\r\n        }\r\n        authParams.push(\"algorithm=\" + this.algorithm);\r\n        authParams.push('username=\"' + this.username + '\"');\r\n        authParams.push('realm=\"' + this.realm + '\"');\r\n        authParams.push('nonce=\"' + this.nonce + '\"');\r\n        authParams.push('uri=\"' + this.uri + '\"');\r\n        authParams.push('response=\"' + this.response + '\"');\r\n        if (this.opaque) {\r\n            authParams.push('opaque=\"' + this.opaque + '\"');\r\n        }\r\n        if (this.qop) {\r\n            authParams.push(\"qop=\" + this.qop);\r\n            authParams.push('cnonce=\"' + this.cnonce + '\"');\r\n            authParams.push(\"nc=\" + this.ncHex);\r\n        }\r\n        return \"Digest \" + authParams.join(\", \");\r\n    };\r\n    /**\r\n     * Generate the 'nc' value as required by Digest in this.ncHex by reading this.nc.\r\n     */\r\n    DigestAuthentication.prototype.updateNcHex = function () {\r\n        var hex = Number(this.nc).toString(16);\r\n        this.ncHex = \"00000000\".substr(0, 8 - hex.length) + hex;\r\n    };\r\n    /**\r\n     * Generate Digest 'response' value.\r\n     */\r\n    DigestAuthentication.prototype.calculateResponse = function (body) {\r\n        var ha2;\r\n        // HA1 = MD5(A1) = MD5(username:realm:password)\r\n        var ha1 = md5_1.default(this.username + \":\" + this.realm + \":\" + this.password);\r\n        if (this.qop === \"auth\") {\r\n            // HA2 = MD5(A2) = MD5(method:digestURI)\r\n            ha2 = md5_1.default(this.method + \":\" + this.uri);\r\n            // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)\r\n            this.response = md5_1.default(ha1 + \":\" + this.nonce + \":\" + this.ncHex + \":\" + this.cnonce + \":auth:\" + ha2);\r\n        }\r\n        else if (this.qop === \"auth-int\") {\r\n            // HA2 = MD5(A2) = MD5(method:digestURI:MD5(entityBody))\r\n            ha2 = md5_1.default(this.method + \":\" + this.uri + \":\" + md5_1.default(body ? body : \"\"));\r\n            // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)\r\n            this.response = md5_1.default(ha1 + \":\" + this.nonce + \":\" + this.ncHex + \":\" + this.cnonce + \":auth-int:\" + ha2);\r\n        }\r\n        else if (this.qop === undefined) {\r\n            // HA2 = MD5(A2) = MD5(method:digestURI)\r\n            ha2 = md5_1.default(this.method + \":\" + this.uri);\r\n            // response = MD5(HA1:nonce:HA2)\r\n            this.response = md5_1.default(ha1 + \":\" + this.nonce + \":\" + ha2);\r\n        }\r\n    };\r\n    return DigestAuthentication;\r\n}());\r\nexports.DigestAuthentication = DigestAuthentication;\r\n\r\n\r\n/***/ }),\r\n/* 20 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n;(function (root, factory) {\r\n\tif (true) {\r\n\t\t// CommonJS\r\n\t\tmodule.exports = exports = factory(__webpack_require__(21));\r\n\t}\r\n\telse {}\r\n}(this, function (CryptoJS) {\r\n\r\n\t(function (Math) {\r\n\t    // Shortcuts\r\n\t    var C = CryptoJS;\r\n\t    var C_lib = C.lib;\r\n\t    var WordArray = C_lib.WordArray;\r\n\t    var Hasher = C_lib.Hasher;\r\n\t    var C_algo = C.algo;\r\n\r\n\t    // Constants table\r\n\t    var T = [];\r\n\r\n\t    // Compute constants\r\n\t    (function () {\r\n\t        for (var i = 0; i < 64; i++) {\r\n\t            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;\r\n\t        }\r\n\t    }());\r\n\r\n\t    /**\r\n\t     * MD5 hash algorithm.\r\n\t     */\r\n\t    var MD5 = C_algo.MD5 = Hasher.extend({\r\n\t        _doReset: function () {\r\n\t            this._hash = new WordArray.init([\r\n\t                0x67452301, 0xefcdab89,\r\n\t                0x98badcfe, 0x10325476\r\n\t            ]);\r\n\t        },\r\n\r\n\t        _doProcessBlock: function (M, offset) {\r\n\t            // Swap endian\r\n\t            for (var i = 0; i < 16; i++) {\r\n\t                // Shortcuts\r\n\t                var offset_i = offset + i;\r\n\t                var M_offset_i = M[offset_i];\r\n\r\n\t                M[offset_i] = (\r\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\r\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\r\n\t                );\r\n\t            }\r\n\r\n\t            // Shortcuts\r\n\t            var H = this._hash.words;\r\n\r\n\t            var M_offset_0  = M[offset + 0];\r\n\t            var M_offset_1  = M[offset + 1];\r\n\t            var M_offset_2  = M[offset + 2];\r\n\t            var M_offset_3  = M[offset + 3];\r\n\t            var M_offset_4  = M[offset + 4];\r\n\t            var M_offset_5  = M[offset + 5];\r\n\t            var M_offset_6  = M[offset + 6];\r\n\t            var M_offset_7  = M[offset + 7];\r\n\t            var M_offset_8  = M[offset + 8];\r\n\t            var M_offset_9  = M[offset + 9];\r\n\t            var M_offset_10 = M[offset + 10];\r\n\t            var M_offset_11 = M[offset + 11];\r\n\t            var M_offset_12 = M[offset + 12];\r\n\t            var M_offset_13 = M[offset + 13];\r\n\t            var M_offset_14 = M[offset + 14];\r\n\t            var M_offset_15 = M[offset + 15];\r\n\r\n\t            // Working varialbes\r\n\t            var a = H[0];\r\n\t            var b = H[1];\r\n\t            var c = H[2];\r\n\t            var d = H[3];\r\n\r\n\t            // Computation\r\n\t            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);\r\n\t            d = FF(d, a, b, c, M_offset_1,  12, T[1]);\r\n\t            c = FF(c, d, a, b, M_offset_2,  17, T[2]);\r\n\t            b = FF(b, c, d, a, M_offset_3,  22, T[3]);\r\n\t            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);\r\n\t            d = FF(d, a, b, c, M_offset_5,  12, T[5]);\r\n\t            c = FF(c, d, a, b, M_offset_6,  17, T[6]);\r\n\t            b = FF(b, c, d, a, M_offset_7,  22, T[7]);\r\n\t            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);\r\n\t            d = FF(d, a, b, c, M_offset_9,  12, T[9]);\r\n\t            c = FF(c, d, a, b, M_offset_10, 17, T[10]);\r\n\t            b = FF(b, c, d, a, M_offset_11, 22, T[11]);\r\n\t            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);\r\n\t            d = FF(d, a, b, c, M_offset_13, 12, T[13]);\r\n\t            c = FF(c, d, a, b, M_offset_14, 17, T[14]);\r\n\t            b = FF(b, c, d, a, M_offset_15, 22, T[15]);\r\n\r\n\t            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);\r\n\t            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);\r\n\t            c = GG(c, d, a, b, M_offset_11, 14, T[18]);\r\n\t            b = GG(b, c, d, a, M_offset_0,  20, T[19]);\r\n\t            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);\r\n\t            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);\r\n\t            c = GG(c, d, a, b, M_offset_15, 14, T[22]);\r\n\t            b = GG(b, c, d, a, M_offset_4,  20, T[23]);\r\n\t            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);\r\n\t            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);\r\n\t            c = GG(c, d, a, b, M_offset_3,  14, T[26]);\r\n\t            b = GG(b, c, d, a, M_offset_8,  20, T[27]);\r\n\t            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);\r\n\t            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);\r\n\t            c = GG(c, d, a, b, M_offset_7,  14, T[30]);\r\n\t            b = GG(b, c, d, a, M_offset_12, 20, T[31]);\r\n\r\n\t            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);\r\n\t            d = HH(d, a, b, c, M_offset_8,  11, T[33]);\r\n\t            c = HH(c, d, a, b, M_offset_11, 16, T[34]);\r\n\t            b = HH(b, c, d, a, M_offset_14, 23, T[35]);\r\n\t            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);\r\n\t            d = HH(d, a, b, c, M_offset_4,  11, T[37]);\r\n\t            c = HH(c, d, a, b, M_offset_7,  16, T[38]);\r\n\t            b = HH(b, c, d, a, M_offset_10, 23, T[39]);\r\n\t            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);\r\n\t            d = HH(d, a, b, c, M_offset_0,  11, T[41]);\r\n\t            c = HH(c, d, a, b, M_offset_3,  16, T[42]);\r\n\t            b = HH(b, c, d, a, M_offset_6,  23, T[43]);\r\n\t            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);\r\n\t            d = HH(d, a, b, c, M_offset_12, 11, T[45]);\r\n\t            c = HH(c, d, a, b, M_offset_15, 16, T[46]);\r\n\t            b = HH(b, c, d, a, M_offset_2,  23, T[47]);\r\n\r\n\t            a = II(a, b, c, d, M_offset_0,  6,  T[48]);\r\n\t            d = II(d, a, b, c, M_offset_7,  10, T[49]);\r\n\t            c = II(c, d, a, b, M_offset_14, 15, T[50]);\r\n\t            b = II(b, c, d, a, M_offset_5,  21, T[51]);\r\n\t            a = II(a, b, c, d, M_offset_12, 6,  T[52]);\r\n\t            d = II(d, a, b, c, M_offset_3,  10, T[53]);\r\n\t            c = II(c, d, a, b, M_offset_10, 15, T[54]);\r\n\t            b = II(b, c, d, a, M_offset_1,  21, T[55]);\r\n\t            a = II(a, b, c, d, M_offset_8,  6,  T[56]);\r\n\t            d = II(d, a, b, c, M_offset_15, 10, T[57]);\r\n\t            c = II(c, d, a, b, M_offset_6,  15, T[58]);\r\n\t            b = II(b, c, d, a, M_offset_13, 21, T[59]);\r\n\t            a = II(a, b, c, d, M_offset_4,  6,  T[60]);\r\n\t            d = II(d, a, b, c, M_offset_11, 10, T[61]);\r\n\t            c = II(c, d, a, b, M_offset_2,  15, T[62]);\r\n\t            b = II(b, c, d, a, M_offset_9,  21, T[63]);\r\n\r\n\t            // Intermediate hash value\r\n\t            H[0] = (H[0] + a) | 0;\r\n\t            H[1] = (H[1] + b) | 0;\r\n\t            H[2] = (H[2] + c) | 0;\r\n\t            H[3] = (H[3] + d) | 0;\r\n\t        },\r\n\r\n\t        _doFinalize: function () {\r\n\t            // Shortcuts\r\n\t            var data = this._data;\r\n\t            var dataWords = data.words;\r\n\r\n\t            var nBitsTotal = this._nDataBytes * 8;\r\n\t            var nBitsLeft = data.sigBytes * 8;\r\n\r\n\t            // Add padding\r\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\r\n\r\n\t            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\r\n\t            var nBitsTotalL = nBitsTotal;\r\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (\r\n\t                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |\r\n\t                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)\r\n\t            );\r\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\r\n\t                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |\r\n\t                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)\r\n\t            );\r\n\r\n\t            data.sigBytes = (dataWords.length + 1) * 4;\r\n\r\n\t            // Hash final blocks\r\n\t            this._process();\r\n\r\n\t            // Shortcuts\r\n\t            var hash = this._hash;\r\n\t            var H = hash.words;\r\n\r\n\t            // Swap endian\r\n\t            for (var i = 0; i < 4; i++) {\r\n\t                // Shortcut\r\n\t                var H_i = H[i];\r\n\r\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\r\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\r\n\t            }\r\n\r\n\t            // Return final computed hash\r\n\t            return hash;\r\n\t        },\r\n\r\n\t        clone: function () {\r\n\t            var clone = Hasher.clone.call(this);\r\n\t            clone._hash = this._hash.clone();\r\n\r\n\t            return clone;\r\n\t        }\r\n\t    });\r\n\r\n\t    function FF(a, b, c, d, x, s, t) {\r\n\t        var n = a + ((b & c) | (~b & d)) + x + t;\r\n\t        return ((n << s) | (n >>> (32 - s))) + b;\r\n\t    }\r\n\r\n\t    function GG(a, b, c, d, x, s, t) {\r\n\t        var n = a + ((b & d) | (c & ~d)) + x + t;\r\n\t        return ((n << s) | (n >>> (32 - s))) + b;\r\n\t    }\r\n\r\n\t    function HH(a, b, c, d, x, s, t) {\r\n\t        var n = a + (b ^ c ^ d) + x + t;\r\n\t        return ((n << s) | (n >>> (32 - s))) + b;\r\n\t    }\r\n\r\n\t    function II(a, b, c, d, x, s, t) {\r\n\t        var n = a + (c ^ (b | ~d)) + x + t;\r\n\t        return ((n << s) | (n >>> (32 - s))) + b;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Shortcut function to the hasher's object interface.\r\n\t     *\r\n\t     * @param {WordArray|string} message The message to hash.\r\n\t     *\r\n\t     * @return {WordArray} The hash.\r\n\t     *\r\n\t     * @static\r\n\t     *\r\n\t     * @example\r\n\t     *\r\n\t     *     var hash = CryptoJS.MD5('message');\r\n\t     *     var hash = CryptoJS.MD5(wordArray);\r\n\t     */\r\n\t    C.MD5 = Hasher._createHelper(MD5);\r\n\r\n\t    /**\r\n\t     * Shortcut function to the HMAC's object interface.\r\n\t     *\r\n\t     * @param {WordArray|string} message The message to hash.\r\n\t     * @param {WordArray|string} key The secret key.\r\n\t     *\r\n\t     * @return {WordArray} The HMAC.\r\n\t     *\r\n\t     * @static\r\n\t     *\r\n\t     * @example\r\n\t     *\r\n\t     *     var hmac = CryptoJS.HmacMD5(message, key);\r\n\t     */\r\n\t    C.HmacMD5 = Hasher._createHmacHelper(MD5);\r\n\t}(Math));\r\n\r\n\r\n\treturn CryptoJS.MD5;\r\n\r\n}));\r\n\r\n/***/ }),\r\n/* 21 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n;(function (root, factory) {\r\n\tif (true) {\r\n\t\t// CommonJS\r\n\t\tmodule.exports = exports = factory();\r\n\t}\r\n\telse {}\r\n}(this, function () {\r\n\r\n\t/**\r\n\t * CryptoJS core components.\r\n\t */\r\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\r\n\t    /*\r\n\t     * Local polyfil of Object.create\r\n\t     */\r\n\t    var create = Object.create || (function () {\r\n\t        function F() {};\r\n\r\n\t        return function (obj) {\r\n\t            var subtype;\r\n\r\n\t            F.prototype = obj;\r\n\r\n\t            subtype = new F();\r\n\r\n\t            F.prototype = null;\r\n\r\n\t            return subtype;\r\n\t        };\r\n\t    }())\r\n\r\n\t    /**\r\n\t     * CryptoJS namespace.\r\n\t     */\r\n\t    var C = {};\r\n\r\n\t    /**\r\n\t     * Library namespace.\r\n\t     */\r\n\t    var C_lib = C.lib = {};\r\n\r\n\t    /**\r\n\t     * Base object for prototypal inheritance.\r\n\t     */\r\n\t    var Base = C_lib.Base = (function () {\r\n\r\n\r\n\t        return {\r\n\t            /**\r\n\t             * Creates a new object that inherits from this object.\r\n\t             *\r\n\t             * @param {Object} overrides Properties to copy into the new object.\r\n\t             *\r\n\t             * @return {Object} The new object.\r\n\t             *\r\n\t             * @static\r\n\t             *\r\n\t             * @example\r\n\t             *\r\n\t             *     var MyType = CryptoJS.lib.Base.extend({\r\n\t             *         field: 'value',\r\n\t             *\r\n\t             *         method: function () {\r\n\t             *         }\r\n\t             *     });\r\n\t             */\r\n\t            extend: function (overrides) {\r\n\t                // Spawn\r\n\t                var subtype = create(this);\r\n\r\n\t                // Augment\r\n\t                if (overrides) {\r\n\t                    subtype.mixIn(overrides);\r\n\t                }\r\n\r\n\t                // Create default initializer\r\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\r\n\t                    subtype.init = function () {\r\n\t                        subtype.$super.init.apply(this, arguments);\r\n\t                    };\r\n\t                }\r\n\r\n\t                // Initializer's prototype is the subtype object\r\n\t                subtype.init.prototype = subtype;\r\n\r\n\t                // Reference supertype\r\n\t                subtype.$super = this;\r\n\r\n\t                return subtype;\r\n\t            },\r\n\r\n\t            /**\r\n\t             * Extends this object and runs the init method.\r\n\t             * Arguments to create() will be passed to init().\r\n\t             *\r\n\t             * @return {Object} The new object.\r\n\t             *\r\n\t             * @static\r\n\t             *\r\n\t             * @example\r\n\t             *\r\n\t             *     var instance = MyType.create();\r\n\t             */\r\n\t            create: function () {\r\n\t                var instance = this.extend();\r\n\t                instance.init.apply(instance, arguments);\r\n\r\n\t                return instance;\r\n\t            },\r\n\r\n\t            /**\r\n\t             * Initializes a newly created object.\r\n\t             * Override this method to add some logic when your objects are created.\r\n\t             *\r\n\t             * @example\r\n\t             *\r\n\t             *     var MyType = CryptoJS.lib.Base.extend({\r\n\t             *         init: function () {\r\n\t             *             // ...\r\n\t             *         }\r\n\t             *     });\r\n\t             */\r\n\t            init: function () {\r\n\t            },\r\n\r\n\t            /**\r\n\t             * Copies properties into this object.\r\n\t             *\r\n\t             * @param {Object} properties The properties to mix in.\r\n\t             *\r\n\t             * @example\r\n\t             *\r\n\t             *     MyType.mixIn({\r\n\t             *         field: 'value'\r\n\t             *     });\r\n\t             */\r\n\t            mixIn: function (properties) {\r\n\t                for (var propertyName in properties) {\r\n\t                    if (properties.hasOwnProperty(propertyName)) {\r\n\t                        this[propertyName] = properties[propertyName];\r\n\t                    }\r\n\t                }\r\n\r\n\t                // IE won't copy toString using the loop above\r\n\t                if (properties.hasOwnProperty('toString')) {\r\n\t                    this.toString = properties.toString;\r\n\t                }\r\n\t            },\r\n\r\n\t            /**\r\n\t             * Creates a copy of this object.\r\n\t             *\r\n\t             * @return {Object} The clone.\r\n\t             *\r\n\t             * @example\r\n\t             *\r\n\t             *     var clone = instance.clone();\r\n\t             */\r\n\t            clone: function () {\r\n\t                return this.init.prototype.extend(this);\r\n\t            }\r\n\t        };\r\n\t    }());\r\n\r\n\t    /**\r\n\t     * An array of 32-bit words.\r\n\t     *\r\n\t     * @property {Array} words The array of 32-bit words.\r\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\r\n\t     */\r\n\t    var WordArray = C_lib.WordArray = Base.extend({\r\n\t        /**\r\n\t         * Initializes a newly created word array.\r\n\t         *\r\n\t         * @param {Array} words (Optional) An array of 32-bit words.\r\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\r\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\r\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\r\n\t         */\r\n\t        init: function (words, sigBytes) {\r\n\t            words = this.words = words || [];\r\n\r\n\t            if (sigBytes != undefined) {\r\n\t                this.sigBytes = sigBytes;\r\n\t            } else {\r\n\t                this.sigBytes = words.length * 4;\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Converts this word array to a string.\r\n\t         *\r\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\r\n\t         *\r\n\t         * @return {string} The stringified word array.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var string = wordArray + '';\r\n\t         *     var string = wordArray.toString();\r\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\r\n\t         */\r\n\t        toString: function (encoder) {\r\n\t            return (encoder || Hex).stringify(this);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Concatenates a word array to this word array.\r\n\t         *\r\n\t         * @param {WordArray} wordArray The word array to append.\r\n\t         *\r\n\t         * @return {WordArray} This word array.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     wordArray1.concat(wordArray2);\r\n\t         */\r\n\t        concat: function (wordArray) {\r\n\t            // Shortcuts\r\n\t            var thisWords = this.words;\r\n\t            var thatWords = wordArray.words;\r\n\t            var thisSigBytes = this.sigBytes;\r\n\t            var thatSigBytes = wordArray.sigBytes;\r\n\r\n\t            // Clamp excess bits\r\n\t            this.clamp();\r\n\r\n\t            // Concat\r\n\t            if (thisSigBytes % 4) {\r\n\t                // Copy one byte at a time\r\n\t                for (var i = 0; i < thatSigBytes; i++) {\r\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\r\n\t                }\r\n\t            } else {\r\n\t                // Copy one word at a time\r\n\t                for (var i = 0; i < thatSigBytes; i += 4) {\r\n\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\r\n\t                }\r\n\t            }\r\n\t            this.sigBytes += thatSigBytes;\r\n\r\n\t            // Chainable\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Removes insignificant bits.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     wordArray.clamp();\r\n\t         */\r\n\t        clamp: function () {\r\n\t            // Shortcuts\r\n\t            var words = this.words;\r\n\t            var sigBytes = this.sigBytes;\r\n\r\n\t            // Clamp\r\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\r\n\t            words.length = Math.ceil(sigBytes / 4);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Creates a copy of this word array.\r\n\t         *\r\n\t         * @return {WordArray} The clone.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var clone = wordArray.clone();\r\n\t         */\r\n\t        clone: function () {\r\n\t            var clone = Base.clone.call(this);\r\n\t            clone.words = this.words.slice(0);\r\n\r\n\t            return clone;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Creates a word array filled with random bytes.\r\n\t         *\r\n\t         * @param {number} nBytes The number of random bytes to generate.\r\n\t         *\r\n\t         * @return {WordArray} The random word array.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\r\n\t         */\r\n\t        random: function (nBytes) {\r\n\t            var words = [];\r\n\r\n\t            var r = (function (m_w) {\r\n\t                var m_w = m_w;\r\n\t                var m_z = 0x3ade68b1;\r\n\t                var mask = 0xffffffff;\r\n\r\n\t                return function () {\r\n\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\r\n\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\r\n\t                    var result = ((m_z << 0x10) + m_w) & mask;\r\n\t                    result /= 0x100000000;\r\n\t                    result += 0.5;\r\n\t                    return result * (Math.random() > .5 ? 1 : -1);\r\n\t                }\r\n\t            });\r\n\r\n\t            for (var i = 0, rcache; i < nBytes; i += 4) {\r\n\t                var _r = r((rcache || Math.random()) * 0x100000000);\r\n\r\n\t                rcache = _r() * 0x3ade67b7;\r\n\t                words.push((_r() * 0x100000000) | 0);\r\n\t            }\r\n\r\n\t            return new WordArray.init(words, nBytes);\r\n\t        }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * Encoder namespace.\r\n\t     */\r\n\t    var C_enc = C.enc = {};\r\n\r\n\t    /**\r\n\t     * Hex encoding strategy.\r\n\t     */\r\n\t    var Hex = C_enc.Hex = {\r\n\t        /**\r\n\t         * Converts a word array to a hex string.\r\n\t         *\r\n\t         * @param {WordArray} wordArray The word array.\r\n\t         *\r\n\t         * @return {string} The hex string.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\r\n\t         */\r\n\t        stringify: function (wordArray) {\r\n\t            // Shortcuts\r\n\t            var words = wordArray.words;\r\n\t            var sigBytes = wordArray.sigBytes;\r\n\r\n\t            // Convert\r\n\t            var hexChars = [];\r\n\t            for (var i = 0; i < sigBytes; i++) {\r\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n\t                hexChars.push((bite >>> 4).toString(16));\r\n\t                hexChars.push((bite & 0x0f).toString(16));\r\n\t            }\r\n\r\n\t            return hexChars.join('');\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Converts a hex string to a word array.\r\n\t         *\r\n\t         * @param {string} hexStr The hex string.\r\n\t         *\r\n\t         * @return {WordArray} The word array.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\r\n\t         */\r\n\t        parse: function (hexStr) {\r\n\t            // Shortcut\r\n\t            var hexStrLength = hexStr.length;\r\n\r\n\t            // Convert\r\n\t            var words = [];\r\n\t            for (var i = 0; i < hexStrLength; i += 2) {\r\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\r\n\t            }\r\n\r\n\t            return new WordArray.init(words, hexStrLength / 2);\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Latin1 encoding strategy.\r\n\t     */\r\n\t    var Latin1 = C_enc.Latin1 = {\r\n\t        /**\r\n\t         * Converts a word array to a Latin1 string.\r\n\t         *\r\n\t         * @param {WordArray} wordArray The word array.\r\n\t         *\r\n\t         * @return {string} The Latin1 string.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\r\n\t         */\r\n\t        stringify: function (wordArray) {\r\n\t            // Shortcuts\r\n\t            var words = wordArray.words;\r\n\t            var sigBytes = wordArray.sigBytes;\r\n\r\n\t            // Convert\r\n\t            var latin1Chars = [];\r\n\t            for (var i = 0; i < sigBytes; i++) {\r\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n\t                latin1Chars.push(String.fromCharCode(bite));\r\n\t            }\r\n\r\n\t            return latin1Chars.join('');\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Converts a Latin1 string to a word array.\r\n\t         *\r\n\t         * @param {string} latin1Str The Latin1 string.\r\n\t         *\r\n\t         * @return {WordArray} The word array.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\r\n\t         */\r\n\t        parse: function (latin1Str) {\r\n\t            // Shortcut\r\n\t            var latin1StrLength = latin1Str.length;\r\n\r\n\t            // Convert\r\n\t            var words = [];\r\n\t            for (var i = 0; i < latin1StrLength; i++) {\r\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\r\n\t            }\r\n\r\n\t            return new WordArray.init(words, latin1StrLength);\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * UTF-8 encoding strategy.\r\n\t     */\r\n\t    var Utf8 = C_enc.Utf8 = {\r\n\t        /**\r\n\t         * Converts a word array to a UTF-8 string.\r\n\t         *\r\n\t         * @param {WordArray} wordArray The word array.\r\n\t         *\r\n\t         * @return {string} The UTF-8 string.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\r\n\t         */\r\n\t        stringify: function (wordArray) {\r\n\t            try {\r\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\r\n\t            } catch (e) {\r\n\t                throw new Error('Malformed UTF-8 data');\r\n\t            }\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Converts a UTF-8 string to a word array.\r\n\t         *\r\n\t         * @param {string} utf8Str The UTF-8 string.\r\n\t         *\r\n\t         * @return {WordArray} The word array.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\r\n\t         */\r\n\t        parse: function (utf8Str) {\r\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Abstract buffered block algorithm template.\r\n\t     *\r\n\t     * The property blockSize must be implemented in a concrete subtype.\r\n\t     *\r\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\r\n\t     */\r\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\r\n\t        /**\r\n\t         * Resets this block algorithm's data buffer to its initial state.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     bufferedBlockAlgorithm.reset();\r\n\t         */\r\n\t        reset: function () {\r\n\t            // Initial values\r\n\t            this._data = new WordArray.init();\r\n\t            this._nDataBytes = 0;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Adds new data to this block algorithm's buffer.\r\n\t         *\r\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     bufferedBlockAlgorithm._append('data');\r\n\t         *     bufferedBlockAlgorithm._append(wordArray);\r\n\t         */\r\n\t        _append: function (data) {\r\n\t            // Convert string to WordArray, else assume WordArray already\r\n\t            if (typeof data == 'string') {\r\n\t                data = Utf8.parse(data);\r\n\t            }\r\n\r\n\t            // Append\r\n\t            this._data.concat(data);\r\n\t            this._nDataBytes += data.sigBytes;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Processes available data blocks.\r\n\t         *\r\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\r\n\t         *\r\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\r\n\t         *\r\n\t         * @return {WordArray} The processed data.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var processedData = bufferedBlockAlgorithm._process();\r\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\r\n\t         */\r\n\t        _process: function (doFlush) {\r\n\t            // Shortcuts\r\n\t            var data = this._data;\r\n\t            var dataWords = data.words;\r\n\t            var dataSigBytes = data.sigBytes;\r\n\t            var blockSize = this.blockSize;\r\n\t            var blockSizeBytes = blockSize * 4;\r\n\r\n\t            // Count blocks ready\r\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\r\n\t            if (doFlush) {\r\n\t                // Round up to include partial blocks\r\n\t                nBlocksReady = Math.ceil(nBlocksReady);\r\n\t            } else {\r\n\t                // Round down to include only full blocks,\r\n\t                // less the number of blocks that must remain in the buffer\r\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\r\n\t            }\r\n\r\n\t            // Count words ready\r\n\t            var nWordsReady = nBlocksReady * blockSize;\r\n\r\n\t            // Count bytes ready\r\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\r\n\r\n\t            // Process blocks\r\n\t            if (nWordsReady) {\r\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\r\n\t                    // Perform concrete-algorithm logic\r\n\t                    this._doProcessBlock(dataWords, offset);\r\n\t                }\r\n\r\n\t                // Remove processed words\r\n\t                var processedWords = dataWords.splice(0, nWordsReady);\r\n\t                data.sigBytes -= nBytesReady;\r\n\t            }\r\n\r\n\t            // Return processed words\r\n\t            return new WordArray.init(processedWords, nBytesReady);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Creates a copy of this object.\r\n\t         *\r\n\t         * @return {Object} The clone.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var clone = bufferedBlockAlgorithm.clone();\r\n\t         */\r\n\t        clone: function () {\r\n\t            var clone = Base.clone.call(this);\r\n\t            clone._data = this._data.clone();\r\n\r\n\t            return clone;\r\n\t        },\r\n\r\n\t        _minBufferSize: 0\r\n\t    });\r\n\r\n\t    /**\r\n\t     * Abstract hasher template.\r\n\t     *\r\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\r\n\t     */\r\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\r\n\t        /**\r\n\t         * Configuration options.\r\n\t         */\r\n\t        cfg: Base.extend(),\r\n\r\n\t        /**\r\n\t         * Initializes a newly created hasher.\r\n\t         *\r\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\r\n\t         */\r\n\t        init: function (cfg) {\r\n\t            // Apply config defaults\r\n\t            this.cfg = this.cfg.extend(cfg);\r\n\r\n\t            // Set initial values\r\n\t            this.reset();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Resets this hasher to its initial state.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     hasher.reset();\r\n\t         */\r\n\t        reset: function () {\r\n\t            // Reset data buffer\r\n\t            BufferedBlockAlgorithm.reset.call(this);\r\n\r\n\t            // Perform concrete-hasher logic\r\n\t            this._doReset();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Updates this hasher with a message.\r\n\t         *\r\n\t         * @param {WordArray|string} messageUpdate The message to append.\r\n\t         *\r\n\t         * @return {Hasher} This hasher.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     hasher.update('message');\r\n\t         *     hasher.update(wordArray);\r\n\t         */\r\n\t        update: function (messageUpdate) {\r\n\t            // Append\r\n\t            this._append(messageUpdate);\r\n\r\n\t            // Update the hash\r\n\t            this._process();\r\n\r\n\t            // Chainable\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Finalizes the hash computation.\r\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\r\n\t         *\r\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n\t         *\r\n\t         * @return {WordArray} The hash.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var hash = hasher.finalize();\r\n\t         *     var hash = hasher.finalize('message');\r\n\t         *     var hash = hasher.finalize(wordArray);\r\n\t         */\r\n\t        finalize: function (messageUpdate) {\r\n\t            // Final message update\r\n\t            if (messageUpdate) {\r\n\t                this._append(messageUpdate);\r\n\t            }\r\n\r\n\t            // Perform concrete-hasher logic\r\n\t            var hash = this._doFinalize();\r\n\r\n\t            return hash;\r\n\t        },\r\n\r\n\t        blockSize: 512/32,\r\n\r\n\t        /**\r\n\t         * Creates a shortcut function to a hasher's object interface.\r\n\t         *\r\n\t         * @param {Hasher} hasher The hasher to create a helper for.\r\n\t         *\r\n\t         * @return {Function} The shortcut function.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\r\n\t         */\r\n\t        _createHelper: function (hasher) {\r\n\t            return function (message, cfg) {\r\n\t                return new hasher.init(cfg).finalize(message);\r\n\t            };\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Creates a shortcut function to the HMAC's object interface.\r\n\t         *\r\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\r\n\t         *\r\n\t         * @return {Function} The shortcut function.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\r\n\t         */\r\n\t        _createHmacHelper: function (hasher) {\r\n\t            return function (message, key) {\r\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\r\n\t            };\r\n\t        }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * Algorithm namespace.\r\n\t     */\r\n\t    var C_algo = C.algo = {};\r\n\r\n\t    return C;\r\n\t}(Math));\r\n\r\n\r\n\treturn CryptoJS;\r\n\r\n}));\r\n\r\n/***/ }),\r\n/* 22 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(16);\r\n/**\r\n * When a UAS wishes to construct a response to a request, it follows\r\n * the general procedures detailed in the following subsections.\r\n * Additional behaviors specific to the response code in question, which\r\n * are not detailed in this section, may also be required.\r\n * https://tools.ietf.org/html/rfc3261#section-8.2.6\r\n * @internal\r\n */\r\nfunction constructOutgoingResponse(message, options) {\r\n    var CRLF = \"\\r\\n\";\r\n    if (options.statusCode < 100 || options.statusCode > 699) {\r\n        throw new TypeError(\"Invalid statusCode: \" + options.statusCode);\r\n    }\r\n    var reasonPhrase = options.reasonPhrase ? options.reasonPhrase : utils_1.getReasonPhrase(options.statusCode);\r\n    // SIP responses are distinguished from requests by having a Status-Line\r\n    // as their start-line.  A Status-Line consists of the protocol version\r\n    // followed by a numeric Status-Code and its associated textual phrase,\r\n    // with each element separated by a single SP character.\r\n    // https://tools.ietf.org/html/rfc3261#section-7.2\r\n    var response = \"SIP/2.0 \" + options.statusCode + \" \" + reasonPhrase + CRLF;\r\n    // One largely non-method-specific guideline for the generation of\r\n    // responses is that UASs SHOULD NOT issue a provisional response for a\r\n    // non-INVITE request.  Rather, UASs SHOULD generate a final response to\r\n    // a non-INVITE request as soon as possible.\r\n    // https://tools.ietf.org/html/rfc3261#section-8.2.6.1\r\n    if (options.statusCode >= 100 && options.statusCode < 200) {\r\n        // TODO\r\n    }\r\n    // When a 100 (Trying) response is generated, any Timestamp header field\r\n    // present in the request MUST be copied into this 100 (Trying)\r\n    // response.  If there is a delay in generating the response, the UAS\r\n    // SHOULD add a delay value into the Timestamp value in the response.\r\n    // This value MUST contain the difference between the time of sending of\r\n    // the response and receipt of the request, measured in seconds.\r\n    // https://tools.ietf.org/html/rfc3261#section-8.2.6.1\r\n    if (options.statusCode === 100) {\r\n        // TODO\r\n    }\r\n    // The From field of the response MUST equal the From header field of\r\n    // the request.  The Call-ID header field of the response MUST equal the\r\n    // Call-ID header field of the request.  The CSeq header field of the\r\n    // response MUST equal the CSeq field of the request.  The Via header\r\n    // field values in the response MUST equal the Via header field values\r\n    // in the request and MUST maintain the same ordering.\r\n    // https://tools.ietf.org/html/rfc3261#section-8.2.6.2\r\n    var fromHeader = \"From: \" + message.getHeader(\"From\") + CRLF;\r\n    var callIdHeader = \"Call-ID: \" + message.callId + CRLF;\r\n    var cSeqHeader = \"CSeq: \" + message.cseq + \" \" + message.method + CRLF;\r\n    var viaHeaders = message.getHeaders(\"via\").reduce(function (previous, current) {\r\n        return previous + \"Via: \" + current + CRLF;\r\n    }, \"\");\r\n    // If a request contained a To tag in the request, the To header field\r\n    // in the response MUST equal that of the request.  However, if the To\r\n    // header field in the request did not contain a tag, the URI in the To\r\n    // header field in the response MUST equal the URI in the To header\r\n    // field; additionally, the UAS MUST add a tag to the To header field in\r\n    // the response (with the exception of the 100 (Trying) response, in\r\n    // which a tag MAY be present).  This serves to identify the UAS that is\r\n    // responding, possibly resulting in a component of a dialog ID.  The\r\n    // same tag MUST be used for all responses to that request, both final\r\n    // and provisional (again excepting the 100 (Trying)).\r\n    // https://tools.ietf.org/html/rfc3261#section-8.2.6.2\r\n    var toHeader = \"To: \" + message.getHeader(\"to\");\r\n    if (options.statusCode > 100 && !message.parseHeader(\"to\").hasParam(\"tag\")) {\r\n        var toTag = options.toTag;\r\n        if (!toTag) {\r\n            // Stateless UAS Behavior...\r\n            // o  To header tags MUST be generated for responses in a stateless\r\n            //    manner - in a manner that will generate the same tag for the\r\n            //    same request consistently.  For information on tag construction\r\n            //    see Section 19.3.\r\n            // https://tools.ietf.org/html/rfc3261#section-8.2.7\r\n            toTag = utils_1.newTag(); // FIXME: newTag() currently generates random tags\r\n        }\r\n        toHeader += \";tag=\" + toTag;\r\n    }\r\n    toHeader += CRLF;\r\n    // FIXME: TODO: needs review... moved to InviteUserAgentServer (as it is specific to that)\r\n    // let recordRouteHeaders = \"\";\r\n    // if (request.method === C.INVITE && statusCode > 100 && statusCode <= 200) {\r\n    //   recordRouteHeaders = request.getHeaders(\"record-route\").reduce((previous, current) => {\r\n    //     return previous + \"Record-Route: \" + current + CRLF;\r\n    //   }, \"\");\r\n    // }\r\n    // FIXME: TODO: needs review...\r\n    var supportedHeader = \"\";\r\n    if (options.supported) {\r\n        supportedHeader = \"Supported: \" + options.supported.join(\", \") + CRLF;\r\n    }\r\n    // FIXME: TODO: needs review...\r\n    var userAgentHeader = \"\";\r\n    if (options.userAgent) {\r\n        userAgentHeader = \"User-Agent: \" + options.userAgent + CRLF;\r\n    }\r\n    var extensionHeaders = \"\";\r\n    if (options.extraHeaders) {\r\n        extensionHeaders = options.extraHeaders.reduce(function (previous, current) {\r\n            return previous + current.trim() + CRLF;\r\n        }, \"\");\r\n    }\r\n    // The relative order of header fields with different field names is not\r\n    // significant.  However, it is RECOMMENDED that header fields which are\r\n    // needed for proxy processing (Via, Route, Record-Route, Proxy-Require,\r\n    // Max-Forwards, and Proxy-Authorization, for example) appear towards\r\n    // the top of the message to facilitate rapid parsing.\r\n    // https://tools.ietf.org/html/rfc3261#section-7.3.1\r\n    // response += recordRouteHeaders;\r\n    response += viaHeaders;\r\n    response += fromHeader;\r\n    response += toHeader;\r\n    response += cSeqHeader;\r\n    response += callIdHeader;\r\n    response += supportedHeader;\r\n    response += userAgentHeader;\r\n    response += extensionHeaders;\r\n    if (options.body) {\r\n        response += \"Content-Type: \" + options.body.contentType + CRLF;\r\n        response += \"Content-Length: \" + utils_1.str_utf8_length(options.body.content) + CRLF + CRLF;\r\n        response += options.body.content;\r\n    }\r\n    else {\r\n        response += \"Content-Length: \" + 0 + CRLF + CRLF;\r\n    }\r\n    return { message: response };\r\n}\r\nexports.constructOutgoingResponse = constructOutgoingResponse;\r\n\r\n\r\n/***/ }),\r\n/* 23 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar grammar_1 = __webpack_require__(11);\r\nvar incoming_request_message_1 = __webpack_require__(9);\r\nvar incoming_response_message_1 = __webpack_require__(17);\r\n/**\r\n * Extract and parse every header of a SIP message.\r\n * @internal\r\n */\r\nvar Parser;\r\n(function (Parser) {\r\n    function getHeader(data, headerStart) {\r\n        // 'start' position of the header.\r\n        var start = headerStart;\r\n        // 'end' position of the header.\r\n        var end = 0;\r\n        // 'partial end' position of the header.\r\n        var partialEnd = 0;\r\n        // End of message.\r\n        if (data.substring(start, start + 2).match(/(^\\r\\n)/)) {\r\n            return -2;\r\n        }\r\n        while (end === 0) {\r\n            // Partial End of Header.\r\n            partialEnd = data.indexOf(\"\\r\\n\", start);\r\n            // 'indexOf' returns -1 if the value to be found never occurs.\r\n            if (partialEnd === -1) {\r\n                return partialEnd;\r\n            }\r\n            if (!data.substring(partialEnd + 2, partialEnd + 4).match(/(^\\r\\n)/) &&\r\n                data.charAt(partialEnd + 2).match(/(^\\s+)/)) {\r\n                // Not the end of the message. Continue from the next position.\r\n                start = partialEnd + 2;\r\n            }\r\n            else {\r\n                end = partialEnd;\r\n            }\r\n        }\r\n        return end;\r\n    }\r\n    Parser.getHeader = getHeader;\r\n    function parseHeader(message, data, headerStart, headerEnd) {\r\n        var hcolonIndex = data.indexOf(\":\", headerStart);\r\n        var headerName = data.substring(headerStart, hcolonIndex).trim();\r\n        var headerValue = data.substring(hcolonIndex + 1, headerEnd).trim();\r\n        var parsed;\r\n        // If header-field is well-known, parse it.\r\n        switch (headerName.toLowerCase()) {\r\n            case \"via\":\r\n            case \"v\":\r\n                message.addHeader(\"via\", headerValue);\r\n                if (message.getHeaders(\"via\").length === 1) {\r\n                    parsed = message.parseHeader(\"Via\");\r\n                    if (parsed) {\r\n                        message.via = parsed;\r\n                        message.viaBranch = parsed.branch;\r\n                    }\r\n                }\r\n                else {\r\n                    parsed = 0;\r\n                }\r\n                break;\r\n            case \"from\":\r\n            case \"f\":\r\n                message.setHeader(\"from\", headerValue);\r\n                parsed = message.parseHeader(\"from\");\r\n                if (parsed) {\r\n                    message.from = parsed;\r\n                    message.fromTag = parsed.getParam(\"tag\");\r\n                }\r\n                break;\r\n            case \"to\":\r\n            case \"t\":\r\n                message.setHeader(\"to\", headerValue);\r\n                parsed = message.parseHeader(\"to\");\r\n                if (parsed) {\r\n                    message.to = parsed;\r\n                    message.toTag = parsed.getParam(\"tag\");\r\n                }\r\n                break;\r\n            case \"record-route\":\r\n                parsed = grammar_1.Grammar.parse(headerValue, \"Record_Route\");\r\n                if (parsed === -1) {\r\n                    parsed = undefined;\r\n                    break;\r\n                }\r\n                if (!(parsed instanceof Array)) {\r\n                    parsed = undefined;\r\n                    break;\r\n                }\r\n                parsed.forEach(function (header) {\r\n                    message.addHeader(\"record-route\", headerValue.substring(header.position, header.offset));\r\n                    message.headers[\"Record-Route\"][message.getHeaders(\"record-route\").length - 1].parsed = header.parsed;\r\n                });\r\n                break;\r\n            case \"call-id\":\r\n            case \"i\":\r\n                message.setHeader(\"call-id\", headerValue);\r\n                parsed = message.parseHeader(\"call-id\");\r\n                if (parsed) {\r\n                    message.callId = headerValue;\r\n                }\r\n                break;\r\n            case \"contact\":\r\n            case \"m\":\r\n                parsed = grammar_1.Grammar.parse(headerValue, \"Contact\");\r\n                if (parsed === -1) {\r\n                    parsed = undefined;\r\n                    break;\r\n                }\r\n                if (!(parsed instanceof Array)) {\r\n                    parsed = undefined;\r\n                    break;\r\n                }\r\n                parsed.forEach(function (header) {\r\n                    message.addHeader(\"contact\", headerValue.substring(header.position, header.offset));\r\n                    message.headers.Contact[message.getHeaders(\"contact\").length - 1].parsed = header.parsed;\r\n                });\r\n                break;\r\n            case \"content-length\":\r\n            case \"l\":\r\n                message.setHeader(\"content-length\", headerValue);\r\n                parsed = message.parseHeader(\"content-length\");\r\n                break;\r\n            case \"content-type\":\r\n            case \"c\":\r\n                message.setHeader(\"content-type\", headerValue);\r\n                parsed = message.parseHeader(\"content-type\");\r\n                break;\r\n            case \"cseq\":\r\n                message.setHeader(\"cseq\", headerValue);\r\n                parsed = message.parseHeader(\"cseq\");\r\n                if (parsed) {\r\n                    message.cseq = parsed.value;\r\n                }\r\n                if (message instanceof incoming_response_message_1.IncomingResponseMessage) {\r\n                    message.method = parsed.method;\r\n                }\r\n                break;\r\n            case \"max-forwards\":\r\n                message.setHeader(\"max-forwards\", headerValue);\r\n                parsed = message.parseHeader(\"max-forwards\");\r\n                break;\r\n            case \"www-authenticate\":\r\n                message.setHeader(\"www-authenticate\", headerValue);\r\n                parsed = message.parseHeader(\"www-authenticate\");\r\n                break;\r\n            case \"proxy-authenticate\":\r\n                message.setHeader(\"proxy-authenticate\", headerValue);\r\n                parsed = message.parseHeader(\"proxy-authenticate\");\r\n                break;\r\n            case \"refer-to\":\r\n            case \"r\":\r\n                message.setHeader(\"refer-to\", headerValue);\r\n                parsed = message.parseHeader(\"refer-to\");\r\n                if (parsed) {\r\n                    message.referTo = parsed;\r\n                }\r\n                break;\r\n            default:\r\n                // Do not parse this header.\r\n                message.addHeader(headerName.toLowerCase(), headerValue);\r\n                parsed = 0;\r\n        }\r\n        if (parsed === undefined) {\r\n            return {\r\n                error: \"error parsing header '\" + headerName + \"'\"\r\n            };\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    Parser.parseHeader = parseHeader;\r\n    function parseMessage(data, logger) {\r\n        var headerStart = 0;\r\n        var headerEnd = data.indexOf(\"\\r\\n\");\r\n        if (headerEnd === -1) {\r\n            logger.warn(\"no CRLF found, not a SIP message, discarded\");\r\n            return;\r\n        }\r\n        // Parse first line. Check if it is a Request or a Reply.\r\n        var firstLine = data.substring(0, headerEnd);\r\n        var parsed = grammar_1.Grammar.parse(firstLine, \"Request_Response\");\r\n        var message;\r\n        if (parsed === -1) {\r\n            logger.warn('error parsing first line of SIP message: \"' + firstLine + '\"');\r\n            return;\r\n        }\r\n        else if (!parsed.status_code) {\r\n            message = new incoming_request_message_1.IncomingRequestMessage();\r\n            message.method = parsed.method;\r\n            message.ruri = parsed.uri;\r\n        }\r\n        else {\r\n            message = new incoming_response_message_1.IncomingResponseMessage();\r\n            message.statusCode = parsed.status_code;\r\n            message.reasonPhrase = parsed.reason_phrase;\r\n        }\r\n        message.data = data;\r\n        headerStart = headerEnd + 2;\r\n        // Loop over every line in data. Detect the end of each header and parse\r\n        // it or simply add to the headers collection.\r\n        var bodyStart;\r\n        while (true) {\r\n            headerEnd = getHeader(data, headerStart);\r\n            // The SIP message has normally finished.\r\n            if (headerEnd === -2) {\r\n                bodyStart = headerStart + 2;\r\n                break;\r\n            }\r\n            else if (headerEnd === -1) {\r\n                // data.indexOf returned -1 due to a malformed message.\r\n                logger.error(\"malformed message\");\r\n                return;\r\n            }\r\n            var parsedHeader = parseHeader(message, data, headerStart, headerEnd);\r\n            if (parsedHeader !== true) {\r\n                logger.error(parsed.error);\r\n                return;\r\n            }\r\n            headerStart = headerEnd + 2;\r\n        }\r\n        // RFC3261 18.3.\r\n        // If there are additional bytes in the transport packet\r\n        // beyond the end of the body, they MUST be discarded.\r\n        if (message.hasHeader(\"content-length\")) {\r\n            message.body = data.substr(bodyStart, Number(message.getHeader(\"content-length\")));\r\n        }\r\n        else {\r\n            message.body = data.substring(bodyStart);\r\n        }\r\n        return message;\r\n    }\r\n    Parser.parseMessage = parseMessage;\r\n})(Parser = exports.Parser || (exports.Parser = {}));\r\n\r\n\r\n/***/ }),\r\n/* 24 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar messages_1 = __webpack_require__(5);\r\nvar session_1 = __webpack_require__(25);\r\nvar timers_1 = __webpack_require__(27);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar bye_user_agent_client_1 = __webpack_require__(42);\r\nvar bye_user_agent_server_1 = __webpack_require__(44);\r\nvar info_user_agent_client_1 = __webpack_require__(46);\r\nvar info_user_agent_server_1 = __webpack_require__(47);\r\nvar message_user_agent_client_1 = __webpack_require__(48);\r\nvar message_user_agent_server_1 = __webpack_require__(49);\r\nvar notify_user_agent_client_1 = __webpack_require__(50);\r\nvar notify_user_agent_server_1 = __webpack_require__(51);\r\nvar prack_user_agent_client_1 = __webpack_require__(52);\r\nvar prack_user_agent_server_1 = __webpack_require__(53);\r\nvar re_invite_user_agent_client_1 = __webpack_require__(54);\r\nvar re_invite_user_agent_server_1 = __webpack_require__(55);\r\nvar refer_user_agent_client_1 = __webpack_require__(56);\r\nvar refer_user_agent_server_1 = __webpack_require__(57);\r\nvar dialog_1 = __webpack_require__(4);\r\n/**\r\n * Session Dialog.\r\n * @public\r\n */\r\nvar SessionDialog = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SessionDialog, _super);\r\n    function SessionDialog(initialTransaction, core, state, delegate) {\r\n        var _this = _super.call(this, core, state) || this;\r\n        _this.initialTransaction = initialTransaction;\r\n        /** The state of the offer/answer exchange. */\r\n        _this._signalingState = session_1.SignalingState.Initial;\r\n        /** True if waiting for an ACK to the initial transaction 2xx (UAS only). */\r\n        _this.ackWait = false;\r\n        _this.delegate = delegate;\r\n        if (initialTransaction instanceof transactions_1.InviteServerTransaction) {\r\n            // If we're created by an invite server transaction, we're\r\n            // going to be waiting for an ACK if are to be confirmed.\r\n            _this.ackWait = true;\r\n        }\r\n        // If we're confirmed upon creation start the retransmitting whatever\r\n        // the 2xx final response was that confirmed us into existence.\r\n        if (!_this.early) {\r\n            _this.start2xxRetransmissionTimer();\r\n        }\r\n        _this.signalingStateTransition(initialTransaction.request);\r\n        _this.logger = core.loggerFactory.getLogger(\"sip.invite-dialog\");\r\n        _this.logger.log(\"INVITE dialog \" + _this.id + \" constructed\");\r\n        return _this;\r\n    }\r\n    SessionDialog.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        this._signalingState = session_1.SignalingState.Closed;\r\n        this._offer = undefined;\r\n        this._answer = undefined;\r\n        if (this.invite2xxTimer) {\r\n            clearTimeout(this.invite2xxTimer);\r\n            this.invite2xxTimer = undefined;\r\n        }\r\n        // The UAS MUST still respond to any pending requests received for that\r\n        // dialog.  It is RECOMMENDED that a 487 (Request Terminated) response\r\n        // be generated to those pending requests.\r\n        // https://tools.ietf.org/html/rfc3261#section-15.1.2\r\n        // TODO:\r\n        // this.userAgentServers.forEach((uas) => uas.reply(487));\r\n        this.logger.log(\"INVITE dialog \" + this.id + \" destroyed\");\r\n    };\r\n    Object.defineProperty(SessionDialog.prototype, \"sessionState\", {\r\n        // FIXME: Need real state machine\r\n        get: function () {\r\n            if (this.early) {\r\n                return session_1.SessionState.Early;\r\n            }\r\n            else if (this.ackWait) {\r\n                return session_1.SessionState.AckWait;\r\n            }\r\n            else if (this._signalingState === session_1.SignalingState.Closed) {\r\n                return session_1.SessionState.Terminated;\r\n            }\r\n            else {\r\n                return session_1.SessionState.Confirmed;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SessionDialog.prototype, \"signalingState\", {\r\n        /** The state of the offer/answer exchange. */\r\n        get: function () {\r\n            return this._signalingState;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SessionDialog.prototype, \"offer\", {\r\n        /** The current offer. Undefined unless signaling state HaveLocalOffer, HaveRemoteOffer, of Stable. */\r\n        get: function () {\r\n            return this._offer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SessionDialog.prototype, \"answer\", {\r\n        /** The current answer. Undefined unless signaling state Stable. */\r\n        get: function () {\r\n            return this._answer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** Confirm the dialog. Only matters if dialog is currently early. */\r\n    SessionDialog.prototype.confirm = function () {\r\n        // When we're confirmed start the retransmitting whatever\r\n        // the 2xx final response that may have confirmed us.\r\n        if (this.early) {\r\n            this.start2xxRetransmissionTimer();\r\n        }\r\n        _super.prototype.confirm.call(this);\r\n    };\r\n    /** Re-confirm the dialog. Only matters if handling re-INVITE request. */\r\n    SessionDialog.prototype.reConfirm = function () {\r\n        // When we're confirmed start the retransmitting whatever\r\n        // the 2xx final response that may have confirmed us.\r\n        if (this.reinviteUserAgentServer) {\r\n            this.startReInvite2xxRetransmissionTimer();\r\n        }\r\n    };\r\n    /**\r\n     * The UAC core MUST generate an ACK request for each 2xx received from\r\n     * the transaction layer.  The header fields of the ACK are constructed\r\n     * in the same way as for any request sent within a dialog (see Section\r\n     * 12) with the exception of the CSeq and the header fields related to\r\n     * authentication.  The sequence number of the CSeq header field MUST be\r\n     * the same as the INVITE being acknowledged, but the CSeq method MUST\r\n     * be ACK.  The ACK MUST contain the same credentials as the INVITE.  If\r\n     * the 2xx contains an offer (based on the rules above), the ACK MUST\r\n     * carry an answer in its body.  If the offer in the 2xx response is not\r\n     * acceptable, the UAC core MUST generate a valid answer in the ACK and\r\n     * then send a BYE immediately.\r\n     * https://tools.ietf.org/html/rfc3261#section-13.2.2.4\r\n     * @param options - ACK options bucket.\r\n     */\r\n    SessionDialog.prototype.ack = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        this.logger.log(\"INVITE dialog \" + this.id + \" sending ACK request\");\r\n        var transaction;\r\n        if (this.reinviteUserAgentClient) {\r\n            // We're sending ACK for a re-INVITE\r\n            if (!(this.reinviteUserAgentClient.transaction instanceof transactions_1.InviteClientTransaction)) {\r\n                throw new Error(\"Transaction not instance of InviteClientTransaction.\");\r\n            }\r\n            transaction = this.reinviteUserAgentClient.transaction;\r\n            this.reinviteUserAgentClient = undefined;\r\n        }\r\n        else {\r\n            // We're sending ACK for the initial INVITE\r\n            if (!(this.initialTransaction instanceof transactions_1.InviteClientTransaction)) {\r\n                throw new Error(\"Initial transaction not instance of InviteClientTransaction.\");\r\n            }\r\n            transaction = this.initialTransaction;\r\n        }\r\n        options.cseq = transaction.request.cseq; // ACK cseq is INVITE cseq\r\n        var message = this.createOutgoingRequestMessage(messages_1.C.ACK, options);\r\n        transaction.ackResponse(message); // See InviteClientTransaction for details.\r\n        this.signalingStateTransition(message);\r\n        return { message: message };\r\n    };\r\n    /**\r\n     * Terminating a Session\r\n     *\r\n     * This section describes the procedures for terminating a session\r\n     * established by SIP.  The state of the session and the state of the\r\n     * dialog are very closely related.  When a session is initiated with an\r\n     * INVITE, each 1xx or 2xx response from a distinct UAS creates a\r\n     * dialog, and if that response completes the offer/answer exchange, it\r\n     * also creates a session.  As a result, each session is \"associated\"\r\n     * with a single dialog - the one which resulted in its creation.  If an\r\n     * initial INVITE generates a non-2xx final response, that terminates\r\n     * all sessions (if any) and all dialogs (if any) that were created\r\n     * through responses to the request.  By virtue of completing the\r\n     * transaction, a non-2xx final response also prevents further sessions\r\n     * from being created as a result of the INVITE.  The BYE request is\r\n     * used to terminate a specific session or attempted session.  In this\r\n     * case, the specific session is the one with the peer UA on the other\r\n     * side of the dialog.  When a BYE is received on a dialog, any session\r\n     * associated with that dialog SHOULD terminate.  A UA MUST NOT send a\r\n     * BYE outside of a dialog.  The caller's UA MAY send a BYE for either\r\n     * confirmed or early dialogs, and the callee's UA MAY send a BYE on\r\n     * confirmed dialogs, but MUST NOT send a BYE on early dialogs.\r\n     *\r\n     * However, the callee's UA MUST NOT send a BYE on a confirmed dialog\r\n     * until it has received an ACK for its 2xx response or until the server\r\n     * transaction times out.  If no SIP extensions have defined other\r\n     * application layer states associated with the dialog, the BYE also\r\n     * terminates the dialog.\r\n     *\r\n     * https://tools.ietf.org/html/rfc3261#section-15\r\n     * FIXME: Make these proper Exceptions...\r\n     * @param options - BYE options bucket.\r\n     * @returns\r\n     * Throws `Error` if callee's UA attempts a BYE on an early dialog.\r\n     * Throws `Error` if callee's UA attempts a BYE on a confirmed dialog\r\n     *                while it's waiting on the ACK for its 2xx response.\r\n     */\r\n    SessionDialog.prototype.bye = function (delegate, options) {\r\n        this.logger.log(\"INVITE dialog \" + this.id + \" sending BYE request\");\r\n        // The caller's UA MAY send a BYE for either\r\n        // confirmed or early dialogs, and the callee's UA MAY send a BYE on\r\n        // confirmed dialogs, but MUST NOT send a BYE on early dialogs.\r\n        //\r\n        // However, the callee's UA MUST NOT send a BYE on a confirmed dialog\r\n        // until it has received an ACK for its 2xx response or until the server\r\n        // transaction times out.\r\n        // https://tools.ietf.org/html/rfc3261#section-15\r\n        if (this.initialTransaction instanceof transactions_1.InviteServerTransaction) {\r\n            if (this.early) {\r\n                // FIXME: TODO: This should throw a proper exception.\r\n                throw new Error(\"UAS MUST NOT send a BYE on early dialogs.\");\r\n            }\r\n            if (this.ackWait && this.initialTransaction.state !== transactions_1.TransactionState.Terminated) {\r\n                // FIXME: TODO: This should throw a proper exception.\r\n                throw new Error(\"UAS MUST NOT send a BYE on a confirmed dialog \" +\r\n                    \"until it has received an ACK for its 2xx response \" +\r\n                    \"or until the server transaction times out.\");\r\n            }\r\n        }\r\n        // A BYE request is constructed as would any other request within a\r\n        // dialog, as described in Section 12.\r\n        //\r\n        // Once the BYE is constructed, the UAC core creates a new non-INVITE\r\n        // client transaction, and passes it the BYE request.  The UAC MUST\r\n        // consider the session terminated (and therefore stop sending or\r\n        // listening for media) as soon as the BYE request is passed to the\r\n        // client transaction.  If the response for the BYE is a 481\r\n        // (Call/Transaction Does Not Exist) or a 408 (Request Timeout) or no\r\n        // response at all is received for the BYE (that is, a timeout is\r\n        // returned by the client transaction), the UAC MUST consider the\r\n        // session and the dialog terminated.\r\n        // https://tools.ietf.org/html/rfc3261#section-15.1.1\r\n        return new bye_user_agent_client_1.ByeUserAgentClient(this, delegate, options);\r\n    };\r\n    /**\r\n     * An INFO request can be associated with an Info Package (see\r\n     * Section 5), or associated with a legacy INFO usage (see Section 2).\r\n     *\r\n     * The construction of the INFO request is the same as any other\r\n     * non-target refresh request within an existing invite dialog usage as\r\n     * described in Section 12.2 of RFC 3261.\r\n     * https://tools.ietf.org/html/rfc6086#section-4.2.1\r\n     * @param options - Options bucket.\r\n     */\r\n    SessionDialog.prototype.info = function (delegate, options) {\r\n        this.logger.log(\"INVITE dialog \" + this.id + \" sending INFO request\");\r\n        if (this.early) {\r\n            // FIXME: TODO: This should throw a proper exception.\r\n            throw new Error(\"Dialog not confirmed.\");\r\n        }\r\n        return new info_user_agent_client_1.InfoUserAgentClient(this, delegate, options);\r\n    };\r\n    /**\r\n     * Modifying an Existing Session\r\n     *\r\n     * A successful INVITE request (see Section 13) establishes both a\r\n     * dialog between two user agents and a session using the offer-answer\r\n     * model.  Section 12 explains how to modify an existing dialog using a\r\n     * target refresh request (for example, changing the remote target URI\r\n     * of the dialog).  This section describes how to modify the actual\r\n     * session.  This modification can involve changing addresses or ports,\r\n     * adding a media stream, deleting a media stream, and so on.  This is\r\n     * accomplished by sending a new INVITE request within the same dialog\r\n     * that established the session.  An INVITE request sent within an\r\n     * existing dialog is known as a re-INVITE.\r\n     *\r\n     *    Note that a single re-INVITE can modify the dialog and the\r\n     *    parameters of the session at the same time.\r\n     *\r\n     * Either the caller or callee can modify an existing session.\r\n     * https://tools.ietf.org/html/rfc3261#section-14\r\n     * @param options - Options bucket\r\n     */\r\n    SessionDialog.prototype.invite = function (delegate, options) {\r\n        this.logger.log(\"INVITE dialog \" + this.id + \" sending INVITE request\");\r\n        if (this.early) {\r\n            // FIXME: TODO: This should throw a proper exception.\r\n            throw new Error(\"Dialog not confirmed.\");\r\n        }\r\n        // Note that a UAC MUST NOT initiate a new INVITE transaction within a\r\n        // dialog while another INVITE transaction is in progress in either\r\n        // direction.\r\n        //\r\n        //    1. If there is an ongoing INVITE client transaction, the TU MUST\r\n        //       wait until the transaction reaches the completed or terminated\r\n        //       state before initiating the new INVITE.\r\n        //\r\n        //    2. If there is an ongoing INVITE server transaction, the TU MUST\r\n        //       wait until the transaction reaches the confirmed or terminated\r\n        //       state before initiating the new INVITE.\r\n        //\r\n        // However, a UA MAY initiate a regular transaction while an INVITE\r\n        // transaction is in progress.  A UA MAY also initiate an INVITE\r\n        // transaction while a regular transaction is in progress.\r\n        // https://tools.ietf.org/html/rfc3261#section-14.1\r\n        if (this.reinviteUserAgentClient) {\r\n            // FIXME: TODO: This should throw a proper exception.\r\n            throw new Error(\"There is an ongoing re-INVITE client transaction.\");\r\n        }\r\n        if (this.reinviteUserAgentServer) {\r\n            // FIXME: TODO: This should throw a proper exception.\r\n            throw new Error(\"There is an ongoing re-INVITE server transaction.\");\r\n        }\r\n        return new re_invite_user_agent_client_1.ReInviteUserAgentClient(this, delegate, options);\r\n    };\r\n    /**\r\n     * A UAC MAY associate a MESSAGE request with an existing dialog.  If a\r\n     * MESSAGE request is sent within a dialog, it is \"associated\" with any\r\n     * media session or sessions associated with that dialog.\r\n     * https://tools.ietf.org/html/rfc3428#section-4\r\n     * @param options - Options bucket.\r\n     */\r\n    SessionDialog.prototype.message = function (delegate, options) {\r\n        this.logger.log(\"INVITE dialog \" + this.id + \" sending MESSAGE request\");\r\n        if (this.early) {\r\n            // FIXME: TODO: This should throw a proper exception.\r\n            throw new Error(\"Dialog not confirmed.\");\r\n        }\r\n        var message = this.createOutgoingRequestMessage(messages_1.C.MESSAGE, options);\r\n        return new message_user_agent_client_1.MessageUserAgentClient(this.core, message, delegate);\r\n    };\r\n    /**\r\n     * The NOTIFY mechanism defined in [2] MUST be used to inform the agent\r\n     * sending the REFER of the status of the reference.\r\n     * https://tools.ietf.org/html/rfc3515#section-2.4.4\r\n     * @param options - Options bucket.\r\n     */\r\n    SessionDialog.prototype.notify = function (delegate, options) {\r\n        this.logger.log(\"INVITE dialog \" + this.id + \" sending NOTIFY request\");\r\n        if (this.early) {\r\n            // FIXME: TODO: This should throw a proper exception.\r\n            throw new Error(\"Dialog not confirmed.\");\r\n        }\r\n        return new notify_user_agent_client_1.NotifyUserAgentClient(this, delegate, options);\r\n    };\r\n    /**\r\n     * Assuming the response is to be transmitted reliably, the UAC MUST\r\n     * create a new request with method PRACK.  This request is sent within\r\n     * the dialog associated with the provisional response (indeed, the\r\n     * provisional response may have created the dialog).  PRACK requests\r\n     * MAY contain bodies, which are interpreted according to their type and\r\n     * disposition.\r\n     * https://tools.ietf.org/html/rfc3262#section-4\r\n     * @param options - Options bucket.\r\n     */\r\n    SessionDialog.prototype.prack = function (delegate, options) {\r\n        this.logger.log(\"INVITE dialog \" + this.id + \" sending PRACK request\");\r\n        return new prack_user_agent_client_1.PrackUserAgentClient(this, delegate, options);\r\n    };\r\n    /**\r\n     * REFER is a SIP request and is constructed as defined in [1].  A REFER\r\n     * request MUST contain exactly one Refer-To header field value.\r\n     * https://tools.ietf.org/html/rfc3515#section-2.4.1\r\n     * @param options - Options bucket.\r\n     */\r\n    SessionDialog.prototype.refer = function (delegate, options) {\r\n        this.logger.log(\"INVITE dialog \" + this.id + \" sending REFER request\");\r\n        if (this.early) {\r\n            // FIXME: TODO: This should throw a proper exception.\r\n            throw new Error(\"Dialog not confirmed.\");\r\n        }\r\n        // FIXME: TODO: Validate Refer-To header field value.\r\n        return new refer_user_agent_client_1.ReferUserAgentClient(this, delegate, options);\r\n    };\r\n    /**\r\n     * Requests sent within a dialog, as any other requests, are atomic.  If\r\n     * a particular request is accepted by the UAS, all the state changes\r\n     * associated with it are performed.  If the request is rejected, none\r\n     * of the state changes are performed.\r\n     * https://tools.ietf.org/html/rfc3261#section-12.2.2\r\n     * @param message - Incoming request message within this dialog.\r\n     */\r\n    SessionDialog.prototype.receiveRequest = function (message) {\r\n        this.logger.log(\"INVITE dialog \" + this.id + \" received \" + message.method + \" request\");\r\n        // Response retransmissions cease when an ACK request for the\r\n        // response is received.  This is independent of whatever transport\r\n        // protocols are used to send the response.\r\n        // https://tools.ietf.org/html/rfc6026#section-8.1\r\n        if (message.method === messages_1.C.ACK) {\r\n            // If ackWait is true, then this is the ACK to the initial INVITE,\r\n            // otherwise this is an ACK to an in dialog INVITE. In either case,\r\n            // guard to make sure the sequence number of the ACK matches the INVITE.\r\n            if (this.ackWait) {\r\n                if (this.initialTransaction instanceof transactions_1.InviteClientTransaction) {\r\n                    this.logger.warn(\"INVITE dialog \" + this.id + \" received unexpected \" + message.method + \" request, dropping.\");\r\n                    return;\r\n                }\r\n                if (this.initialTransaction.request.cseq !== message.cseq) {\r\n                    this.logger.warn(\"INVITE dialog \" + this.id + \" received unexpected \" + message.method + \" request, dropping.\");\r\n                    return;\r\n                }\r\n                // Update before the delegate has a chance to handle the\r\n                // message as delegate may callback into this dialog.\r\n                this.ackWait = false;\r\n            }\r\n            else {\r\n                if (!this.reinviteUserAgentServer) {\r\n                    this.logger.warn(\"INVITE dialog \" + this.id + \" received unexpected \" + message.method + \" request, dropping.\");\r\n                    return;\r\n                }\r\n                if (this.reinviteUserAgentServer.transaction.request.cseq !== message.cseq) {\r\n                    this.logger.warn(\"INVITE dialog \" + this.id + \" received unexpected \" + message.method + \" request, dropping.\");\r\n                    return;\r\n                }\r\n                this.reinviteUserAgentServer = undefined;\r\n            }\r\n            this.signalingStateTransition(message);\r\n            if (this.delegate && this.delegate.onAck) {\r\n                this.delegate.onAck({ message: message });\r\n            }\r\n            return;\r\n        }\r\n        // Request within a dialog out of sequence guard.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\r\n        if (!this.sequenceGuard(message)) {\r\n            this.logger.log(\"INVITE dialog \" + this.id + \" rejected out of order \" + message.method + \" request.\");\r\n            return;\r\n        }\r\n        if (message.method === messages_1.C.INVITE) {\r\n            // A UAS that receives a second INVITE before it sends the final\r\n            // response to a first INVITE with a lower CSeq sequence number on the\r\n            // same dialog MUST return a 500 (Server Internal Error) response to the\r\n            // second INVITE and MUST include a Retry-After header field with a\r\n            // randomly chosen value of between 0 and 10 seconds.\r\n            // https://tools.ietf.org/html/rfc3261#section-14.2\r\n            if (this.reinviteUserAgentServer) {\r\n                // https://tools.ietf.org/html/rfc3261#section-20.33\r\n                var retryAfter = Math.floor((Math.random() * 10)) + 1;\r\n                var extraHeaders = [\"Retry-After: \" + retryAfter];\r\n                this.core.replyStateless(message, { statusCode: 500, extraHeaders: extraHeaders });\r\n                return;\r\n            }\r\n            // A UAS that receives an INVITE on a dialog while an INVITE it had sent\r\n            // on that dialog is in progress MUST return a 491 (Request Pending)\r\n            // response to the received INVITE.\r\n            // https://tools.ietf.org/html/rfc3261#section-14.2\r\n            if (this.reinviteUserAgentClient) {\r\n                this.core.replyStateless(message, { statusCode: 491 });\r\n                return;\r\n            }\r\n        }\r\n        // Request within a dialog common processing.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\r\n        _super.prototype.receiveRequest.call(this, message);\r\n        // Requests within a dialog MAY contain Record-Route and Contact header\r\n        // fields.  However, these requests do not cause the dialog's route set\r\n        // to be modified, although they may modify the remote target URI.\r\n        // Specifically, requests that are not target refresh requests do not\r\n        // modify the dialog's remote target URI, and requests that are target\r\n        // refresh requests do.  For dialogs that have been established with an\r\n        // INVITE, the only target refresh request defined is re-INVITE (see\r\n        // Section 14).  Other extensions may define different target refresh\r\n        // requests for dialogs established in other ways.\r\n        //\r\n        //    Note that an ACK is NOT a target refresh request.\r\n        //\r\n        // Target refresh requests only update the dialog's remote target URI,\r\n        // and not the route set formed from the Record-Route.  Updating the\r\n        // latter would introduce severe backwards compatibility problems with\r\n        // RFC 2543-compliant systems.\r\n        // https://tools.ietf.org/html/rfc3261#section-15\r\n        if (message.method === messages_1.C.INVITE) {\r\n            // FIXME: parser needs to be typed...\r\n            var contact = message.parseHeader(\"contact\");\r\n            if (!contact) { // TODO: Review to make sure this will never happen\r\n                throw new Error(\"Contact undefined.\");\r\n            }\r\n            if (!(contact instanceof messages_1.NameAddrHeader)) {\r\n                throw new Error(\"Contact not instance of NameAddrHeader.\");\r\n            }\r\n            this.dialogState.remoteTarget = contact.uri;\r\n        }\r\n        // Switch on method and then delegate.\r\n        switch (message.method) {\r\n            case messages_1.C.BYE:\r\n                // A UAS core receiving a BYE request for an existing dialog MUST follow\r\n                // the procedures of Section 12.2.2 to process the request.  Once done,\r\n                // the UAS SHOULD terminate the session (and therefore stop sending and\r\n                // listening for media).  The only case where it can elect not to are\r\n                // multicast sessions, where participation is possible even if the other\r\n                // participant in the dialog has terminated its involvement in the\r\n                // session.  Whether or not it ends its participation on the session,\r\n                // the UAS core MUST generate a 2xx response to the BYE, and MUST pass\r\n                // that to the server transaction for transmission.\r\n                //\r\n                // The UAS MUST still respond to any pending requests received for that\r\n                // dialog.  It is RECOMMENDED that a 487 (Request Terminated) response\r\n                // be generated to those pending requests.\r\n                // https://tools.ietf.org/html/rfc3261#section-15.1.2\r\n                {\r\n                    var uas = new bye_user_agent_server_1.ByeUserAgentServer(this, message);\r\n                    this.delegate && this.delegate.onBye ?\r\n                        this.delegate.onBye(uas) :\r\n                        uas.accept();\r\n                    this.dispose();\r\n                }\r\n                break;\r\n            case messages_1.C.INFO:\r\n                // If a UA receives an INFO request associated with an Info Package that\r\n                // the UA has not indicated willingness to receive, the UA MUST send a\r\n                // 469 (Bad Info Package) response (see Section 11.6), which contains a\r\n                // Recv-Info header field with Info Packages for which the UA is willing\r\n                // to receive INFO requests.\r\n                {\r\n                    var uas = new info_user_agent_server_1.InfoUserAgentServer(this, message);\r\n                    this.delegate && this.delegate.onInfo ?\r\n                        this.delegate.onInfo(uas) :\r\n                        uas.reject({\r\n                            statusCode: 469,\r\n                            extraHeaders: [\"Recv-Info :\"]\r\n                        });\r\n                }\r\n                break;\r\n            case messages_1.C.INVITE:\r\n                // If the new session description is not acceptable, the UAS can reject\r\n                // it by returning a 488 (Not Acceptable Here) response for the re-\r\n                // INVITE.  This response SHOULD include a Warning header field.\r\n                // https://tools.ietf.org/html/rfc3261#section-14.2\r\n                {\r\n                    var uas = new re_invite_user_agent_server_1.ReInviteUserAgentServer(this, message);\r\n                    this.signalingStateTransition(message);\r\n                    this.delegate && this.delegate.onInvite ?\r\n                        this.delegate.onInvite(uas) :\r\n                        uas.reject({ statusCode: 488 }); // TODO: Warning header field.\r\n                }\r\n                break;\r\n            case messages_1.C.MESSAGE:\r\n                {\r\n                    var uas = new message_user_agent_server_1.MessageUserAgentServer(this.core, message);\r\n                    this.delegate && this.delegate.onMessage ?\r\n                        this.delegate.onMessage(uas) :\r\n                        uas.accept();\r\n                }\r\n                break;\r\n            case messages_1.C.NOTIFY:\r\n                // https://tools.ietf.org/html/rfc3515#section-2.4.4\r\n                {\r\n                    var uas = new notify_user_agent_server_1.NotifyUserAgentServer(this, message);\r\n                    this.delegate && this.delegate.onNotify ?\r\n                        this.delegate.onNotify(uas) :\r\n                        uas.accept();\r\n                }\r\n                break;\r\n            case messages_1.C.PRACK:\r\n                // https://tools.ietf.org/html/rfc3262#section-4\r\n                {\r\n                    var uas = new prack_user_agent_server_1.PrackUserAgentServer(this, message);\r\n                    this.delegate && this.delegate.onPrack ?\r\n                        this.delegate.onPrack(uas) :\r\n                        uas.accept();\r\n                }\r\n                break;\r\n            case messages_1.C.REFER:\r\n                // https://tools.ietf.org/html/rfc3515#section-2.4.2\r\n                {\r\n                    var uas = new refer_user_agent_server_1.ReferUserAgentServer(this, message);\r\n                    this.delegate && this.delegate.onRefer ?\r\n                        this.delegate.onRefer(uas) :\r\n                        uas.reject();\r\n                }\r\n                break;\r\n            default:\r\n                {\r\n                    this.logger.log(\"INVITE dialog \" + this.id + \" received unimplemented \" + message.method + \" request\");\r\n                    this.core.replyStateless(message, { statusCode: 501 });\r\n                }\r\n                break;\r\n        }\r\n    };\r\n    SessionDialog.prototype.reliableSequenceGuard = function (message) {\r\n        var statusCode = message.statusCode;\r\n        if (!statusCode) {\r\n            throw new Error(\"Status code undefined\");\r\n        }\r\n        if (statusCode > 100 && statusCode < 200) {\r\n            // If a provisional response is received for an initial request, and\r\n            // that response contains a Require header field containing the option\r\n            // tag 100rel, the response is to be sent reliably.  If the response is\r\n            // a 100 (Trying) (as opposed to 101 to 199), this option tag MUST be\r\n            // ignored, and the procedures below MUST NOT be used.\r\n            // https://tools.ietf.org/html/rfc3262#section-4\r\n            var requireHeader = message.getHeader(\"require\");\r\n            var rseqHeader = message.getHeader(\"rseq\");\r\n            var rseq = requireHeader && requireHeader.includes(\"100rel\") && rseqHeader ? Number(rseqHeader) : undefined;\r\n            if (rseq) {\r\n                // Handling of subsequent reliable provisional responses for the same\r\n                // initial request follows the same rules as above, with the following\r\n                // difference: reliable provisional responses are guaranteed to be in\r\n                // order.  As a result, if the UAC receives another reliable provisional\r\n                // response to the same request, and its RSeq value is not one higher\r\n                // than the value of the sequence number, that response MUST NOT be\r\n                // acknowledged with a PRACK, and MUST NOT be processed further by the\r\n                // UAC.  An implementation MAY discard the response, or MAY cache the\r\n                // response in the hopes of receiving the missing responses.\r\n                // https://tools.ietf.org/html/rfc3262#section-4\r\n                if (this.rseq && this.rseq + 1 !== rseq) {\r\n                    return false;\r\n                }\r\n                // Once a reliable provisional response is received, retransmissions of\r\n                // that response MUST be discarded.  A response is a retransmission when\r\n                // its dialog ID, CSeq, and RSeq match the original response.  The UAC\r\n                // MUST maintain a sequence number that indicates the most recently\r\n                // received in-order reliable provisional response for the initial\r\n                // request.  This sequence number MUST be maintained until a final\r\n                // response is received for the initial request.  Its value MUST be\r\n                // initialized to the RSeq header field in the first reliable\r\n                // provisional response received for the initial request.\r\n                // https://tools.ietf.org/html/rfc3262#section-4\r\n                if (!this.rseq) {\r\n                    this.rseq = rseq;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * If not in a stable signaling state, rollback to prior stable signaling state.\r\n     */\r\n    SessionDialog.prototype.signalingStateRollback = function () {\r\n        if (this._signalingState === session_1.SignalingState.HaveLocalOffer ||\r\n            this.signalingState === session_1.SignalingState.HaveRemoteOffer) {\r\n            if (this._rollbackOffer && this._rollbackAnswer) {\r\n                this._signalingState = session_1.SignalingState.Stable;\r\n                this._offer = this._rollbackOffer;\r\n                this._answer = this._rollbackAnswer;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Update the signaling state of the dialog.\r\n     * @param message - The message to base the update off of.\r\n     */\r\n    SessionDialog.prototype.signalingStateTransition = function (message) {\r\n        var body = messages_1.getBody(message);\r\n        // No body, no session. No, woman, no cry.\r\n        if (!body || body.contentDisposition !== \"session\") {\r\n            return;\r\n        }\r\n        // We've got an existing offer and answer which we may wish to rollback to\r\n        if (this._signalingState === session_1.SignalingState.Stable) {\r\n            this._rollbackOffer = this._offer;\r\n            this._rollbackAnswer = this._answer;\r\n        }\r\n        // We're in UAS role, receiving incoming request with session description\r\n        if (message instanceof messages_1.IncomingRequestMessage) {\r\n            switch (this._signalingState) {\r\n                case session_1.SignalingState.Initial:\r\n                case session_1.SignalingState.Stable:\r\n                    this._signalingState = session_1.SignalingState.HaveRemoteOffer;\r\n                    this._offer = body;\r\n                    this._answer = undefined;\r\n                    break;\r\n                case session_1.SignalingState.HaveLocalOffer:\r\n                    this._signalingState = session_1.SignalingState.Stable;\r\n                    this._answer = body;\r\n                    break;\r\n                case session_1.SignalingState.HaveRemoteOffer:\r\n                    // You cannot make a new offer while one is in progress.\r\n                    // https://tools.ietf.org/html/rfc3261#section-13.2.1\r\n                    // FIXME: What to do here?\r\n                    break;\r\n                case session_1.SignalingState.Closed:\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Unexpected signaling state.\");\r\n            }\r\n        }\r\n        // We're in UAC role, receiving incoming response with session description\r\n        if (message instanceof messages_1.IncomingResponseMessage) {\r\n            switch (this._signalingState) {\r\n                case session_1.SignalingState.Initial:\r\n                case session_1.SignalingState.Stable:\r\n                    this._signalingState = session_1.SignalingState.HaveRemoteOffer;\r\n                    this._offer = body;\r\n                    this._answer = undefined;\r\n                    break;\r\n                case session_1.SignalingState.HaveLocalOffer:\r\n                    this._signalingState = session_1.SignalingState.Stable;\r\n                    this._answer = body;\r\n                    break;\r\n                case session_1.SignalingState.HaveRemoteOffer:\r\n                    // You cannot make a new offer while one is in progress.\r\n                    // https://tools.ietf.org/html/rfc3261#section-13.2.1\r\n                    // FIXME: What to do here?\r\n                    break;\r\n                case session_1.SignalingState.Closed:\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Unexpected signaling state.\");\r\n            }\r\n        }\r\n        // We're in UAC role, sending outgoing request with session description\r\n        if (message instanceof messages_1.OutgoingRequestMessage) {\r\n            switch (this._signalingState) {\r\n                case session_1.SignalingState.Initial:\r\n                case session_1.SignalingState.Stable:\r\n                    this._signalingState = session_1.SignalingState.HaveLocalOffer;\r\n                    this._offer = body;\r\n                    this._answer = undefined;\r\n                    break;\r\n                case session_1.SignalingState.HaveLocalOffer:\r\n                    // You cannot make a new offer while one is in progress.\r\n                    // https://tools.ietf.org/html/rfc3261#section-13.2.1\r\n                    // FIXME: What to do here?\r\n                    break;\r\n                case session_1.SignalingState.HaveRemoteOffer:\r\n                    this._signalingState = session_1.SignalingState.Stable;\r\n                    this._answer = body;\r\n                    break;\r\n                case session_1.SignalingState.Closed:\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Unexpected signaling state.\");\r\n            }\r\n        }\r\n        // We're in UAS role, sending outgoing response with session description\r\n        if (messages_1.isBody(message)) {\r\n            switch (this._signalingState) {\r\n                case session_1.SignalingState.Initial:\r\n                case session_1.SignalingState.Stable:\r\n                    this._signalingState = session_1.SignalingState.HaveLocalOffer;\r\n                    this._offer = body;\r\n                    this._answer = undefined;\r\n                    break;\r\n                case session_1.SignalingState.HaveLocalOffer:\r\n                    // You cannot make a new offer while one is in progress.\r\n                    // https://tools.ietf.org/html/rfc3261#section-13.2.1\r\n                    // FIXME: What to do here?\r\n                    break;\r\n                case session_1.SignalingState.HaveRemoteOffer:\r\n                    this._signalingState = session_1.SignalingState.Stable;\r\n                    this._answer = body;\r\n                    break;\r\n                case session_1.SignalingState.Closed:\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Unexpected signaling state.\");\r\n            }\r\n        }\r\n    };\r\n    SessionDialog.prototype.start2xxRetransmissionTimer = function () {\r\n        var _this = this;\r\n        if (this.initialTransaction instanceof transactions_1.InviteServerTransaction) {\r\n            var transaction_1 = this.initialTransaction;\r\n            // Once the response has been constructed, it is passed to the INVITE\r\n            // server transaction.  In order to ensure reliable end-to-end\r\n            // transport of the response, it is necessary to periodically pass\r\n            // the response directly to the transport until the ACK arrives.  The\r\n            // 2xx response is passed to the transport with an interval that\r\n            // starts at T1 seconds and doubles for each retransmission until it\r\n            // reaches T2 seconds (T1 and T2 are defined in Section 17).\r\n            // Response retransmissions cease when an ACK request for the\r\n            // response is received.  This is independent of whatever transport\r\n            // protocols are used to send the response.\r\n            // https://tools.ietf.org/html/rfc6026#section-8.1\r\n            var timeout_1 = timers_1.Timers.T1;\r\n            var retransmission_1 = function () {\r\n                if (!_this.ackWait) {\r\n                    _this.invite2xxTimer = undefined;\r\n                    return;\r\n                }\r\n                _this.logger.log(\"No ACK for 2xx response received, attempting retransmission\");\r\n                transaction_1.retransmitAcceptedResponse();\r\n                timeout_1 = Math.min(timeout_1 * 2, timers_1.Timers.T2);\r\n                _this.invite2xxTimer = setTimeout(retransmission_1, timeout_1);\r\n            };\r\n            this.invite2xxTimer = setTimeout(retransmission_1, timeout_1);\r\n            // If the server retransmits the 2xx response for 64*T1 seconds without\r\n            // receiving an ACK, the dialog is confirmed, but the session SHOULD be\r\n            // terminated.  This is accomplished with a BYE, as described in Section 15.\r\n            // https://tools.ietf.org/html/rfc3261#section-13.3.1.4\r\n            var stateChanged_1 = function () {\r\n                if (transaction_1.state === transactions_1.TransactionState.Terminated) {\r\n                    transaction_1.removeListener(\"stateChanged\", stateChanged_1);\r\n                    if (_this.invite2xxTimer) {\r\n                        clearTimeout(_this.invite2xxTimer);\r\n                        _this.invite2xxTimer = undefined;\r\n                    }\r\n                    if (_this.ackWait) {\r\n                        if (_this.delegate && _this.delegate.onAckTimeout) {\r\n                            _this.delegate.onAckTimeout();\r\n                        }\r\n                        else {\r\n                            _this.bye();\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            transaction_1.addListener(\"stateChanged\", stateChanged_1);\r\n        }\r\n    };\r\n    // FIXME: Refactor\r\n    SessionDialog.prototype.startReInvite2xxRetransmissionTimer = function () {\r\n        var _this = this;\r\n        if (this.reinviteUserAgentServer && this.reinviteUserAgentServer.transaction instanceof transactions_1.InviteServerTransaction) {\r\n            var transaction_2 = this.reinviteUserAgentServer.transaction;\r\n            // Once the response has been constructed, it is passed to the INVITE\r\n            // server transaction.  In order to ensure reliable end-to-end\r\n            // transport of the response, it is necessary to periodically pass\r\n            // the response directly to the transport until the ACK arrives.  The\r\n            // 2xx response is passed to the transport with an interval that\r\n            // starts at T1 seconds and doubles for each retransmission until it\r\n            // reaches T2 seconds (T1 and T2 are defined in Section 17).\r\n            // Response retransmissions cease when an ACK request for the\r\n            // response is received.  This is independent of whatever transport\r\n            // protocols are used to send the response.\r\n            // https://tools.ietf.org/html/rfc6026#section-8.1\r\n            var timeout_2 = timers_1.Timers.T1;\r\n            var retransmission_2 = function () {\r\n                if (!_this.reinviteUserAgentServer) {\r\n                    _this.invite2xxTimer = undefined;\r\n                    return;\r\n                }\r\n                _this.logger.log(\"No ACK for 2xx response received, attempting retransmission\");\r\n                transaction_2.retransmitAcceptedResponse();\r\n                timeout_2 = Math.min(timeout_2 * 2, timers_1.Timers.T2);\r\n                _this.invite2xxTimer = setTimeout(retransmission_2, timeout_2);\r\n            };\r\n            this.invite2xxTimer = setTimeout(retransmission_2, timeout_2);\r\n            // If the server retransmits the 2xx response for 64*T1 seconds without\r\n            // receiving an ACK, the dialog is confirmed, but the session SHOULD be\r\n            // terminated.  This is accomplished with a BYE, as described in Section 15.\r\n            // https://tools.ietf.org/html/rfc3261#section-13.3.1.4\r\n            var stateChanged_2 = function () {\r\n                if (transaction_2.state === transactions_1.TransactionState.Terminated) {\r\n                    transaction_2.removeListener(\"stateChanged\", stateChanged_2);\r\n                    if (_this.invite2xxTimer) {\r\n                        clearTimeout(_this.invite2xxTimer);\r\n                        _this.invite2xxTimer = undefined;\r\n                    }\r\n                    if (_this.reinviteUserAgentServer) {\r\n                        // FIXME: TODO: What to do here\r\n                    }\r\n                }\r\n            };\r\n            transaction_2.addListener(\"stateChanged\", stateChanged_2);\r\n        }\r\n    };\r\n    return SessionDialog;\r\n}(dialog_1.Dialog));\r\nexports.SessionDialog = SessionDialog;\r\n\r\n\r\n/***/ }),\r\n/* 25 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\ntslib_1.__exportStar(__webpack_require__(26), exports);\r\n\r\n\r\n/***/ }),\r\n/* 26 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Session state.\r\n * @remarks\r\n * https://tools.ietf.org/html/rfc3261#section-13\r\n * @public\r\n */\r\nvar SessionState;\r\n(function (SessionState) {\r\n    SessionState[\"Initial\"] = \"Initial\";\r\n    SessionState[\"Early\"] = \"Early\";\r\n    SessionState[\"AckWait\"] = \"AckWait\";\r\n    SessionState[\"Confirmed\"] = \"Confirmed\";\r\n    SessionState[\"Terminated\"] = \"Terminated\";\r\n})(SessionState = exports.SessionState || (exports.SessionState = {}));\r\n/**\r\n * Offer/Answer state.\r\n * @remarks\r\n * ```txt\r\n *         Offer                Answer             RFC    Ini Est Early\r\n *  -------------------------------------------------------------------\r\n *  1. INVITE Req.          2xx INVITE Resp.     RFC 3261  Y   Y    N\r\n *  2. 2xx INVITE Resp.     ACK Req.             RFC 3261  Y   Y    N\r\n *  3. INVITE Req.          1xx-rel INVITE Resp. RFC 3262  Y   Y    N\r\n *  4. 1xx-rel INVITE Resp. PRACK Req.           RFC 3262  Y   Y    N\r\n *  5. PRACK Req.           200 PRACK Resp.      RFC 3262  N   Y    Y\r\n *  6. UPDATE Req.          2xx UPDATE Resp.     RFC 3311  N   Y    Y\r\n *\r\n *       Table 1: Summary of SIP Usage of the Offer/Answer Model\r\n * ```\r\n * https://tools.ietf.org/html/rfc6337#section-2.2\r\n * @public\r\n */\r\nvar SignalingState;\r\n(function (SignalingState) {\r\n    SignalingState[\"Initial\"] = \"Initial\";\r\n    SignalingState[\"HaveLocalOffer\"] = \"HaveLocalOffer\";\r\n    SignalingState[\"HaveRemoteOffer\"] = \"HaveRemoteOffer\";\r\n    SignalingState[\"Stable\"] = \"Stable\";\r\n    SignalingState[\"Closed\"] = \"Closed\";\r\n})(SignalingState = exports.SignalingState || (exports.SignalingState = {}));\r\n\r\n\r\n/***/ }),\r\n/* 27 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar T1 = 500;\r\nvar T2 = 4000;\r\nvar T4 = 5000;\r\n/**\r\n * Timers.\r\n * @public\r\n */\r\nexports.Timers = {\r\n    T1: T1,\r\n    T2: T2,\r\n    T4: T4,\r\n    TIMER_B: 64 * T1,\r\n    TIMER_D: 0 * T1,\r\n    TIMER_F: 64 * T1,\r\n    TIMER_H: 64 * T1,\r\n    TIMER_I: 0 * T4,\r\n    TIMER_J: 0 * T1,\r\n    TIMER_K: 0 * T4,\r\n    TIMER_L: 64 * T1,\r\n    TIMER_M: 64 * T1,\r\n    TIMER_N: 64 * T1,\r\n    PROVISIONAL_RESPONSE_INTERVAL: 60000 // See RFC 3261 Section 13.3.1.1\r\n};\r\n\r\n\r\n/***/ }),\r\n/* 28 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\ntslib_1.__exportStar(__webpack_require__(29), exports);\r\ntslib_1.__exportStar(__webpack_require__(36), exports);\r\ntslib_1.__exportStar(__webpack_require__(38), exports);\r\ntslib_1.__exportStar(__webpack_require__(40), exports);\r\ntslib_1.__exportStar(__webpack_require__(41), exports);\r\ntslib_1.__exportStar(__webpack_require__(36), exports);\r\ntslib_1.__exportStar(__webpack_require__(39), exports);\r\ntslib_1.__exportStar(__webpack_require__(37), exports);\r\ntslib_1.__exportStar(__webpack_require__(30), exports);\r\n\r\n\r\n/***/ }),\r\n/* 29 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar transaction_1 = __webpack_require__(30);\r\n/**\r\n * Client Transaction.\r\n * @remarks\r\n * The client transaction provides its functionality through the\r\n * maintenance of a state machine.\r\n *\r\n * The TU communicates with the client transaction through a simple\r\n * interface.  When the TU wishes to initiate a new transaction, it\r\n * creates a client transaction and passes it the SIP request to send\r\n * and an IP address, port, and transport to which to send it.  The\r\n * client transaction begins execution of its state machine.  Valid\r\n * responses are passed up to the TU from the client transaction.\r\n * https://tools.ietf.org/html/rfc3261#section-17.1\r\n * @public\r\n */\r\nvar ClientTransaction = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ClientTransaction, _super);\r\n    function ClientTransaction(_request, transport, user, state, loggerCategory) {\r\n        var _this = _super.call(this, transport, user, ClientTransaction.makeId(_request), state, loggerCategory) || this;\r\n        _this._request = _request;\r\n        _this.user = user;\r\n        // The Via header field indicates the transport used for the transaction\r\n        // and identifies the location where the response is to be sent.  A Via\r\n        // header field value is added only after the transport that will be\r\n        // used to reach the next hop has been selected (which may involve the\r\n        // usage of the procedures in [4]).\r\n        // https://tools.ietf.org/html/rfc3261#section-8.1.1.7\r\n        _request.setViaHeader(_this.id, transport.protocol);\r\n        return _this;\r\n    }\r\n    ClientTransaction.makeId = function (request) {\r\n        if (request.method === \"CANCEL\") {\r\n            if (!request.branch) {\r\n                throw new Error(\"Outgoing CANCEL request without a branch.\");\r\n            }\r\n            return request.branch;\r\n        }\r\n        else {\r\n            return \"z9hG4bK\" + Math.floor(Math.random() * 10000000);\r\n        }\r\n    };\r\n    Object.defineProperty(ClientTransaction.prototype, \"request\", {\r\n        /** The outgoing request the transaction handling. */\r\n        get: function () {\r\n            return this._request;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * A 408 to non-INVITE will always arrive too late to be useful ([3]),\r\n     * The client already has full knowledge of the timeout. The only\r\n     * information this message would convey is whether or not the server\r\n     * believed the transaction timed out. However, with the current design\r\n     * of the NIT, a client cannot do anything with this knowledge. Thus,\r\n     * the 408 is simply wasting network resources and contributes to the\r\n     * response bombardment illustrated in [3].\r\n     * https://tools.ietf.org/html/rfc4320#section-4.1\r\n     */\r\n    ClientTransaction.prototype.onRequestTimeout = function () {\r\n        if (this.user.onRequestTimeout) {\r\n            this.user.onRequestTimeout();\r\n        }\r\n    };\r\n    return ClientTransaction;\r\n}(transaction_1.Transaction));\r\nexports.ClientTransaction = ClientTransaction;\r\n\r\n\r\n/***/ }),\r\n/* 30 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar events_1 = __webpack_require__(31);\r\nvar exceptions_1 = __webpack_require__(32);\r\n/**\r\n * Transaction.\r\n * @remarks\r\n * SIP is a transactional protocol: interactions between components take\r\n * place in a series of independent message exchanges.  Specifically, a\r\n * SIP transaction consists of a single request and any responses to\r\n * that request, which include zero or more provisional responses and\r\n * one or more final responses.  In the case of a transaction where the\r\n * request was an INVITE (known as an INVITE transaction), the\r\n * transaction also includes the ACK only if the final response was not\r\n * a 2xx response.  If the response was a 2xx, the ACK is not considered\r\n * part of the transaction.\r\n * https://tools.ietf.org/html/rfc3261#section-17\r\n * @public\r\n */\r\nvar Transaction = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Transaction, _super);\r\n    function Transaction(_transport, _user, _id, _state, loggerCategory) {\r\n        var _this = _super.call(this) || this;\r\n        _this._transport = _transport;\r\n        _this._user = _user;\r\n        _this._id = _id;\r\n        _this._state = _state;\r\n        _this.logger = _user.loggerFactory.getLogger(loggerCategory, _id);\r\n        _this.logger.debug(\"Constructing \" + _this.typeToString() + \" with id \" + _this.id + \".\");\r\n        return _this;\r\n    }\r\n    /**\r\n     * Destructor.\r\n     * Once the transaction is in the \"terminated\" state, it is destroyed\r\n     * immediately and there is no need to call `dispose`. However, if a\r\n     * transaction needs to be ended prematurely, the transaction user may\r\n     * do so by calling this method (for example, perhaps the UA is shutting down).\r\n     * No state transition will occur upon calling this method, all outstanding\r\n     * transmission timers will be cancelled, and use of the transaction after\r\n     * calling `dispose` is undefined.\r\n     */\r\n    Transaction.prototype.dispose = function () {\r\n        this.logger.debug(\"Destroyed \" + this.typeToString() + \" with id \" + this.id + \".\");\r\n    };\r\n    Object.defineProperty(Transaction.prototype, \"id\", {\r\n        /** Transaction id. */\r\n        get: function () {\r\n            return this._id;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Transaction.prototype, \"kind\", {\r\n        /** Transaction kind. Deprecated. */\r\n        get: function () {\r\n            throw new Error(\"Invalid kind.\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Transaction.prototype, \"state\", {\r\n        /** Transaction state. */\r\n        get: function () {\r\n            return this._state;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Transaction.prototype, \"transport\", {\r\n        /** Transaction transport. */\r\n        get: function () {\r\n            return this._transport;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Transaction.prototype.on = function (name, callback) { return _super.prototype.on.call(this, name, callback); };\r\n    Transaction.prototype.logTransportError = function (error, message) {\r\n        this.logger.error(error.message);\r\n        this.logger.error(\"Transport error occurred in \" + this.typeToString() + \" with id \" + this.id + \".\");\r\n        this.logger.error(message);\r\n    };\r\n    /**\r\n     * Pass message to transport for transmission. If transport fails,\r\n     * the transaction user is notified by callback to onTransportError().\r\n     * @returns\r\n     * Rejects with `TransportError` if transport fails.\r\n     */\r\n    Transaction.prototype.send = function (message) {\r\n        var _this = this;\r\n        return this.transport.send(message).catch(function (error) {\r\n            // If the transport rejects, it SHOULD reject with a TransportError.\r\n            // But the transport may be external code, so we are careful\r\n            // make sure we convert it to a TransportError if need be.\r\n            if (error instanceof exceptions_1.TransportError) {\r\n                _this.onTransportError(error);\r\n                throw error;\r\n            }\r\n            var transportError;\r\n            if (error && typeof error.message === \"string\") {\r\n                transportError = new exceptions_1.TransportError(error.message);\r\n            }\r\n            else {\r\n                transportError = new exceptions_1.TransportError();\r\n            }\r\n            _this.onTransportError(transportError);\r\n            throw transportError;\r\n        });\r\n    };\r\n    Transaction.prototype.setState = function (state) {\r\n        this.logger.debug(\"State change to \\\"\" + state + \"\\\" on \" + this.typeToString() + \" with id \" + this.id + \".\");\r\n        this._state = state;\r\n        if (this._user.onStateChange) {\r\n            this._user.onStateChange(state);\r\n        }\r\n        this.emit(\"stateChanged\");\r\n    };\r\n    Transaction.prototype.typeToString = function () {\r\n        return \"UnknownType\";\r\n    };\r\n    return Transaction;\r\n}(events_1.EventEmitter));\r\nexports.Transaction = Transaction;\r\n\r\n\r\n/***/ }),\r\n/* 31 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n\r\n\r\nvar R = typeof Reflect === 'object' ? Reflect : null\r\nvar ReflectApply = R && typeof R.apply === 'function'\r\n  ? R.apply\r\n  : function ReflectApply(target, receiver, args) {\r\n    return Function.prototype.apply.call(target, receiver, args);\r\n  }\r\n\r\nvar ReflectOwnKeys\r\nif (R && typeof R.ownKeys === 'function') {\r\n  ReflectOwnKeys = R.ownKeys\r\n} else if (Object.getOwnPropertySymbols) {\r\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\r\n    return Object.getOwnPropertyNames(target)\r\n      .concat(Object.getOwnPropertySymbols(target));\r\n  };\r\n} else {\r\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\r\n    return Object.getOwnPropertyNames(target);\r\n  };\r\n}\r\n\r\nfunction ProcessEmitWarning(warning) {\r\n  if (console && console.warn) console.warn(warning);\r\n}\r\n\r\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\r\n  return value !== value;\r\n}\r\n\r\nfunction EventEmitter() {\r\n  EventEmitter.init.call(this);\r\n}\r\nmodule.exports = EventEmitter;\r\n\r\n// Backwards-compat with node 0.10.x\r\nEventEmitter.EventEmitter = EventEmitter;\r\n\r\nEventEmitter.prototype._events = undefined;\r\nEventEmitter.prototype._eventsCount = 0;\r\nEventEmitter.prototype._maxListeners = undefined;\r\n\r\n// By default EventEmitters will print a warning if more than 10 listeners are\r\n// added to it. This is a useful default which helps finding memory leaks.\r\nvar defaultMaxListeners = 10;\r\n\r\nfunction checkListener(listener) {\r\n  if (typeof listener !== 'function') {\r\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\r\n  }\r\n}\r\n\r\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return defaultMaxListeners;\r\n  },\r\n  set: function(arg) {\r\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\r\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\r\n    }\r\n    defaultMaxListeners = arg;\r\n  }\r\n});\r\n\r\nEventEmitter.init = function() {\r\n\r\n  if (this._events === undefined ||\r\n      this._events === Object.getPrototypeOf(this)._events) {\r\n    this._events = Object.create(null);\r\n    this._eventsCount = 0;\r\n  }\r\n\r\n  this._maxListeners = this._maxListeners || undefined;\r\n};\r\n\r\n// Obviously not all Emitters should be limited to 10. This function allows\r\n// that to be increased. Set to zero for unlimited.\r\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\r\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\r\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\r\n  }\r\n  this._maxListeners = n;\r\n  return this;\r\n};\r\n\r\nfunction _getMaxListeners(that) {\r\n  if (that._maxListeners === undefined)\r\n    return EventEmitter.defaultMaxListeners;\r\n  return that._maxListeners;\r\n}\r\n\r\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\r\n  return _getMaxListeners(this);\r\n};\r\n\r\nEventEmitter.prototype.emit = function emit(type) {\r\n  var args = [];\r\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\r\n  var doError = (type === 'error');\r\n\r\n  var events = this._events;\r\n  if (events !== undefined)\r\n    doError = (doError && events.error === undefined);\r\n  else if (!doError)\r\n    return false;\r\n\r\n  // If there is no 'error' event listener then throw.\r\n  if (doError) {\r\n    var er;\r\n    if (args.length > 0)\r\n      er = args[0];\r\n    if (er instanceof Error) {\r\n      // Note: The comments on the `throw` lines are intentional, they show\r\n      // up in Node's output if this results in an unhandled exception.\r\n      throw er; // Unhandled 'error' event\r\n    }\r\n    // At least give some kind of context to the user\r\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\r\n    err.context = er;\r\n    throw err; // Unhandled 'error' event\r\n  }\r\n\r\n  var handler = events[type];\r\n\r\n  if (handler === undefined)\r\n    return false;\r\n\r\n  if (typeof handler === 'function') {\r\n    ReflectApply(handler, this, args);\r\n  } else {\r\n    var len = handler.length;\r\n    var listeners = arrayClone(handler, len);\r\n    for (var i = 0; i < len; ++i)\r\n      ReflectApply(listeners[i], this, args);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nfunction _addListener(target, type, listener, prepend) {\r\n  var m;\r\n  var events;\r\n  var existing;\r\n\r\n  checkListener(listener);\r\n\r\n  events = target._events;\r\n  if (events === undefined) {\r\n    events = target._events = Object.create(null);\r\n    target._eventsCount = 0;\r\n  } else {\r\n    // To avoid recursion in the case that type === \"newListener\"! Before\r\n    // adding it to the listeners, first emit \"newListener\".\r\n    if (events.newListener !== undefined) {\r\n      target.emit('newListener', type,\r\n                  listener.listener ? listener.listener : listener);\r\n\r\n      // Re-assign `events` because a newListener handler could have caused the\r\n      // this._events to be assigned to a new object\r\n      events = target._events;\r\n    }\r\n    existing = events[type];\r\n  }\r\n\r\n  if (existing === undefined) {\r\n    // Optimize the case of one listener. Don't need the extra array object.\r\n    existing = events[type] = listener;\r\n    ++target._eventsCount;\r\n  } else {\r\n    if (typeof existing === 'function') {\r\n      // Adding the second element, need to change to array.\r\n      existing = events[type] =\r\n        prepend ? [listener, existing] : [existing, listener];\r\n      // If we've already got an array, just append.\r\n    } else if (prepend) {\r\n      existing.unshift(listener);\r\n    } else {\r\n      existing.push(listener);\r\n    }\r\n\r\n    // Check for listener leak\r\n    m = _getMaxListeners(target);\r\n    if (m > 0 && existing.length > m && !existing.warned) {\r\n      existing.warned = true;\r\n      // No error code for this since it is a Warning\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\r\n                          existing.length + ' ' + String(type) + ' listeners ' +\r\n                          'added. Use emitter.setMaxListeners() to ' +\r\n                          'increase limit');\r\n      w.name = 'MaxListenersExceededWarning';\r\n      w.emitter = target;\r\n      w.type = type;\r\n      w.count = existing.length;\r\n      ProcessEmitWarning(w);\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\nEventEmitter.prototype.addListener = function addListener(type, listener) {\r\n  return _addListener(this, type, listener, false);\r\n};\r\n\r\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\r\n\r\nEventEmitter.prototype.prependListener =\r\n    function prependListener(type, listener) {\r\n      return _addListener(this, type, listener, true);\r\n    };\r\n\r\nfunction onceWrapper() {\r\n  if (!this.fired) {\r\n    this.target.removeListener(this.type, this.wrapFn);\r\n    this.fired = true;\r\n    if (arguments.length === 0)\r\n      return this.listener.call(this.target);\r\n    return this.listener.apply(this.target, arguments);\r\n  }\r\n}\r\n\r\nfunction _onceWrap(target, type, listener) {\r\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\r\n  var wrapped = onceWrapper.bind(state);\r\n  wrapped.listener = listener;\r\n  state.wrapFn = wrapped;\r\n  return wrapped;\r\n}\r\n\r\nEventEmitter.prototype.once = function once(type, listener) {\r\n  checkListener(listener);\r\n  this.on(type, _onceWrap(this, type, listener));\r\n  return this;\r\n};\r\n\r\nEventEmitter.prototype.prependOnceListener =\r\n    function prependOnceListener(type, listener) {\r\n      checkListener(listener);\r\n      this.prependListener(type, _onceWrap(this, type, listener));\r\n      return this;\r\n    };\r\n\r\n// Emits a 'removeListener' event if and only if the listener was removed.\r\nEventEmitter.prototype.removeListener =\r\n    function removeListener(type, listener) {\r\n      var list, events, position, i, originalListener;\r\n\r\n      checkListener(listener);\r\n\r\n      events = this._events;\r\n      if (events === undefined)\r\n        return this;\r\n\r\n      list = events[type];\r\n      if (list === undefined)\r\n        return this;\r\n\r\n      if (list === listener || list.listener === listener) {\r\n        if (--this._eventsCount === 0)\r\n          this._events = Object.create(null);\r\n        else {\r\n          delete events[type];\r\n          if (events.removeListener)\r\n            this.emit('removeListener', type, list.listener || listener);\r\n        }\r\n      } else if (typeof list !== 'function') {\r\n        position = -1;\r\n\r\n        for (i = list.length - 1; i >= 0; i--) {\r\n          if (list[i] === listener || list[i].listener === listener) {\r\n            originalListener = list[i].listener;\r\n            position = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (position < 0)\r\n          return this;\r\n\r\n        if (position === 0)\r\n          list.shift();\r\n        else {\r\n          spliceOne(list, position);\r\n        }\r\n\r\n        if (list.length === 1)\r\n          events[type] = list[0];\r\n\r\n        if (events.removeListener !== undefined)\r\n          this.emit('removeListener', type, originalListener || listener);\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\r\n\r\nEventEmitter.prototype.removeAllListeners =\r\n    function removeAllListeners(type) {\r\n      var listeners, events, i;\r\n\r\n      events = this._events;\r\n      if (events === undefined)\r\n        return this;\r\n\r\n      // not listening for removeListener, no need to emit\r\n      if (events.removeListener === undefined) {\r\n        if (arguments.length === 0) {\r\n          this._events = Object.create(null);\r\n          this._eventsCount = 0;\r\n        } else if (events[type] !== undefined) {\r\n          if (--this._eventsCount === 0)\r\n            this._events = Object.create(null);\r\n          else\r\n            delete events[type];\r\n        }\r\n        return this;\r\n      }\r\n\r\n      // emit removeListener for all listeners on all events\r\n      if (arguments.length === 0) {\r\n        var keys = Object.keys(events);\r\n        var key;\r\n        for (i = 0; i < keys.length; ++i) {\r\n          key = keys[i];\r\n          if (key === 'removeListener') continue;\r\n          this.removeAllListeners(key);\r\n        }\r\n        this.removeAllListeners('removeListener');\r\n        this._events = Object.create(null);\r\n        this._eventsCount = 0;\r\n        return this;\r\n      }\r\n\r\n      listeners = events[type];\r\n\r\n      if (typeof listeners === 'function') {\r\n        this.removeListener(type, listeners);\r\n      } else if (listeners !== undefined) {\r\n        // LIFO order\r\n        for (i = listeners.length - 1; i >= 0; i--) {\r\n          this.removeListener(type, listeners[i]);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\nfunction _listeners(target, type, unwrap) {\r\n  var events = target._events;\r\n\r\n  if (events === undefined)\r\n    return [];\r\n\r\n  var evlistener = events[type];\r\n  if (evlistener === undefined)\r\n    return [];\r\n\r\n  if (typeof evlistener === 'function')\r\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\r\n\r\n  return unwrap ?\r\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\r\n}\r\n\r\nEventEmitter.prototype.listeners = function listeners(type) {\r\n  return _listeners(this, type, true);\r\n};\r\n\r\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\r\n  return _listeners(this, type, false);\r\n};\r\n\r\nEventEmitter.listenerCount = function(emitter, type) {\r\n  if (typeof emitter.listenerCount === 'function') {\r\n    return emitter.listenerCount(type);\r\n  } else {\r\n    return listenerCount.call(emitter, type);\r\n  }\r\n};\r\n\r\nEventEmitter.prototype.listenerCount = listenerCount;\r\nfunction listenerCount(type) {\r\n  var events = this._events;\r\n\r\n  if (events !== undefined) {\r\n    var evlistener = events[type];\r\n\r\n    if (typeof evlistener === 'function') {\r\n      return 1;\r\n    } else if (evlistener !== undefined) {\r\n      return evlistener.length;\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nEventEmitter.prototype.eventNames = function eventNames() {\r\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\r\n};\r\n\r\nfunction arrayClone(arr, n) {\r\n  var copy = new Array(n);\r\n  for (var i = 0; i < n; ++i)\r\n    copy[i] = arr[i];\r\n  return copy;\r\n}\r\n\r\nfunction spliceOne(list, index) {\r\n  for (; index + 1 < list.length; index++)\r\n    list[index] = list[index + 1];\r\n  list.pop();\r\n}\r\n\r\nfunction unwrapListeners(arr) {\r\n  var ret = new Array(arr.length);\r\n  for (var i = 0; i < ret.length; ++i) {\r\n    ret[i] = arr[i].listener || arr[i];\r\n  }\r\n  return ret;\r\n}\r\n\r\n\r\n/***/ }),\r\n/* 32 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\ntslib_1.__exportStar(__webpack_require__(33), exports);\r\ntslib_1.__exportStar(__webpack_require__(34), exports);\r\ntslib_1.__exportStar(__webpack_require__(35), exports);\r\n\r\n\r\n/***/ }),\r\n/* 33 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\n/**\r\n * An Exception is considered a condition that a reasonable application may wish to catch.\r\n * An Error indicates serious problems that a reasonable application should not try to catch.\r\n * @public\r\n */\r\nvar Exception = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Exception, _super);\r\n    function Exception(message) {\r\n        var _newTarget = this.constructor;\r\n        var _this = _super.call(this, message) || this;\r\n        Object.setPrototypeOf(_this, _newTarget.prototype); // restore prototype chain\r\n        return _this;\r\n    }\r\n    return Exception;\r\n}(Error));\r\nexports.Exception = Exception;\r\n\r\n\r\n/***/ }),\r\n/* 34 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar exception_1 = __webpack_require__(33);\r\n/**\r\n * Indicates that the operation could not be completed given the current transaction state.\r\n * @public\r\n */\r\nvar TransactionStateError = /** @class */ (function (_super) {\r\n    tslib_1.__extends(TransactionStateError, _super);\r\n    function TransactionStateError(message) {\r\n        return _super.call(this, message ? message : \"Transaction state error.\") || this;\r\n    }\r\n    return TransactionStateError;\r\n}(exception_1.Exception));\r\nexports.TransactionStateError = TransactionStateError;\r\n\r\n\r\n/***/ }),\r\n/* 35 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar exception_1 = __webpack_require__(33);\r\n/**\r\n * Transport error.\r\n * @public\r\n */\r\nvar TransportError = /** @class */ (function (_super) {\r\n    tslib_1.__extends(TransportError, _super);\r\n    function TransportError(message) {\r\n        return _super.call(this, message ? message : \"Unspecified transport error.\") || this;\r\n    }\r\n    return TransportError;\r\n}(exception_1.Exception));\r\nexports.TransportError = TransportError;\r\n\r\n\r\n/***/ }),\r\n/* 36 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar timers_1 = __webpack_require__(27);\r\nvar client_transaction_1 = __webpack_require__(29);\r\nvar transaction_state_1 = __webpack_require__(37);\r\n/**\r\n * INVITE Client Transaction.\r\n * @remarks\r\n * The INVITE transaction consists of a three-way handshake.  The client\r\n * transaction sends an INVITE, the server transaction sends responses,\r\n * and the client transaction sends an ACK.\r\n * https://tools.ietf.org/html/rfc3261#section-17.1.1\r\n * @public\r\n */\r\nvar InviteClientTransaction = /** @class */ (function (_super) {\r\n    tslib_1.__extends(InviteClientTransaction, _super);\r\n    /**\r\n     * Constructor.\r\n     * Upon construction, the outgoing request's Via header is updated by calling `setViaHeader`.\r\n     * Then `toString` is called on the outgoing request and the message is sent via the transport.\r\n     * After construction the transaction will be in the \"calling\" state and the transaction id\r\n     * will equal the branch parameter set in the Via header of the outgoing request.\r\n     * https://tools.ietf.org/html/rfc3261#section-17.1.1\r\n     * @param request - The outgoing INVITE request.\r\n     * @param transport - The transport.\r\n     * @param user - The transaction user.\r\n     */\r\n    function InviteClientTransaction(request, transport, user) {\r\n        var _this = _super.call(this, request, transport, user, transaction_state_1.TransactionState.Calling, \"sip.transaction.ict\") || this;\r\n        /**\r\n         * Map of 2xx to-tag to ACK.\r\n         * If value is not undefined, value is the ACK which was sent.\r\n         * If key exists but value is undefined, a 2xx was received but the ACK not yet sent.\r\n         * Otherwise, a 2xx was not (yet) received for this transaction.\r\n         */\r\n        _this.ackRetransmissionCache = new Map();\r\n        // FIXME: Timer A for unreliable transport not implemented\r\n        //\r\n        // If an unreliable transport is being used, the client transaction\r\n        // MUST start timer A with a value of T1. If a reliable transport is being used,\r\n        // the client transaction SHOULD NOT start timer A (Timer A controls request retransmissions).\r\n        // For any transport, the client transaction MUST start timer B with a value\r\n        // of 64*T1 seconds (Timer B controls transaction timeouts).\r\n        // https://tools.ietf.org/html/rfc3261#section-17.1.1.2\r\n        //\r\n        // While not spelled out in the RFC, Timer B is the maximum amount of time that a sender\r\n        // will wait for an INVITE message to be acknowledged (a SIP response message is received).\r\n        // So Timer B should be cleared when the transaction state proceeds from \"Calling\".\r\n        _this.B = setTimeout(function () { return _this.timer_B(); }, timers_1.Timers.TIMER_B);\r\n        _this.send(request.toString()).catch(function (error) {\r\n            _this.logTransportError(error, \"Failed to send initial outgoing request.\");\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Destructor.\r\n     */\r\n    InviteClientTransaction.prototype.dispose = function () {\r\n        if (this.B) {\r\n            clearTimeout(this.B);\r\n            this.B = undefined;\r\n        }\r\n        if (this.D) {\r\n            clearTimeout(this.D);\r\n            this.D = undefined;\r\n        }\r\n        if (this.M) {\r\n            clearTimeout(this.M);\r\n            this.M = undefined;\r\n        }\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Object.defineProperty(InviteClientTransaction.prototype, \"kind\", {\r\n        /** Transaction kind. Deprecated. */\r\n        get: function () {\r\n            return \"ict\";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * ACK a 2xx final response.\r\n     *\r\n     * The transaction includes the ACK only if the final response was not a 2xx response (the\r\n     * transaction will generate and send the ACK to the transport automagically). If the\r\n     * final response was a 2xx, the ACK is not considered part of the transaction (the\r\n     * transaction user needs to generate and send the ACK).\r\n     *\r\n     * This library is not strictly RFC compliant with regard to ACK handling for 2xx final\r\n     * responses. Specifically, retransmissions of ACKs to a 2xx final responses is handled\r\n     * by the transaction layer (instead of the UAC core). The \"standard\" approach is for\r\n     * the UAC core to receive all 2xx responses and manage sending ACK retransmissions to\r\n     * the transport directly. Herein the transaction layer manages sending ACKs to 2xx responses\r\n     * and any retransmissions of those ACKs as needed.\r\n     *\r\n     * @param ack - The outgoing ACK request.\r\n     */\r\n    InviteClientTransaction.prototype.ackResponse = function (ack) {\r\n        var _this = this;\r\n        var toTag = ack.toTag;\r\n        if (!toTag) {\r\n            throw new Error(\"To tag undefined.\");\r\n        }\r\n        var id = \"z9hG4bK\" + Math.floor(Math.random() * 10000000);\r\n        ack.setViaHeader(id, this.transport.protocol);\r\n        this.ackRetransmissionCache.set(toTag, ack); // Add to ACK retransmission cache\r\n        this.send(ack.toString()).catch(function (error) {\r\n            _this.logTransportError(error, \"Failed to send ACK to 2xx response.\");\r\n        });\r\n    };\r\n    /**\r\n     * Handler for incoming responses from the transport which match this transaction.\r\n     * @param response - The incoming response.\r\n     */\r\n    InviteClientTransaction.prototype.receiveResponse = function (response) {\r\n        var _this = this;\r\n        var statusCode = response.statusCode;\r\n        if (!statusCode || statusCode < 100 || statusCode > 699) {\r\n            throw new Error(\"Invalid status code \" + statusCode);\r\n        }\r\n        switch (this.state) {\r\n            case transaction_state_1.TransactionState.Calling:\r\n                // If the client transaction receives a provisional response while in\r\n                // the \"Calling\" state, it transitions to the \"Proceeding\" state. In the\r\n                // \"Proceeding\" state, the client transaction SHOULD NOT retransmit the\r\n                // request any longer. Furthermore, the provisional response MUST be\r\n                // passed to the TU.  Any further provisional responses MUST be passed\r\n                // up to the TU while in the \"Proceeding\" state.\r\n                // https://tools.ietf.org/html/rfc3261#section-17.1.1.2\r\n                if (statusCode >= 100 && statusCode <= 199) {\r\n                    this.stateTransition(transaction_state_1.TransactionState.Proceeding);\r\n                    if (this.user.receiveResponse) {\r\n                        this.user.receiveResponse(response);\r\n                    }\r\n                    return;\r\n                }\r\n                // When a 2xx response is received while in either the \"Calling\" or\r\n                // \"Proceeding\" states, the client transaction MUST transition to\r\n                // the \"Accepted\" state... The 2xx response MUST be passed up to the TU.\r\n                // The client transaction MUST NOT generate an ACK to the 2xx response -- its\r\n                // handling is delegated to the TU. A UAC core will send an ACK to\r\n                // the 2xx response using a new transaction.\r\n                // https://tools.ietf.org/html/rfc6026#section-8.4\r\n                if (statusCode >= 200 && statusCode <= 299) {\r\n                    this.ackRetransmissionCache.set(response.toTag, undefined); // Prime the ACK cache\r\n                    this.stateTransition(transaction_state_1.TransactionState.Accepted);\r\n                    if (this.user.receiveResponse) {\r\n                        this.user.receiveResponse(response);\r\n                    }\r\n                    return;\r\n                }\r\n                // When in either the \"Calling\" or \"Proceeding\" states, reception of\r\n                // a response with status code from 300-699 MUST cause the client\r\n                // transaction to transition to \"Completed\". The client transaction\r\n                // MUST pass the received response up to the TU, and the client\r\n                // transaction MUST generate an ACK request, even if the transport is\r\n                // reliable (guidelines for constructing the ACK from the response\r\n                // are given in Section 17.1.1.3), and then pass the ACK to the\r\n                // transport layer for transmission. The ACK MUST be sent to the\r\n                // same address, port, and transport to which the original request was sent.\r\n                // https://tools.ietf.org/html/rfc6026#section-8.4\r\n                if (statusCode >= 300 && statusCode <= 699) {\r\n                    this.stateTransition(transaction_state_1.TransactionState.Completed);\r\n                    this.ack(response);\r\n                    if (this.user.receiveResponse) {\r\n                        this.user.receiveResponse(response);\r\n                    }\r\n                    return;\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Proceeding:\r\n                // In the \"Proceeding\" state, the client transaction SHOULD NOT retransmit the\r\n                // request any longer. Furthermore, the provisional response MUST be\r\n                // passed to the TU.  Any further provisional responses MUST be passed\r\n                // up to the TU while in the \"Proceeding\" state.\r\n                // https://tools.ietf.org/html/rfc3261#section-17.1.1.2\r\n                if (statusCode >= 100 && statusCode <= 199) {\r\n                    if (this.user.receiveResponse) {\r\n                        this.user.receiveResponse(response);\r\n                    }\r\n                    return;\r\n                }\r\n                // When a 2xx response is received while in either the \"Calling\" or \"Proceeding\" states,\r\n                // the client transaction MUST transition to the \"Accepted\" state...\r\n                // The 2xx response MUST be passed up to the TU. The client\r\n                // transaction MUST NOT generate an ACK to the 2xx response -- its\r\n                // handling is delegated to the TU. A UAC core will send an ACK to\r\n                // the 2xx response using a new transaction.\r\n                // https://tools.ietf.org/html/rfc6026#section-8.4\r\n                if (statusCode >= 200 && statusCode <= 299) {\r\n                    this.ackRetransmissionCache.set(response.toTag, undefined); // Prime the ACK cache\r\n                    this.stateTransition(transaction_state_1.TransactionState.Accepted);\r\n                    if (this.user.receiveResponse) {\r\n                        this.user.receiveResponse(response);\r\n                    }\r\n                    return;\r\n                }\r\n                // When in either the \"Calling\" or \"Proceeding\" states, reception of\r\n                // a response with status code from 300-699 MUST cause the client\r\n                // transaction to transition to \"Completed\". The client transaction\r\n                // MUST pass the received response up to the TU, and the client\r\n                // transaction MUST generate an ACK request, even if the transport is\r\n                // reliable (guidelines for constructing the ACK from the response\r\n                // are given in Section 17.1.1.3), and then pass the ACK to the\r\n                // transport layer for transmission. The ACK MUST be sent to the\r\n                // same address, port, and transport to which the original request was sent.\r\n                // https://tools.ietf.org/html/rfc6026#section-8.4\r\n                if (statusCode >= 300 && statusCode <= 699) {\r\n                    this.stateTransition(transaction_state_1.TransactionState.Completed);\r\n                    this.ack(response);\r\n                    if (this.user.receiveResponse) {\r\n                        this.user.receiveResponse(response);\r\n                    }\r\n                    return;\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Accepted:\r\n                // The purpose of the \"Accepted\" state is to allow the client\r\n                // transaction to continue to exist to receive, and pass to the TU,\r\n                // any retransmissions of the 2xx response and any additional 2xx\r\n                // responses from other branches of the INVITE if it forked\r\n                // downstream. Timer M reflects the amount of time that the\r\n                // transaction user will wait for such messages.\r\n                //\r\n                // Any 2xx responses that match this client transaction and that are\r\n                // received while in the \"Accepted\" state MUST be passed up to the\r\n                // TU. The client transaction MUST NOT generate an ACK to the 2xx\r\n                // response. The client transaction takes no further action.\r\n                // https://tools.ietf.org/html/rfc6026#section-8.4\r\n                if (statusCode >= 200 && statusCode <= 299) {\r\n                    // NOTE: This implementation herein is intentionally not RFC compliant.\r\n                    // While the first 2xx response for a given branch is passed up to the TU,\r\n                    // retransmissions of 2xx responses are absorbed and the ACK associated\r\n                    // with the original response is resent. This approach is taken because\r\n                    // our current transaction users are not currently in a good position to\r\n                    // deal with 2xx retransmission. This SHOULD NOT cause any compliance issues - ;)\r\n                    //\r\n                    // If we don't have a cache hit, pass the response to the TU.\r\n                    if (!this.ackRetransmissionCache.has(response.toTag)) {\r\n                        this.ackRetransmissionCache.set(response.toTag, undefined); // Prime the ACK cache\r\n                        if (this.user.receiveResponse) {\r\n                            this.user.receiveResponse(response);\r\n                        }\r\n                        return;\r\n                    }\r\n                    // If we have a cache hit, try pulling the ACK from cache and retransmitting it.\r\n                    var ack = this.ackRetransmissionCache.get(response.toTag);\r\n                    if (ack) {\r\n                        this.send(ack.toString()).catch(function (error) {\r\n                            _this.logTransportError(error, \"Failed to send retransmission of ACK to 2xx response.\");\r\n                        });\r\n                        return;\r\n                    }\r\n                    // If an ACK was not found in cache then we have received a retransmitted 2xx\r\n                    // response before the TU responded to the original response (we don't have an ACK yet).\r\n                    // So discard this response under the assumption that the TU will eventually\r\n                    // get us a ACK for the original response.\r\n                    return;\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Completed:\r\n                // Any retransmissions of a response with status code 300-699 that\r\n                // are received while in the \"Completed\" state MUST cause the ACK to\r\n                // be re-passed to the transport layer for retransmission, but the\r\n                // newly received response MUST NOT be passed up to the TU.\r\n                // https://tools.ietf.org/html/rfc6026#section-8.4\r\n                if (statusCode >= 300 && statusCode <= 699) {\r\n                    this.ack(response);\r\n                    return;\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Terminated:\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid state \" + this.state);\r\n        }\r\n        // Any response received that does not match an existing client\r\n        // transaction state machine is simply dropped. (Implementations are,\r\n        // of course, free to log or do other implementation-specific things\r\n        // with such responses, but the implementer should be sure to consider\r\n        // the impact of large numbers of malicious stray responses.)\r\n        // https://tools.ietf.org/html/rfc6026#section-7.2\r\n        var message = \"Received unexpected \" + statusCode + \" response while in state \" + this.state + \".\";\r\n        this.logger.warn(message);\r\n        return;\r\n    };\r\n    /**\r\n     * The client transaction SHOULD inform the TU that a transport failure\r\n     * has occurred, and the client transaction SHOULD transition directly\r\n     * to the \"Terminated\" state.  The TU will handle the failover\r\n     * mechanisms described in [4].\r\n     * https://tools.ietf.org/html/rfc3261#section-17.1.4\r\n     * @param error - The error.\r\n     */\r\n    InviteClientTransaction.prototype.onTransportError = function (error) {\r\n        if (this.user.onTransportError) {\r\n            this.user.onTransportError(error);\r\n        }\r\n        this.stateTransition(transaction_state_1.TransactionState.Terminated, true);\r\n    };\r\n    /** For logging. */\r\n    InviteClientTransaction.prototype.typeToString = function () {\r\n        return \"INVITE client transaction\";\r\n    };\r\n    InviteClientTransaction.prototype.ack = function (response) {\r\n        var _this = this;\r\n        // The ACK request constructed by the client transaction MUST contain\r\n        // values for the Call-ID, From, and Request-URI that are equal to the\r\n        // values of those header fields in the request passed to the transport\r\n        // by the client transaction (call this the \"original request\"). The To\r\n        // header field in the ACK MUST equal the To header field in the\r\n        // response being acknowledged, and therefore will usually differ from\r\n        // the To header field in the original request by the addition of the\r\n        // tag parameter. The ACK MUST contain a single Via header field, and\r\n        // this MUST be equal to the top Via header field of the original\r\n        // request. The CSeq header field in the ACK MUST contain the same\r\n        // value for the sequence number as was present in the original request,\r\n        // but the method parameter MUST be equal to \"ACK\".\r\n        //\r\n        // If the INVITE request whose response is being acknowledged had Route\r\n        // header fields, those header fields MUST appear in the ACK. This is\r\n        // to ensure that the ACK can be routed properly through any downstream\r\n        // stateless proxies.\r\n        // https://tools.ietf.org/html/rfc3261#section-17.1.1.3\r\n        var ruri = this.request.ruri;\r\n        var callId = this.request.callId;\r\n        var cseq = this.request.cseq;\r\n        var from = this.request.getHeader(\"from\");\r\n        var to = response.getHeader(\"to\");\r\n        var via = this.request.getHeader(\"via\");\r\n        var route = this.request.getHeader(\"route\");\r\n        if (!from) {\r\n            throw new Error(\"From undefined.\");\r\n        }\r\n        if (!to) {\r\n            throw new Error(\"To undefined.\");\r\n        }\r\n        if (!via) {\r\n            throw new Error(\"Via undefined.\");\r\n        }\r\n        var ack = \"ACK \" + ruri + \" SIP/2.0\\r\\n\";\r\n        if (route) {\r\n            ack += \"Route: \" + route + \"\\r\\n\";\r\n        }\r\n        ack += \"Via: \" + via + \"\\r\\n\";\r\n        ack += \"To: \" + to + \"\\r\\n\";\r\n        ack += \"From: \" + from + \"\\r\\n\";\r\n        ack += \"Call-ID: \" + callId + \"\\r\\n\";\r\n        ack += \"CSeq: \" + cseq + \" ACK\\r\\n\";\r\n        ack += \"Max-Forwards: 70\\r\\n\";\r\n        ack += \"Content-Length: 0\\r\\n\\r\\n\";\r\n        // TOOO: \"User-Agent\" header\r\n        this.send(ack).catch(function (error) {\r\n            _this.logTransportError(error, \"Failed to send ACK to non-2xx response.\");\r\n        });\r\n        return;\r\n    };\r\n    /**\r\n     * Execute a state transition.\r\n     * @param newState - New state.\r\n     */\r\n    InviteClientTransaction.prototype.stateTransition = function (newState, dueToTransportError) {\r\n        var _this = this;\r\n        if (dueToTransportError === void 0) { dueToTransportError = false; }\r\n        // Assert valid state transitions.\r\n        var invalidStateTransition = function () {\r\n            throw new Error(\"Invalid state transition from \" + _this.state + \" to \" + newState);\r\n        };\r\n        switch (newState) {\r\n            case transaction_state_1.TransactionState.Calling:\r\n                invalidStateTransition();\r\n                break;\r\n            case transaction_state_1.TransactionState.Proceeding:\r\n                if (this.state !== transaction_state_1.TransactionState.Calling) {\r\n                    invalidStateTransition();\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Accepted:\r\n            case transaction_state_1.TransactionState.Completed:\r\n                if (this.state !== transaction_state_1.TransactionState.Calling &&\r\n                    this.state !== transaction_state_1.TransactionState.Proceeding) {\r\n                    invalidStateTransition();\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Terminated:\r\n                if (this.state !== transaction_state_1.TransactionState.Calling &&\r\n                    this.state !== transaction_state_1.TransactionState.Accepted &&\r\n                    this.state !== transaction_state_1.TransactionState.Completed) {\r\n                    if (!dueToTransportError) {\r\n                        invalidStateTransition();\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                invalidStateTransition();\r\n        }\r\n        // While not spelled out in the RFC, Timer B is the maximum amount of time that a sender\r\n        // will wait for an INVITE message to be acknowledged (a SIP response message is received).\r\n        // So Timer B should be cleared when the transaction state proceeds from \"Calling\".\r\n        if (this.B) {\r\n            clearTimeout(this.B);\r\n            this.B = undefined;\r\n        }\r\n        if (newState === transaction_state_1.TransactionState.Proceeding) {\r\n            // Timers have no effect on \"Proceeding\" state.\r\n            // In the \"Proceeding\" state, the client transaction\r\n            // SHOULD NOT retransmit the request any longer.\r\n            // https://tools.ietf.org/html/rfc3261#section-17.1.1.2\r\n        }\r\n        // The client transaction MUST start Timer D when it enters the \"Completed\" state\r\n        // for any reason, with a value of at least 32 seconds for unreliable transports,\r\n        // and a value of zero seconds for reliable transports.\r\n        // https://tools.ietf.org/html/rfc6026#section-8.4\r\n        if (newState === transaction_state_1.TransactionState.Completed) {\r\n            this.D = setTimeout(function () { return _this.timer_D(); }, timers_1.Timers.TIMER_D);\r\n        }\r\n        // The client transaction MUST transition to the \"Accepted\" state,\r\n        // and Timer M MUST be started with a value of 64*T1.\r\n        // https://tools.ietf.org/html/rfc6026#section-8.4\r\n        if (newState === transaction_state_1.TransactionState.Accepted) {\r\n            this.M = setTimeout(function () { return _this.timer_M(); }, timers_1.Timers.TIMER_M);\r\n        }\r\n        // Once the transaction is in the \"Terminated\" state, it MUST be destroyed immediately.\r\n        // https://tools.ietf.org/html/rfc6026#section-8.7\r\n        if (newState === transaction_state_1.TransactionState.Terminated) {\r\n            this.dispose();\r\n        }\r\n        // Update state.\r\n        this.setState(newState);\r\n    };\r\n    /**\r\n     * When timer A fires, the client transaction MUST retransmit the\r\n     * request by passing it to the transport layer, and MUST reset the\r\n     * timer with a value of 2*T1.\r\n     * When timer A fires 2*T1 seconds later, the request MUST be\r\n     * retransmitted again (assuming the client transaction is still in this\r\n     * state). This process MUST continue so that the request is\r\n     * retransmitted with intervals that double after each transmission.\r\n     * These retransmissions SHOULD only be done while the client\r\n     * transaction is in the \"Calling\" state.\r\n     * https://tools.ietf.org/html/rfc3261#section-17.1.1.2\r\n     */\r\n    InviteClientTransaction.prototype.timer_A = function () {\r\n        // TODO\r\n    };\r\n    /**\r\n     * If the client transaction is still in the \"Calling\" state when timer\r\n     * B fires, the client transaction SHOULD inform the TU that a timeout\r\n     * has occurred.  The client transaction MUST NOT generate an ACK.\r\n     * https://tools.ietf.org/html/rfc3261#section-17.1.1.2\r\n     */\r\n    InviteClientTransaction.prototype.timer_B = function () {\r\n        this.logger.debug(\"Timer B expired for INVITE client transaction \" + this.id + \".\");\r\n        if (this.state === transaction_state_1.TransactionState.Calling) {\r\n            this.onRequestTimeout();\r\n            this.stateTransition(transaction_state_1.TransactionState.Terminated);\r\n        }\r\n    };\r\n    /**\r\n     * If Timer D fires while the client transaction is in the \"Completed\" state,\r\n     * the client transaction MUST move to the \"Terminated\" state.\r\n     * https://tools.ietf.org/html/rfc6026#section-8.4\r\n     */\r\n    InviteClientTransaction.prototype.timer_D = function () {\r\n        this.logger.debug(\"Timer D expired for INVITE client transaction \" + this.id + \".\");\r\n        if (this.state === transaction_state_1.TransactionState.Completed) {\r\n            this.stateTransition(transaction_state_1.TransactionState.Terminated);\r\n        }\r\n    };\r\n    /**\r\n     * If Timer M fires while the client transaction is in the \"Accepted\"\r\n     * state, the client transaction MUST move to the \"Terminated\" state.\r\n     * https://tools.ietf.org/html/rfc6026#section-8.4\r\n     */\r\n    InviteClientTransaction.prototype.timer_M = function () {\r\n        this.logger.debug(\"Timer M expired for INVITE client transaction \" + this.id + \".\");\r\n        if (this.state === transaction_state_1.TransactionState.Accepted) {\r\n            this.stateTransition(transaction_state_1.TransactionState.Terminated);\r\n        }\r\n    };\r\n    return InviteClientTransaction;\r\n}(client_transaction_1.ClientTransaction));\r\nexports.InviteClientTransaction = InviteClientTransaction;\r\n\r\n\r\n/***/ }),\r\n/* 37 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Transaction state.\r\n * @public\r\n */\r\nvar TransactionState;\r\n(function (TransactionState) {\r\n    TransactionState[\"Accepted\"] = \"Accepted\";\r\n    TransactionState[\"Calling\"] = \"Calling\";\r\n    TransactionState[\"Completed\"] = \"Completed\";\r\n    TransactionState[\"Confirmed\"] = \"Confirmed\";\r\n    TransactionState[\"Proceeding\"] = \"Proceeding\";\r\n    TransactionState[\"Terminated\"] = \"Terminated\";\r\n    TransactionState[\"Trying\"] = \"Trying\";\r\n})(TransactionState = exports.TransactionState || (exports.TransactionState = {}));\r\n\r\n\r\n/***/ }),\r\n/* 38 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar messages_1 = __webpack_require__(5);\r\nvar timers_1 = __webpack_require__(27);\r\nvar server_transaction_1 = __webpack_require__(39);\r\nvar transaction_state_1 = __webpack_require__(37);\r\n/**\r\n * INVITE Server Transaction.\r\n * @remarks\r\n * https://tools.ietf.org/html/rfc3261#section-17.2.1\r\n * @public\r\n */\r\nvar InviteServerTransaction = /** @class */ (function (_super) {\r\n    tslib_1.__extends(InviteServerTransaction, _super);\r\n    /**\r\n     * Constructor.\r\n     * Upon construction, a \"100 Trying\" reply will be immediately sent.\r\n     * After construction the transaction will be in the \"proceeding\" state and the transaction\r\n     * `id` will equal the branch parameter set in the Via header of the incoming request.\r\n     * https://tools.ietf.org/html/rfc3261#section-17.2.1\r\n     * @param request - Incoming INVITE request from the transport.\r\n     * @param transport - The transport.\r\n     * @param user - The transaction user.\r\n     */\r\n    function InviteServerTransaction(request, transport, user) {\r\n        return _super.call(this, request, transport, user, transaction_state_1.TransactionState.Proceeding, \"sip.transaction.ist\") || this;\r\n    }\r\n    /**\r\n     * Destructor.\r\n     */\r\n    InviteServerTransaction.prototype.dispose = function () {\r\n        this.stopProgressExtensionTimer();\r\n        if (this.H) {\r\n            clearTimeout(this.H);\r\n            this.H = undefined;\r\n        }\r\n        if (this.I) {\r\n            clearTimeout(this.I);\r\n            this.I = undefined;\r\n        }\r\n        if (this.L) {\r\n            clearTimeout(this.L);\r\n            this.L = undefined;\r\n        }\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Object.defineProperty(InviteServerTransaction.prototype, \"kind\", {\r\n        /** Transaction kind. Deprecated. */\r\n        get: function () {\r\n            return \"ist\";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Receive requests from transport matching this transaction.\r\n     * @param request - Request matching this transaction.\r\n     */\r\n    InviteServerTransaction.prototype.receiveRequest = function (request) {\r\n        var _this = this;\r\n        switch (this.state) {\r\n            case transaction_state_1.TransactionState.Proceeding:\r\n                // If a request retransmission is received while in the \"Proceeding\" state, the most\r\n                // recent provisional response that was received from the TU MUST be passed to the\r\n                // transport layer for retransmission.\r\n                // https://tools.ietf.org/html/rfc3261#section-17.2.1\r\n                if (request.method === messages_1.C.INVITE) {\r\n                    if (this.lastProvisionalResponse) {\r\n                        this.send(this.lastProvisionalResponse).catch(function (error) {\r\n                            _this.logTransportError(error, \"Failed to send retransmission of provisional response.\");\r\n                        });\r\n                    }\r\n                    return;\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Accepted:\r\n                // While in the \"Accepted\" state, any retransmissions of the INVITE\r\n                // received will match this transaction state machine and will be\r\n                // absorbed by the machine without changing its state. These\r\n                // retransmissions are not passed onto the TU.\r\n                // https://tools.ietf.org/html/rfc6026#section-7.1\r\n                if (request.method === messages_1.C.INVITE) {\r\n                    return;\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Completed:\r\n                // Furthermore, while in the \"Completed\" state, if a request retransmission is\r\n                // received, the server SHOULD pass the response to the transport for retransmission.\r\n                // https://tools.ietf.org/html/rfc3261#section-17.2.1\r\n                if (request.method === messages_1.C.INVITE) {\r\n                    if (!this.lastFinalResponse) {\r\n                        throw new Error(\"Last final response undefined.\");\r\n                    }\r\n                    this.send(this.lastFinalResponse).catch(function (error) {\r\n                        _this.logTransportError(error, \"Failed to send retransmission of final response.\");\r\n                    });\r\n                    return;\r\n                }\r\n                // If an ACK is received while the server transaction is in the \"Completed\" state,\r\n                // the server transaction MUST transition to the \"Confirmed\" state.\r\n                // https://tools.ietf.org/html/rfc3261#section-17.2.1\r\n                if (request.method === messages_1.C.ACK) {\r\n                    this.stateTransition(transaction_state_1.TransactionState.Confirmed);\r\n                    return;\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Confirmed:\r\n                // The purpose of the \"Confirmed\" state is to absorb any additional ACK messages that arrive,\r\n                // triggered from retransmissions of the final response.\r\n                // https://tools.ietf.org/html/rfc3261#section-17.2.1\r\n                if (request.method === messages_1.C.INVITE || request.method === messages_1.C.ACK) {\r\n                    return;\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Terminated:\r\n                // For good measure absorb any additional messages that arrive (should not happen).\r\n                if (request.method === messages_1.C.INVITE || request.method === messages_1.C.ACK) {\r\n                    return;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid state \" + this.state);\r\n        }\r\n        var message = \"INVITE server transaction received unexpected \" + request.method + \" request while in state \" + this.state + \".\";\r\n        this.logger.warn(message);\r\n        return;\r\n    };\r\n    /**\r\n     * Receive responses from TU for this transaction.\r\n     * @param statusCode - Status code of response.\r\n     * @param response - Response.\r\n     */\r\n    InviteServerTransaction.prototype.receiveResponse = function (statusCode, response) {\r\n        var _this = this;\r\n        if (statusCode < 100 || statusCode > 699) {\r\n            throw new Error(\"Invalid status code \" + statusCode);\r\n        }\r\n        switch (this.state) {\r\n            case transaction_state_1.TransactionState.Proceeding:\r\n                // The TU passes any number of provisional responses to the server\r\n                // transaction. So long as the server transaction is in the\r\n                // \"Proceeding\" state, each of these MUST be passed to the transport\r\n                // layer for transmission. They are not sent reliably by the\r\n                // transaction layer (they are not retransmitted by it) and do not cause\r\n                // a change in the state of the server transaction.\r\n                // https://tools.ietf.org/html/rfc3261#section-17.2.1\r\n                if (statusCode >= 100 && statusCode <= 199) {\r\n                    this.lastProvisionalResponse = response;\r\n                    // Start the progress extension timer only for a non-100 provisional response.\r\n                    if (statusCode > 100) {\r\n                        this.startProgressExtensionTimer(); // FIXME: remove\r\n                    }\r\n                    this.send(response).catch(function (error) {\r\n                        _this.logTransportError(error, \"Failed to send 1xx response.\");\r\n                    });\r\n                    return;\r\n                }\r\n                // If, while in the \"Proceeding\" state, the TU passes a 2xx response\r\n                // to the server transaction, the server transaction MUST pass this\r\n                // response to the transport layer for transmission. It is not\r\n                // retransmitted by the server transaction; retransmissions of 2xx\r\n                // responses are handled by the TU. The server transaction MUST then\r\n                // transition to the \"Accepted\" state.\r\n                // https://tools.ietf.org/html/rfc6026#section-8.5\r\n                if (statusCode >= 200 && statusCode <= 299) {\r\n                    this.lastFinalResponse = response;\r\n                    this.stateTransition(transaction_state_1.TransactionState.Accepted);\r\n                    this.send(response).catch(function (error) {\r\n                        _this.logTransportError(error, \"Failed to send 2xx response.\");\r\n                    });\r\n                    return;\r\n                }\r\n                // While in the \"Proceeding\" state, if the TU passes a response with\r\n                // status code from 300 to 699 to the server transaction, the response\r\n                // MUST be passed to the transport layer for transmission, and the state\r\n                // machine MUST enter the \"Completed\" state.\r\n                // https://tools.ietf.org/html/rfc3261#section-17.2.1\r\n                if (statusCode >= 300 && statusCode <= 699) {\r\n                    this.lastFinalResponse = response;\r\n                    this.stateTransition(transaction_state_1.TransactionState.Completed);\r\n                    this.send(response).catch(function (error) {\r\n                        _this.logTransportError(error, \"Failed to send non-2xx final response.\");\r\n                    });\r\n                    return;\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Accepted:\r\n                // While in the \"Accepted\" state, if the TU passes a 2xx response,\r\n                // the server transaction MUST pass the response to the transport layer for transmission.\r\n                // https://tools.ietf.org/html/rfc6026#section-8.7\r\n                if (statusCode >= 200 && statusCode <= 299) {\r\n                    this.send(response).catch(function (error) {\r\n                        _this.logTransportError(error, \"Failed to send 2xx response.\");\r\n                    });\r\n                    return;\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Completed:\r\n                break;\r\n            case transaction_state_1.TransactionState.Confirmed:\r\n                break;\r\n            case transaction_state_1.TransactionState.Terminated:\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid state \" + this.state);\r\n        }\r\n        var message = \"INVITE server transaction received unexpected \" + statusCode + \" response from TU while in state \" + this.state + \".\";\r\n        this.logger.error(message);\r\n        throw new Error(message);\r\n    };\r\n    /**\r\n     * Retransmit the last 2xx response. This is a noop if not in the \"accepted\" state.\r\n     */\r\n    InviteServerTransaction.prototype.retransmitAcceptedResponse = function () {\r\n        var _this = this;\r\n        if (this.state === transaction_state_1.TransactionState.Accepted && this.lastFinalResponse) {\r\n            this.send(this.lastFinalResponse).catch(function (error) {\r\n                _this.logTransportError(error, \"Failed to send 2xx response.\");\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * First, the procedures in [4] are followed, which attempt to deliver the response to a backup.\r\n     * If those should all fail, based on the definition of failure in [4], the server transaction SHOULD\r\n     * inform the TU that a failure has occurred, and MUST remain in the current state.\r\n     * https://tools.ietf.org/html/rfc6026#section-8.8\r\n     */\r\n    InviteServerTransaction.prototype.onTransportError = function (error) {\r\n        if (this.user.onTransportError) {\r\n            this.user.onTransportError(error);\r\n        }\r\n    };\r\n    /** For logging. */\r\n    InviteServerTransaction.prototype.typeToString = function () {\r\n        return \"INVITE server transaction\";\r\n    };\r\n    /**\r\n     * Execute a state transition.\r\n     * @param newState - New state.\r\n     */\r\n    InviteServerTransaction.prototype.stateTransition = function (newState) {\r\n        var _this = this;\r\n        // Assert valid state transitions.\r\n        var invalidStateTransition = function () {\r\n            throw new Error(\"Invalid state transition from \" + _this.state + \" to \" + newState);\r\n        };\r\n        switch (newState) {\r\n            case transaction_state_1.TransactionState.Proceeding:\r\n                invalidStateTransition();\r\n                break;\r\n            case transaction_state_1.TransactionState.Accepted:\r\n            case transaction_state_1.TransactionState.Completed:\r\n                if (this.state !== transaction_state_1.TransactionState.Proceeding) {\r\n                    invalidStateTransition();\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Confirmed:\r\n                if (this.state !== transaction_state_1.TransactionState.Completed) {\r\n                    invalidStateTransition();\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Terminated:\r\n                if (this.state !== transaction_state_1.TransactionState.Accepted &&\r\n                    this.state !== transaction_state_1.TransactionState.Completed &&\r\n                    this.state !== transaction_state_1.TransactionState.Confirmed) {\r\n                    invalidStateTransition();\r\n                }\r\n                break;\r\n            default:\r\n                invalidStateTransition();\r\n        }\r\n        // On any state transition, stop resending provisional responses\r\n        this.stopProgressExtensionTimer();\r\n        // The purpose of the \"Accepted\" state is to absorb retransmissions of an accepted INVITE request.\r\n        // Any such retransmissions are absorbed entirely within the server transaction.\r\n        // They are not passed up to the TU since any downstream UAS cores that accepted the request have\r\n        // taken responsibility for reliability and will already retransmit their 2xx responses if necessary.\r\n        // https://tools.ietf.org/html/rfc6026#section-8.7\r\n        if (newState === transaction_state_1.TransactionState.Accepted) {\r\n            this.L = setTimeout(function () { return _this.timer_L(); }, timers_1.Timers.TIMER_L);\r\n        }\r\n        // When the \"Completed\" state is entered, timer H MUST be set to fire in 64*T1 seconds for all transports.\r\n        // Timer H determines when the server transaction abandons retransmitting the response.\r\n        // If an ACK is received while the server transaction is in the \"Completed\" state,\r\n        // the server transaction MUST transition to the \"Confirmed\" state.\r\n        // https://tools.ietf.org/html/rfc3261#section-17.2.1\r\n        if (newState === transaction_state_1.TransactionState.Completed) {\r\n            // FIXME: Missing timer G for unreliable transports.\r\n            this.H = setTimeout(function () { return _this.timer_H(); }, timers_1.Timers.TIMER_H);\r\n        }\r\n        // The purpose of the \"Confirmed\" state is to absorb any additional ACK messages that arrive,\r\n        // triggered from retransmissions of the final response. When this state is entered, timer I\r\n        // is set to fire in T4 seconds for unreliable transports, and zero seconds for reliable\r\n        // transports. Once timer I fires, the server MUST transition to the \"Terminated\" state.\r\n        // https://tools.ietf.org/html/rfc3261#section-17.2.1\r\n        if (newState === transaction_state_1.TransactionState.Confirmed) {\r\n            // FIXME: This timer is not getting set correctly for unreliable transports.\r\n            this.I = setTimeout(function () { return _this.timer_I(); }, timers_1.Timers.TIMER_I);\r\n        }\r\n        // Once the transaction is in the \"Terminated\" state, it MUST be destroyed immediately.\r\n        // https://tools.ietf.org/html/rfc6026#section-8.7\r\n        if (newState === transaction_state_1.TransactionState.Terminated) {\r\n            this.dispose();\r\n        }\r\n        // Update state.\r\n        this.setState(newState);\r\n    };\r\n    /**\r\n     * FIXME: UAS Provisional Retransmission Timer. See RFC 3261 Section 13.3.1.1\r\n     * This is in the wrong place. This is not a transaction level thing. It's a UAS level thing.\r\n     */\r\n    InviteServerTransaction.prototype.startProgressExtensionTimer = function () {\r\n        var _this = this;\r\n        // Start the progress extension timer only for the first non-100 provisional response.\r\n        if (this.progressExtensionTimer === undefined) {\r\n            this.progressExtensionTimer = setInterval(function () {\r\n                _this.logger.debug(\"Progress extension timer expired for INVITE server transaction \" + _this.id + \".\");\r\n                if (!_this.lastProvisionalResponse) {\r\n                    throw new Error(\"Last provisional response undefined.\");\r\n                }\r\n                _this.send(_this.lastProvisionalResponse).catch(function (error) {\r\n                    _this.logTransportError(error, \"Failed to send retransmission of provisional response.\");\r\n                });\r\n            }, timers_1.Timers.PROVISIONAL_RESPONSE_INTERVAL);\r\n        }\r\n    };\r\n    /**\r\n     * FIXME: UAS Provisional Retransmission Timer id. See RFC 3261 Section 13.3.1.1\r\n     * This is in the wrong place. This is not a transaction level thing. It's a UAS level thing.\r\n     */\r\n    InviteServerTransaction.prototype.stopProgressExtensionTimer = function () {\r\n        if (this.progressExtensionTimer !== undefined) {\r\n            clearInterval(this.progressExtensionTimer);\r\n            this.progressExtensionTimer = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * While in the \"Proceeding\" state, if the TU passes a response with status code\r\n     * from 300 to 699 to the server transaction, the response MUST be passed to the\r\n     * transport layer for transmission, and the state machine MUST enter the \"Completed\" state.\r\n     * For unreliable transports, timer G is set to fire in T1 seconds, and is not set to fire for\r\n     * reliable transports. If timer G fires, the response is passed to the transport layer once\r\n     * more for retransmission, and timer G is set to fire in MIN(2*T1, T2) seconds. From then on,\r\n     * when timer G fires, the response is passed to the transport again for transmission, and\r\n     * timer G is reset with a value that doubles, unless that value exceeds T2, in which case\r\n     * it is reset with the value of T2.\r\n     * https://tools.ietf.org/html/rfc3261#section-17.2.1\r\n     */\r\n    InviteServerTransaction.prototype.timer_G = function () {\r\n        // TODO\r\n    };\r\n    /**\r\n     * If timer H fires while in the \"Completed\" state, it implies that the ACK was never received.\r\n     * In this case, the server transaction MUST transition to the \"Terminated\" state, and MUST\r\n     * indicate to the TU that a transaction failure has occurred.\r\n     * https://tools.ietf.org/html/rfc3261#section-17.2.1\r\n     */\r\n    InviteServerTransaction.prototype.timer_H = function () {\r\n        this.logger.debug(\"Timer H expired for INVITE server transaction \" + this.id + \".\");\r\n        if (this.state === transaction_state_1.TransactionState.Completed) {\r\n            this.logger.warn(\"ACK to negative final response was never received, terminating transaction.\");\r\n            this.stateTransition(transaction_state_1.TransactionState.Terminated);\r\n        }\r\n    };\r\n    /**\r\n     * Once timer I fires, the server MUST transition to the \"Terminated\" state.\r\n     * https://tools.ietf.org/html/rfc3261#section-17.2.1\r\n     */\r\n    InviteServerTransaction.prototype.timer_I = function () {\r\n        this.logger.debug(\"Timer I expired for INVITE server transaction \" + this.id + \".\");\r\n        this.stateTransition(transaction_state_1.TransactionState.Terminated);\r\n    };\r\n    /**\r\n     * When Timer L fires and the state machine is in the \"Accepted\" state, the machine MUST\r\n     * transition to the \"Terminated\" state. Once the transaction is in the \"Terminated\" state,\r\n     * it MUST be destroyed immediately. Timer L reflects the amount of time the server\r\n     * transaction could receive 2xx responses for retransmission from the\r\n     * TU while it is waiting to receive an ACK.\r\n     * https://tools.ietf.org/html/rfc6026#section-7.1\r\n     * https://tools.ietf.org/html/rfc6026#section-8.7\r\n     */\r\n    InviteServerTransaction.prototype.timer_L = function () {\r\n        this.logger.debug(\"Timer L expired for INVITE server transaction \" + this.id + \".\");\r\n        if (this.state === transaction_state_1.TransactionState.Accepted) {\r\n            this.stateTransition(transaction_state_1.TransactionState.Terminated);\r\n        }\r\n    };\r\n    return InviteServerTransaction;\r\n}(server_transaction_1.ServerTransaction));\r\nexports.InviteServerTransaction = InviteServerTransaction;\r\n\r\n\r\n/***/ }),\r\n/* 39 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar transaction_1 = __webpack_require__(30);\r\n/**\r\n * Server Transaction.\r\n * @remarks\r\n * The server transaction is responsible for the delivery of requests to\r\n * the TU and the reliable transmission of responses.  It accomplishes\r\n * this through a state machine.  Server transactions are created by the\r\n * core when a request is received, and transaction handling is desired\r\n * for that request (this is not always the case).\r\n * https://tools.ietf.org/html/rfc3261#section-17.2\r\n * @public\r\n */\r\nvar ServerTransaction = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ServerTransaction, _super);\r\n    function ServerTransaction(_request, transport, user, state, loggerCategory) {\r\n        var _this = _super.call(this, transport, user, _request.viaBranch, state, loggerCategory) || this;\r\n        _this._request = _request;\r\n        _this.user = user;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ServerTransaction.prototype, \"request\", {\r\n        /** The incoming request the transaction handling. */\r\n        get: function () {\r\n            return this._request;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ServerTransaction;\r\n}(transaction_1.Transaction));\r\nexports.ServerTransaction = ServerTransaction;\r\n\r\n\r\n/***/ }),\r\n/* 40 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar timers_1 = __webpack_require__(27);\r\nvar client_transaction_1 = __webpack_require__(29);\r\nvar transaction_state_1 = __webpack_require__(37);\r\n/**\r\n * Non-INVITE Client Transaction.\r\n * @remarks\r\n * Non-INVITE transactions do not make use of ACK.\r\n * They are simple request-response interactions.\r\n * https://tools.ietf.org/html/rfc3261#section-17.1.2\r\n * @public\r\n */\r\nvar NonInviteClientTransaction = /** @class */ (function (_super) {\r\n    tslib_1.__extends(NonInviteClientTransaction, _super);\r\n    /**\r\n     * Constructor\r\n     * Upon construction, the outgoing request's Via header is updated by calling `setViaHeader`.\r\n     * Then `toString` is called on the outgoing request and the message is sent via the transport.\r\n     * After construction the transaction will be in the \"calling\" state and the transaction id\r\n     * will equal the branch parameter set in the Via header of the outgoing request.\r\n     * https://tools.ietf.org/html/rfc3261#section-17.1.2\r\n     * @param request - The outgoing Non-INVITE request.\r\n     * @param transport - The transport.\r\n     * @param user - The transaction user.\r\n     */\r\n    function NonInviteClientTransaction(request, transport, user) {\r\n        var _this = _super.call(this, request, transport, user, transaction_state_1.TransactionState.Trying, \"sip.transaction.nict\") || this;\r\n        // FIXME: Timer E for unreliable transports not implemented.\r\n        //\r\n        // The \"Trying\" state is entered when the TU initiates a new client\r\n        // transaction with a request.  When entering this state, the client\r\n        // transaction SHOULD set timer F to fire in 64*T1 seconds. The request\r\n        // MUST be passed to the transport layer for transmission.\r\n        // https://tools.ietf.org/html/rfc3261#section-17.1.2.2\r\n        _this.F = setTimeout(function () { return _this.timer_F(); }, timers_1.Timers.TIMER_F);\r\n        _this.send(request.toString()).catch(function (error) {\r\n            _this.logTransportError(error, \"Failed to send initial outgoing request.\");\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Destructor.\r\n     */\r\n    NonInviteClientTransaction.prototype.dispose = function () {\r\n        if (this.F) {\r\n            clearTimeout(this.F);\r\n            this.F = undefined;\r\n        }\r\n        if (this.K) {\r\n            clearTimeout(this.K);\r\n            this.K = undefined;\r\n        }\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Object.defineProperty(NonInviteClientTransaction.prototype, \"kind\", {\r\n        /** Transaction kind. Deprecated. */\r\n        get: function () {\r\n            return \"nict\";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Handler for incoming responses from the transport which match this transaction.\r\n     * @param response - The incoming response.\r\n     */\r\n    NonInviteClientTransaction.prototype.receiveResponse = function (response) {\r\n        var statusCode = response.statusCode;\r\n        if (!statusCode || statusCode < 100 || statusCode > 699) {\r\n            throw new Error(\"Invalid status code \" + statusCode);\r\n        }\r\n        switch (this.state) {\r\n            case transaction_state_1.TransactionState.Trying:\r\n                // If a provisional response is received while in the \"Trying\" state, the\r\n                // response MUST be passed to the TU, and then the client transaction\r\n                // SHOULD move to the \"Proceeding\" state.\r\n                // https://tools.ietf.org/html/rfc3261#section-17.1.2.2\r\n                if (statusCode >= 100 && statusCode <= 199) {\r\n                    this.stateTransition(transaction_state_1.TransactionState.Proceeding);\r\n                    if (this.user.receiveResponse) {\r\n                        this.user.receiveResponse(response);\r\n                    }\r\n                    return;\r\n                }\r\n                // If a final response (status codes 200-699) is received while in the\r\n                // \"Trying\" state, the response MUST be passed to the TU, and the\r\n                // client transaction MUST transition to the \"Completed\" state.\r\n                // https://tools.ietf.org/html/rfc3261#section-17.1.2.2\r\n                if (statusCode >= 200 && statusCode <= 699) {\r\n                    this.stateTransition(transaction_state_1.TransactionState.Completed);\r\n                    if (statusCode === 408) {\r\n                        this.onRequestTimeout();\r\n                        return;\r\n                    }\r\n                    if (this.user.receiveResponse) {\r\n                        this.user.receiveResponse(response);\r\n                    }\r\n                    return;\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Proceeding:\r\n                // If a provisional response is received while in the \"Proceeding\" state,\r\n                // the response MUST be passed to the TU. (From Figure 6)\r\n                // https://tools.ietf.org/html/rfc3261#section-17.1.2.2\r\n                if (statusCode >= 100 && statusCode <= 199) {\r\n                    if (this.user.receiveResponse) {\r\n                        return this.user.receiveResponse(response);\r\n                    }\r\n                }\r\n                // If a final response (status codes 200-699) is received while in the\r\n                // \"Proceeding\" state, the response MUST be passed to the TU, and the\r\n                // client transaction MUST transition to the \"Completed\" state.\r\n                // https://tools.ietf.org/html/rfc3261#section-17.1.2.2\r\n                if (statusCode >= 200 && statusCode <= 699) {\r\n                    this.stateTransition(transaction_state_1.TransactionState.Completed);\r\n                    if (statusCode === 408) {\r\n                        this.onRequestTimeout();\r\n                        return;\r\n                    }\r\n                    if (this.user.receiveResponse) {\r\n                        this.user.receiveResponse(response);\r\n                    }\r\n                    return;\r\n                }\r\n            case transaction_state_1.TransactionState.Completed:\r\n                // The \"Completed\" state exists to buffer any additional response\r\n                // retransmissions that may be received (which is why the client\r\n                // transaction remains there only for unreliable transports).\r\n                // https://tools.ietf.org/html/rfc3261#section-17.1.2.2\r\n                return;\r\n            case transaction_state_1.TransactionState.Terminated:\r\n                // For good measure just absorb additional response retransmissions.\r\n                return;\r\n            default:\r\n                throw new Error(\"Invalid state \" + this.state);\r\n        }\r\n        var message = \"Non-INVITE client transaction received unexpected \" + statusCode + \" response while in state \" + this.state + \".\";\r\n        this.logger.warn(message);\r\n        return;\r\n    };\r\n    /**\r\n     * The client transaction SHOULD inform the TU that a transport failure has occurred,\r\n     * and the client transaction SHOULD transition directly to the \"Terminated\" state.\r\n     * The TU will handle the fail over mechanisms described in [4].\r\n     * https://tools.ietf.org/html/rfc3261#section-17.1.4\r\n     * @param error - Transport error\r\n     */\r\n    NonInviteClientTransaction.prototype.onTransportError = function (error) {\r\n        if (this.user.onTransportError) {\r\n            this.user.onTransportError(error);\r\n        }\r\n        this.stateTransition(transaction_state_1.TransactionState.Terminated, true);\r\n    };\r\n    /** For logging. */\r\n    NonInviteClientTransaction.prototype.typeToString = function () {\r\n        return \"non-INVITE client transaction\";\r\n    };\r\n    /**\r\n     * Execute a state transition.\r\n     * @param newState - New state.\r\n     */\r\n    NonInviteClientTransaction.prototype.stateTransition = function (newState, dueToTransportError) {\r\n        var _this = this;\r\n        if (dueToTransportError === void 0) { dueToTransportError = false; }\r\n        // Assert valid state transitions.\r\n        var invalidStateTransition = function () {\r\n            throw new Error(\"Invalid state transition from \" + _this.state + \" to \" + newState);\r\n        };\r\n        switch (newState) {\r\n            case transaction_state_1.TransactionState.Trying:\r\n                invalidStateTransition();\r\n                break;\r\n            case transaction_state_1.TransactionState.Proceeding:\r\n                if (this.state !== transaction_state_1.TransactionState.Trying) {\r\n                    invalidStateTransition();\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Completed:\r\n                if (this.state !== transaction_state_1.TransactionState.Trying &&\r\n                    this.state !== transaction_state_1.TransactionState.Proceeding) {\r\n                    invalidStateTransition();\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Terminated:\r\n                if (this.state !== transaction_state_1.TransactionState.Trying &&\r\n                    this.state !== transaction_state_1.TransactionState.Proceeding &&\r\n                    this.state !== transaction_state_1.TransactionState.Completed) {\r\n                    if (!dueToTransportError) {\r\n                        invalidStateTransition();\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                invalidStateTransition();\r\n        }\r\n        // Once the client transaction enters the \"Completed\" state, it MUST set\r\n        // Timer K to fire in T4 seconds for unreliable transports, and zero\r\n        // seconds for reliable transports  The \"Completed\" state exists to\r\n        // buffer any additional response retransmissions that may be received\r\n        // (which is why the client transaction remains there only for unreliable transports).\r\n        // https://tools.ietf.org/html/rfc3261#section-17.1.2.2\r\n        if (newState === transaction_state_1.TransactionState.Completed) {\r\n            if (this.F) {\r\n                clearTimeout(this.F);\r\n                this.F = undefined;\r\n            }\r\n            this.K = setTimeout(function () { return _this.timer_K(); }, timers_1.Timers.TIMER_K);\r\n        }\r\n        // Once the transaction is in the terminated state, it MUST be destroyed immediately.\r\n        // https://tools.ietf.org/html/rfc3261#section-17.1.2.2\r\n        if (newState === transaction_state_1.TransactionState.Terminated) {\r\n            this.dispose();\r\n        }\r\n        // Update state.\r\n        this.setState(newState);\r\n    };\r\n    /**\r\n     * If Timer F fires while the client transaction is still in the\r\n     * \"Trying\" state, the client transaction SHOULD inform the TU about the\r\n     * timeout, and then it SHOULD enter the \"Terminated\" state.\r\n     * If timer F fires while in the \"Proceeding\" state, the TU MUST be informed of\r\n     * a timeout, and the client transaction MUST transition to the terminated state.\r\n     * https://tools.ietf.org/html/rfc3261#section-17.1.2.2\r\n     */\r\n    NonInviteClientTransaction.prototype.timer_F = function () {\r\n        this.logger.debug(\"Timer F expired for non-INVITE client transaction \" + this.id + \".\");\r\n        if (this.state === transaction_state_1.TransactionState.Trying || this.state === transaction_state_1.TransactionState.Proceeding) {\r\n            this.onRequestTimeout();\r\n            this.stateTransition(transaction_state_1.TransactionState.Terminated);\r\n        }\r\n    };\r\n    /**\r\n     * If Timer K fires while in this (COMPLETED) state, the client transaction\r\n     * MUST transition to the \"Terminated\" state.\r\n     * https://tools.ietf.org/html/rfc3261#section-17.1.2.2\r\n     */\r\n    NonInviteClientTransaction.prototype.timer_K = function () {\r\n        if (this.state === transaction_state_1.TransactionState.Completed) {\r\n            this.stateTransition(transaction_state_1.TransactionState.Terminated);\r\n        }\r\n    };\r\n    return NonInviteClientTransaction;\r\n}(client_transaction_1.ClientTransaction));\r\nexports.NonInviteClientTransaction = NonInviteClientTransaction;\r\n\r\n\r\n/***/ }),\r\n/* 41 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar timers_1 = __webpack_require__(27);\r\nvar server_transaction_1 = __webpack_require__(39);\r\nvar transaction_state_1 = __webpack_require__(37);\r\n/**\r\n * Non-INVITE Server Transaction.\r\n * @remarks\r\n * https://tools.ietf.org/html/rfc3261#section-17.2.2\r\n * @public\r\n */\r\nvar NonInviteServerTransaction = /** @class */ (function (_super) {\r\n    tslib_1.__extends(NonInviteServerTransaction, _super);\r\n    /**\r\n     * Constructor.\r\n     * After construction the transaction will be in the \"trying\": state and the transaction\r\n     * `id` will equal the branch parameter set in the Via header of the incoming request.\r\n     * https://tools.ietf.org/html/rfc3261#section-17.2.2\r\n     * @param request - Incoming Non-INVITE request from the transport.\r\n     * @param transport - The transport.\r\n     * @param user - The transaction user.\r\n     */\r\n    function NonInviteServerTransaction(request, transport, user) {\r\n        return _super.call(this, request, transport, user, transaction_state_1.TransactionState.Trying, \"sip.transaction.nist\") || this;\r\n    }\r\n    /**\r\n     * Destructor.\r\n     */\r\n    NonInviteServerTransaction.prototype.dispose = function () {\r\n        if (this.J) {\r\n            clearTimeout(this.J);\r\n            this.J = undefined;\r\n        }\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Object.defineProperty(NonInviteServerTransaction.prototype, \"kind\", {\r\n        /** Transaction kind. Deprecated. */\r\n        get: function () {\r\n            return \"nist\";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Receive requests from transport matching this transaction.\r\n     * @param request - Request matching this transaction.\r\n     */\r\n    NonInviteServerTransaction.prototype.receiveRequest = function (request) {\r\n        var _this = this;\r\n        switch (this.state) {\r\n            case transaction_state_1.TransactionState.Trying:\r\n                // Once in the \"Trying\" state, any further request retransmissions are discarded.\r\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\r\n                break;\r\n            case transaction_state_1.TransactionState.Proceeding:\r\n                // If a retransmission of the request is received while in the \"Proceeding\" state,\r\n                // the most recently sent provisional response MUST be passed to the transport layer for retransmission.\r\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\r\n                if (!this.lastResponse) {\r\n                    throw new Error(\"Last response undefined.\");\r\n                }\r\n                this.send(this.lastResponse).catch(function (error) {\r\n                    _this.logTransportError(error, \"Failed to send retransmission of provisional response.\");\r\n                });\r\n                break;\r\n            case transaction_state_1.TransactionState.Completed:\r\n                // While in the \"Completed\" state, the server transaction MUST pass the final response to the transport\r\n                // layer for retransmission whenever a retransmission of the request is received. Any other final responses\r\n                // passed by the TU to the server transaction MUST be discarded while in the \"Completed\" state.\r\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\r\n                if (!this.lastResponse) {\r\n                    throw new Error(\"Last response undefined.\");\r\n                }\r\n                this.send(this.lastResponse).catch(function (error) {\r\n                    _this.logTransportError(error, \"Failed to send retransmission of final response.\");\r\n                });\r\n                break;\r\n            case transaction_state_1.TransactionState.Terminated:\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid state \" + this.state);\r\n        }\r\n    };\r\n    /**\r\n     * Receive responses from TU for this transaction.\r\n     * @param statusCode - Status code of response. 101-199 not allowed per RFC 4320.\r\n     * @param response - Response to send.\r\n     */\r\n    NonInviteServerTransaction.prototype.receiveResponse = function (statusCode, response) {\r\n        var _this = this;\r\n        if (statusCode < 100 || statusCode > 699) {\r\n            throw new Error(\"Invalid status code \" + statusCode);\r\n        }\r\n        // An SIP element MUST NOT send any provisional response with a\r\n        // Status-Code other than 100 to a non-INVITE request.\r\n        // An SIP element MUST NOT respond to a non-INVITE request with a\r\n        // Status-Code of 100 over any unreliable transport, such as UDP,\r\n        // before the amount of time it takes a client transaction's Timer E to be reset to T2.\r\n        // An SIP element MAY respond to a non-INVITE request with a\r\n        // Status-Code of 100 over a reliable transport at any time.\r\n        // https://tools.ietf.org/html/rfc4320#section-4.1\r\n        if (statusCode > 100 && statusCode <= 199) {\r\n            throw new Error(\"Provisional response other than 100 not allowed.\");\r\n        }\r\n        switch (this.state) {\r\n            case transaction_state_1.TransactionState.Trying:\r\n                // While in the \"Trying\" state, if the TU passes a provisional response\r\n                // to the server transaction, the server transaction MUST enter the \"Proceeding\" state.\r\n                // The response MUST be passed to the transport layer for transmission.\r\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\r\n                this.lastResponse = response;\r\n                if (statusCode >= 100 && statusCode < 200) {\r\n                    this.stateTransition(transaction_state_1.TransactionState.Proceeding);\r\n                    this.send(response).catch(function (error) {\r\n                        _this.logTransportError(error, \"Failed to send provisional response.\");\r\n                    });\r\n                    return;\r\n                }\r\n                if (statusCode >= 200 && statusCode <= 699) {\r\n                    this.stateTransition(transaction_state_1.TransactionState.Completed);\r\n                    this.send(response).catch(function (error) {\r\n                        _this.logTransportError(error, \"Failed to send final response.\");\r\n                    });\r\n                    return;\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Proceeding:\r\n                // Any further provisional responses that are received from the TU while\r\n                // in the \"Proceeding\" state MUST be passed to the transport layer for transmission.\r\n                // If the TU passes a final response (status codes 200-699) to the server while in\r\n                // the \"Proceeding\" state, the transaction MUST enter the \"Completed\" state, and\r\n                // the response MUST be passed to the transport layer for transmission.\r\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\r\n                this.lastResponse = response;\r\n                if (statusCode >= 200 && statusCode <= 699) {\r\n                    this.stateTransition(transaction_state_1.TransactionState.Completed);\r\n                    this.send(response).catch(function (error) {\r\n                        _this.logTransportError(error, \"Failed to send final response.\");\r\n                    });\r\n                    return;\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Completed:\r\n                // Any other final responses passed by the TU to the server\r\n                // transaction MUST be discarded while in the \"Completed\" state.\r\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\r\n                return;\r\n            case transaction_state_1.TransactionState.Terminated:\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid state \" + this.state);\r\n        }\r\n        var message = \"Non-INVITE server transaction received unexpected \" + statusCode + \" response from TU while in state \" + this.state + \".\";\r\n        this.logger.error(message);\r\n        throw new Error(message);\r\n    };\r\n    /**\r\n     * First, the procedures in [4] are followed, which attempt to deliver the response to a backup.\r\n     * If those should all fail, based on the definition of failure in [4], the server transaction SHOULD\r\n     * inform the TU that a failure has occurred, and SHOULD transition to the terminated state.\r\n     * https://tools.ietf.org/html/rfc3261#section-17.2.4\r\n     */\r\n    NonInviteServerTransaction.prototype.onTransportError = function (error) {\r\n        if (this.user.onTransportError) {\r\n            this.user.onTransportError(error);\r\n        }\r\n        this.stateTransition(transaction_state_1.TransactionState.Terminated, true);\r\n    };\r\n    /** For logging. */\r\n    NonInviteServerTransaction.prototype.typeToString = function () {\r\n        return \"non-INVITE server transaction\";\r\n    };\r\n    NonInviteServerTransaction.prototype.stateTransition = function (newState, dueToTransportError) {\r\n        var _this = this;\r\n        if (dueToTransportError === void 0) { dueToTransportError = false; }\r\n        // Assert valid state transitions.\r\n        var invalidStateTransition = function () {\r\n            throw new Error(\"Invalid state transition from \" + _this.state + \" to \" + newState);\r\n        };\r\n        switch (newState) {\r\n            case transaction_state_1.TransactionState.Trying:\r\n                invalidStateTransition();\r\n                break;\r\n            case transaction_state_1.TransactionState.Proceeding:\r\n                if (this.state !== transaction_state_1.TransactionState.Trying) {\r\n                    invalidStateTransition();\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Completed:\r\n                if (this.state !== transaction_state_1.TransactionState.Trying && this.state !== transaction_state_1.TransactionState.Proceeding) {\r\n                    invalidStateTransition();\r\n                }\r\n                break;\r\n            case transaction_state_1.TransactionState.Terminated:\r\n                if (this.state !== transaction_state_1.TransactionState.Proceeding && this.state !== transaction_state_1.TransactionState.Completed) {\r\n                    if (!dueToTransportError) {\r\n                        invalidStateTransition();\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                invalidStateTransition();\r\n        }\r\n        // When the server transaction enters the \"Completed\" state, it MUST set Timer J to fire\r\n        // in 64*T1 seconds for unreliable transports, and zero seconds for reliable transports.\r\n        // https://tools.ietf.org/html/rfc3261#section-17.2.2\r\n        if (newState === transaction_state_1.TransactionState.Completed) {\r\n            this.J = setTimeout(function () { return _this.timer_J(); }, timers_1.Timers.TIMER_J);\r\n        }\r\n        // The server transaction MUST be destroyed the instant it enters the \"Terminated\" state.\r\n        // https://tools.ietf.org/html/rfc3261#section-17.2.2\r\n        if (newState === transaction_state_1.TransactionState.Terminated) {\r\n            this.dispose();\r\n        }\r\n        this.setState(newState);\r\n    };\r\n    /**\r\n     * The server transaction remains in this state until Timer J fires,\r\n     * at which point it MUST transition to the \"Terminated\" state.\r\n     * https://tools.ietf.org/html/rfc3261#section-17.2.2\r\n     */\r\n    NonInviteServerTransaction.prototype.timer_J = function () {\r\n        this.logger.debug(\"Timer J expired for NON-INVITE server transaction \" + this.id + \".\");\r\n        if (this.state === transaction_state_1.TransactionState.Completed) {\r\n            this.stateTransition(transaction_state_1.TransactionState.Terminated);\r\n        }\r\n    };\r\n    return NonInviteServerTransaction;\r\n}(server_transaction_1.ServerTransaction));\r\nexports.NonInviteServerTransaction = NonInviteServerTransaction;\r\n\r\n\r\n/***/ }),\r\n/* 42 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar messages_1 = __webpack_require__(5);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_client_1 = __webpack_require__(43);\r\n/**\r\n * BYE UAC.\r\n * @public\r\n */\r\nvar ByeUserAgentClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ByeUserAgentClient, _super);\r\n    function ByeUserAgentClient(dialog, delegate, options) {\r\n        var _this = this;\r\n        var message = dialog.createOutgoingRequestMessage(messages_1.C.BYE, options);\r\n        _this = _super.call(this, transactions_1.NonInviteClientTransaction, dialog.userAgentCore, message, delegate) || this;\r\n        dialog.dispose();\r\n        return _this;\r\n    }\r\n    return ByeUserAgentClient;\r\n}(user_agent_client_1.UserAgentClient));\r\nexports.ByeUserAgentClient = ByeUserAgentClient;\r\n\r\n\r\n/***/ }),\r\n/* 43 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar messages_1 = __webpack_require__(5);\r\nvar transactions_1 = __webpack_require__(28);\r\n/**\r\n * User Agent Client (UAC).\r\n * @remarks\r\n * A user agent client is a logical entity\r\n * that creates a new request, and then uses the client\r\n * transaction state machinery to send it.  The role of UAC lasts\r\n * only for the duration of that transaction.  In other words, if\r\n * a piece of software initiates a request, it acts as a UAC for\r\n * the duration of that transaction.  If it receives a request\r\n * later, it assumes the role of a user agent server for the\r\n * processing of that transaction.\r\n * https://tools.ietf.org/html/rfc3261#section-6\r\n * @public\r\n */\r\nvar UserAgentClient = /** @class */ (function () {\r\n    function UserAgentClient(transactionConstructor, core, message, delegate) {\r\n        this.transactionConstructor = transactionConstructor;\r\n        this.core = core;\r\n        this.message = message;\r\n        this.delegate = delegate;\r\n        this.challenged = false;\r\n        this.stale = false;\r\n        this.logger = this.loggerFactory.getLogger(\"sip.user-agent-client\");\r\n        this.init();\r\n    }\r\n    UserAgentClient.prototype.dispose = function () {\r\n        this.transaction.dispose();\r\n    };\r\n    Object.defineProperty(UserAgentClient.prototype, \"loggerFactory\", {\r\n        get: function () {\r\n            return this.core.loggerFactory;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserAgentClient.prototype, \"transaction\", {\r\n        /** The transaction associated with this request. */\r\n        get: function () {\r\n            if (!this._transaction) {\r\n                throw new Error(\"Transaction undefined.\");\r\n            }\r\n            return this._transaction;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Since requests other than INVITE are responded to immediately, sending a\r\n     * CANCEL for a non-INVITE request would always create a race condition.\r\n     * A CANCEL request SHOULD NOT be sent to cancel a request other than INVITE.\r\n     * https://tools.ietf.org/html/rfc3261#section-9.1\r\n     * @param options - Cancel options bucket.\r\n     */\r\n    UserAgentClient.prototype.cancel = function (reason, options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        if (!this.transaction) {\r\n            throw new Error(\"Transaction undefined.\");\r\n        }\r\n        if (!this.message.to) {\r\n            throw new Error(\"To undefined.\");\r\n        }\r\n        if (!this.message.from) {\r\n            throw new Error(\"From undefined.\");\r\n        }\r\n        // The following procedures are used to construct a CANCEL request.  The\r\n        // Request-URI, Call-ID, To, the numeric part of CSeq, and From header\r\n        // fields in the CANCEL request MUST be identical to those in the\r\n        // request being cancelled, including tags.  A CANCEL constructed by a\r\n        // client MUST have only a single Via header field value matching the\r\n        // top Via value in the request being cancelled.  Using the same values\r\n        // for these header fields allows the CANCEL to be matched with the\r\n        // request it cancels (Section 9.2 indicates how such matching occurs).\r\n        // However, the method part of the CSeq header field MUST have a value\r\n        // of CANCEL.  This allows it to be identified and processed as a\r\n        // transaction in its own right (See Section 17).\r\n        // https://tools.ietf.org/html/rfc3261#section-9.1\r\n        var message = this.core.makeOutgoingRequestMessage(messages_1.C.CANCEL, this.message.ruri, this.message.from.uri, this.message.to.uri, {\r\n            toTag: this.message.toTag,\r\n            fromTag: this.message.fromTag,\r\n            callId: this.message.callId,\r\n            cseq: this.message.cseq\r\n        }, options.extraHeaders);\r\n        // TODO: Revisit this.\r\n        // The CANCEL needs to use the same branch parameter so that\r\n        // it matches the INVITE transaction, but this is a hacky way to do this.\r\n        // Or at the very least not well documented. If the the branch parameter\r\n        // is set on the outgoing request, the transaction will use it.\r\n        // Otherwise the transaction will make a new one.\r\n        message.branch = this.message.branch;\r\n        if (this.message.headers.Route) {\r\n            message.headers.Route = this.message.headers.Route;\r\n        }\r\n        if (reason) {\r\n            message.setHeader(\"Reason\", reason);\r\n        }\r\n        // If no provisional response has been received, the CANCEL request MUST\r\n        // NOT be sent; rather, the client MUST wait for the arrival of a\r\n        // provisional response before sending the request. If the original\r\n        // request has generated a final response, the CANCEL SHOULD NOT be\r\n        // sent, as it is an effective no-op, since CANCEL has no effect on\r\n        // requests that have already generated a final response.\r\n        // https://tools.ietf.org/html/rfc3261#section-9.1\r\n        if (this.transaction.state === transactions_1.TransactionState.Proceeding) {\r\n            var uac = new UserAgentClient(transactions_1.NonInviteClientTransaction, this.core, message);\r\n        }\r\n        else {\r\n            this.transaction.once(\"stateChanged\", function () {\r\n                if (_this.transaction && _this.transaction.state === transactions_1.TransactionState.Proceeding) {\r\n                    var uac = new UserAgentClient(transactions_1.NonInviteClientTransaction, _this.core, message);\r\n                }\r\n            });\r\n        }\r\n        return message;\r\n    };\r\n    /**\r\n     * If a 401 (Unauthorized) or 407 (Proxy Authentication Required)\r\n     * response is received, the UAC SHOULD follow the authorization\r\n     * procedures of Section 22.2 and Section 22.3 to retry the request with\r\n     * credentials.\r\n     * https://tools.ietf.org/html/rfc3261#section-8.1.3.5\r\n     * 22 Usage of HTTP Authentication\r\n     * https://tools.ietf.org/html/rfc3261#section-22\r\n     * 22.1 Framework\r\n     * https://tools.ietf.org/html/rfc3261#section-22.1\r\n     * 22.2 User-to-User Authentication\r\n     * https://tools.ietf.org/html/rfc3261#section-22.2\r\n     * 22.3 Proxy-to-User Authentication\r\n     * https://tools.ietf.org/html/rfc3261#section-22.3\r\n     *\r\n     * FIXME: This \"guard for and retry the request with credentials\"\r\n     * implementation is not complete and at best minimally passable.\r\n     * @param response - The incoming response to guard.\r\n     * @param dialog - If defined, the dialog within which the response was received.\r\n     * @returns True if the program execution is to continue in the branch in question.\r\n     *          Otherwise the request is retried with credentials and current request processing must stop.\r\n     */\r\n    UserAgentClient.prototype.authenticationGuard = function (message, dialog) {\r\n        var statusCode = message.statusCode;\r\n        if (!statusCode) {\r\n            throw new Error(\"Response status code undefined.\");\r\n        }\r\n        // If a 401 (Unauthorized) or 407 (Proxy Authentication Required)\r\n        // response is received, the UAC SHOULD follow the authorization\r\n        // procedures of Section 22.2 and Section 22.3 to retry the request with\r\n        // credentials.\r\n        // https://tools.ietf.org/html/rfc3261#section-8.1.3.5\r\n        if (statusCode !== 401 && statusCode !== 407) {\r\n            return true;\r\n        }\r\n        // Get and parse the appropriate WWW-Authenticate or Proxy-Authenticate header.\r\n        var challenge;\r\n        var authorizationHeaderName;\r\n        if (statusCode === 401) {\r\n            challenge = message.parseHeader(\"www-authenticate\");\r\n            authorizationHeaderName = \"authorization\";\r\n        }\r\n        else {\r\n            challenge = message.parseHeader(\"proxy-authenticate\");\r\n            authorizationHeaderName = \"proxy-authorization\";\r\n        }\r\n        // Verify it seems a valid challenge.\r\n        if (!challenge) {\r\n            this.logger.warn(statusCode + \" with wrong or missing challenge, cannot authenticate\");\r\n            return true;\r\n        }\r\n        // Avoid infinite authentications.\r\n        if (this.challenged && (this.stale || challenge.stale !== true)) {\r\n            this.logger.warn(statusCode + \" apparently in authentication loop, cannot authenticate\");\r\n            return true;\r\n        }\r\n        // Get credentials.\r\n        if (!this.credentials) {\r\n            this.credentials = this.core.configuration.authenticationFactory();\r\n            if (!this.credentials) {\r\n                this.logger.warn(\"Unable to obtain credentials, cannot authenticate\");\r\n                return true;\r\n            }\r\n        }\r\n        // Verify that the challenge is really valid.\r\n        if (!this.credentials.authenticate(this.message, challenge)) {\r\n            return true;\r\n        }\r\n        this.challenged = true;\r\n        if (challenge.stale) {\r\n            this.stale = true;\r\n        }\r\n        // If response to out of dialog request, assume incrementing the CSeq will suffice.\r\n        var cseq = this.message.cseq += 1;\r\n        // If response to in dialog request, get a valid next CSeq number.\r\n        if (dialog && dialog.localSequenceNumber) {\r\n            dialog.incrementLocalSequenceNumber();\r\n            cseq = this.message.cseq = dialog.localSequenceNumber;\r\n        }\r\n        this.message.setHeader(\"cseq\", cseq + \" \" + this.message.method);\r\n        this.message.setHeader(authorizationHeaderName, this.credentials.toString());\r\n        // Calling init (again) will swap out our existing client transaction with a new one.\r\n        // FIXME: HACK: An assumption is being made here that there is nothing that needs to\r\n        // be cleaned up beyond the client transaction which is being replaced. For example,\r\n        // it is assumed that no early dialogs have been created.\r\n        this.init();\r\n        return false;\r\n    };\r\n    /**\r\n     * 8.1.3.1 Transaction Layer Errors\r\n     * In some cases, the response returned by the transaction layer will\r\n     * not be a SIP message, but rather a transaction layer error.  When a\r\n     * timeout error is received from the transaction layer, it MUST be\r\n     * treated as if a 408 (Request Timeout) status code has been received.\r\n     * If a fatal transport error is reported by the transport layer\r\n     * (generally, due to fatal ICMP errors in UDP or connection failures in\r\n     * TCP), the condition MUST be treated as a 503 (Service Unavailable)\r\n     * status code.\r\n     * https://tools.ietf.org/html/rfc3261#section-8.1.3.1\r\n     */\r\n    UserAgentClient.prototype.onRequestTimeout = function () {\r\n        this.logger.warn(\"User agent client request timed out. Generating internal 408 Request Timeout.\");\r\n        var message = new messages_1.IncomingResponseMessage();\r\n        message.statusCode = 408;\r\n        message.reasonPhrase = \"Request Timeout\";\r\n        this.receiveResponse(message);\r\n        return;\r\n    };\r\n    /**\r\n     * 8.1.3.1 Transaction Layer Errors\r\n     * In some cases, the response returned by the transaction layer will\r\n     * not be a SIP message, but rather a transaction layer error.  When a\r\n     * timeout error is received from the transaction layer, it MUST be\r\n     * treated as if a 408 (Request Timeout) status code has been received.\r\n     * If a fatal transport error is reported by the transport layer\r\n     * (generally, due to fatal ICMP errors in UDP or connection failures in\r\n     * TCP), the condition MUST be treated as a 503 (Service Unavailable)\r\n     * status code.\r\n     * https://tools.ietf.org/html/rfc3261#section-8.1.3.1\r\n     * @param error - Transport error\r\n     */\r\n    UserAgentClient.prototype.onTransportError = function (error) {\r\n        this.logger.error(error.message);\r\n        this.logger.error(\"User agent client request transport error. Generating internal 503 Service Unavailable.\");\r\n        var message = new messages_1.IncomingResponseMessage();\r\n        message.statusCode = 503;\r\n        message.reasonPhrase = \"Service Unavailable\";\r\n        this.receiveResponse(message);\r\n    };\r\n    /**\r\n     * Receive a response from the transaction layer.\r\n     * @param message - Incoming response message.\r\n     */\r\n    UserAgentClient.prototype.receiveResponse = function (message) {\r\n        if (!this.authenticationGuard(message)) {\r\n            return;\r\n        }\r\n        var statusCode = message.statusCode ? message.statusCode.toString() : \"\";\r\n        if (!statusCode) {\r\n            throw new Error(\"Response status code undefined.\");\r\n        }\r\n        switch (true) {\r\n            case /^100$/.test(statusCode):\r\n                if (this.delegate && this.delegate.onTrying) {\r\n                    this.delegate.onTrying({ message: message });\r\n                }\r\n                break;\r\n            case /^1[0-9]{2}$/.test(statusCode):\r\n                if (this.delegate && this.delegate.onProgress) {\r\n                    this.delegate.onProgress({ message: message });\r\n                }\r\n                break;\r\n            case /^2[0-9]{2}$/.test(statusCode):\r\n                if (this.delegate && this.delegate.onAccept) {\r\n                    this.delegate.onAccept({ message: message });\r\n                }\r\n                break;\r\n            case /^3[0-9]{2}$/.test(statusCode):\r\n                if (this.delegate && this.delegate.onRedirect) {\r\n                    this.delegate.onRedirect({ message: message });\r\n                }\r\n                break;\r\n            case /^[4-6][0-9]{2}$/.test(statusCode):\r\n                if (this.delegate && this.delegate.onReject) {\r\n                    this.delegate.onReject({ message: message });\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid status code \" + statusCode);\r\n        }\r\n    };\r\n    UserAgentClient.prototype.init = function () {\r\n        var _this = this;\r\n        // We are the transaction user.\r\n        var user = {\r\n            loggerFactory: this.loggerFactory,\r\n            onRequestTimeout: function () { return _this.onRequestTimeout(); },\r\n            onStateChange: function (newState) {\r\n                if (newState === transactions_1.TransactionState.Terminated) {\r\n                    // Remove the terminated transaction from the core.\r\n                    _this.core.userAgentClients.delete(userAgentClientId);\r\n                    // FIXME: HACK: Our transaction may have been swapped out with a new one\r\n                    // post authentication (see above), so make sure to only to dispose of\r\n                    // ourselves if this terminating transaction is our current transaction.\r\n                    if (transaction === _this._transaction) {\r\n                        _this.dispose();\r\n                    }\r\n                }\r\n            },\r\n            onTransportError: function (error) { return _this.onTransportError(error); },\r\n            receiveResponse: function (message) { return _this.receiveResponse(message); }\r\n        };\r\n        // Create a new transaction with us as the user.\r\n        var transaction = new this.transactionConstructor(this.message, this.core.transport, user);\r\n        this._transaction = transaction;\r\n        // Add the new transaction to the core.\r\n        var userAgentClientId = transaction.id + transaction.request.method;\r\n        this.core.userAgentClients.set(userAgentClientId, this);\r\n    };\r\n    return UserAgentClient;\r\n}());\r\nexports.UserAgentClient = UserAgentClient;\r\n\r\n\r\n/***/ }),\r\n/* 44 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_server_1 = __webpack_require__(45);\r\n/**\r\n * BYE UAS.\r\n * @public\r\n */\r\nvar ByeUserAgentServer = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ByeUserAgentServer, _super);\r\n    function ByeUserAgentServer(dialog, message, delegate) {\r\n        return _super.call(this, transactions_1.NonInviteServerTransaction, dialog.userAgentCore, message, delegate) || this;\r\n    }\r\n    return ByeUserAgentServer;\r\n}(user_agent_server_1.UserAgentServer));\r\nexports.ByeUserAgentServer = ByeUserAgentServer;\r\n\r\n\r\n/***/ }),\r\n/* 45 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar exceptions_1 = __webpack_require__(32);\r\nvar messages_1 = __webpack_require__(5);\r\nvar utils_1 = __webpack_require__(16);\r\nvar transactions_1 = __webpack_require__(28);\r\n/**\r\n * User Agent Server (UAS).\r\n * @remarks\r\n * A user agent server is a logical entity\r\n * that generates a response to a SIP request.  The response\r\n * accepts, rejects, or redirects the request.  This role lasts\r\n * only for the duration of that transaction.  In other words, if\r\n * a piece of software responds to a request, it acts as a UAS for\r\n * the duration of that transaction.  If it generates a request\r\n * later, it assumes the role of a user agent client for the\r\n * processing of that transaction.\r\n * https://tools.ietf.org/html/rfc3261#section-6\r\n * @public\r\n */\r\nvar UserAgentServer = /** @class */ (function () {\r\n    function UserAgentServer(transactionConstructor, core, message, delegate) {\r\n        this.transactionConstructor = transactionConstructor;\r\n        this.core = core;\r\n        this.message = message;\r\n        this.delegate = delegate;\r\n        this.logger = this.loggerFactory.getLogger(\"sip.user-agent-server\");\r\n        this.toTag = message.toTag ? message.toTag : utils_1.newTag();\r\n        this.init();\r\n    }\r\n    UserAgentServer.prototype.dispose = function () {\r\n        this.transaction.dispose();\r\n    };\r\n    Object.defineProperty(UserAgentServer.prototype, \"loggerFactory\", {\r\n        get: function () {\r\n            return this.core.loggerFactory;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserAgentServer.prototype, \"transaction\", {\r\n        /** The transaction associated with this request. */\r\n        get: function () {\r\n            if (!this._transaction) {\r\n                throw new Error(\"Transaction undefined.\");\r\n            }\r\n            return this._transaction;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    UserAgentServer.prototype.accept = function (options) {\r\n        if (options === void 0) { options = { statusCode: 200 }; }\r\n        if (!this.acceptable) {\r\n            throw new exceptions_1.TransactionStateError(this.message.method + \" not acceptable in state \" + this.transaction.state + \".\");\r\n        }\r\n        var statusCode = options.statusCode;\r\n        if (statusCode < 200 || statusCode > 299) {\r\n            throw new TypeError(\"Invalid statusCode: \" + statusCode);\r\n        }\r\n        var response = this.reply(options);\r\n        return response;\r\n    };\r\n    UserAgentServer.prototype.progress = function (options) {\r\n        if (options === void 0) { options = { statusCode: 180 }; }\r\n        if (!this.progressable) {\r\n            throw new exceptions_1.TransactionStateError(this.message.method + \" not progressable in state \" + this.transaction.state + \".\");\r\n        }\r\n        var statusCode = options.statusCode;\r\n        if (statusCode < 101 || statusCode > 199) {\r\n            throw new TypeError(\"Invalid statusCode: \" + statusCode);\r\n        }\r\n        var response = this.reply(options);\r\n        return response;\r\n    };\r\n    UserAgentServer.prototype.redirect = function (contacts, options) {\r\n        if (options === void 0) { options = { statusCode: 302 }; }\r\n        if (!this.redirectable) {\r\n            throw new exceptions_1.TransactionStateError(this.message.method + \" not redirectable in state \" + this.transaction.state + \".\");\r\n        }\r\n        var statusCode = options.statusCode;\r\n        if (statusCode < 300 || statusCode > 399) {\r\n            throw new TypeError(\"Invalid statusCode: \" + statusCode);\r\n        }\r\n        var contactHeaders = new Array();\r\n        contacts.forEach(function (contact) { return contactHeaders.push(\"Contact: \" + contact.toString()); });\r\n        options.extraHeaders = (options.extraHeaders || []).concat(contactHeaders);\r\n        var response = this.reply(options);\r\n        return response;\r\n    };\r\n    UserAgentServer.prototype.reject = function (options) {\r\n        if (options === void 0) { options = { statusCode: 480 }; }\r\n        if (!this.rejectable) {\r\n            throw new exceptions_1.TransactionStateError(this.message.method + \" not rejectable in state \" + this.transaction.state + \".\");\r\n        }\r\n        var statusCode = options.statusCode;\r\n        if (statusCode < 400 || statusCode > 699) {\r\n            throw new TypeError(\"Invalid statusCode: \" + statusCode);\r\n        }\r\n        var response = this.reply(options);\r\n        return response;\r\n    };\r\n    UserAgentServer.prototype.trying = function (options) {\r\n        if (!this.tryingable) {\r\n            throw new exceptions_1.TransactionStateError(this.message.method + \" not tryingable in state \" + this.transaction.state + \".\");\r\n        }\r\n        var response = this.reply({ statusCode: 100 });\r\n        return response;\r\n    };\r\n    /**\r\n     * If the UAS did not find a matching transaction for the CANCEL\r\n     * according to the procedure above, it SHOULD respond to the CANCEL\r\n     * with a 481 (Call Leg/Transaction Does Not Exist).  If the transaction\r\n     * for the original request still exists, the behavior of the UAS on\r\n     * receiving a CANCEL request depends on whether it has already sent a\r\n     * final response for the original request.  If it has, the CANCEL\r\n     * request has no effect on the processing of the original request, no\r\n     * effect on any session state, and no effect on the responses generated\r\n     * for the original request.  If the UAS has not issued a final response\r\n     * for the original request, its behavior depends on the method of the\r\n     * original request.  If the original request was an INVITE, the UAS\r\n     * SHOULD immediately respond to the INVITE with a 487 (Request\r\n     * Terminated).  A CANCEL request has no impact on the processing of\r\n     * transactions with any other method defined in this specification.\r\n     * https://tools.ietf.org/html/rfc3261#section-9.2\r\n     * @param request - Incoming CANCEL request.\r\n     */\r\n    UserAgentServer.prototype.receiveCancel = function (message) {\r\n        // Note: Currently CANCEL is being handled as a special case.\r\n        // No UAS is created to handle the CANCEL and the response to\r\n        // it CANCEL is being handled statelessly by the user agent core.\r\n        // As such, there is currently no way to externally impact the\r\n        // response to the a CANCEL request.\r\n        if (this.delegate && this.delegate.onCancel) {\r\n            this.delegate.onCancel(message);\r\n        }\r\n    };\r\n    Object.defineProperty(UserAgentServer.prototype, \"acceptable\", {\r\n        get: function () {\r\n            if (this.transaction instanceof transactions_1.InviteServerTransaction) {\r\n                return (this.transaction.state === transactions_1.TransactionState.Proceeding ||\r\n                    this.transaction.state === transactions_1.TransactionState.Accepted);\r\n            }\r\n            if (this.transaction instanceof transactions_1.NonInviteServerTransaction) {\r\n                return (this.transaction.state === transactions_1.TransactionState.Trying ||\r\n                    this.transaction.state === transactions_1.TransactionState.Proceeding);\r\n            }\r\n            throw new Error(\"Unknown transaction type.\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserAgentServer.prototype, \"progressable\", {\r\n        get: function () {\r\n            if (this.transaction instanceof transactions_1.InviteServerTransaction) {\r\n                return this.transaction.state === transactions_1.TransactionState.Proceeding;\r\n            }\r\n            if (this.transaction instanceof transactions_1.NonInviteServerTransaction) {\r\n                return false; // https://tools.ietf.org/html/rfc4320#section-4.1\r\n            }\r\n            throw new Error(\"Unknown transaction type.\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserAgentServer.prototype, \"redirectable\", {\r\n        get: function () {\r\n            if (this.transaction instanceof transactions_1.InviteServerTransaction) {\r\n                return this.transaction.state === transactions_1.TransactionState.Proceeding;\r\n            }\r\n            if (this.transaction instanceof transactions_1.NonInviteServerTransaction) {\r\n                return (this.transaction.state === transactions_1.TransactionState.Trying ||\r\n                    this.transaction.state === transactions_1.TransactionState.Proceeding);\r\n            }\r\n            throw new Error(\"Unknown transaction type.\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserAgentServer.prototype, \"rejectable\", {\r\n        get: function () {\r\n            if (this.transaction instanceof transactions_1.InviteServerTransaction) {\r\n                return this.transaction.state === transactions_1.TransactionState.Proceeding;\r\n            }\r\n            if (this.transaction instanceof transactions_1.NonInviteServerTransaction) {\r\n                return (this.transaction.state === transactions_1.TransactionState.Trying ||\r\n                    this.transaction.state === transactions_1.TransactionState.Proceeding);\r\n            }\r\n            throw new Error(\"Unknown transaction type.\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserAgentServer.prototype, \"tryingable\", {\r\n        get: function () {\r\n            if (this.transaction instanceof transactions_1.InviteServerTransaction) {\r\n                return this.transaction.state === transactions_1.TransactionState.Proceeding;\r\n            }\r\n            if (this.transaction instanceof transactions_1.NonInviteServerTransaction) {\r\n                return this.transaction.state === transactions_1.TransactionState.Trying;\r\n            }\r\n            throw new Error(\"Unknown transaction type.\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * When a UAS wishes to construct a response to a request, it follows\r\n     * the general procedures detailed in the following subsections.\r\n     * Additional behaviors specific to the response code in question, which\r\n     * are not detailed in this section, may also be required.\r\n     *\r\n     * Once all procedures associated with the creation of a response have\r\n     * been completed, the UAS hands the response back to the server\r\n     * transaction from which it received the request.\r\n     * https://tools.ietf.org/html/rfc3261#section-8.2.6\r\n     * @param statusCode - Status code to reply with.\r\n     * @param options - Reply options bucket.\r\n     */\r\n    UserAgentServer.prototype.reply = function (options) {\r\n        if (!options.toTag && options.statusCode !== 100) {\r\n            options.toTag = this.toTag;\r\n        }\r\n        options.userAgent = options.userAgent || this.core.configuration.userAgentHeaderFieldValue;\r\n        options.supported = options.supported || this.core.configuration.supportedOptionTagsResponse;\r\n        var response = messages_1.constructOutgoingResponse(this.message, options);\r\n        this.transaction.receiveResponse(options.statusCode, response.message);\r\n        return response;\r\n    };\r\n    UserAgentServer.prototype.init = function () {\r\n        var _this = this;\r\n        // We are the transaction user.\r\n        var user = {\r\n            loggerFactory: this.loggerFactory,\r\n            onStateChange: function (newState) {\r\n                if (newState === transactions_1.TransactionState.Terminated) {\r\n                    // Remove the terminated transaction from the core.\r\n                    _this.core.userAgentServers.delete(userAgentServerId);\r\n                    _this.dispose();\r\n                }\r\n            },\r\n            onTransportError: function (error) {\r\n                _this.logger.error(error.message);\r\n                if (_this.delegate && _this.delegate.onTransportError) {\r\n                    _this.delegate.onTransportError(error);\r\n                }\r\n                else {\r\n                    _this.logger.error(\"User agent server response transport error.\");\r\n                }\r\n            }\r\n        };\r\n        // Create a new transaction with us as the user.\r\n        var transaction = new this.transactionConstructor(this.message, this.core.transport, user);\r\n        this._transaction = transaction;\r\n        // Add the new transaction to the core.\r\n        var userAgentServerId = transaction.id;\r\n        this.core.userAgentServers.set(transaction.id, this);\r\n    };\r\n    return UserAgentServer;\r\n}());\r\nexports.UserAgentServer = UserAgentServer;\r\n\r\n\r\n/***/ }),\r\n/* 46 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar messages_1 = __webpack_require__(5);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_client_1 = __webpack_require__(43);\r\n/**\r\n * INFO UAC.\r\n * @public\r\n */\r\nvar InfoUserAgentClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(InfoUserAgentClient, _super);\r\n    function InfoUserAgentClient(dialog, delegate, options) {\r\n        var _this = this;\r\n        var message = dialog.createOutgoingRequestMessage(messages_1.C.INFO, options);\r\n        _this = _super.call(this, transactions_1.NonInviteClientTransaction, dialog.userAgentCore, message, delegate) || this;\r\n        return _this;\r\n    }\r\n    return InfoUserAgentClient;\r\n}(user_agent_client_1.UserAgentClient));\r\nexports.InfoUserAgentClient = InfoUserAgentClient;\r\n\r\n\r\n/***/ }),\r\n/* 47 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_server_1 = __webpack_require__(45);\r\n/**\r\n * INFO UAS.\r\n * @public\r\n */\r\nvar InfoUserAgentServer = /** @class */ (function (_super) {\r\n    tslib_1.__extends(InfoUserAgentServer, _super);\r\n    function InfoUserAgentServer(dialog, message, delegate) {\r\n        return _super.call(this, transactions_1.NonInviteServerTransaction, dialog.userAgentCore, message, delegate) || this;\r\n    }\r\n    return InfoUserAgentServer;\r\n}(user_agent_server_1.UserAgentServer));\r\nexports.InfoUserAgentServer = InfoUserAgentServer;\r\n\r\n\r\n/***/ }),\r\n/* 48 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_client_1 = __webpack_require__(43);\r\n/**\r\n * MESSAGE UAC.\r\n * @public\r\n */\r\nvar MessageUserAgentClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MessageUserAgentClient, _super);\r\n    function MessageUserAgentClient(core, message, delegate) {\r\n        return _super.call(this, transactions_1.NonInviteClientTransaction, core, message, delegate) || this;\r\n    }\r\n    return MessageUserAgentClient;\r\n}(user_agent_client_1.UserAgentClient));\r\nexports.MessageUserAgentClient = MessageUserAgentClient;\r\n\r\n\r\n/***/ }),\r\n/* 49 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_server_1 = __webpack_require__(45);\r\n/**\r\n * MESSAGE UAS.\r\n * @public\r\n */\r\nvar MessageUserAgentServer = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MessageUserAgentServer, _super);\r\n    function MessageUserAgentServer(core, message, delegate) {\r\n        return _super.call(this, transactions_1.NonInviteServerTransaction, core, message, delegate) || this;\r\n    }\r\n    return MessageUserAgentServer;\r\n}(user_agent_server_1.UserAgentServer));\r\nexports.MessageUserAgentServer = MessageUserAgentServer;\r\n\r\n\r\n/***/ }),\r\n/* 50 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar messages_1 = __webpack_require__(5);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_client_1 = __webpack_require__(43);\r\n/**\r\n * NOTIFY UAS.\r\n * @public\r\n */\r\nvar NotifyUserAgentClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(NotifyUserAgentClient, _super);\r\n    function NotifyUserAgentClient(dialog, delegate, options) {\r\n        var _this = this;\r\n        var message = dialog.createOutgoingRequestMessage(messages_1.C.NOTIFY, options);\r\n        _this = _super.call(this, transactions_1.NonInviteClientTransaction, dialog.userAgentCore, message, delegate) || this;\r\n        return _this;\r\n    }\r\n    return NotifyUserAgentClient;\r\n}(user_agent_client_1.UserAgentClient));\r\nexports.NotifyUserAgentClient = NotifyUserAgentClient;\r\n\r\n\r\n/***/ }),\r\n/* 51 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_server_1 = __webpack_require__(45);\r\n/**\r\n * NOTIFY UAS.\r\n * @public\r\n */\r\nvar NotifyUserAgentServer = /** @class */ (function (_super) {\r\n    tslib_1.__extends(NotifyUserAgentServer, _super);\r\n    /**\r\n     * NOTIFY UAS constructor.\r\n     * @param dialogOrCore - Dialog for in dialog NOTIFY, UserAgentCore for out of dialog NOTIFY (deprecated).\r\n     * @param message - Incoming NOTIFY request message.\r\n     */\r\n    function NotifyUserAgentServer(dialogOrCore, message, delegate) {\r\n        var _this = this;\r\n        var userAgentCore = instanceOfDialog(dialogOrCore) ?\r\n            dialogOrCore.userAgentCore :\r\n            dialogOrCore;\r\n        _this = _super.call(this, transactions_1.NonInviteServerTransaction, userAgentCore, message, delegate) || this;\r\n        return _this;\r\n    }\r\n    return NotifyUserAgentServer;\r\n}(user_agent_server_1.UserAgentServer));\r\nexports.NotifyUserAgentServer = NotifyUserAgentServer;\r\nfunction instanceOfDialog(object) {\r\n    return object.userAgentCore !== undefined;\r\n}\r\n\r\n\r\n/***/ }),\r\n/* 52 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar messages_1 = __webpack_require__(5);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_client_1 = __webpack_require__(43);\r\n/**\r\n * PRACK UAC.\r\n * @public\r\n */\r\nvar PrackUserAgentClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PrackUserAgentClient, _super);\r\n    function PrackUserAgentClient(dialog, delegate, options) {\r\n        var _this = this;\r\n        var message = dialog.createOutgoingRequestMessage(messages_1.C.PRACK, options);\r\n        _this = _super.call(this, transactions_1.NonInviteClientTransaction, dialog.userAgentCore, message, delegate) || this;\r\n        dialog.signalingStateTransition(message);\r\n        return _this;\r\n    }\r\n    return PrackUserAgentClient;\r\n}(user_agent_client_1.UserAgentClient));\r\nexports.PrackUserAgentClient = PrackUserAgentClient;\r\n\r\n\r\n/***/ }),\r\n/* 53 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_server_1 = __webpack_require__(45);\r\n/**\r\n * PRACK UAS.\r\n * @public\r\n */\r\nvar PrackUserAgentServer = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PrackUserAgentServer, _super);\r\n    function PrackUserAgentServer(dialog, message, delegate) {\r\n        var _this = _super.call(this, transactions_1.NonInviteServerTransaction, dialog.userAgentCore, message, delegate) || this;\r\n        // Update dialog signaling state with offer/answer in body\r\n        dialog.signalingStateTransition(message);\r\n        _this.dialog = dialog;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Update the dialog signaling state on a 2xx response.\r\n     * @param options - Options bucket.\r\n     */\r\n    PrackUserAgentServer.prototype.accept = function (options) {\r\n        if (options === void 0) { options = { statusCode: 200 }; }\r\n        if (options.body) {\r\n            // Update dialog signaling state with offer/answer in body\r\n            this.dialog.signalingStateTransition(options.body);\r\n        }\r\n        return _super.prototype.accept.call(this, options);\r\n    };\r\n    return PrackUserAgentServer;\r\n}(user_agent_server_1.UserAgentServer));\r\nexports.PrackUserAgentServer = PrackUserAgentServer;\r\n\r\n\r\n/***/ }),\r\n/* 54 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar messages_1 = __webpack_require__(5);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_client_1 = __webpack_require__(43);\r\n/**\r\n * Re-INVITE UAC.\r\n * @remarks\r\n * 14 Modifying an Existing Session\r\n * https://tools.ietf.org/html/rfc3261#section-14\r\n * 14.1 UAC Behavior\r\n * https://tools.ietf.org/html/rfc3261#section-14.1\r\n * @public\r\n */\r\nvar ReInviteUserAgentClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ReInviteUserAgentClient, _super);\r\n    function ReInviteUserAgentClient(dialog, delegate, options) {\r\n        var _this = this;\r\n        var message = dialog.createOutgoingRequestMessage(messages_1.C.INVITE, options);\r\n        _this = _super.call(this, transactions_1.InviteClientTransaction, dialog.userAgentCore, message, delegate) || this;\r\n        _this.delegate = delegate;\r\n        dialog.signalingStateTransition(message);\r\n        // FIXME: TODO: next line obviously needs to be improved...\r\n        dialog.reinviteUserAgentClient = _this; // let the dialog know re-invite request sent\r\n        _this.dialog = dialog;\r\n        return _this;\r\n    }\r\n    ReInviteUserAgentClient.prototype.receiveResponse = function (message) {\r\n        var _this = this;\r\n        if (!this.authenticationGuard(message, this.dialog)) {\r\n            return;\r\n        }\r\n        var statusCode = message.statusCode ? message.statusCode.toString() : \"\";\r\n        if (!statusCode) {\r\n            throw new Error(\"Response status code undefined.\");\r\n        }\r\n        switch (true) {\r\n            case /^100$/.test(statusCode):\r\n                if (this.delegate && this.delegate.onTrying) {\r\n                    this.delegate.onTrying({ message: message });\r\n                }\r\n                break;\r\n            case /^1[0-9]{2}$/.test(statusCode):\r\n                if (this.delegate && this.delegate.onProgress) {\r\n                    this.delegate.onProgress({\r\n                        message: message,\r\n                        session: this.dialog,\r\n                        prack: function (options) {\r\n                            throw new Error(\"Unimplemented.\");\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n            case /^2[0-9]{2}$/.test(statusCode):\r\n                // Update dialog signaling state with offer/answer in body\r\n                this.dialog.signalingStateTransition(message);\r\n                if (this.delegate && this.delegate.onAccept) {\r\n                    this.delegate.onAccept({\r\n                        message: message,\r\n                        session: this.dialog,\r\n                        ack: function (options) {\r\n                            var outgoingAckRequest = _this.dialog.ack(options);\r\n                            return outgoingAckRequest;\r\n                        }\r\n                    });\r\n                }\r\n                break;\r\n            case /^3[0-9]{2}$/.test(statusCode):\r\n                this.dialog.signalingStateRollback();\r\n                this.dialog.reinviteUserAgentClient = undefined; // ACK was handled by transaction\r\n                if (this.delegate && this.delegate.onRedirect) {\r\n                    this.delegate.onRedirect({ message: message });\r\n                }\r\n                break;\r\n            case /^[4-6][0-9]{2}$/.test(statusCode):\r\n                this.dialog.signalingStateRollback();\r\n                this.dialog.reinviteUserAgentClient = undefined; // ACK was handled by transaction\r\n                if (this.delegate && this.delegate.onReject) {\r\n                    this.delegate.onReject({ message: message });\r\n                }\r\n                else {\r\n                    // If a UA receives a non-2xx final response to a re-INVITE, the session\r\n                    // parameters MUST remain unchanged, as if no re-INVITE had been issued.\r\n                    // Note that, as stated in Section 12.2.1.2, if the non-2xx final\r\n                    // response is a 481 (Call/Transaction Does Not Exist), or a 408\r\n                    // (Request Timeout), or no response at all is received for the re-\r\n                    // INVITE (that is, a timeout is returned by the INVITE client\r\n                    // transaction), the UAC will terminate the dialog.\r\n                    //\r\n                    // If a UAC receives a 491 response to a re-INVITE, it SHOULD start a\r\n                    // timer with a value T chosen as follows:\r\n                    //\r\n                    //    1. If the UAC is the owner of the Call-ID of the dialog ID\r\n                    //       (meaning it generated the value), T has a randomly chosen value\r\n                    //       between 2.1 and 4 seconds in units of 10 ms.\r\n                    //\r\n                    //    2. If the UAC is not the owner of the Call-ID of the dialog ID, T\r\n                    //       has a randomly chosen value of between 0 and 2 seconds in units\r\n                    //       of 10 ms.\r\n                    //\r\n                    // When the timer fires, the UAC SHOULD attempt the re-INVITE once more,\r\n                    // if it still desires for that session modification to take place.  For\r\n                    // example, if the call was already hung up with a BYE, the re-INVITE\r\n                    // would not take place.\r\n                    // https://tools.ietf.org/html/rfc3261#section-14.1\r\n                    // FIXME: TODO: The above.\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid status code \" + statusCode);\r\n        }\r\n    };\r\n    return ReInviteUserAgentClient;\r\n}(user_agent_client_1.UserAgentClient));\r\nexports.ReInviteUserAgentClient = ReInviteUserAgentClient;\r\n\r\n\r\n/***/ }),\r\n/* 55 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_server_1 = __webpack_require__(45);\r\n/**\r\n * Re-INVITE UAS.\r\n * @remarks\r\n * 14 Modifying an Existing Session\r\n * https://tools.ietf.org/html/rfc3261#section-14\r\n * 14.2 UAS Behavior\r\n * https://tools.ietf.org/html/rfc3261#section-14.2\r\n * @public\r\n */\r\nvar ReInviteUserAgentServer = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ReInviteUserAgentServer, _super);\r\n    function ReInviteUserAgentServer(dialog, message, delegate) {\r\n        var _this = _super.call(this, transactions_1.InviteServerTransaction, dialog.userAgentCore, message, delegate) || this;\r\n        dialog.reinviteUserAgentServer = _this;\r\n        _this.dialog = dialog;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Update the dialog signaling state on a 2xx response.\r\n     * @param options - Options bucket.\r\n     */\r\n    ReInviteUserAgentServer.prototype.accept = function (options) {\r\n        if (options === void 0) { options = { statusCode: 200 }; }\r\n        // FIXME: The next two lines SHOULD go away, but I suppose it's technically harmless...\r\n        // These are here because some versions of SIP.js prior to 0.13.8 set the route set\r\n        // of all in dialog ACKs based on the Record-Route headers in the associated 2xx\r\n        // response. While this worked for dialog forming 2xx responses, it was technically\r\n        // broken for re-INVITE ACKS as it only worked if the UAS populated the Record-Route\r\n        // headers in the re-INVITE 2xx response (which is not required and a waste of bandwidth\r\n        // as the should be ignored if present in re-INVITE ACKS) and the UAS populated\r\n        // the Record-Route headers with the correct values (would be weird not too, but...).\r\n        // Anyway, for now the technically useless Record-Route headers are being added\r\n        // to maintain \"backwards compatibility\" with the older broken versions of SIP.js.\r\n        options.extraHeaders = options.extraHeaders || [];\r\n        options.extraHeaders = options.extraHeaders.concat(this.dialog.routeSet.map(function (route) { return \"Record-Route: \" + route; }));\r\n        // Send and return the response\r\n        var response = _super.prototype.accept.call(this, options);\r\n        var session = this.dialog;\r\n        var result = tslib_1.__assign(tslib_1.__assign({}, response), { session: session });\r\n        if (options.body) {\r\n            // Update dialog signaling state with offer/answer in body\r\n            this.dialog.signalingStateTransition(options.body);\r\n        }\r\n        // Update dialog\r\n        this.dialog.reConfirm();\r\n        return result;\r\n    };\r\n    /**\r\n     * Update the dialog signaling state on a 1xx response.\r\n     * @param options - Progress options bucket.\r\n     */\r\n    ReInviteUserAgentServer.prototype.progress = function (options) {\r\n        if (options === void 0) { options = { statusCode: 180 }; }\r\n        // Send and return the response\r\n        var response = _super.prototype.progress.call(this, options);\r\n        var session = this.dialog;\r\n        var result = tslib_1.__assign(tslib_1.__assign({}, response), { session: session });\r\n        // Update dialog signaling state\r\n        if (options.body) {\r\n            this.dialog.signalingStateTransition(options.body);\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * TODO: Not Yet Supported\r\n     * @param contacts - Contacts to redirect to.\r\n     * @param options - Redirect options bucket.\r\n     */\r\n    ReInviteUserAgentServer.prototype.redirect = function (contacts, options) {\r\n        if (options === void 0) { options = { statusCode: 302 }; }\r\n        this.dialog.signalingStateRollback();\r\n        this.dialog.reinviteUserAgentServer = undefined; // ACK will be handled by transaction\r\n        throw new Error(\"Unimplemented.\");\r\n    };\r\n    /**\r\n     * 3.1 Background on Re-INVITE Handling by UASs\r\n     * An error response to a re-INVITE has the following semantics.  As\r\n     * specified in Section 12.2.2 of RFC 3261 [RFC3261], if a re-INVITE is\r\n     * rejected, no state changes are performed.\r\n     * https://tools.ietf.org/html/rfc6141#section-3.1\r\n     * @param options - Reject options bucket.\r\n     */\r\n    ReInviteUserAgentServer.prototype.reject = function (options) {\r\n        if (options === void 0) { options = { statusCode: 488 }; }\r\n        this.dialog.signalingStateRollback();\r\n        this.dialog.reinviteUserAgentServer = undefined; // ACK will be handled by transaction\r\n        return _super.prototype.reject.call(this, options);\r\n    };\r\n    return ReInviteUserAgentServer;\r\n}(user_agent_server_1.UserAgentServer));\r\nexports.ReInviteUserAgentServer = ReInviteUserAgentServer;\r\n\r\n\r\n/***/ }),\r\n/* 56 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar messages_1 = __webpack_require__(5);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_client_1 = __webpack_require__(43);\r\n/**\r\n * REFER UAC.\r\n * @public\r\n */\r\nvar ReferUserAgentClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ReferUserAgentClient, _super);\r\n    function ReferUserAgentClient(dialog, delegate, options) {\r\n        var _this = this;\r\n        var message = dialog.createOutgoingRequestMessage(messages_1.C.REFER, options);\r\n        _this = _super.call(this, transactions_1.NonInviteClientTransaction, dialog.userAgentCore, message, delegate) || this;\r\n        return _this;\r\n    }\r\n    return ReferUserAgentClient;\r\n}(user_agent_client_1.UserAgentClient));\r\nexports.ReferUserAgentClient = ReferUserAgentClient;\r\n\r\n\r\n/***/ }),\r\n/* 57 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_server_1 = __webpack_require__(45);\r\n/**\r\n * REFER UAS.\r\n * @public\r\n */\r\nvar ReferUserAgentServer = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ReferUserAgentServer, _super);\r\n    /**\r\n     * REFER UAS constructor.\r\n     * @param dialogOrCore - Dialog for in dialog REFER, UserAgentCore for out of dialog REFER.\r\n     * @param message - Incoming REFER request message.\r\n     */\r\n    function ReferUserAgentServer(dialogOrCore, message, delegate) {\r\n        var _this = this;\r\n        var userAgentCore = instanceOfSessionDialog(dialogOrCore) ?\r\n            dialogOrCore.userAgentCore :\r\n            dialogOrCore;\r\n        _this = _super.call(this, transactions_1.NonInviteServerTransaction, userAgentCore, message, delegate) || this;\r\n        return _this;\r\n    }\r\n    return ReferUserAgentServer;\r\n}(user_agent_server_1.UserAgentServer));\r\nexports.ReferUserAgentServer = ReferUserAgentServer;\r\nfunction instanceOfSessionDialog(object) {\r\n    return object.userAgentCore !== undefined;\r\n}\r\n\r\n\r\n/***/ }),\r\n/* 58 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar messages_1 = __webpack_require__(5);\r\nvar subscription_1 = __webpack_require__(59);\r\nvar timers_1 = __webpack_require__(27);\r\nvar allowed_methods_1 = __webpack_require__(61);\r\nvar notify_user_agent_server_1 = __webpack_require__(51);\r\nvar re_subscribe_user_agent_client_1 = __webpack_require__(62);\r\nvar dialog_1 = __webpack_require__(4);\r\n/**\r\n * Subscription Dialog.\r\n * @remarks\r\n * SIP-Specific Event Notification\r\n *\r\n * Abstract\r\n *\r\n *    This document describes an extension to the Session Initiation\r\n *    Protocol (SIP) defined by RFC 3261.  The purpose of this extension is\r\n *    to provide an extensible framework by which SIP nodes can request\r\n *    notification from remote nodes indicating that certain events have\r\n *    occurred.\r\n *\r\n *    Note that the event notification mechanisms defined herein are NOT\r\n *    intended to be a general-purpose infrastructure for all classes of\r\n *    event subscription and notification.\r\n *\r\n *    This document represents a backwards-compatible improvement on the\r\n *    original mechanism described by RFC 3265, taking into account several\r\n *    years of implementation experience.  Accordingly, this document\r\n *    obsoletes RFC 3265.  This document also updates RFC 4660 slightly to\r\n *    accommodate some small changes to the mechanism that were discussed\r\n *    in that document.\r\n *\r\n *  https://tools.ietf.org/html/rfc6665\r\n * @public\r\n */\r\nvar SubscriptionDialog = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SubscriptionDialog, _super);\r\n    function SubscriptionDialog(subscriptionEvent, subscriptionExpires, subscriptionState, core, state, delegate) {\r\n        var _this = _super.call(this, core, state) || this;\r\n        _this.delegate = delegate;\r\n        _this._autoRefresh = false;\r\n        _this._subscriptionEvent = subscriptionEvent;\r\n        _this._subscriptionExpires = subscriptionExpires;\r\n        _this._subscriptionExpiresInitial = subscriptionExpires;\r\n        _this._subscriptionExpiresLastSet = Math.floor(Date.now() / 1000);\r\n        _this._subscriptionRefresh = undefined;\r\n        _this._subscriptionRefreshLastSet = undefined;\r\n        _this._subscriptionState = subscriptionState;\r\n        _this.logger = core.loggerFactory.getLogger(\"sip.subscribe-dialog\");\r\n        _this.logger.log(\"SUBSCRIBE dialog \" + _this.id + \" constructed\");\r\n        return _this;\r\n    }\r\n    /**\r\n     * When a UAC receives a response that establishes a dialog, it\r\n     * constructs the state of the dialog.  This state MUST be maintained\r\n     * for the duration of the dialog.\r\n     * https://tools.ietf.org/html/rfc3261#section-12.1.2\r\n     * @param outgoingRequestMessage - Outgoing request message for dialog.\r\n     * @param incomingResponseMessage - Incoming response message creating dialog.\r\n     */\r\n    SubscriptionDialog.initialDialogStateForSubscription = function (outgoingSubscribeRequestMessage, incomingNotifyRequestMessage) {\r\n        // If the request was sent over TLS, and the Request-URI contained a\r\n        // SIPS URI, the \"secure\" flag is set to TRUE.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.1.2\r\n        var secure = false; // FIXME: Currently no support for TLS.\r\n        // The route set MUST be set to the list of URIs in the Record-Route\r\n        // header field from the response, taken in reverse order and preserving\r\n        // all URI parameters.  If no Record-Route header field is present in\r\n        // the response, the route set MUST be set to the empty set.  This route\r\n        // set, even if empty, overrides any pre-existing route set for future\r\n        // requests in this dialog.  The remote target MUST be set to the URI\r\n        // from the Contact header field of the response.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.1.2\r\n        var routeSet = incomingNotifyRequestMessage.getHeaders(\"record-route\");\r\n        var contact = incomingNotifyRequestMessage.parseHeader(\"contact\");\r\n        if (!contact) { // TODO: Review to make sure this will never happen\r\n            throw new Error(\"Contact undefined.\");\r\n        }\r\n        if (!(contact instanceof messages_1.NameAddrHeader)) {\r\n            throw new Error(\"Contact not instance of NameAddrHeader.\");\r\n        }\r\n        var remoteTarget = contact.uri;\r\n        // The local sequence number MUST be set to the value of the sequence\r\n        // number in the CSeq header field of the request.  The remote sequence\r\n        // number MUST be empty (it is established when the remote UA sends a\r\n        // request within the dialog).  The call identifier component of the\r\n        // dialog ID MUST be set to the value of the Call-ID in the request.\r\n        // The local tag component of the dialog ID MUST be set to the tag in\r\n        // the From field in the request, and the remote tag component of the\r\n        // dialog ID MUST be set to the tag in the To field of the response.  A\r\n        // UAC MUST be prepared to receive a response without a tag in the To\r\n        // field, in which case the tag is considered to have a value of null.\r\n        //\r\n        //    This is to maintain backwards compatibility with RFC 2543, which\r\n        //    did not mandate To tags.\r\n        //\r\n        // https://tools.ietf.org/html/rfc3261#section-12.1.2\r\n        var localSequenceNumber = outgoingSubscribeRequestMessage.cseq;\r\n        var remoteSequenceNumber = undefined;\r\n        var callId = outgoingSubscribeRequestMessage.callId;\r\n        var localTag = outgoingSubscribeRequestMessage.fromTag;\r\n        var remoteTag = incomingNotifyRequestMessage.fromTag;\r\n        if (!callId) { // TODO: Review to make sure this will never happen\r\n            throw new Error(\"Call id undefined.\");\r\n        }\r\n        if (!localTag) { // TODO: Review to make sure this will never happen\r\n            throw new Error(\"From tag undefined.\");\r\n        }\r\n        if (!remoteTag) { // TODO: Review to make sure this will never happen\r\n            throw new Error(\"To tag undefined.\"); // FIXME: No backwards compatibility with RFC 2543\r\n        }\r\n        // The remote URI MUST be set to the URI in the To field, and the local\r\n        // URI MUST be set to the URI in the From field.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.1.2\r\n        if (!outgoingSubscribeRequestMessage.from) { // TODO: Review to make sure this will never happen\r\n            throw new Error(\"From undefined.\");\r\n        }\r\n        if (!outgoingSubscribeRequestMessage.to) { // TODO: Review to make sure this will never happen\r\n            throw new Error(\"To undefined.\");\r\n        }\r\n        var localURI = outgoingSubscribeRequestMessage.from.uri;\r\n        var remoteURI = outgoingSubscribeRequestMessage.to.uri;\r\n        // A dialog can also be in the \"early\" state, which occurs when it is\r\n        // created with a provisional response, and then transition to the\r\n        // \"confirmed\" state when a 2xx final response arrives.\r\n        // https://tools.ietf.org/html/rfc3261#section-12\r\n        var early = false;\r\n        var dialogState = {\r\n            id: callId + localTag + remoteTag,\r\n            early: early,\r\n            callId: callId,\r\n            localTag: localTag,\r\n            remoteTag: remoteTag,\r\n            localSequenceNumber: localSequenceNumber,\r\n            remoteSequenceNumber: remoteSequenceNumber,\r\n            localURI: localURI,\r\n            remoteURI: remoteURI,\r\n            remoteTarget: remoteTarget,\r\n            routeSet: routeSet,\r\n            secure: secure\r\n        };\r\n        return dialogState;\r\n    };\r\n    SubscriptionDialog.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        if (this.N) {\r\n            clearTimeout(this.N);\r\n            this.N = undefined;\r\n        }\r\n        this.refreshTimerClear();\r\n        this.logger.log(\"SUBSCRIBE dialog \" + this.id + \" destroyed\");\r\n    };\r\n    Object.defineProperty(SubscriptionDialog.prototype, \"autoRefresh\", {\r\n        get: function () {\r\n            return this._autoRefresh;\r\n        },\r\n        set: function (autoRefresh) {\r\n            this._autoRefresh = true;\r\n            this.refreshTimerSet();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SubscriptionDialog.prototype, \"subscriptionEvent\", {\r\n        get: function () {\r\n            return this._subscriptionEvent;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SubscriptionDialog.prototype, \"subscriptionExpires\", {\r\n        /** Number of seconds until subscription expires. */\r\n        get: function () {\r\n            var secondsSinceLastSet = Math.floor(Date.now() / 1000) - this._subscriptionExpiresLastSet;\r\n            var secondsUntilExpires = this._subscriptionExpires - secondsSinceLastSet;\r\n            return Math.max(secondsUntilExpires, 0);\r\n        },\r\n        set: function (expires) {\r\n            if (expires < 0) {\r\n                throw new Error(\"Expires must be greater than or equal to zero.\");\r\n            }\r\n            this._subscriptionExpires = expires;\r\n            this._subscriptionExpiresLastSet = Math.floor(Date.now() / 1000);\r\n            if (this.autoRefresh) {\r\n                var refresh = this.subscriptionRefresh;\r\n                if (refresh === undefined || refresh >= expires) {\r\n                    this.refreshTimerSet();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SubscriptionDialog.prototype, \"subscriptionExpiresInitial\", {\r\n        get: function () {\r\n            return this._subscriptionExpiresInitial;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SubscriptionDialog.prototype, \"subscriptionRefresh\", {\r\n        /** Number of seconds until subscription auto refresh. */\r\n        get: function () {\r\n            if (this._subscriptionRefresh === undefined || this._subscriptionRefreshLastSet === undefined) {\r\n                return undefined;\r\n            }\r\n            var secondsSinceLastSet = Math.floor(Date.now() / 1000) - this._subscriptionRefreshLastSet;\r\n            var secondsUntilExpires = this._subscriptionRefresh - secondsSinceLastSet;\r\n            return Math.max(secondsUntilExpires, 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SubscriptionDialog.prototype, \"subscriptionState\", {\r\n        get: function () {\r\n            return this._subscriptionState;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Receive in dialog request message from transport.\r\n     * @param message -  The incoming request message.\r\n     */\r\n    SubscriptionDialog.prototype.receiveRequest = function (message) {\r\n        this.logger.log(\"SUBSCRIBE dialog \" + this.id + \" received \" + message.method + \" request\");\r\n        // Request within a dialog out of sequence guard.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\r\n        if (!this.sequenceGuard(message)) {\r\n            this.logger.log(\"SUBSCRIBE dialog \" + this.id + \" rejected out of order \" + message.method + \" request.\");\r\n            return;\r\n        }\r\n        // Request within a dialog common processing.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\r\n        _super.prototype.receiveRequest.call(this, message);\r\n        // Switch on method and then delegate.\r\n        switch (message.method) {\r\n            case messages_1.C.NOTIFY:\r\n                this.onNotify(message);\r\n                break;\r\n            default:\r\n                this.logger.log(\"SUBSCRIBE dialog \" + this.id + \" received unimplemented \" + message.method + \" request\");\r\n                this.core.replyStateless(message, { statusCode: 501 });\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * 4.1.2.2.  Refreshing of Subscriptions\r\n     * https://tools.ietf.org/html/rfc6665#section-4.1.2.2\r\n     */\r\n    SubscriptionDialog.prototype.refresh = function () {\r\n        var allowHeader = \"Allow: \" + allowed_methods_1.AllowedMethods.toString();\r\n        var options = {};\r\n        options.extraHeaders = (options.extraHeaders || []).slice();\r\n        options.extraHeaders.push(allowHeader);\r\n        options.extraHeaders.push(\"Event: \" + this.subscriptionEvent);\r\n        options.extraHeaders.push(\"Expires: \" + this.subscriptionExpiresInitial);\r\n        options.extraHeaders.push(\"Contact: \" + this.core.configuration.contact.toString());\r\n        return this.subscribe(undefined, options);\r\n    };\r\n    /**\r\n     * 4.1.2.2.  Refreshing of Subscriptions\r\n     * https://tools.ietf.org/html/rfc6665#section-4.1.2.2\r\n     * @param delegate - Delegate to handle responses.\r\n     * @param options - Options bucket.\r\n     */\r\n    SubscriptionDialog.prototype.subscribe = function (delegate, options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        if (this.subscriptionState !== subscription_1.SubscriptionState.Pending && this.subscriptionState !== subscription_1.SubscriptionState.Active) {\r\n            // FIXME: This needs to be a proper exception\r\n            throw new Error(\"Invalid state \" + this.subscriptionState + \". May only re-subscribe while in state \\\"pending\\\" or \\\"active\\\".\");\r\n        }\r\n        this.logger.log(\"SUBSCRIBE dialog \" + this.id + \" sending SUBSCRIBE request\");\r\n        var uac = new re_subscribe_user_agent_client_1.ReSubscribeUserAgentClient(this, delegate, options);\r\n        // When refreshing a subscription, a subscriber starts Timer N, set to\r\n        // 64*T1, when it sends the SUBSCRIBE request.\r\n        // https://tools.ietf.org/html/rfc6665#section-4.1.2.2\r\n        this.N = setTimeout(function () { return _this.timer_N(); }, timers_1.Timers.TIMER_N);\r\n        return uac;\r\n    };\r\n    /**\r\n     * 4.4.1.  Dialog Creation and Termination\r\n     * A subscription is destroyed after a notifier sends a NOTIFY request\r\n     * with a \"Subscription-State\" of \"terminated\", or in certain error\r\n     * situations described elsewhere in this document.\r\n     * https://tools.ietf.org/html/rfc6665#section-4.4.1\r\n     */\r\n    SubscriptionDialog.prototype.terminate = function () {\r\n        this.stateTransition(subscription_1.SubscriptionState.Terminated);\r\n        this.onTerminated();\r\n    };\r\n    /**\r\n     * 4.1.2.3.  Unsubscribing\r\n     * https://tools.ietf.org/html/rfc6665#section-4.1.2.3\r\n     */\r\n    SubscriptionDialog.prototype.unsubscribe = function () {\r\n        var allowHeader = \"Allow: \" + allowed_methods_1.AllowedMethods.toString();\r\n        var options = {};\r\n        options.extraHeaders = (options.extraHeaders || []).slice();\r\n        options.extraHeaders.push(allowHeader);\r\n        options.extraHeaders.push(\"Event: \" + this.subscriptionEvent);\r\n        options.extraHeaders.push(\"Expires: 0\");\r\n        options.extraHeaders.push(\"Contact: \" + this.core.configuration.contact.toString());\r\n        return this.subscribe(undefined, options);\r\n    };\r\n    /**\r\n     * Handle in dialog NOTIFY requests.\r\n     * This does not include the first NOTIFY which created the dialog.\r\n     * @param message - The incoming NOTIFY request message.\r\n     */\r\n    SubscriptionDialog.prototype.onNotify = function (message) {\r\n        // If, for some reason, the event package designated in the \"Event\"\r\n        // header field of the NOTIFY request is not supported, the subscriber\r\n        // will respond with a 489 (Bad Event) response.\r\n        // https://tools.ietf.org/html/rfc6665#section-4.1.3\r\n        var event = message.parseHeader(\"Event\").event;\r\n        if (!event || event !== this.subscriptionEvent) {\r\n            this.core.replyStateless(message, { statusCode: 489 });\r\n            return;\r\n        }\r\n        // In the state diagram, \"Re-subscription times out\" means that an\r\n        // attempt to refresh or update the subscription using a new SUBSCRIBE\r\n        // request does not result in a NOTIFY request before the corresponding\r\n        // Timer N expires.\r\n        // https://tools.ietf.org/html/rfc6665#section-4.1.2\r\n        if (this.N) {\r\n            clearTimeout(this.N);\r\n            this.N = undefined;\r\n        }\r\n        // NOTIFY requests MUST contain \"Subscription-State\" header fields that\r\n        // indicate the status of the subscription.\r\n        // https://tools.ietf.org/html/rfc6665#section-4.1.3\r\n        var subscriptionState = message.parseHeader(\"Subscription-State\");\r\n        if (!subscriptionState || !subscriptionState.state) {\r\n            this.core.replyStateless(message, { statusCode: 489 });\r\n            return;\r\n        }\r\n        var state = subscriptionState.state;\r\n        var expires = subscriptionState.expires ? Math.max(subscriptionState.expires, 0) : undefined;\r\n        // Update our state and expiration.\r\n        switch (state) {\r\n            case \"pending\":\r\n                this.stateTransition(subscription_1.SubscriptionState.Pending, expires);\r\n                break;\r\n            case \"active\":\r\n                this.stateTransition(subscription_1.SubscriptionState.Active, expires);\r\n                break;\r\n            case \"terminated\":\r\n                this.stateTransition(subscription_1.SubscriptionState.Terminated, expires);\r\n                break;\r\n            default:\r\n                this.logger.warn(\"Unrecognized subscription state.\");\r\n                break;\r\n        }\r\n        // Delegate remainder of NOTIFY handling.\r\n        var uas = new notify_user_agent_server_1.NotifyUserAgentServer(this, message);\r\n        if (this.delegate && this.delegate.onNotify) {\r\n            this.delegate.onNotify(uas);\r\n        }\r\n        else {\r\n            uas.accept();\r\n        }\r\n    };\r\n    SubscriptionDialog.prototype.onRefresh = function (request) {\r\n        if (this.delegate && this.delegate.onRefresh) {\r\n            this.delegate.onRefresh(request);\r\n        }\r\n    };\r\n    SubscriptionDialog.prototype.onTerminated = function () {\r\n        if (this.delegate && this.delegate.onTerminated) {\r\n            this.delegate.onTerminated();\r\n        }\r\n    };\r\n    SubscriptionDialog.prototype.refreshTimerClear = function () {\r\n        if (this.refreshTimer) {\r\n            clearTimeout(this.refreshTimer);\r\n            this.refreshTimer = undefined;\r\n        }\r\n    };\r\n    SubscriptionDialog.prototype.refreshTimerSet = function () {\r\n        var _this = this;\r\n        this.refreshTimerClear();\r\n        if (this.autoRefresh && this.subscriptionExpires > 0) {\r\n            var refresh = this.subscriptionExpires * 900;\r\n            this._subscriptionRefresh = Math.floor(refresh / 1000);\r\n            this._subscriptionRefreshLastSet = Math.floor(Date.now() / 1000);\r\n            this.refreshTimer = setTimeout(function () {\r\n                _this.refreshTimer = undefined;\r\n                _this._subscriptionRefresh = undefined;\r\n                _this._subscriptionRefreshLastSet = undefined;\r\n                _this.onRefresh(_this.refresh());\r\n            }, refresh);\r\n        }\r\n    };\r\n    SubscriptionDialog.prototype.stateTransition = function (newState, newExpires) {\r\n        var _this = this;\r\n        // Assert valid state transitions.\r\n        var invalidStateTransition = function () {\r\n            _this.logger.warn(\"Invalid subscription state transition from \" + _this.subscriptionState + \" to \" + newState);\r\n        };\r\n        switch (newState) {\r\n            case subscription_1.SubscriptionState.Initial:\r\n                invalidStateTransition();\r\n                return;\r\n            case subscription_1.SubscriptionState.NotifyWait:\r\n                invalidStateTransition();\r\n                return;\r\n            case subscription_1.SubscriptionState.Pending:\r\n                if (this.subscriptionState !== subscription_1.SubscriptionState.NotifyWait &&\r\n                    this.subscriptionState !== subscription_1.SubscriptionState.Pending) {\r\n                    invalidStateTransition();\r\n                    return;\r\n                }\r\n                break;\r\n            case subscription_1.SubscriptionState.Active:\r\n                if (this.subscriptionState !== subscription_1.SubscriptionState.NotifyWait &&\r\n                    this.subscriptionState !== subscription_1.SubscriptionState.Pending &&\r\n                    this.subscriptionState !== subscription_1.SubscriptionState.Active) {\r\n                    invalidStateTransition();\r\n                    return;\r\n                }\r\n                break;\r\n            case subscription_1.SubscriptionState.Terminated:\r\n                if (this.subscriptionState !== subscription_1.SubscriptionState.NotifyWait &&\r\n                    this.subscriptionState !== subscription_1.SubscriptionState.Pending &&\r\n                    this.subscriptionState !== subscription_1.SubscriptionState.Active) {\r\n                    invalidStateTransition();\r\n                    return;\r\n                }\r\n                break;\r\n            default:\r\n                invalidStateTransition();\r\n                return;\r\n        }\r\n        // If the \"Subscription-State\" value is \"pending\", the subscription has\r\n        // been received by the notifier, but there is insufficient policy\r\n        // information to grant or deny the subscription yet.  If the header\r\n        // field also contains an \"expires\" parameter, the subscriber SHOULD\r\n        // take it as the authoritative subscription duration and adjust\r\n        // accordingly.  No further action is necessary on the part of the\r\n        // subscriber.  The \"retry-after\" and \"reason\" parameters have no\r\n        // semantics for \"pending\".\r\n        // https://tools.ietf.org/html/rfc6665#section-4.1.3\r\n        if (newState === subscription_1.SubscriptionState.Pending) {\r\n            if (newExpires) {\r\n                this.subscriptionExpires = newExpires;\r\n            }\r\n        }\r\n        // If the \"Subscription-State\" header field value is \"active\", it means\r\n        // that the subscription has been accepted and (in general) has been\r\n        // authorized.  If the header field also contains an \"expires\"\r\n        // parameter, the subscriber SHOULD take it as the authoritative\r\n        // subscription duration and adjust accordingly.  The \"retry-after\" and\r\n        // \"reason\" parameters have no semantics for \"active\".\r\n        // https://tools.ietf.org/html/rfc6665#section-4.1.3\r\n        if (newState === subscription_1.SubscriptionState.Active) {\r\n            if (newExpires) {\r\n                this.subscriptionExpires = newExpires;\r\n            }\r\n        }\r\n        // If the \"Subscription-State\" value is \"terminated\", the subscriber\r\n        // MUST consider the subscription terminated.  The \"expires\" parameter\r\n        // has no semantics for \"terminated\" -- notifiers SHOULD NOT include an\r\n        // \"expires\" parameter on a \"Subscription-State\" header field with a\r\n        // value of \"terminated\", and subscribers MUST ignore any such\r\n        // parameter, if present.\r\n        if (newState === subscription_1.SubscriptionState.Terminated) {\r\n            this.dispose();\r\n        }\r\n        this._subscriptionState = newState;\r\n    };\r\n    /**\r\n     * When refreshing a subscription, a subscriber starts Timer N, set to\r\n     * 64*T1, when it sends the SUBSCRIBE request.  If this Timer N expires\r\n     * prior to the receipt of a NOTIFY request, the subscriber considers\r\n     * the subscription terminated.  If the subscriber receives a success\r\n     * response to the SUBSCRIBE request that indicates that no NOTIFY\r\n     * request will be generated -- such as the 204 response defined for use\r\n     * with the optional extension described in [RFC5839] -- then it MUST\r\n     * cancel Timer N.\r\n     * https://tools.ietf.org/html/rfc6665#section-4.1.2.2\r\n     */\r\n    SubscriptionDialog.prototype.timer_N = function () {\r\n        if (this.subscriptionState !== subscription_1.SubscriptionState.Terminated) {\r\n            this.stateTransition(subscription_1.SubscriptionState.Terminated);\r\n            this.onTerminated();\r\n        }\r\n    };\r\n    return SubscriptionDialog;\r\n}(dialog_1.Dialog));\r\nexports.SubscriptionDialog = SubscriptionDialog;\r\n\r\n\r\n/***/ }),\r\n/* 59 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\ntslib_1.__exportStar(__webpack_require__(60), exports);\r\n\r\n\r\n/***/ }),\r\n/* 60 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Subscription state.\r\n * @remarks\r\n * https://tools.ietf.org/html/rfc6665#section-4.1.2\r\n * @public\r\n */\r\nvar SubscriptionState;\r\n(function (SubscriptionState) {\r\n    SubscriptionState[\"Initial\"] = \"Initial\";\r\n    SubscriptionState[\"NotifyWait\"] = \"NotifyWait\";\r\n    SubscriptionState[\"Pending\"] = \"Pending\";\r\n    SubscriptionState[\"Active\"] = \"Active\";\r\n    SubscriptionState[\"Terminated\"] = \"Terminated\";\r\n})(SubscriptionState = exports.SubscriptionState || (exports.SubscriptionState = {}));\r\n\r\n\r\n/***/ }),\r\n/* 61 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar messages_1 = __webpack_require__(5);\r\n/**\r\n * FIXME: TODO: Should be configurable/variable.\r\n */\r\nexports.AllowedMethods = [\r\n    messages_1.C.ACK,\r\n    messages_1.C.BYE,\r\n    messages_1.C.CANCEL,\r\n    messages_1.C.INFO,\r\n    messages_1.C.INVITE,\r\n    messages_1.C.MESSAGE,\r\n    messages_1.C.NOTIFY,\r\n    messages_1.C.OPTIONS,\r\n    messages_1.C.PRACK,\r\n    messages_1.C.REFER,\r\n    messages_1.C.REGISTER,\r\n    messages_1.C.SUBSCRIBE\r\n];\r\n\r\n\r\n/***/ }),\r\n/* 62 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar messages_1 = __webpack_require__(5);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_client_1 = __webpack_require__(43);\r\n/**\r\n * Re-SUBSCRIBE UAC.\r\n * @public\r\n */\r\nvar ReSubscribeUserAgentClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ReSubscribeUserAgentClient, _super);\r\n    function ReSubscribeUserAgentClient(dialog, delegate, options) {\r\n        var _this = this;\r\n        var message = dialog.createOutgoingRequestMessage(messages_1.C.SUBSCRIBE, options);\r\n        _this = _super.call(this, transactions_1.NonInviteClientTransaction, dialog.userAgentCore, message, delegate) || this;\r\n        _this.dialog = dialog;\r\n        return _this;\r\n    }\r\n    ReSubscribeUserAgentClient.prototype.waitNotifyStop = function () {\r\n        // TODO: Placeholder. Not utilized currently.\r\n        return;\r\n    };\r\n    /**\r\n     * Receive a response from the transaction layer.\r\n     * @param message - Incoming response message.\r\n     */\r\n    ReSubscribeUserAgentClient.prototype.receiveResponse = function (message) {\r\n        if (message.statusCode && message.statusCode >= 200 && message.statusCode < 300) {\r\n            //  The \"Expires\" header field in a 200-class response to SUBSCRIBE\r\n            //  request indicates the actual duration for which the subscription will\r\n            //  remain active (unless refreshed).  The received value might be\r\n            //  smaller than the value indicated in the SUBSCRIBE request but cannot\r\n            //  be larger; see Section 4.2.1 for details.\r\n            // https://tools.ietf.org/html/rfc6665#section-4.1.2.1\r\n            var expires = message.getHeader(\"Expires\");\r\n            if (!expires) {\r\n                this.logger.warn(\"Expires header missing in a 200-class response to SUBSCRIBE\");\r\n            }\r\n            else {\r\n                var subscriptionExpiresReceived = Number(expires);\r\n                if (this.dialog.subscriptionExpires > subscriptionExpiresReceived) {\r\n                    this.dialog.subscriptionExpires = subscriptionExpiresReceived;\r\n                }\r\n            }\r\n        }\r\n        if (message.statusCode && message.statusCode >= 400 && message.statusCode < 700) {\r\n            // If a SUBSCRIBE request to refresh a subscription receives a 404, 405,\r\n            // 410, 416, 480-485, 489, 501, or 604 response, the subscriber MUST\r\n            // consider the subscription terminated.  (See [RFC5057] for further\r\n            // details and notes about the effect of error codes on dialogs and\r\n            // usages within dialog, such as subscriptions).  If the subscriber\r\n            // wishes to re-subscribe to the state, he does so by composing an\r\n            // unrelated initial SUBSCRIBE request with a freshly generated Call-ID\r\n            // and a new, unique \"From\" tag (see Section 4.1.2.1).\r\n            // https://tools.ietf.org/html/rfc6665#section-4.1.2.2\r\n            var errorCodes = [404, 405, 410, 416, 480, 481, 482, 483, 484, 485, 489, 501, 604];\r\n            if (errorCodes.indexOf(message.statusCode) !== -1) {\r\n                this.dialog.terminate();\r\n            }\r\n            // If a SUBSCRIBE request to refresh a subscription fails with any error\r\n            // code other than those listed above, the original subscription is\r\n            // still considered valid for the duration of the most recently known\r\n            // \"Expires\" value as negotiated by the most recent successful SUBSCRIBE\r\n            // transaction, or as communicated by a NOTIFY request in its\r\n            // \"Subscription-State\" header field \"expires\" parameter.\r\n            // https://tools.ietf.org/html/rfc6665#section-4.1.2.2\r\n        }\r\n        _super.prototype.receiveResponse.call(this, message);\r\n    };\r\n    return ReSubscribeUserAgentClient;\r\n}(user_agent_client_1.UserAgentClient));\r\nexports.ReSubscribeUserAgentClient = ReSubscribeUserAgentClient;\r\n\r\n\r\n/***/ }),\r\n/* 63 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\ntslib_1.__exportStar(__webpack_require__(64), exports);\r\ntslib_1.__exportStar(__webpack_require__(65), exports);\r\ntslib_1.__exportStar(__webpack_require__(66), exports);\r\n\r\n\r\n/***/ }),\r\n/* 64 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Log levels.\r\n * @public\r\n */\r\nvar Levels;\r\n(function (Levels) {\r\n    Levels[Levels[\"error\"] = 0] = \"error\";\r\n    Levels[Levels[\"warn\"] = 1] = \"warn\";\r\n    Levels[Levels[\"log\"] = 2] = \"log\";\r\n    Levels[Levels[\"debug\"] = 3] = \"debug\";\r\n})(Levels = exports.Levels || (exports.Levels = {}));\r\n\r\n\r\n/***/ }),\r\n/* 65 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar levels_1 = __webpack_require__(64);\r\nvar logger_1 = __webpack_require__(66);\r\n/**\r\n * Logger.\r\n * @public\r\n */\r\nvar LoggerFactory = /** @class */ (function () {\r\n    function LoggerFactory() {\r\n        this.builtinEnabled = true;\r\n        this._level = levels_1.Levels.log;\r\n        this.loggers = {};\r\n        this.logger = this.getLogger(\"sip:loggerfactory\");\r\n    }\r\n    Object.defineProperty(LoggerFactory.prototype, \"level\", {\r\n        get: function () { return this._level; },\r\n        set: function (newLevel) {\r\n            if (newLevel >= 0 && newLevel <= 3) {\r\n                this._level = newLevel;\r\n            }\r\n            else if (newLevel > 3) {\r\n                this._level = 3;\r\n            }\r\n            else if (levels_1.Levels.hasOwnProperty(newLevel)) {\r\n                this._level = newLevel;\r\n            }\r\n            else {\r\n                this.logger.error(\"invalid 'level' parameter value: \" + JSON.stringify(newLevel));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LoggerFactory.prototype, \"connector\", {\r\n        get: function () {\r\n            return this._connector;\r\n        },\r\n        set: function (value) {\r\n            if (!value) {\r\n                this._connector = undefined;\r\n            }\r\n            else if (typeof value === \"function\") {\r\n                this._connector = value;\r\n            }\r\n            else {\r\n                this.logger.error(\"invalid 'connector' parameter value: \" + JSON.stringify(value));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    LoggerFactory.prototype.getLogger = function (category, label) {\r\n        if (label && this.level === 3) {\r\n            return new logger_1.Logger(this, category, label);\r\n        }\r\n        else if (this.loggers[category]) {\r\n            return this.loggers[category];\r\n        }\r\n        else {\r\n            var logger = new logger_1.Logger(this, category);\r\n            this.loggers[category] = logger;\r\n            return logger;\r\n        }\r\n    };\r\n    LoggerFactory.prototype.genericLog = function (levelToLog, category, label, content) {\r\n        if (this.level >= levelToLog) {\r\n            if (this.builtinEnabled) {\r\n                this.print(levelToLog, category, label, content);\r\n            }\r\n        }\r\n        if (this.connector) {\r\n            this.connector(levels_1.Levels[levelToLog], category, label, content);\r\n        }\r\n    };\r\n    LoggerFactory.prototype.print = function (levelToLog, category, label, content) {\r\n        if (typeof content === \"string\") {\r\n            var prefix = [new Date(), category];\r\n            if (label) {\r\n                prefix.push(label);\r\n            }\r\n            content = prefix.concat(content).join(\" | \");\r\n        }\r\n        switch (levelToLog) {\r\n            case levels_1.Levels.error:\r\n                // tslint:disable-next-line:no-console\r\n                console.error(content);\r\n                break;\r\n            case levels_1.Levels.warn:\r\n                // tslint:disable-next-line:no-console\r\n                console.warn(content);\r\n                break;\r\n            case levels_1.Levels.log:\r\n                // tslint:disable-next-line:no-console\r\n                console.log(content);\r\n                break;\r\n            case levels_1.Levels.debug:\r\n                // tslint:disable-next-line:no-console\r\n                console.debug(content);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    return LoggerFactory;\r\n}());\r\nexports.LoggerFactory = LoggerFactory;\r\n\r\n\r\n/***/ }),\r\n/* 66 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar levels_1 = __webpack_require__(64);\r\n/**\r\n * Logger.\r\n * @public\r\n */\r\nvar Logger = /** @class */ (function () {\r\n    function Logger(logger, category, label) {\r\n        this.logger = logger;\r\n        this.category = category;\r\n        this.label = label;\r\n    }\r\n    Logger.prototype.error = function (content) { this.genericLog(levels_1.Levels.error, content); };\r\n    Logger.prototype.warn = function (content) { this.genericLog(levels_1.Levels.warn, content); };\r\n    Logger.prototype.log = function (content) { this.genericLog(levels_1.Levels.log, content); };\r\n    Logger.prototype.debug = function (content) { this.genericLog(levels_1.Levels.debug, content); };\r\n    Logger.prototype.genericLog = function (level, content) {\r\n        this.logger.genericLog(level, this.category, this.label, content);\r\n    };\r\n    return Logger;\r\n}());\r\nexports.Logger = Logger;\r\n\r\n\r\n/***/ }),\r\n/* 67 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\ntslib_1.__exportStar(__webpack_require__(68), exports);\r\n\r\n\r\n/***/ }),\r\n/* 68 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar messages_1 = __webpack_require__(5);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agents_1 = __webpack_require__(69);\r\nvar allowed_methods_1 = __webpack_require__(61);\r\n/**\r\n * This is ported from UA.C.ACCEPTED_BODY_TYPES.\r\n * FIXME: TODO: Should be configurable/variable.\r\n */\r\nvar acceptedBodyTypes = [\r\n    \"application/sdp\",\r\n    \"application/dtmf-relay\"\r\n];\r\n/**\r\n * User Agent Core.\r\n * @remarks\r\n * Core designates the functions specific to a particular type\r\n * of SIP entity, i.e., specific to either a stateful or stateless\r\n * proxy, a user agent or registrar.  All cores, except those for\r\n * the stateless proxy, are transaction users.\r\n * https://tools.ietf.org/html/rfc3261#section-6\r\n *\r\n * UAC Core: The set of processing functions required of a UAC that\r\n * reside above the transaction and transport layers.\r\n * https://tools.ietf.org/html/rfc3261#section-6\r\n *\r\n * UAS Core: The set of processing functions required at a UAS that\r\n * resides above the transaction and transport layers.\r\n * https://tools.ietf.org/html/rfc3261#section-6\r\n * @public\r\n */\r\nvar UserAgentCore = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     * @param configuration - Configuration.\r\n     * @param delegate - Delegate.\r\n     */\r\n    function UserAgentCore(configuration, delegate) {\r\n        if (delegate === void 0) { delegate = {}; }\r\n        /** UACs. */\r\n        this.userAgentClients = new Map();\r\n        /** UASs. */\r\n        this.userAgentServers = new Map();\r\n        this.configuration = configuration;\r\n        this.delegate = delegate;\r\n        this.dialogs = new Map();\r\n        this.subscribers = new Map();\r\n        this.logger = configuration.loggerFactory.getLogger(\"sip.user-agent-core\");\r\n    }\r\n    /** Destructor. */\r\n    UserAgentCore.prototype.dispose = function () {\r\n        this.reset();\r\n    };\r\n    /** Reset. */\r\n    UserAgentCore.prototype.reset = function () {\r\n        this.dialogs.forEach(function (dialog) { return dialog.dispose(); });\r\n        this.dialogs.clear();\r\n        this.subscribers.forEach(function (subscriber) { return subscriber.dispose(); });\r\n        this.subscribers.clear();\r\n        this.userAgentClients.forEach(function (uac) { return uac.dispose(); });\r\n        this.userAgentClients.clear();\r\n        this.userAgentServers.forEach(function (uac) { return uac.dispose(); });\r\n        this.userAgentServers.clear();\r\n    };\r\n    Object.defineProperty(UserAgentCore.prototype, \"loggerFactory\", {\r\n        /** Logger factory. */\r\n        get: function () {\r\n            return this.configuration.loggerFactory;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserAgentCore.prototype, \"transport\", {\r\n        /** Transport. */\r\n        get: function () {\r\n            var transport = this.configuration.transportAccessor();\r\n            if (!transport) {\r\n                throw new Error(\"Transport undefined.\");\r\n            }\r\n            return transport;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Send INVITE.\r\n     * @param request - Outgoing request.\r\n     * @param delegate - Request delegate.\r\n     */\r\n    UserAgentCore.prototype.invite = function (request, delegate) {\r\n        return new user_agents_1.InviteUserAgentClient(this, request, delegate);\r\n    };\r\n    /**\r\n     * Send MESSAGE.\r\n     * @param request - Outgoing request.\r\n     * @param delegate - Request delegate.\r\n     */\r\n    UserAgentCore.prototype.message = function (request, delegate) {\r\n        return new user_agents_1.MessageUserAgentClient(this, request, delegate);\r\n    };\r\n    /**\r\n     * Send PUBLISH.\r\n     * @param request - Outgoing request.\r\n     * @param delegate - Request delegate.\r\n     */\r\n    UserAgentCore.prototype.publish = function (request, delegate) {\r\n        return new user_agents_1.PublishUserAgentClient(this, request, delegate);\r\n    };\r\n    /**\r\n     * Send REGISTER.\r\n     * @param request - Outgoing request.\r\n     * @param delegate - Request delegate.\r\n     */\r\n    UserAgentCore.prototype.register = function (request, delegate) {\r\n        return new user_agents_1.RegisterUserAgentClient(this, request, delegate);\r\n    };\r\n    /**\r\n     * Send SUBSCRIBE.\r\n     * @param request - Outgoing request.\r\n     * @param delegate - Request delegate.\r\n     */\r\n    UserAgentCore.prototype.subscribe = function (request, delegate) {\r\n        return new user_agents_1.SubscribeUserAgentClient(this, request, delegate);\r\n    };\r\n    /**\r\n     * Send a request.\r\n     * @param request - Outgoing request.\r\n     * @param delegate - Request delegate.\r\n     */\r\n    UserAgentCore.prototype.request = function (request, delegate) {\r\n        return new user_agents_1.UserAgentClient(transactions_1.NonInviteClientTransaction, this, request, delegate);\r\n    };\r\n    /**\r\n     * Outgoing request message factory function.\r\n     * @param method - Method.\r\n     * @param requestURI - Request-URI.\r\n     * @param fromURI - From URI.\r\n     * @param toURI - To URI.\r\n     * @param options - Request options.\r\n     * @param extraHeaders - Extra headers to add.\r\n     * @param body - Message body.\r\n     */\r\n    UserAgentCore.prototype.makeOutgoingRequestMessage = function (method, requestURI, fromURI, toURI, options, extraHeaders, body) {\r\n        // default values from user agent configuration\r\n        var callIdPrefix = this.configuration.sipjsId;\r\n        var fromDisplayName = this.configuration.displayName;\r\n        var forceRport = this.configuration.viaForceRport;\r\n        var hackViaTcp = this.configuration.hackViaTcp;\r\n        var optionTags = this.configuration.supportedOptionTags.slice();\r\n        if (method === messages_1.C.REGISTER) {\r\n            optionTags.push(\"path\", \"gruu\");\r\n        }\r\n        if (method === messages_1.C.INVITE && (this.configuration.contact.pubGruu || this.configuration.contact.tempGruu)) {\r\n            optionTags.push(\"gruu\");\r\n        }\r\n        var routeSet = this.configuration.routeSet;\r\n        var userAgentString = this.configuration.userAgentHeaderFieldValue;\r\n        var viaHost = this.configuration.viaHost;\r\n        var defaultOptions = {\r\n            callIdPrefix: callIdPrefix,\r\n            forceRport: forceRport,\r\n            fromDisplayName: fromDisplayName,\r\n            hackViaTcp: hackViaTcp,\r\n            optionTags: optionTags,\r\n            routeSet: routeSet,\r\n            userAgentString: userAgentString,\r\n            viaHost: viaHost,\r\n        };\r\n        // merge provided options with default options\r\n        var requestOptions = tslib_1.__assign(tslib_1.__assign({}, defaultOptions), options);\r\n        return new messages_1.OutgoingRequestMessage(method, requestURI, fromURI, toURI, requestOptions, extraHeaders, body);\r\n    };\r\n    /**\r\n     * Handle an incoming request message from the transport.\r\n     * @param message - Incoming request message from transport layer.\r\n     */\r\n    UserAgentCore.prototype.receiveIncomingRequestFromTransport = function (message) {\r\n        this.receiveRequestFromTransport(message);\r\n    };\r\n    /**\r\n     * Handle an incoming response message from the transport.\r\n     * @param message - Incoming response message from transport layer.\r\n     */\r\n    UserAgentCore.prototype.receiveIncomingResponseFromTransport = function (message) {\r\n        this.receiveResponseFromTransport(message);\r\n    };\r\n    /**\r\n     * A stateless UAS is a UAS that does not maintain transaction state.\r\n     * It replies to requests normally, but discards any state that would\r\n     * ordinarily be retained by a UAS after a response has been sent.  If a\r\n     * stateless UAS receives a retransmission of a request, it regenerates\r\n     * the response and re-sends it, just as if it were replying to the first\r\n     * instance of the request. A UAS cannot be stateless unless the request\r\n     * processing for that method would always result in the same response\r\n     * if the requests are identical. This rules out stateless registrars,\r\n     * for example.  Stateless UASs do not use a transaction layer; they\r\n     * receive requests directly from the transport layer and send responses\r\n     * directly to the transport layer.\r\n     * https://tools.ietf.org/html/rfc3261#section-8.2.7\r\n     * @param message - Incoming request message to reply to.\r\n     * @param statusCode - Status code to reply with.\r\n     */\r\n    UserAgentCore.prototype.replyStateless = function (message, options) {\r\n        var _this = this;\r\n        var userAgent = this.configuration.userAgentHeaderFieldValue;\r\n        var supported = this.configuration.supportedOptionTagsResponse;\r\n        options = tslib_1.__assign(tslib_1.__assign({}, options), { userAgent: userAgent, supported: supported });\r\n        var response = messages_1.constructOutgoingResponse(message, options);\r\n        this.transport.send(response.message).catch(function (error) {\r\n            // If the transport rejects, it SHOULD reject with a TransportError.\r\n            // But the transport may be external code, so we are careful...\r\n            if (error instanceof Error) {\r\n                _this.logger.error(error.message);\r\n            }\r\n            _this.logger.error(\"Transport error occurred sending stateless reply to \" + message.method + \" request.\");\r\n            // TODO: Currently there is no hook to provide notification that a transport error occurred\r\n            // and throwing would result in an uncaught error (in promise), so we silently eat the error.\r\n            // Furthermore, silently eating stateless reply transport errors is arguably what we want to do here.\r\n        });\r\n        return response;\r\n    };\r\n    /**\r\n     * In Section 18.2.1, replace the last paragraph with:\r\n     *\r\n     * Next, the server transport attempts to match the request to a\r\n     * server transaction.  It does so using the matching rules described\r\n     * in Section 17.2.3.  If a matching server transaction is found, the\r\n     * request is passed to that transaction for processing.  If no match\r\n     * is found, the request is passed to the core, which may decide to\r\n     * construct a new server transaction for that request.\r\n     * https://tools.ietf.org/html/rfc6026#section-8.10\r\n     * @param message - Incoming request message from transport layer.\r\n     */\r\n    UserAgentCore.prototype.receiveRequestFromTransport = function (message) {\r\n        // When a request is received from the network by the server, it has to\r\n        // be matched to an existing transaction.  This is accomplished in the\r\n        // following manner.\r\n        //\r\n        // The branch parameter in the topmost Via header field of the request\r\n        // is examined.  If it is present and begins with the magic cookie\r\n        // \"z9hG4bK\", the request was generated by a client transaction\r\n        // compliant to this specification.  Therefore, the branch parameter\r\n        // will be unique across all transactions sent by that client.  The\r\n        // request matches a transaction if:\r\n        //\r\n        //    1. the branch parameter in the request is equal to the one in the\r\n        //       top Via header field of the request that created the\r\n        //       transaction, and\r\n        //\r\n        //    2. the sent-by value in the top Via of the request is equal to the\r\n        //       one in the request that created the transaction, and\r\n        //\r\n        //    3. the method of the request matches the one that created the\r\n        //       transaction, except for ACK, where the method of the request\r\n        //       that created the transaction is INVITE.\r\n        //\r\n        // This matching rule applies to both INVITE and non-INVITE transactions\r\n        // alike.\r\n        //\r\n        //    The sent-by value is used as part of the matching process because\r\n        //    there could be accidental or malicious duplication of branch\r\n        //    parameters from different clients.\r\n        // https://tools.ietf.org/html/rfc3261#section-17.2.3\r\n        var transactionId = message.viaBranch; // FIXME: Currently only using rule 1...\r\n        var uas = this.userAgentServers.get(transactionId);\r\n        // When receiving an ACK that matches an existing INVITE server\r\n        // transaction and that does not contain a branch parameter containing\r\n        // the magic cookie defined in RFC 3261, the matching transaction MUST\r\n        // be checked to see if it is in the \"Accepted\" state.  If it is, then\r\n        // the ACK must be passed directly to the transaction user instead of\r\n        // being absorbed by the transaction state machine.  This is necessary\r\n        // as requests from RFC 2543 clients will not include a unique branch\r\n        // parameter, and the mechanisms for calculating the transaction ID from\r\n        // such a request will be the same for both INVITE and ACKs.\r\n        // https://tools.ietf.org/html/rfc6026#section-6\r\n        // Any ACKs received from the network while in the \"Accepted\" state MUST be\r\n        // passed directly to the TU and not absorbed.\r\n        // https://tools.ietf.org/html/rfc6026#section-7.1\r\n        if (message.method === messages_1.C.ACK) {\r\n            if (uas && uas.transaction.state === transactions_1.TransactionState.Accepted) {\r\n                if (uas instanceof user_agents_1.InviteUserAgentServer) {\r\n                    // These are ACKs matching an INVITE server transaction.\r\n                    // These should never happen with RFC 3261 compliant user agents\r\n                    // (would be a broken ACK to negative final response or something)\r\n                    // but is apparently how RFC 2543 user agents do things.\r\n                    // We are not currently supporting this case.\r\n                    // NOTE: Not backwards compatible with RFC 2543 (no support for strict-routing).\r\n                    this.logger.warn(\"Discarding out of dialog ACK after 2xx response sent on transaction \" + transactionId + \".\");\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        // The CANCEL method requests that the TU at the server side cancel a\r\n        // pending transaction.  The TU determines the transaction to be\r\n        // cancelled by taking the CANCEL request, and then assuming that the\r\n        // request method is anything but CANCEL or ACK and applying the\r\n        // transaction matching procedures of Section 17.2.3.  The matching\r\n        // transaction is the one to be cancelled.\r\n        // https://tools.ietf.org/html/rfc3261#section-9.2\r\n        if (message.method === messages_1.C.CANCEL) {\r\n            if (uas) {\r\n                // Regardless of the method of the original request, as long as the\r\n                // CANCEL matched an existing transaction, the UAS answers the CANCEL\r\n                // request itself with a 200 (OK) response.\r\n                // https://tools.ietf.org/html/rfc3261#section-9.2\r\n                this.replyStateless(message, { statusCode: 200 });\r\n                // If the transaction for the original request still exists, the behavior\r\n                // of the UAS on receiving a CANCEL request depends on whether it has already\r\n                // sent a final response for the original request. If it has, the CANCEL\r\n                // request has no effect on the processing of the original request, no\r\n                // effect on any session state, and no effect on the responses generated\r\n                // for the original request. If the UAS has not issued a final response\r\n                // for the original request, its behavior depends on the method of the\r\n                // original request. If the original request was an INVITE, the UAS\r\n                // SHOULD immediately respond to the INVITE with a 487 (Request\r\n                // Terminated).\r\n                // https://tools.ietf.org/html/rfc3261#section-9.2\r\n                if (uas.transaction instanceof transactions_1.InviteServerTransaction &&\r\n                    uas.transaction.state === transactions_1.TransactionState.Proceeding) {\r\n                    if (uas instanceof user_agents_1.InviteUserAgentServer) {\r\n                        uas.receiveCancel(message);\r\n                    }\r\n                    // A CANCEL request has no impact on the processing of\r\n                    // transactions with any other method defined in this specification.\r\n                    // https://tools.ietf.org/html/rfc3261#section-9.2\r\n                }\r\n            }\r\n            else {\r\n                // If the UAS did not find a matching transaction for the CANCEL\r\n                // according to the procedure above, it SHOULD respond to the CANCEL\r\n                // with a 481 (Call Leg/Transaction Does Not Exist).\r\n                // https://tools.ietf.org/html/rfc3261#section-9.2\r\n                this.replyStateless(message, { statusCode: 481 });\r\n            }\r\n            return;\r\n        }\r\n        // If a matching server transaction is found, the request is passed to that\r\n        // transaction for processing.\r\n        // https://tools.ietf.org/html/rfc6026#section-8.10\r\n        if (uas) {\r\n            uas.transaction.receiveRequest(message);\r\n            return;\r\n        }\r\n        // If no match is found, the request is passed to the core, which may decide to\r\n        // construct a new server transaction for that request.\r\n        // https://tools.ietf.org/html/rfc6026#section-8.10\r\n        this.receiveRequest(message);\r\n        return;\r\n    };\r\n    /**\r\n     * UAC and UAS procedures depend strongly on two factors.  First, based\r\n     * on whether the request or response is inside or outside of a dialog,\r\n     * and second, based on the method of a request.  Dialogs are discussed\r\n     * thoroughly in Section 12; they represent a peer-to-peer relationship\r\n     * between user agents and are established by specific SIP methods, such\r\n     * as INVITE.\r\n     * @param message - Incoming request message.\r\n     */\r\n    UserAgentCore.prototype.receiveRequest = function (message) {\r\n        // 8.2 UAS Behavior\r\n        // UASs SHOULD process the requests in the order of the steps that\r\n        // follow in this section (that is, starting with authentication, then\r\n        // inspecting the method, the header fields, and so on throughout the\r\n        // remainder of this section).\r\n        // https://tools.ietf.org/html/rfc3261#section-8.2\r\n        // 8.2.1 Method Inspection\r\n        // Once a request is authenticated (or authentication is skipped), the\r\n        // UAS MUST inspect the method of the request.  If the UAS recognizes\r\n        // but does not support the method of a request, it MUST generate a 405\r\n        // (Method Not Allowed) response.  Procedures for generating responses\r\n        // are described in Section 8.2.6.  The UAS MUST also add an Allow\r\n        // header field to the 405 (Method Not Allowed) response.  The Allow\r\n        // header field MUST list the set of methods supported by the UAS\r\n        // generating the message.\r\n        // https://tools.ietf.org/html/rfc3261#section-8.2.1\r\n        if (allowed_methods_1.AllowedMethods.indexOf(message.method) === -1) {\r\n            var allowHeader = \"Allow: \" + allowed_methods_1.AllowedMethods.toString();\r\n            this.replyStateless(message, {\r\n                statusCode: 405,\r\n                extraHeaders: [allowHeader]\r\n            });\r\n            return;\r\n        }\r\n        // 8.2.2 Header Inspection\r\n        // https://tools.ietf.org/html/rfc3261#section-8.2.2\r\n        if (!message.ruri) { // FIXME: A request message should always have an ruri\r\n            throw new Error(\"Request-URI undefined.\");\r\n        }\r\n        // 8.2.2.1 To and Request-URI\r\n        // If the Request-URI uses a scheme not supported by the UAS, it SHOULD\r\n        // reject the request with a 416 (Unsupported URI Scheme) response.\r\n        // https://tools.ietf.org/html/rfc3261#section-8.2.2.1\r\n        if (message.ruri.scheme !== \"sip\") {\r\n            this.replyStateless(message, { statusCode: 416 });\r\n            return;\r\n        }\r\n        // 8.2.2.1 To and Request-URI\r\n        // If the Request-URI does not identify an address that the\r\n        // UAS is willing to accept requests for, it SHOULD reject\r\n        // the request with a 404 (Not Found) response.\r\n        // https://tools.ietf.org/html/rfc3261#section-8.2.2.1\r\n        var ruri = message.ruri;\r\n        var ruriMatches = function (uri) {\r\n            return !!uri && uri.user === ruri.user;\r\n        };\r\n        if (!ruriMatches(this.configuration.aor) &&\r\n            !(ruriMatches(this.configuration.contact.uri) ||\r\n                ruriMatches(this.configuration.contact.pubGruu) ||\r\n                ruriMatches(this.configuration.contact.tempGruu))) {\r\n            this.logger.warn(\"Request-URI does not point to us.\");\r\n            if (message.method !== messages_1.C.ACK) {\r\n                this.replyStateless(message, { statusCode: 404 });\r\n            }\r\n            return;\r\n        }\r\n        // 8.2.2.1 To and Request-URI\r\n        // Other potential sources of received Request-URIs include\r\n        // the Contact header fields of requests and responses sent by the UA\r\n        // that establish or refresh dialogs.\r\n        // https://tools.ietf.org/html/rfc3261#section-8.2.2.1\r\n        if (message.method === messages_1.C.INVITE) {\r\n            if (!message.hasHeader(\"Contact\")) {\r\n                this.replyStateless(message, {\r\n                    statusCode: 400,\r\n                    reasonPhrase: \"Missing Contact Header\"\r\n                });\r\n                return;\r\n            }\r\n        }\r\n        // 8.2.2.2 Merged Requests\r\n        // If the request has no tag in the To header field, the UAS core MUST\r\n        // check the request against ongoing transactions.  If the From tag,\r\n        // Call-ID, and CSeq exactly match those associated with an ongoing\r\n        // transaction, but the request does not match that transaction (based\r\n        // on the matching rules in Section 17.2.3), the UAS core SHOULD\r\n        // generate a 482 (Loop Detected) response and pass it to the server\r\n        // transaction.\r\n        //\r\n        //    The same request has arrived at the UAS more than once, following\r\n        //    different paths, most likely due to forking.  The UAS processes\r\n        //    the first such request received and responds with a 482 (Loop\r\n        //    Detected) to the rest of them.\r\n        // https://tools.ietf.org/html/rfc3261#section-8.2.2.2\r\n        if (!message.toTag) {\r\n            var transactionId = message.viaBranch;\r\n            if (!this.userAgentServers.has(transactionId)) {\r\n                var mergedRequest = Array.from(this.userAgentServers.values())\r\n                    .some(function (uas) {\r\n                    return uas.transaction.request.fromTag === message.fromTag &&\r\n                        uas.transaction.request.callId === message.callId &&\r\n                        uas.transaction.request.cseq === message.cseq;\r\n                });\r\n                if (mergedRequest) {\r\n                    this.replyStateless(message, { statusCode: 482 });\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        // 8.2.2.3 Require\r\n        // https://tools.ietf.org/html/rfc3261#section-8.2.2.3\r\n        // TODO\r\n        // 8.2.3 Content Processing\r\n        // https://tools.ietf.org/html/rfc3261#section-8.2.3\r\n        // TODO\r\n        // 8.2.4 Applying Extensions\r\n        // https://tools.ietf.org/html/rfc3261#section-8.2.4\r\n        // TODO\r\n        // 8.2.5 Processing the Request\r\n        // Assuming all of the checks in the previous subsections are passed,\r\n        // the UAS processing becomes method-specific.\r\n        // https://tools.ietf.org/html/rfc3261#section-8.2.5\r\n        // The UAS will receive the request from the transaction layer.  If the\r\n        // request has a tag in the To header field, the UAS core computes the\r\n        // dialog identifier corresponding to the request and compares it with\r\n        // existing dialogs.  If there is a match, this is a mid-dialog request.\r\n        // In that case, the UAS first applies the same processing rules for\r\n        // requests outside of a dialog, discussed in Section 8.2.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\r\n        if (message.toTag) {\r\n            this.receiveInsideDialogRequest(message);\r\n        }\r\n        else {\r\n            this.receiveOutsideDialogRequest(message);\r\n        }\r\n        return;\r\n    };\r\n    /**\r\n     * Once a dialog has been established between two UAs, either of them\r\n     * MAY initiate new transactions as needed within the dialog.  The UA\r\n     * sending the request will take the UAC role for the transaction.  The\r\n     * UA receiving the request will take the UAS role.  Note that these may\r\n     * be different roles than the UAs held during the transaction that\r\n     * established the dialog.\r\n     * https://tools.ietf.org/html/rfc3261#section-12.2\r\n     * @param message - Incoming request message.\r\n     */\r\n    UserAgentCore.prototype.receiveInsideDialogRequest = function (message) {\r\n        // NOTIFY requests are matched to such SUBSCRIBE requests if they\r\n        // contain the same \"Call-ID\", a \"To\" header field \"tag\" parameter that\r\n        // matches the \"From\" header field \"tag\" parameter of the SUBSCRIBE\r\n        // request, and the same \"Event\" header field.  Rules for comparisons of\r\n        // the \"Event\" header fields are described in Section 8.2.1.\r\n        // https://tools.ietf.org/html/rfc6665#section-4.4.1\r\n        if (message.method === messages_1.C.NOTIFY) {\r\n            var event_1 = message.parseHeader(\"Event\");\r\n            if (!event_1 || !event_1.event) {\r\n                this.replyStateless(message, { statusCode: 489 });\r\n                return;\r\n            }\r\n            // FIXME: Subscriber id should also matching on event id.\r\n            var subscriberId = message.callId + message.toTag + event_1.event;\r\n            var subscriber = this.subscribers.get(subscriberId);\r\n            if (subscriber) {\r\n                var uas = new user_agents_1.NotifyUserAgentServer(this, message);\r\n                subscriber.onNotify(uas);\r\n                return;\r\n            }\r\n        }\r\n        // Requests sent within a dialog, as any other requests, are atomic.  If\r\n        // a particular request is accepted by the UAS, all the state changes\r\n        // associated with it are performed.  If the request is rejected, none\r\n        // of the state changes are performed.\r\n        //\r\n        //    Note that some requests, such as INVITEs, affect several pieces of\r\n        //    state.\r\n        //\r\n        // The UAS will receive the request from the transaction layer.  If the\r\n        // request has a tag in the To header field, the UAS core computes the\r\n        // dialog identifier corresponding to the request and compares it with\r\n        // existing dialogs.  If there is a match, this is a mid-dialog request.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\r\n        var dialogId = message.callId + message.toTag + message.fromTag;\r\n        var dialog = this.dialogs.get(dialogId);\r\n        if (dialog) {\r\n            // [Sip-implementors] Reg. SIP reinvite, UPDATE and OPTIONS\r\n            // You got the question right.\r\n            //\r\n            // And you got the right answer too. :-)\r\n            //\r\n            //   Thanks,\r\n            //   Paul\r\n            //\r\n            // Robert Sparks wrote:\r\n            // > So I've lost track of the question during the musing.\r\n            // >\r\n            // > I _think_ the fundamental question being asked is this:\r\n            // >\r\n            // > Is an endpoint required to reject (with a 481) an OPTIONS request that\r\n            // > arrives with at to-tag but does not match any existing dialog state.\r\n            // > (Assuming some earlier requirement hasn't forced another error code). Or\r\n            // > is it OK if it just sends\r\n            // > a 200 OK anyhow.\r\n            // >\r\n            // > My take on the collection of specs is that its _not_ ok for it to send\r\n            // > the 200 OK anyhow and that it is required to send\r\n            // > the 481. I base this primarily on these sentences from 11.2 in 3261:\r\n            // >\r\n            // >    The response to an OPTIONS is constructed using the standard rules\r\n            // >    for a SIP response as discussed in Section 8.2.6.  The response code\r\n            // >    chosen MUST be the same that would have been chosen had the request\r\n            // >    been an INVITE.\r\n            // >\r\n            // > Did I miss the point of the question?\r\n            // >\r\n            // > On May 15, 2008, at 12:48 PM, Paul Kyzivat wrote:\r\n            // >\r\n            // >> [Including Robert in hopes of getting his insight on this.]\r\n            // https://lists.cs.columbia.edu/pipermail/sip-implementors/2008-May/019178.html\r\n            //\r\n            // Requests that do not change in any way the state of a dialog may be\r\n            // received within a dialog (for example, an OPTIONS request).  They are\r\n            // processed as if they had been received outside the dialog.\r\n            // https://tools.ietf.org/html/rfc3261#section-12.2.2\r\n            if (message.method === messages_1.C.OPTIONS) {\r\n                var allowHeader = \"Allow: \" + allowed_methods_1.AllowedMethods.toString();\r\n                var acceptHeader = \"Accept: \" + acceptedBodyTypes.toString();\r\n                this.replyStateless(message, {\r\n                    statusCode: 200,\r\n                    extraHeaders: [allowHeader, acceptHeader]\r\n                });\r\n                return;\r\n            }\r\n            // Pass the incoming request to the dialog for further handling.\r\n            dialog.receiveRequest(message);\r\n            return;\r\n        }\r\n        // The most important behaviors of a stateless UAS are the following:\r\n        // ...\r\n        // o  A stateless UAS MUST ignore ACK requests.\r\n        // ...\r\n        // https://tools.ietf.org/html/rfc3261#section-8.2.7\r\n        if (message.method === messages_1.C.ACK) {\r\n            // If a final response to an INVITE was sent statelessly,\r\n            // the corresponding ACK:\r\n            // - will not match an existing transaction\r\n            // - may have tag in the To header field\r\n            // - not not match any existing dialogs\r\n            // Absorb unmatched ACKs.\r\n            return;\r\n        }\r\n        // If the request has a tag in the To header field, but the dialog\r\n        // identifier does not match any existing dialogs, the UAS may have\r\n        // crashed and restarted, or it may have received a request for a\r\n        // different (possibly failed) UAS (the UASs can construct the To tags\r\n        // so that a UAS can identify that the tag was for a UAS for which it is\r\n        // providing recovery).  Another possibility is that the incoming\r\n        // request has been simply mis-routed.  Based on the To tag, the UAS MAY\r\n        // either accept or reject the request.  Accepting the request for\r\n        // acceptable To tags provides robustness, so that dialogs can persist\r\n        // even through crashes.  UAs wishing to support this capability must\r\n        // take into consideration some issues such as choosing monotonically\r\n        // increasing CSeq sequence numbers even across reboots, reconstructing\r\n        // the route set, and accepting out-of-range RTP timestamps and sequence\r\n        // numbers.\r\n        //\r\n        // If the UAS wishes to reject the request because it does not wish to\r\n        // recreate the dialog, it MUST respond to the request with a 481\r\n        // (Call/Transaction Does Not Exist) status code and pass that to the\r\n        // server transaction.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.2.2\r\n        this.replyStateless(message, { statusCode: 481 });\r\n        return;\r\n    };\r\n    /**\r\n     * Assuming all of the checks in the previous subsections are passed,\r\n     * the UAS processing becomes method-specific.\r\n     *  https://tools.ietf.org/html/rfc3261#section-8.2.5\r\n     * @param message - Incoming request message.\r\n     */\r\n    UserAgentCore.prototype.receiveOutsideDialogRequest = function (message) {\r\n        switch (message.method) {\r\n            case messages_1.C.ACK:\r\n                // Absorb stray out of dialog ACKs\r\n                break;\r\n            case messages_1.C.BYE:\r\n                // If the BYE does not match an existing dialog, the UAS core SHOULD\r\n                // generate a 481 (Call/Transaction Does Not Exist) response and pass\r\n                // that to the server transaction. This rule means that a BYE sent\r\n                // without tags by a UAC will be rejected.\r\n                // https://tools.ietf.org/html/rfc3261#section-15.1.2\r\n                this.replyStateless(message, { statusCode: 481 });\r\n                break;\r\n            case messages_1.C.CANCEL:\r\n                throw new Error(\"Unexpected out of dialog request method \" + message.method + \".\");\r\n                break;\r\n            case messages_1.C.INFO:\r\n                // Use of the INFO method does not constitute a separate dialog usage.\r\n                // INFO messages are always part of, and share the fate of, an invite\r\n                // dialog usage [RFC5057].  INFO messages cannot be sent as part of\r\n                // other dialog usages, or outside an existing dialog.\r\n                // https://tools.ietf.org/html/rfc6086#section-1\r\n                this.replyStateless(message, { statusCode: 405 }); // Should never happen\r\n                break;\r\n            case messages_1.C.INVITE:\r\n                // https://tools.ietf.org/html/rfc3261#section-13.3.1\r\n                {\r\n                    var uas = new user_agents_1.InviteUserAgentServer(this, message);\r\n                    this.delegate.onInvite ?\r\n                        this.delegate.onInvite(uas) :\r\n                        uas.reject();\r\n                }\r\n                break;\r\n            case messages_1.C.MESSAGE:\r\n                // MESSAGE requests are discouraged inside a dialog.  Implementations\r\n                // are restricted from creating a usage for the purpose of carrying a\r\n                // sequence of MESSAGE requests (though some implementations use it that\r\n                // way, against the standard recommendation).\r\n                // https://tools.ietf.org/html/rfc5057#section-5.3\r\n                {\r\n                    var uas = new user_agents_1.MessageUserAgentServer(this, message);\r\n                    this.delegate.onMessage ?\r\n                        this.delegate.onMessage(uas) :\r\n                        uas.accept();\r\n                }\r\n                break;\r\n            case messages_1.C.NOTIFY:\r\n                // Obsoleted by: RFC 6665\r\n                // If any non-SUBSCRIBE mechanisms are defined to create subscriptions,\r\n                // it is the responsibility of the parties defining those mechanisms to\r\n                // ensure that correlation of a NOTIFY message to the corresponding\r\n                // subscription is possible.  Designers of such mechanisms are also\r\n                // warned to make a distinction between sending a NOTIFY message to a\r\n                // subscriber who is aware of the subscription, and sending a NOTIFY\r\n                // message to an unsuspecting node.  The latter behavior is invalid, and\r\n                // MUST receive a \"481 Subscription does not exist\" response (unless\r\n                // some other 400- or 500-class error code is more applicable), as\r\n                // described in section 3.2.4.  In other words, knowledge of a\r\n                // subscription must exist in both the subscriber and the notifier to be\r\n                // valid, even if installed via a non-SUBSCRIBE mechanism.\r\n                // https://tools.ietf.org/html/rfc3265#section-3.2\r\n                //\r\n                // NOTIFY requests are sent to inform subscribers of changes in state to\r\n                // which the subscriber has a subscription.  Subscriptions are created\r\n                // using the SUBSCRIBE method.  In legacy implementations, it is\r\n                // possible that other means of subscription creation have been used.\r\n                // However, this specification does not allow the creation of\r\n                // subscriptions except through SUBSCRIBE requests and (for backwards-\r\n                // compatibility) REFER requests [RFC3515].\r\n                // https://tools.ietf.org/html/rfc6665#section-3.2\r\n                {\r\n                    var uas = new user_agents_1.NotifyUserAgentServer(this, message);\r\n                    this.delegate.onNotify ?\r\n                        this.delegate.onNotify(uas) :\r\n                        uas.reject({ statusCode: 405 });\r\n                }\r\n                break;\r\n            case messages_1.C.OPTIONS:\r\n                // https://tools.ietf.org/html/rfc3261#section-11.2\r\n                {\r\n                    var allowHeader = \"Allow: \" + allowed_methods_1.AllowedMethods.toString();\r\n                    var acceptHeader = \"Accept: \" + acceptedBodyTypes.toString();\r\n                    this.replyStateless(message, {\r\n                        statusCode: 200,\r\n                        extraHeaders: [allowHeader, acceptHeader]\r\n                    });\r\n                }\r\n                break;\r\n            case messages_1.C.REFER:\r\n                // https://tools.ietf.org/html/rfc3515#section-2.4.2\r\n                {\r\n                    var uas = new user_agents_1.ReferUserAgentServer(this, message);\r\n                    this.delegate.onRefer ?\r\n                        this.delegate.onRefer(uas) :\r\n                        uas.reject({ statusCode: 405 });\r\n                }\r\n                break;\r\n            case messages_1.C.REGISTER:\r\n                // https://tools.ietf.org/html/rfc3261#section-10.3\r\n                {\r\n                    var uas = new user_agents_1.RegisterUserAgentServer(this, message);\r\n                    this.delegate.onRegister ?\r\n                        this.delegate.onRegister(uas) :\r\n                        uas.reject({ statusCode: 405 });\r\n                }\r\n                break;\r\n            case messages_1.C.SUBSCRIBE:\r\n                // https://tools.ietf.org/html/rfc6665#section-4.2\r\n                {\r\n                    var uas = new user_agents_1.SubscribeUserAgentServer(this, message);\r\n                    this.delegate.onSubscribe ?\r\n                        this.delegate.onSubscribe(uas) :\r\n                        uas.reject({ statusCode: 480 });\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Unexpected out of dialog request method \" + message.method + \".\");\r\n        }\r\n        return;\r\n    };\r\n    /**\r\n     * Responses are first processed by the transport layer and then passed\r\n     * up to the transaction layer.  The transaction layer performs its\r\n     * processing and then passes the response up to the TU.  The majority\r\n     * of response processing in the TU is method specific.  However, there\r\n     * are some general behaviors independent of the method.\r\n     * https://tools.ietf.org/html/rfc3261#section-8.1.3\r\n     * @param message - Incoming response message from transport layer.\r\n     */\r\n    UserAgentCore.prototype.receiveResponseFromTransport = function (message) {\r\n        // 8.1.3.1 Transaction Layer Errors\r\n        // https://tools.ietf.org/html/rfc3261#section-8.1.3.1\r\n        // Handled by transaction layer callbacks.\r\n        // 8.1.3.2 Unrecognized Responses\r\n        // https://tools.ietf.org/html/rfc3261#section-8.1.3.1\r\n        // TODO\r\n        // 8.1.3.3 Vias\r\n        // https://tools.ietf.org/html/rfc3261#section-8.1.3.3\r\n        if (message.getHeaders(\"via\").length > 1) {\r\n            this.logger.warn(\"More than one Via header field present in the response, dropping\");\r\n            return;\r\n        }\r\n        // 8.1.3.4 Processing 3xx Responses\r\n        // https://tools.ietf.org/html/rfc3261#section-8.1.3.4\r\n        // TODO\r\n        // 8.1.3.5 Processing 4xx Responses\r\n        // https://tools.ietf.org/html/rfc3261#section-8.1.3.5\r\n        // TODO\r\n        // When the transport layer in the client receives a response, it has to\r\n        // determine which client transaction will handle the response, so that\r\n        // the processing of Sections 17.1.1 and 17.1.2 can take place.  The\r\n        // branch parameter in the top Via header field is used for this\r\n        // purpose.  A response matches a client transaction under two\r\n        // conditions:\r\n        //\r\n        //    1.  If the response has the same value of the branch parameter in\r\n        //        the top Via header field as the branch parameter in the top\r\n        //        Via header field of the request that created the transaction.\r\n        //\r\n        //    2.  If the method parameter in the CSeq header field matches the\r\n        //        method of the request that created the transaction.  The\r\n        //        method is needed since a CANCEL request constitutes a\r\n        //        different transaction, but shares the same value of the branch\r\n        //        parameter.\r\n        // https://tools.ietf.org/html/rfc3261#section-17.1.3\r\n        var userAgentClientId = message.viaBranch + message.method;\r\n        var userAgentClient = this.userAgentClients.get(userAgentClientId);\r\n        // The client transport uses the matching procedures of Section\r\n        // 17.1.3 to attempt to match the response to an existing\r\n        // transaction.  If there is a match, the response MUST be passed to\r\n        // that transaction.  Otherwise, any element other than a stateless\r\n        // proxy MUST silently discard the response.\r\n        // https://tools.ietf.org/html/rfc6026#section-8.9\r\n        if (userAgentClient) {\r\n            userAgentClient.transaction.receiveResponse(message);\r\n        }\r\n        else {\r\n            this.logger.warn(\"Discarding unmatched \" + message.statusCode + \" response to \" + message.method + \" \" + userAgentClientId + \".\");\r\n        }\r\n    };\r\n    return UserAgentCore;\r\n}());\r\nexports.UserAgentCore = UserAgentCore;\r\n\r\n\r\n/***/ }),\r\n/* 69 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\ntslib_1.__exportStar(__webpack_require__(42), exports);\r\ntslib_1.__exportStar(__webpack_require__(44), exports);\r\ntslib_1.__exportStar(__webpack_require__(70), exports);\r\ntslib_1.__exportStar(__webpack_require__(46), exports);\r\ntslib_1.__exportStar(__webpack_require__(47), exports);\r\ntslib_1.__exportStar(__webpack_require__(71), exports);\r\ntslib_1.__exportStar(__webpack_require__(72), exports);\r\ntslib_1.__exportStar(__webpack_require__(48), exports);\r\ntslib_1.__exportStar(__webpack_require__(49), exports);\r\ntslib_1.__exportStar(__webpack_require__(50), exports);\r\ntslib_1.__exportStar(__webpack_require__(51), exports);\r\ntslib_1.__exportStar(__webpack_require__(73), exports);\r\ntslib_1.__exportStar(__webpack_require__(52), exports);\r\ntslib_1.__exportStar(__webpack_require__(53), exports);\r\ntslib_1.__exportStar(__webpack_require__(54), exports);\r\ntslib_1.__exportStar(__webpack_require__(55), exports);\r\ntslib_1.__exportStar(__webpack_require__(62), exports);\r\ntslib_1.__exportStar(__webpack_require__(74), exports);\r\ntslib_1.__exportStar(__webpack_require__(56), exports);\r\ntslib_1.__exportStar(__webpack_require__(57), exports);\r\ntslib_1.__exportStar(__webpack_require__(75), exports);\r\ntslib_1.__exportStar(__webpack_require__(76), exports);\r\ntslib_1.__exportStar(__webpack_require__(77), exports);\r\ntslib_1.__exportStar(__webpack_require__(78), exports);\r\ntslib_1.__exportStar(__webpack_require__(43), exports);\r\ntslib_1.__exportStar(__webpack_require__(45), exports);\r\n\r\n\r\n/***/ }),\r\n/* 70 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_client_1 = __webpack_require__(43);\r\n/**\r\n * CANCEL UAC.\r\n * @public\r\n */\r\nvar CancelUserAgentClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(CancelUserAgentClient, _super);\r\n    function CancelUserAgentClient(core, message, delegate) {\r\n        return _super.call(this, transactions_1.NonInviteClientTransaction, core, message, delegate) || this;\r\n    }\r\n    return CancelUserAgentClient;\r\n}(user_agent_client_1.UserAgentClient));\r\nexports.CancelUserAgentClient = CancelUserAgentClient;\r\n\r\n\r\n/***/ }),\r\n/* 71 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar dialogs_1 = __webpack_require__(3);\r\nvar session_1 = __webpack_require__(25);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_client_1 = __webpack_require__(43);\r\n/**\r\n * INVITE UAC.\r\n * @remarks\r\n * 13 Initiating a Session\r\n * https://tools.ietf.org/html/rfc3261#section-13\r\n * 13.1 Overview\r\n * https://tools.ietf.org/html/rfc3261#section-13.1\r\n * 13.2 UAC Processing\r\n * https://tools.ietf.org/html/rfc3261#section-13.2\r\n * @public\r\n */\r\nvar InviteUserAgentClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(InviteUserAgentClient, _super);\r\n    function InviteUserAgentClient(core, message, delegate) {\r\n        var _this = _super.call(this, transactions_1.InviteClientTransaction, core, message, delegate) || this;\r\n        _this.confirmedDialogAcks = new Map();\r\n        _this.confirmedDialogs = new Map();\r\n        _this.earlyDialogs = new Map();\r\n        _this.delegate = delegate;\r\n        return _this;\r\n    }\r\n    InviteUserAgentClient.prototype.dispose = function () {\r\n        // The UAC core considers the INVITE transaction completed 64*T1 seconds\r\n        // after the reception of the first 2xx response.  At this point all the\r\n        // early dialogs that have not transitioned to established dialogs are\r\n        // terminated.  Once the INVITE transaction is considered completed by\r\n        // the UAC core, no more new 2xx responses are expected to arrive.\r\n        //\r\n        // If, after acknowledging any 2xx response to an INVITE, the UAC does\r\n        // not want to continue with that dialog, then the UAC MUST terminate\r\n        // the dialog by sending a BYE request as described in Section 15.\r\n        // https://tools.ietf.org/html/rfc3261#section-13.2.2.4\r\n        this.earlyDialogs.forEach(function (earlyDialog) { return earlyDialog.dispose(); });\r\n        this.earlyDialogs.clear();\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    /**\r\n     * Special case for transport error while sending ACK.\r\n     * @param error - Transport error\r\n     */\r\n    InviteUserAgentClient.prototype.onTransportError = function (error) {\r\n        if (this.transaction.state === transactions_1.TransactionState.Calling) {\r\n            return _super.prototype.onTransportError.call(this, error);\r\n        }\r\n        // If not in 'calling' state, the transport error occurred while sending an ACK.\r\n        this.logger.error(error.message);\r\n        this.logger.error(\"User agent client request transport error while sending ACK.\");\r\n    };\r\n    /**\r\n     * Once the INVITE has been passed to the INVITE client transaction, the\r\n     * UAC waits for responses for the INVITE.\r\n     * https://tools.ietf.org/html/rfc3261#section-13.2.2\r\n     * @param incomingResponse - Incoming response to INVITE request.\r\n     */\r\n    InviteUserAgentClient.prototype.receiveResponse = function (message) {\r\n        var _this = this;\r\n        if (!this.authenticationGuard(message)) {\r\n            return;\r\n        }\r\n        var statusCode = message.statusCode ? message.statusCode.toString() : \"\";\r\n        if (!statusCode) {\r\n            throw new Error(\"Response status code undefined.\");\r\n        }\r\n        switch (true) {\r\n            case /^100$/.test(statusCode):\r\n                if (this.delegate && this.delegate.onTrying) {\r\n                    this.delegate.onTrying({ message: message });\r\n                }\r\n                return;\r\n            case /^1[0-9]{2}$/.test(statusCode):\r\n                // Zero, one or multiple provisional responses may arrive before one or\r\n                // more final responses are received.  Provisional responses for an\r\n                // INVITE request can create \"early dialogs\".  If a provisional response\r\n                // has a tag in the To field, and if the dialog ID of the response does\r\n                // not match an existing dialog, one is constructed using the procedures\r\n                // defined in Section 12.1.2.\r\n                //\r\n                // The early dialog will only be needed if the UAC needs to send a\r\n                // request to its peer within the dialog before the initial INVITE\r\n                // transaction completes.  Header fields present in a provisional\r\n                // response are applicable as long as the dialog is in the early state\r\n                // (for example, an Allow header field in a provisional response\r\n                // contains the methods that can be used in the dialog while this is in\r\n                // the early state).\r\n                // https://tools.ietf.org/html/rfc3261#section-13.2.2.1\r\n                {\r\n                    // Provisional without to tag, no dialog to create.\r\n                    if (!message.toTag) {\r\n                        this.logger.warn(\"Non-100 1xx INVITE response received without a to tag, dropping.\");\r\n                        return;\r\n                    }\r\n                    // Compute dialog state.\r\n                    var dialogState = dialogs_1.Dialog.initialDialogStateForUserAgentClient(this.message, message);\r\n                    // Have existing early dialog or create a new one.\r\n                    var earlyDialog = this.earlyDialogs.get(dialogState.id);\r\n                    if (!earlyDialog) {\r\n                        var transaction = this.transaction;\r\n                        if (!(transaction instanceof transactions_1.InviteClientTransaction)) {\r\n                            throw new Error(\"Transaction not instance of InviteClientTransaction.\");\r\n                        }\r\n                        earlyDialog = new dialogs_1.SessionDialog(transaction, this.core, dialogState);\r\n                        this.earlyDialogs.set(earlyDialog.id, earlyDialog);\r\n                    }\r\n                    // Guard against out of order reliable provisional responses.\r\n                    // Note that this is where the rseq tracking is done.\r\n                    if (!earlyDialog.reliableSequenceGuard(message)) {\r\n                        this.logger.warn(\"1xx INVITE reliable response received out of order, dropping.\");\r\n                        return;\r\n                    }\r\n                    // If the initial offer is in an INVITE, the answer MUST be in a\r\n                    // reliable non-failure message from UAS back to UAC which is\r\n                    // correlated to that INVITE.  For this specification, that is\r\n                    // only the final 2xx response to that INVITE.  That same exact\r\n                    // answer MAY also be placed in any provisional responses sent\r\n                    // prior to the answer.  The UAC MUST treat the first session\r\n                    // description it receives as the answer, and MUST ignore any\r\n                    // session descriptions in subsequent responses to the initial\r\n                    // INVITE.\r\n                    // https://tools.ietf.org/html/rfc3261#section-13.2.1\r\n                    if (earlyDialog.signalingState === session_1.SignalingState.Initial ||\r\n                        earlyDialog.signalingState === session_1.SignalingState.HaveLocalOffer) {\r\n                        earlyDialog.signalingStateTransition(message);\r\n                    }\r\n                    // Pass response to delegate.\r\n                    var session_2 = earlyDialog;\r\n                    if (this.delegate && this.delegate.onProgress) {\r\n                        this.delegate.onProgress({\r\n                            message: message,\r\n                            session: session_2,\r\n                            prack: function (options) {\r\n                                var outgoingPrackRequest = session_2.prack(undefined, options);\r\n                                return outgoingPrackRequest;\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                return;\r\n            case /^2[0-9]{2}$/.test(statusCode):\r\n                // Multiple 2xx responses may arrive at the UAC for a single INVITE\r\n                // request due to a forking proxy.  Each response is distinguished by\r\n                // the tag parameter in the To header field, and each represents a\r\n                // distinct dialog, with a distinct dialog identifier.\r\n                //\r\n                // If the dialog identifier in the 2xx response matches the dialog\r\n                // identifier of an existing dialog, the dialog MUST be transitioned to\r\n                // the \"confirmed\" state, and the route set for the dialog MUST be\r\n                // recomputed based on the 2xx response using the procedures of Section\r\n                // 12.2.1.2.  Otherwise, a new dialog in the \"confirmed\" state MUST be\r\n                // constructed using the procedures of Section 12.1.2.\r\n                // https://tools.ietf.org/html/rfc3261#section-13.2.2.4\r\n                {\r\n                    // Compute dialog state.\r\n                    var dialogState = dialogs_1.Dialog.initialDialogStateForUserAgentClient(this.message, message);\r\n                    // NOTE: Currently our transaction layer is caching the 2xx ACKs and\r\n                    // handling retransmissions of the ACK which is an approach which is\r\n                    // not to spec. In any event, this block is intended to provide a to\r\n                    // spec implementation of ACK retransmissions, but it should not be\r\n                    // hit currently.\r\n                    var dialog = this.confirmedDialogs.get(dialogState.id);\r\n                    if (dialog) {\r\n                        // Once the ACK has been constructed, the procedures of [4] are used to\r\n                        // determine the destination address, port and transport.  However, the\r\n                        // request is passed to the transport layer directly for transmission,\r\n                        // rather than a client transaction.  This is because the UAC core\r\n                        // handles retransmissions of the ACK, not the transaction layer.  The\r\n                        // ACK MUST be passed to the client transport every time a\r\n                        // retransmission of the 2xx final response that triggered the ACK\r\n                        // arrives.\r\n                        // https://tools.ietf.org/html/rfc3261#section-13.2.2.4\r\n                        var outgoingAckRequest = this.confirmedDialogAcks.get(dialogState.id);\r\n                        if (outgoingAckRequest) {\r\n                            var transaction = this.transaction;\r\n                            if (!(transaction instanceof transactions_1.InviteClientTransaction)) {\r\n                                throw new Error(\"Client transaction not instance of InviteClientTransaction.\");\r\n                            }\r\n                            transaction.ackResponse(outgoingAckRequest.message);\r\n                        }\r\n                        else {\r\n                            // If still waiting for an ACK, drop the retransmission of the 2xx final response.\r\n                        }\r\n                        return;\r\n                    }\r\n                    // If the dialog identifier in the 2xx response matches the dialog\r\n                    // identifier of an existing dialog, the dialog MUST be transitioned to\r\n                    // the \"confirmed\" state, and the route set for the dialog MUST be\r\n                    // recomputed based on the 2xx response using the procedures of Section\r\n                    // 12.2.1.2. Otherwise, a new dialog in the \"confirmed\" state MUST be\r\n                    // constructed using the procedures of Section 12.1.2.\r\n                    // https://tools.ietf.org/html/rfc3261#section-13.2.2.4\r\n                    dialog = this.earlyDialogs.get(dialogState.id);\r\n                    if (dialog) {\r\n                        dialog.confirm();\r\n                        dialog.recomputeRouteSet(message);\r\n                        this.earlyDialogs.delete(dialog.id);\r\n                        this.confirmedDialogs.set(dialog.id, dialog);\r\n                    }\r\n                    else {\r\n                        var transaction = this.transaction;\r\n                        if (!(transaction instanceof transactions_1.InviteClientTransaction)) {\r\n                            throw new Error(\"Transaction not instance of InviteClientTransaction.\");\r\n                        }\r\n                        dialog = new dialogs_1.SessionDialog(transaction, this.core, dialogState);\r\n                        this.confirmedDialogs.set(dialog.id, dialog);\r\n                    }\r\n                    // If the initial offer is in an INVITE, the answer MUST be in a\r\n                    // reliable non-failure message from UAS back to UAC which is\r\n                    // correlated to that INVITE.  For this specification, that is\r\n                    // only the final 2xx response to that INVITE.  That same exact\r\n                    // answer MAY also be placed in any provisional responses sent\r\n                    // prior to the answer.  The UAC MUST treat the first session\r\n                    // description it receives as the answer, and MUST ignore any\r\n                    // session descriptions in subsequent responses to the initial\r\n                    // INVITE.\r\n                    // https://tools.ietf.org/html/rfc3261#section-13.2.1\r\n                    if (dialog.signalingState === session_1.SignalingState.Initial ||\r\n                        dialog.signalingState === session_1.SignalingState.HaveLocalOffer) {\r\n                        dialog.signalingStateTransition(message);\r\n                    }\r\n                    // Session Initiated! :)\r\n                    var session_3 = dialog;\r\n                    // The UAC core MUST generate an ACK request for each 2xx received from\r\n                    // the transaction layer.  The header fields of the ACK are constructed\r\n                    // in the same way as for any request sent within a dialog (see Section\r\n                    // 12) with the exception of the CSeq and the header fields related to\r\n                    // authentication.  The sequence number of the CSeq header field MUST be\r\n                    // the same as the INVITE being acknowledged, but the CSeq method MUST\r\n                    // be ACK.  The ACK MUST contain the same credentials as the INVITE.  If\r\n                    // the 2xx contains an offer (based on the rules above), the ACK MUST\r\n                    // carry an answer in its body.  If the offer in the 2xx response is not\r\n                    // acceptable, the UAC core MUST generate a valid answer in the ACK and\r\n                    // then send a BYE immediately.\r\n                    // https://tools.ietf.org/html/rfc3261#section-13.2.2.4\r\n                    if (this.delegate && this.delegate.onAccept) {\r\n                        this.delegate.onAccept({\r\n                            message: message,\r\n                            session: session_3,\r\n                            ack: function (options) {\r\n                                var outgoingAckRequest = session_3.ack(options);\r\n                                _this.confirmedDialogAcks.set(session_3.id, outgoingAckRequest);\r\n                                return outgoingAckRequest;\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        var outgoingAckRequest = session_3.ack();\r\n                        this.confirmedDialogAcks.set(session_3.id, outgoingAckRequest);\r\n                    }\r\n                }\r\n                return;\r\n            case /^3[0-9]{2}$/.test(statusCode):\r\n                // 12.3 Termination of a Dialog\r\n                //\r\n                // Independent of the method, if a request outside of a dialog generates\r\n                // a non-2xx final response, any early dialogs created through\r\n                // provisional responses to that request are terminated.  The mechanism\r\n                // for terminating confirmed dialogs is method specific.  In this\r\n                // specification, the BYE method terminates a session and the dialog\r\n                // associated with it.  See Section 15 for details.\r\n                // https://tools.ietf.org/html/rfc3261#section-12.3\r\n                // All early dialogs are considered terminated upon reception of the\r\n                // non-2xx final response.\r\n                //\r\n                // After having received the non-2xx final response the UAC core\r\n                // considers the INVITE transaction completed.  The INVITE client\r\n                // transaction handles the generation of ACKs for the response (see\r\n                // Section 17).\r\n                // https://tools.ietf.org/html/rfc3261#section-13.2.2.3\r\n                this.earlyDialogs.forEach(function (earlyDialog) { return earlyDialog.dispose(); });\r\n                this.earlyDialogs.clear();\r\n                // A 3xx response may contain one or more Contact header field values\r\n                // providing new addresses where the callee might be reachable.\r\n                // Depending on the status code of the 3xx response (see Section 21.3),\r\n                // the UAC MAY choose to try those new addresses.\r\n                // https://tools.ietf.org/html/rfc3261#section-13.2.2.2\r\n                if (this.delegate && this.delegate.onRedirect) {\r\n                    this.delegate.onRedirect({ message: message });\r\n                }\r\n                return;\r\n            case /^[4-6][0-9]{2}$/.test(statusCode):\r\n                // 12.3 Termination of a Dialog\r\n                //\r\n                // Independent of the method, if a request outside of a dialog generates\r\n                // a non-2xx final response, any early dialogs created through\r\n                // provisional responses to that request are terminated.  The mechanism\r\n                // for terminating confirmed dialogs is method specific.  In this\r\n                // specification, the BYE method terminates a session and the dialog\r\n                // associated with it.  See Section 15 for details.\r\n                // https://tools.ietf.org/html/rfc3261#section-12.3\r\n                // All early dialogs are considered terminated upon reception of the\r\n                // non-2xx final response.\r\n                //\r\n                // After having received the non-2xx final response the UAC core\r\n                // considers the INVITE transaction completed.  The INVITE client\r\n                // transaction handles the generation of ACKs for the response (see\r\n                // Section 17).\r\n                // https://tools.ietf.org/html/rfc3261#section-13.2.2.3\r\n                this.earlyDialogs.forEach(function (earlyDialog) { return earlyDialog.dispose(); });\r\n                this.earlyDialogs.clear();\r\n                // A single non-2xx final response may be received for the INVITE.  4xx,\r\n                // 5xx and 6xx responses may contain a Contact header field value\r\n                // indicating the location where additional information about the error\r\n                // can be found.  Subsequent final responses (which would only arrive\r\n                // under error conditions) MUST be ignored.\r\n                // https://tools.ietf.org/html/rfc3261#section-13.2.2.3\r\n                if (this.delegate && this.delegate.onReject) {\r\n                    this.delegate.onReject({ message: message });\r\n                }\r\n                return;\r\n            default:\r\n                throw new Error(\"Invalid status code \" + statusCode);\r\n        }\r\n        throw new Error(\"Executing what should be an unreachable code path receiving \" + statusCode + \" response.\");\r\n    };\r\n    return InviteUserAgentClient;\r\n}(user_agent_client_1.UserAgentClient));\r\nexports.InviteUserAgentClient = InviteUserAgentClient;\r\n\r\n\r\n/***/ }),\r\n/* 72 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar dialogs_1 = __webpack_require__(3);\r\nvar exceptions_1 = __webpack_require__(32);\r\nvar session_1 = __webpack_require__(25);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar allowed_methods_1 = __webpack_require__(61);\r\nvar user_agent_server_1 = __webpack_require__(45);\r\n/**\r\n * INVITE UAS.\r\n * @remarks\r\n * 13 Initiating a Session\r\n * https://tools.ietf.org/html/rfc3261#section-13\r\n * 13.1 Overview\r\n * https://tools.ietf.org/html/rfc3261#section-13.1\r\n * 13.3 UAS Processing\r\n * https://tools.ietf.org/html/rfc3261#section-13.3\r\n * @public\r\n */\r\nvar InviteUserAgentServer = /** @class */ (function (_super) {\r\n    tslib_1.__extends(InviteUserAgentServer, _super);\r\n    function InviteUserAgentServer(core, message, delegate) {\r\n        var _this = _super.call(this, transactions_1.InviteServerTransaction, core, message, delegate) || this;\r\n        _this.core = core;\r\n        return _this;\r\n    }\r\n    InviteUserAgentServer.prototype.dispose = function () {\r\n        if (this.earlyDialog) {\r\n            this.earlyDialog.dispose();\r\n        }\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    /**\r\n     * 13.3.1.4 The INVITE is Accepted\r\n     * The UAS core generates a 2xx response.  This response establishes a\r\n     * dialog, and therefore follows the procedures of Section 12.1.1 in\r\n     * addition to those of Section 8.2.6.\r\n     * https://tools.ietf.org/html/rfc3261#section-13.3.1.4\r\n     * @param options - Accept options bucket.\r\n     */\r\n    InviteUserAgentServer.prototype.accept = function (options) {\r\n        if (options === void 0) { options = { statusCode: 200 }; }\r\n        if (!this.acceptable) {\r\n            throw new exceptions_1.TransactionStateError(this.message.method + \" not acceptable in state \" + this.transaction.state + \".\");\r\n        }\r\n        // This response establishes a dialog...\r\n        // https://tools.ietf.org/html/rfc3261#section-13.3.1.4\r\n        if (!this.confirmedDialog) {\r\n            if (this.earlyDialog) {\r\n                this.earlyDialog.confirm();\r\n                this.confirmedDialog = this.earlyDialog;\r\n                this.earlyDialog = undefined;\r\n            }\r\n            else {\r\n                var transaction = this.transaction;\r\n                if (!(transaction instanceof transactions_1.InviteServerTransaction)) {\r\n                    throw new Error(\"Transaction not instance of InviteClientTransaction.\");\r\n                }\r\n                var state = dialogs_1.Dialog.initialDialogStateForUserAgentServer(this.message, this.toTag);\r\n                this.confirmedDialog = new dialogs_1.SessionDialog(transaction, this.core, state);\r\n            }\r\n        }\r\n        // When a UAS responds to a request with a response that establishes a\r\n        // dialog (such as a 2xx to INVITE), the UAS MUST copy all Record-Route\r\n        // header field values from the request into the response (including the\r\n        // URIs, URI parameters, and any Record-Route header field parameters,\r\n        // whether they are known or unknown to the UAS) and MUST maintain the\r\n        // order of those values.  The UAS MUST add a Contact header field to\r\n        // the response.  The Contact header field contains an address where the\r\n        // UAS would like to be contacted for subsequent requests in the dialog\r\n        // (which includes the ACK for a 2xx response in the case of an INVITE).\r\n        // Generally, the host portion of this URI is the IP address or FQDN of\r\n        // the host.  The URI provided in the Contact header field MUST be a SIP\r\n        // or SIPS URI.  If the request that initiated the dialog contained a\r\n        // SIPS URI in the Request-URI or in the top Record-Route header field\r\n        // value, if there was any, or the Contact header field if there was no\r\n        // Record-Route header field, the Contact header field in the response\r\n        // MUST be a SIPS URI.  The URI SHOULD have global scope (that is, the\r\n        // same URI can be used in messages outside this dialog).  The same way,\r\n        // the scope of the URI in the Contact header field of the INVITE is not\r\n        // limited to this dialog either.  It can therefore be used in messages\r\n        // to the UAC even outside this dialog.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.1.1\r\n        var recordRouteHeader = this.message\r\n            .getHeaders(\"record-route\")\r\n            .map(function (header) { return \"Record-Route: \" + header; });\r\n        var contactHeader = \"Contact: \" + this.core.configuration.contact.toString();\r\n        // A 2xx response to an INVITE SHOULD contain the Allow header field and\r\n        // the Supported header field, and MAY contain the Accept header field.\r\n        // Including these header fields allows the UAC to determine the\r\n        // features and extensions supported by the UAS for the duration of the\r\n        // call, without probing.\r\n        // https://tools.ietf.org/html/rfc3261#section-13.3.1.4\r\n        // FIXME: TODO: This should not be hard coded.\r\n        var allowHeader = \"Allow: \" + allowed_methods_1.AllowedMethods.toString();\r\n        // FIXME: TODO: Supported header (see reply())\r\n        // FIXME: TODO: Accept header\r\n        // If the INVITE request contained an offer, and the UAS had not yet\r\n        // sent an answer, the 2xx MUST contain an answer.  If the INVITE did\r\n        // not contain an offer, the 2xx MUST contain an offer if the UAS had\r\n        // not yet sent an offer.\r\n        // https://tools.ietf.org/html/rfc3261#section-13.3.1.4\r\n        if (!options.body) {\r\n            if (this.confirmedDialog.signalingState === session_1.SignalingState.Stable) {\r\n                options.body = this.confirmedDialog.answer; // resend the answer sent in provisional response\r\n            }\r\n            else if (this.confirmedDialog.signalingState === session_1.SignalingState.Initial ||\r\n                this.confirmedDialog.signalingState === session_1.SignalingState.HaveRemoteOffer) {\r\n                throw new Error(\"Response must have a body.\");\r\n            }\r\n        }\r\n        options.statusCode = options.statusCode || 200;\r\n        options.extraHeaders = options.extraHeaders || [];\r\n        options.extraHeaders = options.extraHeaders.concat(recordRouteHeader);\r\n        options.extraHeaders.push(allowHeader);\r\n        options.extraHeaders.push(contactHeader);\r\n        var response = _super.prototype.accept.call(this, options);\r\n        var session = this.confirmedDialog;\r\n        var result = tslib_1.__assign(tslib_1.__assign({}, response), { session: session });\r\n        // Update dialog signaling state\r\n        if (options.body) {\r\n            // Once the UAS has sent or received an answer to the initial\r\n            // offer, it MUST NOT generate subsequent offers in any responses\r\n            // to the initial INVITE.  This means that a UAS based on this\r\n            // specification alone can never generate subsequent offers until\r\n            // completion of the initial transaction.\r\n            // https://tools.ietf.org/html/rfc3261#section-13.2.1\r\n            if (this.confirmedDialog.signalingState !== session_1.SignalingState.Stable) {\r\n                this.confirmedDialog.signalingStateTransition(options.body);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * 13.3.1.1 Progress\r\n     * If the UAS is not able to answer the invitation immediately, it can\r\n     * choose to indicate some kind of progress to the UAC (for example, an\r\n     * indication that a phone is ringing).  This is accomplished with a\r\n     * provisional response between 101 and 199.  These provisional\r\n     * responses establish early dialogs and therefore follow the procedures\r\n     * of Section 12.1.1 in addition to those of Section 8.2.6.  A UAS MAY\r\n     * send as many provisional responses as it likes.  Each of these MUST\r\n     * indicate the same dialog ID.  However, these will not be delivered\r\n     * reliably.\r\n     *\r\n     * If the UAS desires an extended period of time to answer the INVITE,\r\n     * it will need to ask for an \"extension\" in order to prevent proxies\r\n     * from canceling the transaction.  A proxy has the option of canceling\r\n     * a transaction when there is a gap of 3 minutes between responses in a\r\n     * transaction.  To prevent cancellation, the UAS MUST send a non-100\r\n     * provisional response at every minute, to handle the possibility of\r\n     * lost provisional responses.\r\n     * https://tools.ietf.org/html/rfc3261#section-13.3.1.1\r\n     * @param options - Progress options bucket.\r\n     */\r\n    InviteUserAgentServer.prototype.progress = function (options) {\r\n        if (options === void 0) { options = { statusCode: 180 }; }\r\n        if (!this.progressable) {\r\n            throw new exceptions_1.TransactionStateError(this.message.method + \" not progressable in state \" + this.transaction.state + \".\");\r\n        }\r\n        // This response establishes a dialog...\r\n        // https://tools.ietf.org/html/rfc3261#section-13.3.1.4\r\n        if (!this.earlyDialog) {\r\n            var transaction = this.transaction;\r\n            if (!(transaction instanceof transactions_1.InviteServerTransaction)) {\r\n                throw new Error(\"Transaction not instance of InviteClientTransaction.\");\r\n            }\r\n            var state = dialogs_1.Dialog.initialDialogStateForUserAgentServer(this.message, this.toTag, true);\r\n            this.earlyDialog = new dialogs_1.SessionDialog(transaction, this.core, state);\r\n        }\r\n        // When a UAS responds to a request with a response that establishes a\r\n        // dialog (such as a 2xx to INVITE), the UAS MUST copy all Record-Route\r\n        // header field values from the request into the response (including the\r\n        // URIs, URI parameters, and any Record-Route header field parameters,\r\n        // whether they are known or unknown to the UAS) and MUST maintain the\r\n        // order of those values.  The UAS MUST add a Contact header field to\r\n        // the response.  The Contact header field contains an address where the\r\n        // UAS would like to be contacted for subsequent requests in the dialog\r\n        // (which includes the ACK for a 2xx response in the case of an INVITE).\r\n        // Generally, the host portion of this URI is the IP address or FQDN of\r\n        // the host.  The URI provided in the Contact header field MUST be a SIP\r\n        // or SIPS URI.  If the request that initiated the dialog contained a\r\n        // SIPS URI in the Request-URI or in the top Record-Route header field\r\n        // value, if there was any, or the Contact header field if there was no\r\n        // Record-Route header field, the Contact header field in the response\r\n        // MUST be a SIPS URI.  The URI SHOULD have global scope (that is, the\r\n        // same URI can be used in messages outside this dialog).  The same way,\r\n        // the scope of the URI in the Contact header field of the INVITE is not\r\n        // limited to this dialog either.  It can therefore be used in messages\r\n        // to the UAC even outside this dialog.\r\n        // https://tools.ietf.org/html/rfc3261#section-12.1.1\r\n        var recordRouteHeader = this.message\r\n            .getHeaders(\"record-route\")\r\n            .map(function (header) { return \"Record-Route: \" + header; });\r\n        var contactHeader = \"Contact: \" + this.core.configuration.contact;\r\n        options.extraHeaders = options.extraHeaders || [];\r\n        options.extraHeaders = options.extraHeaders.concat(recordRouteHeader);\r\n        options.extraHeaders.push(contactHeader);\r\n        var response = _super.prototype.progress.call(this, options);\r\n        var session = this.earlyDialog;\r\n        var result = tslib_1.__assign(tslib_1.__assign({}, response), { session: session });\r\n        // Update dialog signaling state\r\n        if (options.body) {\r\n            // Once the UAS has sent or received an answer to the initial\r\n            // offer, it MUST NOT generate subsequent offers in any responses\r\n            // to the initial INVITE.  This means that a UAS based on this\r\n            // specification alone can never generate subsequent offers until\r\n            // completion of the initial transaction.\r\n            // https://tools.ietf.org/html/rfc3261#section-13.2.1\r\n            if (this.earlyDialog.signalingState !== session_1.SignalingState.Stable) {\r\n                this.earlyDialog.signalingStateTransition(options.body);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * 13.3.1.2 The INVITE is Redirected\r\n     * If the UAS decides to redirect the call, a 3xx response is sent.  A\r\n     * 300 (Multiple Choices), 301 (Moved Permanently) or 302 (Moved\r\n     * Temporarily) response SHOULD contain a Contact header field\r\n     * containing one or more URIs of new addresses to be tried.  The\r\n     * response is passed to the INVITE server transaction, which will deal\r\n     * with its retransmissions.\r\n     * https://tools.ietf.org/html/rfc3261#section-13.3.1.2\r\n     * @param contacts - Contacts to redirect to.\r\n     * @param options - Redirect options bucket.\r\n     */\r\n    InviteUserAgentServer.prototype.redirect = function (contacts, options) {\r\n        if (options === void 0) { options = { statusCode: 302 }; }\r\n        return _super.prototype.redirect.call(this, contacts, options);\r\n    };\r\n    /**\r\n     * 13.3.1.3 The INVITE is Rejected\r\n     * A common scenario occurs when the callee is currently not willing or\r\n     * able to take additional calls at this end system.  A 486 (Busy Here)\r\n     * SHOULD be returned in such a scenario.\r\n     * https://tools.ietf.org/html/rfc3261#section-13.3.1.3\r\n     * @param options - Reject options bucket.\r\n     */\r\n    InviteUserAgentServer.prototype.reject = function (options) {\r\n        if (options === void 0) { options = { statusCode: 486 }; }\r\n        return _super.prototype.reject.call(this, options);\r\n    };\r\n    return InviteUserAgentServer;\r\n}(user_agent_server_1.UserAgentServer));\r\nexports.InviteUserAgentServer = InviteUserAgentServer;\r\n\r\n\r\n/***/ }),\r\n/* 73 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_client_1 = __webpack_require__(43);\r\n/**\r\n * PUBLISH UAC.\r\n * @public\r\n */\r\nvar PublishUserAgentClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PublishUserAgentClient, _super);\r\n    function PublishUserAgentClient(core, message, delegate) {\r\n        return _super.call(this, transactions_1.NonInviteClientTransaction, core, message, delegate) || this;\r\n    }\r\n    return PublishUserAgentClient;\r\n}(user_agent_client_1.UserAgentClient));\r\nexports.PublishUserAgentClient = PublishUserAgentClient;\r\n\r\n\r\n/***/ }),\r\n/* 74 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_server_1 = __webpack_require__(45);\r\n/**\r\n * Re-SUBSCRIBE UAS.\r\n * @public\r\n */\r\nvar ReSubscribeUserAgentServer = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ReSubscribeUserAgentServer, _super);\r\n    function ReSubscribeUserAgentServer(dialog, message, delegate) {\r\n        return _super.call(this, transactions_1.NonInviteServerTransaction, dialog.userAgentCore, message, delegate) || this;\r\n    }\r\n    return ReSubscribeUserAgentServer;\r\n}(user_agent_server_1.UserAgentServer));\r\nexports.ReSubscribeUserAgentServer = ReSubscribeUserAgentServer;\r\n\r\n\r\n/***/ }),\r\n/* 75 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_client_1 = __webpack_require__(43);\r\n/**\r\n * REGISTER UAC.\r\n * @public\r\n */\r\nvar RegisterUserAgentClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RegisterUserAgentClient, _super);\r\n    function RegisterUserAgentClient(core, message, delegate) {\r\n        return _super.call(this, transactions_1.NonInviteClientTransaction, core, message, delegate) || this;\r\n    }\r\n    return RegisterUserAgentClient;\r\n}(user_agent_client_1.UserAgentClient));\r\nexports.RegisterUserAgentClient = RegisterUserAgentClient;\r\n\r\n\r\n/***/ }),\r\n/* 76 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_server_1 = __webpack_require__(45);\r\n/**\r\n * REGISTER UAS.\r\n * @public\r\n */\r\nvar RegisterUserAgentServer = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RegisterUserAgentServer, _super);\r\n    function RegisterUserAgentServer(core, message, delegate) {\r\n        var _this = _super.call(this, transactions_1.NonInviteServerTransaction, core, message, delegate) || this;\r\n        _this.core = core;\r\n        return _this;\r\n    }\r\n    return RegisterUserAgentServer;\r\n}(user_agent_server_1.UserAgentServer));\r\nexports.RegisterUserAgentServer = RegisterUserAgentServer;\r\n\r\n\r\n/***/ }),\r\n/* 77 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar subscription_dialog_1 = __webpack_require__(58);\r\nvar subscription_1 = __webpack_require__(59);\r\nvar timers_1 = __webpack_require__(27);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_client_1 = __webpack_require__(43);\r\n/**\r\n * SUBSCRIBE UAC.\r\n * @remarks\r\n * 4.1.  Subscriber Behavior\r\n * https://tools.ietf.org/html/rfc6665#section-4.1\r\n *\r\n * User agent client for installation of a single subscription per SUBSCRIBE request.\r\n * TODO: Support for installation of multiple subscriptions on forked SUBSCRIBE requests.\r\n * @public\r\n */\r\nvar SubscribeUserAgentClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SubscribeUserAgentClient, _super);\r\n    function SubscribeUserAgentClient(core, message, delegate) {\r\n        var _this = this;\r\n        // Get event from request message.\r\n        var event = message.getHeader(\"Event\");\r\n        if (!event) {\r\n            throw new Error(\"Event undefined\");\r\n        }\r\n        // Get expires from request message.\r\n        var expires = message.getHeader(\"Expires\");\r\n        if (!expires) {\r\n            throw new Error(\"Expires undefined\");\r\n        }\r\n        _this = _super.call(this, transactions_1.NonInviteClientTransaction, core, message, delegate) || this;\r\n        _this.delegate = delegate;\r\n        // FIXME: Subscriber id should also be matching on event id.\r\n        _this.subscriberId = message.callId + message.fromTag + event;\r\n        _this.subscriptionExpiresRequested = _this.subscriptionExpires = Number(expires);\r\n        _this.subscriptionEvent = event;\r\n        _this.subscriptionState = subscription_1.SubscriptionState.NotifyWait;\r\n        // Start waiting for a NOTIFY we can use to create a subscription.\r\n        _this.waitNotifyStart();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Destructor.\r\n     * Note that Timer N may live on waiting for an initial NOTIFY and\r\n     * the delegate may still receive that NOTIFY. If you don't want\r\n     * that behavior then either clear the delegate so the delegate\r\n     * doesn't get called (a 200 will be sent in response to the NOTIFY)\r\n     * or call `waitNotifyStop` which will clear Timer N and remove this\r\n     * UAC from the core (a 481 will be sent in response to the NOTIFY).\r\n     */\r\n    SubscribeUserAgentClient.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    /**\r\n     * Handle out of dialog NOTIFY associated with SUBSCRIBE request.\r\n     * This is the first NOTIFY received after the SUBSCRIBE request.\r\n     * @param uas - User agent server handling the subscription creating NOTIFY.\r\n     */\r\n    SubscribeUserAgentClient.prototype.onNotify = function (uas) {\r\n        // NOTIFY requests are matched to such SUBSCRIBE requests if they\r\n        // contain the same \"Call-ID\", a \"To\" header field \"tag\" parameter that\r\n        // matches the \"From\" header field \"tag\" parameter of the SUBSCRIBE\r\n        // request, and the same \"Event\" header field.  Rules for comparisons of\r\n        // the \"Event\" header fields are described in Section 8.2.1.\r\n        // https://tools.ietf.org/html/rfc6665#section-4.4.1\r\n        var event = uas.message.parseHeader(\"Event\").event;\r\n        if (!event || event !== this.subscriptionEvent) {\r\n            this.logger.warn(\"Failed to parse event.\");\r\n            uas.reject({ statusCode: 489 });\r\n            return;\r\n        }\r\n        // NOTIFY requests MUST contain \"Subscription-State\" header fields that\r\n        // indicate the status of the subscription.\r\n        // https://tools.ietf.org/html/rfc6665#section-4.1.3\r\n        var subscriptionState = uas.message.parseHeader(\"Subscription-State\");\r\n        if (!subscriptionState || !subscriptionState.state) {\r\n            this.logger.warn(\"Failed to parse subscription state.\");\r\n            uas.reject({ statusCode: 489 });\r\n            return;\r\n        }\r\n        // Validate subscription state.\r\n        var state = subscriptionState.state;\r\n        switch (state) {\r\n            case \"pending\":\r\n                break;\r\n            case \"active\":\r\n                break;\r\n            case \"terminated\":\r\n                break;\r\n            default:\r\n                this.logger.warn(\"Invalid subscription state \" + state);\r\n                uas.reject({ statusCode: 489 });\r\n                return;\r\n        }\r\n        // Dialogs usages are created upon completion of a NOTIFY transaction\r\n        // for a new subscription, unless the NOTIFY request contains a\r\n        // \"Subscription-State\" of \"terminated.\"\r\n        // https://tools.ietf.org/html/rfc6665#section-4.4.1\r\n        if (state !== \"terminated\") {\r\n            // The Contact header field MUST be present and contain exactly one SIP\r\n            // or SIPS URI in any request that can result in the establishment of a\r\n            // dialog.\r\n            // https://tools.ietf.org/html/rfc3261#section-8.1.1.8\r\n            var contact = uas.message.parseHeader(\"contact\");\r\n            if (!contact) {\r\n                this.logger.warn(\"Failed to parse contact.\");\r\n                uas.reject({ statusCode: 489 });\r\n                return;\r\n            }\r\n        }\r\n        // In accordance with the rules for proxying non-INVITE requests as\r\n        // defined in [RFC3261], successful SUBSCRIBE requests will receive only\r\n        // one 200-class response; however, due to forking, the subscription may\r\n        // have been accepted by multiple nodes.  The subscriber MUST therefore\r\n        // be prepared to receive NOTIFY requests with \"From:\" tags that differ\r\n        // from the \"To:\" tag received in the SUBSCRIBE 200-class response.\r\n        //\r\n        // If multiple NOTIFY requests are received in different dialogs in\r\n        // response to a single SUBSCRIBE request, each dialog represents a\r\n        // different destination to which the SUBSCRIBE request was forked.\r\n        // Subscriber handling in such situations varies by event package; see\r\n        // Section 5.4.9 for details.\r\n        // https://tools.ietf.org/html/rfc6665#section-4.1.4\r\n        // Each event package MUST specify whether forked SUBSCRIBE requests are\r\n        // allowed to install multiple subscriptions.\r\n        //\r\n        // If such behavior is not allowed, the first potential dialog-\r\n        // establishing message will create a dialog.  All subsequent NOTIFY\r\n        // requests that correspond to the SUBSCRIBE request (i.e., have\r\n        // matching \"To\", \"From\", \"Call-ID\", and \"Event\" header fields, as well\r\n        // as \"From\" header field \"tag\" parameter and \"Event\" header field \"id\"\r\n        // parameter) but that do not match the dialog would be rejected with a\r\n        // 481 response.  Note that the 200-class response to the SUBSCRIBE\r\n        // request can arrive after a matching NOTIFY request has been received;\r\n        // such responses might not correlate to the same dialog established by\r\n        // the NOTIFY request.  Except as required to complete the SUBSCRIBE\r\n        // transaction, such non-matching 200-class responses are ignored.\r\n        //\r\n        // If installing of multiple subscriptions by way of a single forked\r\n        // SUBSCRIBE request is allowed, the subscriber establishes a new dialog\r\n        // towards each notifier by returning a 200-class response to each\r\n        // NOTIFY request.  Each dialog is then handled as its own entity and is\r\n        // refreshed independently of the other dialogs.\r\n        //\r\n        // In the case that multiple subscriptions are allowed, the event\r\n        // package MUST specify whether merging of the notifications to form a\r\n        // single state is required, and how such merging is to be performed.\r\n        // Note that it is possible that some event packages may be defined in\r\n        // such a way that each dialog is tied to a mutually exclusive state\r\n        // that is unaffected by the other dialogs; this MUST be clearly stated\r\n        // if it is the case.\r\n        // https://tools.ietf.org/html/rfc6665#section-5.4.9\r\n        // *** NOTE: This implementation is only for event packages which\r\n        // do not allow forked requests to install multiple subscriptions.\r\n        // As such and in accordance with the specification, we stop waiting\r\n        // and any future NOTIFY requests will be rejected with a 481.\r\n        if (this.dialog) {\r\n            throw new Error(\"Dialog already created. This implementation only supports install of single subscriptions.\");\r\n        }\r\n        this.waitNotifyStop();\r\n        // Update expires.\r\n        this.subscriptionExpires =\r\n            subscriptionState.expires ?\r\n                Math.min(this.subscriptionExpires, Math.max(subscriptionState.expires, 0)) :\r\n                this.subscriptionExpires;\r\n        // Update subscription state.\r\n        switch (state) {\r\n            case \"pending\":\r\n                this.subscriptionState = subscription_1.SubscriptionState.Pending;\r\n                break;\r\n            case \"active\":\r\n                this.subscriptionState = subscription_1.SubscriptionState.Active;\r\n                break;\r\n            case \"terminated\":\r\n                this.subscriptionState = subscription_1.SubscriptionState.Terminated;\r\n                break;\r\n            default:\r\n                throw new Error(\"Unrecognized state \" + state + \".\");\r\n        }\r\n        // Dialogs usages are created upon completion of a NOTIFY transaction\r\n        // for a new subscription, unless the NOTIFY request contains a\r\n        // \"Subscription-State\" of \"terminated.\"\r\n        // https://tools.ietf.org/html/rfc6665#section-4.4.1\r\n        if (this.subscriptionState !== subscription_1.SubscriptionState.Terminated) {\r\n            // Because the dialog usage is established by the NOTIFY request, the\r\n            // route set at the subscriber is taken from the NOTIFY request itself,\r\n            // as opposed to the route set present in the 200-class response to the\r\n            // SUBSCRIBE request.\r\n            // https://tools.ietf.org/html/rfc6665#section-4.4.1\r\n            var dialogState = subscription_dialog_1.SubscriptionDialog.initialDialogStateForSubscription(this.message, uas.message);\r\n            // Subscription Initiated! :)\r\n            this.dialog = new subscription_dialog_1.SubscriptionDialog(this.subscriptionEvent, this.subscriptionExpires, this.subscriptionState, this.core, dialogState);\r\n        }\r\n        // Delegate.\r\n        if (this.delegate && this.delegate.onNotify) {\r\n            var request = uas;\r\n            var subscription = this.dialog;\r\n            this.delegate.onNotify({ request: request, subscription: subscription });\r\n        }\r\n        else {\r\n            uas.accept();\r\n        }\r\n    };\r\n    SubscribeUserAgentClient.prototype.waitNotifyStart = function () {\r\n        var _this = this;\r\n        if (!this.N) {\r\n            // Add ourselves to the core's subscriber map.\r\n            // This allows the core to route out of dialog NOTIFY messages to us.\r\n            this.core.subscribers.set(this.subscriberId, this);\r\n            this.N = setTimeout(function () { return _this.timer_N(); }, timers_1.Timers.TIMER_N);\r\n        }\r\n    };\r\n    SubscribeUserAgentClient.prototype.waitNotifyStop = function () {\r\n        if (this.N) {\r\n            // Remove ourselves to the core's subscriber map.\r\n            // Any future out of dialog NOTIFY messages will be rejected with a 481.\r\n            this.core.subscribers.delete(this.subscriberId);\r\n            clearTimeout(this.N);\r\n            this.N = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Receive a response from the transaction layer.\r\n     * @param message - Incoming response message.\r\n     */\r\n    SubscribeUserAgentClient.prototype.receiveResponse = function (message) {\r\n        if (!this.authenticationGuard(message)) {\r\n            return;\r\n        }\r\n        if (message.statusCode && message.statusCode >= 200 && message.statusCode < 300) {\r\n            //  The \"Expires\" header field in a 200-class response to SUBSCRIBE\r\n            //  request indicates the actual duration for which the subscription will\r\n            //  remain active (unless refreshed).  The received value might be\r\n            //  smaller than the value indicated in the SUBSCRIBE request but cannot\r\n            //  be larger; see Section 4.2.1 for details.\r\n            // https://tools.ietf.org/html/rfc6665#section-4.1.2.1\r\n            // The \"Expires\" values present in SUBSCRIBE 200-class responses behave\r\n            // in the same way as they do in REGISTER responses: the server MAY\r\n            // shorten the interval but MUST NOT lengthen it.\r\n            //\r\n            //    If the duration specified in a SUBSCRIBE request is unacceptably\r\n            //    short, the notifier may be able to send a 423 response, as\r\n            //    described earlier in this section.\r\n            //\r\n            // 200-class responses to SUBSCRIBE requests will not generally contain\r\n            // any useful information beyond subscription duration; their primary\r\n            // purpose is to serve as a reliability mechanism.  State information\r\n            // will be communicated via a subsequent NOTIFY request from the\r\n            // notifier.\r\n            // https://tools.ietf.org/html/rfc6665#section-4.2.1.1\r\n            var expires = message.getHeader(\"Expires\");\r\n            if (!expires) {\r\n                this.logger.warn(\"Expires header missing in a 200-class response to SUBSCRIBE\");\r\n            }\r\n            else {\r\n                var subscriptionExpiresReceived = Number(expires);\r\n                if (subscriptionExpiresReceived > this.subscriptionExpiresRequested) {\r\n                    this.logger.warn(\"Expires header in a 200-class response to SUBSCRIBE with a higher value than the one in the request\");\r\n                }\r\n                if (subscriptionExpiresReceived < this.subscriptionExpires) {\r\n                    this.subscriptionExpires = subscriptionExpiresReceived;\r\n                }\r\n            }\r\n            // If a NOTIFY arrived before 200-class response a dialog may have been created.\r\n            // Updated the dialogs expiration only if this indicates earlier expiration.\r\n            if (this.dialog) {\r\n                if (this.dialog.subscriptionExpires > this.subscriptionExpires) {\r\n                    this.dialog.subscriptionExpires = this.subscriptionExpires;\r\n                }\r\n            }\r\n        }\r\n        if (message.statusCode && message.statusCode >= 300 && message.statusCode < 700) {\r\n            this.waitNotifyStop(); // No NOTIFY will be sent after a negative final response.\r\n        }\r\n        _super.prototype.receiveResponse.call(this, message);\r\n    };\r\n    /**\r\n     * To ensure that subscribers do not wait indefinitely for a\r\n     * subscription to be established, a subscriber starts a Timer N, set to\r\n     * 64*T1, when it sends a SUBSCRIBE request.  If this Timer N expires\r\n     * prior to the receipt of a NOTIFY request, the subscriber considers\r\n     * the subscription failed, and cleans up any state associated with the\r\n     * subscription attempt.\r\n     * https://tools.ietf.org/html/rfc6665#section-4.1.2.4\r\n     */\r\n    SubscribeUserAgentClient.prototype.timer_N = function () {\r\n        this.logger.warn(\"Timer N expired for SUBSCRIBE user agent client. Timed out waiting for NOTIFY.\");\r\n        this.waitNotifyStop();\r\n        if (this.delegate && this.delegate.onNotifyTimeout) {\r\n            this.delegate.onNotifyTimeout();\r\n        }\r\n    };\r\n    return SubscribeUserAgentClient;\r\n}(user_agent_client_1.UserAgentClient));\r\nexports.SubscribeUserAgentClient = SubscribeUserAgentClient;\r\n\r\n\r\n/***/ }),\r\n/* 78 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar transactions_1 = __webpack_require__(28);\r\nvar user_agent_server_1 = __webpack_require__(45);\r\n/**\r\n * SUBSCRIBE UAS.\r\n * @public\r\n */\r\nvar SubscribeUserAgentServer = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SubscribeUserAgentServer, _super);\r\n    function SubscribeUserAgentServer(core, message, delegate) {\r\n        var _this = _super.call(this, transactions_1.NonInviteServerTransaction, core, message, delegate) || this;\r\n        _this.core = core;\r\n        return _this;\r\n    }\r\n    return SubscribeUserAgentServer;\r\n}(user_agent_server_1.UserAgentServer));\r\nexports.SubscribeUserAgentServer = SubscribeUserAgentServer;\r\n\r\n\r\n/***/ }),\r\n/* 79 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar events_1 = __webpack_require__(31);\r\nvar Constants_1 = __webpack_require__(80);\r\nvar core_1 = __webpack_require__(2);\r\nvar Enums_1 = __webpack_require__(82);\r\nvar Utils_1 = __webpack_require__(83);\r\nvar ClientContext = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ClientContext, _super);\r\n    function ClientContext(ua, method, target, options) {\r\n        var _this = _super.call(this) || this;\r\n        _this.data = {};\r\n        ClientContext.initializer(_this, ua, method, target, options);\r\n        return _this;\r\n    }\r\n    ClientContext.initializer = function (objToConstruct, ua, method, originalTarget, options) {\r\n        objToConstruct.type = Enums_1.TypeStrings.ClientContext;\r\n        // Validate arguments\r\n        if (originalTarget === undefined) {\r\n            throw new TypeError(\"Not enough arguments\");\r\n        }\r\n        objToConstruct.ua = ua;\r\n        objToConstruct.logger = ua.getLogger(\"sip.clientcontext\");\r\n        objToConstruct.method = method;\r\n        var target = ua.normalizeTarget(originalTarget);\r\n        if (!target) {\r\n            throw new TypeError(\"Invalid target: \" + originalTarget);\r\n        }\r\n        var fromURI = ua.userAgentCore.configuration.aor;\r\n        if (options && options.params && options.params.fromUri) {\r\n            fromURI =\r\n                (typeof options.params.fromUri === \"string\") ?\r\n                    core_1.Grammar.URIParse(options.params.fromUri) :\r\n                    options.params.fromUri;\r\n            if (!fromURI) {\r\n                throw new TypeError(\"Invalid from URI: \" + options.params.fromUri);\r\n            }\r\n        }\r\n        var toURI = target;\r\n        if (options && options.params && options.params.toUri) {\r\n            toURI =\r\n                (typeof options.params.toUri === \"string\") ?\r\n                    core_1.Grammar.URIParse(options.params.toUri) :\r\n                    options.params.toUri;\r\n            if (!toURI) {\r\n                throw new TypeError(\"Invalid to URI: \" + options.params.toUri);\r\n            }\r\n        }\r\n        /* Options\r\n        * - extraHeaders\r\n        * - params\r\n        * - contentType\r\n        * - body\r\n        */\r\n        options = Object.create(options || Object.prototype);\r\n        options = options || {};\r\n        var extraHeaders = (options.extraHeaders || []).slice();\r\n        var params = options.params || {};\r\n        var bodyObj;\r\n        if (options.body) {\r\n            bodyObj = {\r\n                body: options.body,\r\n                contentType: options.contentType ? options.contentType : \"application/sdp\"\r\n            };\r\n            objToConstruct.body = bodyObj;\r\n        }\r\n        var body;\r\n        if (bodyObj) {\r\n            body = Utils_1.Utils.fromBodyObj(bodyObj);\r\n        }\r\n        // Build the request\r\n        objToConstruct.request = ua.userAgentCore.makeOutgoingRequestMessage(method, target, fromURI, toURI, params, extraHeaders, body);\r\n        /* Set other properties from the request */\r\n        if (objToConstruct.request.from) {\r\n            objToConstruct.localIdentity = objToConstruct.request.from;\r\n        }\r\n        if (objToConstruct.request.to) {\r\n            objToConstruct.remoteIdentity = objToConstruct.request.to;\r\n        }\r\n    };\r\n    ClientContext.prototype.send = function () {\r\n        var _this = this;\r\n        this.ua.userAgentCore.request(this.request, {\r\n            onAccept: function (response) { return _this.receiveResponse(response.message); },\r\n            onProgress: function (response) { return _this.receiveResponse(response.message); },\r\n            onRedirect: function (response) { return _this.receiveResponse(response.message); },\r\n            onReject: function (response) { return _this.receiveResponse(response.message); },\r\n            onTrying: function (response) { return _this.receiveResponse(response.message); }\r\n        });\r\n        return this;\r\n    };\r\n    ClientContext.prototype.receiveResponse = function (response) {\r\n        var statusCode = response.statusCode || 0;\r\n        var cause = Utils_1.Utils.getReasonPhrase(statusCode);\r\n        switch (true) {\r\n            case /^1[0-9]{2}$/.test(statusCode.toString()):\r\n                this.emit(\"progress\", response, cause);\r\n                break;\r\n            case /^2[0-9]{2}$/.test(statusCode.toString()):\r\n                if (this.ua.applicants[this.toString()]) {\r\n                    delete this.ua.applicants[this.toString()];\r\n                }\r\n                this.emit(\"accepted\", response, cause);\r\n                break;\r\n            default:\r\n                if (this.ua.applicants[this.toString()]) {\r\n                    delete this.ua.applicants[this.toString()];\r\n                }\r\n                this.emit(\"rejected\", response, cause);\r\n                this.emit(\"failed\", response, cause);\r\n                break;\r\n        }\r\n    };\r\n    ClientContext.prototype.onRequestTimeout = function () {\r\n        this.emit(\"failed\", undefined, Constants_1.C.causes.REQUEST_TIMEOUT);\r\n    };\r\n    ClientContext.prototype.onTransportError = function () {\r\n        this.emit(\"failed\", undefined, Constants_1.C.causes.CONNECTION_ERROR);\r\n    };\r\n    return ClientContext;\r\n}(events_1.EventEmitter));\r\nexports.ClientContext = ClientContext;\r\n\r\n\r\n/***/ }),\r\n/* 80 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar version_1 = __webpack_require__(81);\r\nvar C;\r\n(function (C) {\r\n    C.version = version_1.LIBRARY_VERSION;\r\n    C.USER_AGENT = \"SIP.js/\" + version_1.LIBRARY_VERSION;\r\n    // SIP scheme\r\n    C.SIP = \"sip\";\r\n    C.SIPS = \"sips\";\r\n    // End and Failure causes\r\n    var causes;\r\n    (function (causes) {\r\n        // Generic error causes\r\n        causes[\"CONNECTION_ERROR\"] = \"Connection Error\";\r\n        causes[\"INTERNAL_ERROR\"] = \"Internal Error\";\r\n        causes[\"REQUEST_TIMEOUT\"] = \"Request Timeout\";\r\n        causes[\"SIP_FAILURE_CODE\"] = \"SIP Failure Code\";\r\n        // SIP error causes\r\n        causes[\"ADDRESS_INCOMPLETE\"] = \"Address Incomplete\";\r\n        causes[\"AUTHENTICATION_ERROR\"] = \"Authentication Error\";\r\n        causes[\"BUSY\"] = \"Busy\";\r\n        causes[\"DIALOG_ERROR\"] = \"Dialog Error\";\r\n        causes[\"INCOMPATIBLE_SDP\"] = \"Incompatible SDP\";\r\n        causes[\"NOT_FOUND\"] = \"Not Found\";\r\n        causes[\"REDIRECTED\"] = \"Redirected\";\r\n        causes[\"REJECTED\"] = \"Rejected\";\r\n        causes[\"UNAVAILABLE\"] = \"Unavailable\";\r\n        // Session error causes\r\n        causes[\"BAD_MEDIA_DESCRIPTION\"] = \"Bad Media Description\";\r\n        causes[\"CANCELED\"] = \"Canceled\";\r\n        causes[\"EXPIRES\"] = \"Expires\";\r\n        causes[\"NO_ACK\"] = \"No ACK\";\r\n        causes[\"NO_ANSWER\"] = \"No Answer\";\r\n        causes[\"NO_PRACK\"] = \"No PRACK\";\r\n        causes[\"RTP_TIMEOUT\"] = \"RTP Timeout\";\r\n        causes[\"USER_DENIED_MEDIA_ACCESS\"] = \"User Denied Media Access\";\r\n        causes[\"WEBRTC_ERROR\"] = \"WebRTC Error\";\r\n        causes[\"WEBRTC_NOT_SUPPORTED\"] = \"WebRTC Not Supported\";\r\n    })(causes = C.causes || (C.causes = {}));\r\n    var supported;\r\n    (function (supported) {\r\n        supported[\"REQUIRED\"] = \"required\";\r\n        supported[\"SUPPORTED\"] = \"supported\";\r\n        supported[\"UNSUPPORTED\"] = \"none\";\r\n    })(supported = C.supported || (C.supported = {}));\r\n    C.SIP_ERROR_CAUSES = {\r\n        ADDRESS_INCOMPLETE: [484],\r\n        AUTHENTICATION_ERROR: [401, 407],\r\n        BUSY: [486, 600],\r\n        INCOMPATIBLE_SDP: [488, 606],\r\n        NOT_FOUND: [404, 604],\r\n        REDIRECTED: [300, 301, 302, 305, 380],\r\n        REJECTED: [403, 603],\r\n        UNAVAILABLE: [480, 410, 408, 430]\r\n    };\r\n    // SIP Methods\r\n    C.ACK = \"ACK\";\r\n    C.BYE = \"BYE\";\r\n    C.CANCEL = \"CANCEL\";\r\n    C.INFO = \"INFO\";\r\n    C.INVITE = \"INVITE\";\r\n    C.MESSAGE = \"MESSAGE\";\r\n    C.NOTIFY = \"NOTIFY\";\r\n    C.OPTIONS = \"OPTIONS\";\r\n    C.REGISTER = \"REGISTER\";\r\n    C.UPDATE = \"UPDATE\";\r\n    C.SUBSCRIBE = \"SUBSCRIBE\";\r\n    C.PUBLISH = \"PUBLISH\";\r\n    C.REFER = \"REFER\";\r\n    C.PRACK = \"PRACK\";\r\n    /* SIP Response Reasons\r\n     * DOC: http://www.iana.org/assignments/sip-parameters\r\n     * Copied from https://github.com/versatica/OverSIP/blob/master/lib/oversip/sip/constants.rb#L7\r\n     */\r\n    C.REASON_PHRASE = {\r\n        100: \"Trying\",\r\n        180: \"Ringing\",\r\n        181: \"Call Is Being Forwarded\",\r\n        182: \"Queued\",\r\n        183: \"Session Progress\",\r\n        199: \"Early Dialog Terminated\",\r\n        200: \"OK\",\r\n        202: \"Accepted\",\r\n        204: \"No Notification\",\r\n        300: \"Multiple Choices\",\r\n        301: \"Moved Permanently\",\r\n        302: \"Moved Temporarily\",\r\n        305: \"Use Proxy\",\r\n        380: \"Alternative Service\",\r\n        400: \"Bad Request\",\r\n        401: \"Unauthorized\",\r\n        402: \"Payment Required\",\r\n        403: \"Forbidden\",\r\n        404: \"Not Found\",\r\n        405: \"Method Not Allowed\",\r\n        406: \"Not Acceptable\",\r\n        407: \"Proxy Authentication Required\",\r\n        408: \"Request Timeout\",\r\n        410: \"Gone\",\r\n        412: \"Conditional Request Failed\",\r\n        413: \"Request Entity Too Large\",\r\n        414: \"Request-URI Too Long\",\r\n        415: \"Unsupported Media Type\",\r\n        416: \"Unsupported URI Scheme\",\r\n        417: \"Unknown Resource-Priority\",\r\n        420: \"Bad Extension\",\r\n        421: \"Extension Required\",\r\n        422: \"Session Interval Too Small\",\r\n        423: \"Interval Too Brief\",\r\n        428: \"Use Identity Header\",\r\n        429: \"Provide Referrer Identity\",\r\n        430: \"Flow Failed\",\r\n        433: \"Anonymity Disallowed\",\r\n        436: \"Bad Identity-Info\",\r\n        437: \"Unsupported Certificate\",\r\n        438: \"Invalid Identity Header\",\r\n        439: \"First Hop Lacks Outbound Support\",\r\n        440: \"Max-Breadth Exceeded\",\r\n        469: \"Bad Info Package\",\r\n        470: \"Consent Needed\",\r\n        478: \"Unresolvable Destination\",\r\n        480: \"Temporarily Unavailable\",\r\n        481: \"Call/Transaction Does Not Exist\",\r\n        482: \"Loop Detected\",\r\n        483: \"Too Many Hops\",\r\n        484: \"Address Incomplete\",\r\n        485: \"Ambiguous\",\r\n        486: \"Busy Here\",\r\n        487: \"Request Terminated\",\r\n        488: \"Not Acceptable Here\",\r\n        489: \"Bad Event\",\r\n        491: \"Request Pending\",\r\n        493: \"Undecipherable\",\r\n        494: \"Security Agreement Required\",\r\n        500: \"Internal Server Error\",\r\n        501: \"Not Implemented\",\r\n        502: \"Bad Gateway\",\r\n        503: \"Service Unavailable\",\r\n        504: \"Server Time-out\",\r\n        505: \"Version Not Supported\",\r\n        513: \"Message Too Large\",\r\n        580: \"Precondition Failure\",\r\n        600: \"Busy Everywhere\",\r\n        603: \"Decline\",\r\n        604: \"Does Not Exist Anywhere\",\r\n        606: \"Not Acceptable\"\r\n    };\r\n    /* SIP Option Tags\r\n     * DOC: http://www.iana.org/assignments/sip-parameters/sip-parameters.xhtml#sip-parameters-4\r\n     */\r\n    C.OPTION_TAGS = {\r\n        \"100rel\": true,\r\n        \"199\": true,\r\n        \"answermode\": true,\r\n        \"early-session\": true,\r\n        \"eventlist\": true,\r\n        \"explicitsub\": true,\r\n        \"from-change\": true,\r\n        \"geolocation-http\": true,\r\n        \"geolocation-sip\": true,\r\n        \"gin\": true,\r\n        \"gruu\": true,\r\n        \"histinfo\": true,\r\n        \"ice\": true,\r\n        \"join\": true,\r\n        \"multiple-refer\": true,\r\n        \"norefersub\": true,\r\n        \"nosub\": true,\r\n        \"outbound\": true,\r\n        \"path\": true,\r\n        \"policy\": true,\r\n        \"precondition\": true,\r\n        \"pref\": true,\r\n        \"privacy\": true,\r\n        \"recipient-list-invite\": true,\r\n        \"recipient-list-message\": true,\r\n        \"recipient-list-subscribe\": true,\r\n        \"replaces\": true,\r\n        \"resource-priority\": true,\r\n        \"sdp-anat\": true,\r\n        \"sec-agree\": true,\r\n        \"tdialog\": true,\r\n        \"timer\": true,\r\n        \"uui\": true // RFC 7433\r\n    };\r\n    var dtmfType;\r\n    (function (dtmfType) {\r\n        dtmfType[\"INFO\"] = \"info\";\r\n        dtmfType[\"RTP\"] = \"rtp\";\r\n    })(dtmfType = C.dtmfType || (C.dtmfType = {}));\r\n})(C = exports.C || (exports.C = {}));\r\n\r\n\r\n/***/ }),\r\n/* 81 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LIBRARY_VERSION = \"0.15.11\";\r\n\r\n\r\n/***/ }),\r\n/* 82 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\n// enums can't really be declared, so they are set here.\r\n// pulled out of individual files to avoid circular dependencies\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar DialogStatus;\r\n(function (DialogStatus) {\r\n    DialogStatus[DialogStatus[\"STATUS_EARLY\"] = 1] = \"STATUS_EARLY\";\r\n    DialogStatus[DialogStatus[\"STATUS_CONFIRMED\"] = 2] = \"STATUS_CONFIRMED\";\r\n})(DialogStatus = exports.DialogStatus || (exports.DialogStatus = {}));\r\nvar SessionStatus;\r\n(function (SessionStatus) {\r\n    // Session states\r\n    SessionStatus[SessionStatus[\"STATUS_NULL\"] = 0] = \"STATUS_NULL\";\r\n    SessionStatus[SessionStatus[\"STATUS_INVITE_SENT\"] = 1] = \"STATUS_INVITE_SENT\";\r\n    SessionStatus[SessionStatus[\"STATUS_1XX_RECEIVED\"] = 2] = \"STATUS_1XX_RECEIVED\";\r\n    SessionStatus[SessionStatus[\"STATUS_INVITE_RECEIVED\"] = 3] = \"STATUS_INVITE_RECEIVED\";\r\n    SessionStatus[SessionStatus[\"STATUS_WAITING_FOR_ANSWER\"] = 4] = \"STATUS_WAITING_FOR_ANSWER\";\r\n    SessionStatus[SessionStatus[\"STATUS_ANSWERED\"] = 5] = \"STATUS_ANSWERED\";\r\n    SessionStatus[SessionStatus[\"STATUS_WAITING_FOR_PRACK\"] = 6] = \"STATUS_WAITING_FOR_PRACK\";\r\n    SessionStatus[SessionStatus[\"STATUS_WAITING_FOR_ACK\"] = 7] = \"STATUS_WAITING_FOR_ACK\";\r\n    SessionStatus[SessionStatus[\"STATUS_CANCELED\"] = 8] = \"STATUS_CANCELED\";\r\n    SessionStatus[SessionStatus[\"STATUS_TERMINATED\"] = 9] = \"STATUS_TERMINATED\";\r\n    SessionStatus[SessionStatus[\"STATUS_ANSWERED_WAITING_FOR_PRACK\"] = 10] = \"STATUS_ANSWERED_WAITING_FOR_PRACK\";\r\n    SessionStatus[SessionStatus[\"STATUS_EARLY_MEDIA\"] = 11] = \"STATUS_EARLY_MEDIA\";\r\n    SessionStatus[SessionStatus[\"STATUS_CONFIRMED\"] = 12] = \"STATUS_CONFIRMED\";\r\n})(SessionStatus = exports.SessionStatus || (exports.SessionStatus = {}));\r\nvar TypeStrings;\r\n(function (TypeStrings) {\r\n    TypeStrings[TypeStrings[\"ClientContext\"] = 0] = \"ClientContext\";\r\n    TypeStrings[TypeStrings[\"ConfigurationError\"] = 1] = \"ConfigurationError\";\r\n    TypeStrings[TypeStrings[\"Dialog\"] = 2] = \"Dialog\";\r\n    TypeStrings[TypeStrings[\"DigestAuthentication\"] = 3] = \"DigestAuthentication\";\r\n    TypeStrings[TypeStrings[\"DTMF\"] = 4] = \"DTMF\";\r\n    TypeStrings[TypeStrings[\"IncomingMessage\"] = 5] = \"IncomingMessage\";\r\n    TypeStrings[TypeStrings[\"IncomingRequest\"] = 6] = \"IncomingRequest\";\r\n    TypeStrings[TypeStrings[\"IncomingResponse\"] = 7] = \"IncomingResponse\";\r\n    TypeStrings[TypeStrings[\"InvalidStateError\"] = 8] = \"InvalidStateError\";\r\n    TypeStrings[TypeStrings[\"InviteClientContext\"] = 9] = \"InviteClientContext\";\r\n    TypeStrings[TypeStrings[\"InviteServerContext\"] = 10] = \"InviteServerContext\";\r\n    TypeStrings[TypeStrings[\"Logger\"] = 11] = \"Logger\";\r\n    TypeStrings[TypeStrings[\"LoggerFactory\"] = 12] = \"LoggerFactory\";\r\n    TypeStrings[TypeStrings[\"MethodParameterError\"] = 13] = \"MethodParameterError\";\r\n    TypeStrings[TypeStrings[\"NameAddrHeader\"] = 14] = \"NameAddrHeader\";\r\n    TypeStrings[TypeStrings[\"NotSupportedError\"] = 15] = \"NotSupportedError\";\r\n    TypeStrings[TypeStrings[\"OutgoingRequest\"] = 16] = \"OutgoingRequest\";\r\n    TypeStrings[TypeStrings[\"Parameters\"] = 17] = \"Parameters\";\r\n    TypeStrings[TypeStrings[\"PublishContext\"] = 18] = \"PublishContext\";\r\n    TypeStrings[TypeStrings[\"ReferClientContext\"] = 19] = \"ReferClientContext\";\r\n    TypeStrings[TypeStrings[\"ReferServerContext\"] = 20] = \"ReferServerContext\";\r\n    TypeStrings[TypeStrings[\"RegisterContext\"] = 21] = \"RegisterContext\";\r\n    TypeStrings[TypeStrings[\"RenegotiationError\"] = 22] = \"RenegotiationError\";\r\n    TypeStrings[TypeStrings[\"RequestSender\"] = 23] = \"RequestSender\";\r\n    TypeStrings[TypeStrings[\"ServerContext\"] = 24] = \"ServerContext\";\r\n    TypeStrings[TypeStrings[\"Session\"] = 25] = \"Session\";\r\n    TypeStrings[TypeStrings[\"SessionDescriptionHandler\"] = 26] = \"SessionDescriptionHandler\";\r\n    TypeStrings[TypeStrings[\"SessionDescriptionHandlerError\"] = 27] = \"SessionDescriptionHandlerError\";\r\n    TypeStrings[TypeStrings[\"SessionDescriptionHandlerObserver\"] = 28] = \"SessionDescriptionHandlerObserver\";\r\n    TypeStrings[TypeStrings[\"Subscription\"] = 29] = \"Subscription\";\r\n    TypeStrings[TypeStrings[\"Transport\"] = 30] = \"Transport\";\r\n    TypeStrings[TypeStrings[\"UA\"] = 31] = \"UA\";\r\n    TypeStrings[TypeStrings[\"URI\"] = 32] = \"URI\";\r\n})(TypeStrings = exports.TypeStrings || (exports.TypeStrings = {}));\r\n// UA status codes\r\nvar UAStatus;\r\n(function (UAStatus) {\r\n    UAStatus[UAStatus[\"STATUS_INIT\"] = 0] = \"STATUS_INIT\";\r\n    UAStatus[UAStatus[\"STATUS_STARTING\"] = 1] = \"STATUS_STARTING\";\r\n    UAStatus[UAStatus[\"STATUS_READY\"] = 2] = \"STATUS_READY\";\r\n    UAStatus[UAStatus[\"STATUS_USER_CLOSED\"] = 3] = \"STATUS_USER_CLOSED\";\r\n    UAStatus[UAStatus[\"STATUS_NOT_READY\"] = 4] = \"STATUS_NOT_READY\";\r\n})(UAStatus = exports.UAStatus || (exports.UAStatus = {}));\r\n\r\n\r\n/***/ }),\r\n/* 83 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Constants_1 = __webpack_require__(80);\r\nvar grammar_1 = __webpack_require__(11);\r\nvar uri_1 = __webpack_require__(15);\r\nvar Utils;\r\n(function (Utils) {\r\n    function defer() {\r\n        var deferred = {};\r\n        deferred.promise = new Promise(function (resolve, reject) {\r\n            deferred.resolve = resolve;\r\n            deferred.reject = reject;\r\n        });\r\n        return deferred;\r\n    }\r\n    Utils.defer = defer;\r\n    function reducePromises(arr, val) {\r\n        return arr.reduce(function (acc, fn) {\r\n            acc = acc.then(fn);\r\n            return acc;\r\n        }, Promise.resolve(val));\r\n    }\r\n    Utils.reducePromises = reducePromises;\r\n    function str_utf8_length(str) {\r\n        return encodeURIComponent(str).replace(/%[A-F\\d]{2}/g, \"U\").length;\r\n    }\r\n    Utils.str_utf8_length = str_utf8_length;\r\n    function generateFakeSDP(body) {\r\n        if (!body) {\r\n            return;\r\n        }\r\n        var start = body.indexOf(\"o=\");\r\n        var end = body.indexOf(\"\\r\\n\", start);\r\n        return \"v=0\\r\\n\" + body.slice(start, end) + \"\\r\\ns=-\\r\\nt=0 0\\r\\nc=IN IP4 0.0.0.0\";\r\n    }\r\n    Utils.generateFakeSDP = generateFakeSDP;\r\n    function isDecimal(num) {\r\n        var numAsNum = parseInt(num, 10);\r\n        return !isNaN(numAsNum) && (parseFloat(num) === numAsNum);\r\n    }\r\n    Utils.isDecimal = isDecimal;\r\n    function createRandomToken(size, base) {\r\n        if (base === void 0) { base = 32; }\r\n        var token = \"\";\r\n        for (var i = 0; i < size; i++) {\r\n            var r = Math.floor(Math.random() * base);\r\n            token += r.toString(base);\r\n        }\r\n        return token;\r\n    }\r\n    Utils.createRandomToken = createRandomToken;\r\n    function newTag() {\r\n        // used to use the constant in UA\r\n        return Utils.createRandomToken(10);\r\n    }\r\n    Utils.newTag = newTag;\r\n    // http://stackoverflow.com/users/109538/broofa\r\n    function newUUID() {\r\n        var UUID = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\r\n            var r = Math.floor(Math.random() * 16);\r\n            var v = c === \"x\" ? r : (r % 4 + 8);\r\n            return v.toString(16);\r\n        });\r\n        return UUID;\r\n    }\r\n    Utils.newUUID = newUUID;\r\n    /*\r\n     * Normalize SIP URI.\r\n     * NOTE: It does not allow a SIP URI without username.\r\n     * Accepts 'sip', 'sips' and 'tel' URIs and convert them into 'sip'.\r\n     * Detects the domain part (if given) and properly hex-escapes the user portion.\r\n     * If the user portion has only 'tel' number symbols the user portion is clean of 'tel' visual separators.\r\n     * @private\r\n     * @param {String} target\r\n     * @param {String} [domain]\r\n     */\r\n    function normalizeTarget(target, domain) {\r\n        // If no target is given then raise an error.\r\n        if (!target) {\r\n            return;\r\n            // If a SIP.URI instance is given then return it.\r\n        }\r\n        else if (target instanceof uri_1.URI) {\r\n            return target;\r\n            // If a string is given split it by '@':\r\n            // - Last fragment is the desired domain.\r\n            // - Otherwise append the given domain argument.\r\n        }\r\n        else if (typeof target === \"string\") {\r\n            var targetArray = target.split(\"@\");\r\n            var targetUser = void 0;\r\n            var targetDomain = void 0;\r\n            switch (targetArray.length) {\r\n                case 1:\r\n                    if (!domain) {\r\n                        return;\r\n                    }\r\n                    targetUser = target;\r\n                    targetDomain = domain;\r\n                    break;\r\n                case 2:\r\n                    targetUser = targetArray[0];\r\n                    targetDomain = targetArray[1];\r\n                    break;\r\n                default:\r\n                    targetUser = targetArray.slice(0, targetArray.length - 1).join(\"@\");\r\n                    targetDomain = targetArray[targetArray.length - 1];\r\n            }\r\n            // Remove the URI scheme (if present).\r\n            targetUser = targetUser.replace(/^(sips?|tel):/i, \"\");\r\n            // Remove 'tel' visual separators if the user portion just contains 'tel' number symbols.\r\n            if (/^[\\-\\.\\(\\)]*\\+?[0-9\\-\\.\\(\\)]+$/.test(targetUser)) {\r\n                targetUser = targetUser.replace(/[\\-\\.\\(\\)]/g, \"\");\r\n            }\r\n            // Build the complete SIP URI.\r\n            target = Constants_1.C.SIP + \":\" + Utils.escapeUser(targetUser) + \"@\" + targetDomain;\r\n            // Finally parse the resulting URI.\r\n            return grammar_1.Grammar.URIParse(target);\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n    Utils.normalizeTarget = normalizeTarget;\r\n    /*\r\n     * Hex-escape a SIP URI user.\r\n     * @private\r\n     * @param {String} user\r\n     */\r\n    function escapeUser(user) {\r\n        // Don't hex-escape ':' (%3A), '+' (%2B), '?' (%3F\"), '/' (%2F).\r\n        return encodeURIComponent(decodeURIComponent(user))\r\n            .replace(/%3A/ig, \":\")\r\n            .replace(/%2B/ig, \"+\")\r\n            .replace(/%3F/ig, \"?\")\r\n            .replace(/%2F/ig, \"/\");\r\n    }\r\n    Utils.escapeUser = escapeUser;\r\n    function headerize(str) {\r\n        var exceptions = {\r\n            \"Call-Id\": \"Call-ID\",\r\n            \"Cseq\": \"CSeq\",\r\n            \"Min-Se\": \"Min-SE\",\r\n            \"Rack\": \"RAck\",\r\n            \"Rseq\": \"RSeq\",\r\n            \"Www-Authenticate\": \"WWW-Authenticate\",\r\n        };\r\n        var name = str.toLowerCase().replace(/_/g, \"-\").split(\"-\");\r\n        var parts = name.length;\r\n        var hname = \"\";\r\n        for (var part = 0; part < parts; part++) {\r\n            if (part !== 0) {\r\n                hname += \"-\";\r\n            }\r\n            hname += name[part].charAt(0).toUpperCase() + name[part].substring(1);\r\n        }\r\n        if (exceptions[hname]) {\r\n            hname = exceptions[hname];\r\n        }\r\n        return hname;\r\n    }\r\n    Utils.headerize = headerize;\r\n    function sipErrorCause(statusCode) {\r\n        for (var cause in Constants_1.C.SIP_ERROR_CAUSES) {\r\n            if (Constants_1.C.SIP_ERROR_CAUSES[cause].indexOf(statusCode) !== -1) {\r\n                return Constants_1.C.causes[cause];\r\n            }\r\n        }\r\n        return Constants_1.C.causes.SIP_FAILURE_CODE;\r\n    }\r\n    Utils.sipErrorCause = sipErrorCause;\r\n    function getReasonPhrase(code, specific) {\r\n        return specific || Constants_1.C.REASON_PHRASE[code] || \"\";\r\n    }\r\n    Utils.getReasonPhrase = getReasonPhrase;\r\n    function getReasonHeaderValue(code, reason) {\r\n        reason = Utils.getReasonPhrase(code, reason);\r\n        return \"SIP;cause=\" + code + ';text=\"' + reason + '\"';\r\n    }\r\n    Utils.getReasonHeaderValue = getReasonHeaderValue;\r\n    function getCancelReason(code, reason) {\r\n        if (code && code < 200 || code > 699) {\r\n            throw new TypeError(\"Invalid statusCode: \" + code);\r\n        }\r\n        else if (code) {\r\n            return Utils.getReasonHeaderValue(code, reason);\r\n        }\r\n    }\r\n    Utils.getCancelReason = getCancelReason;\r\n    function buildStatusLine(code, reason) {\r\n        // Validate code and reason values\r\n        if (!code || (code < 100 || code > 699)) {\r\n            throw new TypeError(\"Invalid statusCode: \" + code);\r\n        }\r\n        else if (reason && typeof reason !== \"string\" && !(reason instanceof String)) {\r\n            throw new TypeError(\"Invalid reason: \" + reason);\r\n        }\r\n        reason = Utils.getReasonPhrase(code, reason);\r\n        return \"SIP/2.0 \" + code + \" \" + reason + \"\\r\\n\";\r\n    }\r\n    Utils.buildStatusLine = buildStatusLine;\r\n    /**\r\n     * Create a Body given a BodyObj.\r\n     * @param bodyObj Body Object\r\n     */\r\n    function fromBodyObj(bodyObj) {\r\n        var content = bodyObj.body;\r\n        var contentType = bodyObj.contentType;\r\n        var contentDisposition = contentTypeToContentDisposition(contentType);\r\n        var body = { contentDisposition: contentDisposition, contentType: contentType, content: content };\r\n        return body;\r\n    }\r\n    Utils.fromBodyObj = fromBodyObj;\r\n    /**\r\n     * Create a BodyObj given a Body.\r\n     * @param bodyObj Body Object\r\n     */\r\n    function toBodyObj(body) {\r\n        var bodyObj = {\r\n            body: body.content,\r\n            contentType: body.contentType\r\n        };\r\n        return bodyObj;\r\n    }\r\n    Utils.toBodyObj = toBodyObj;\r\n    // If the Content-Disposition header field is missing, bodies of\r\n    // Content-Type application/sdp imply the disposition \"session\", while\r\n    // other content types imply \"render\".\r\n    // https://tools.ietf.org/html/rfc3261#section-13.2.1\r\n    function contentTypeToContentDisposition(contentType) {\r\n        if (contentType === \"application/sdp\") {\r\n            return \"session\";\r\n        }\r\n        else {\r\n            return \"render\";\r\n        }\r\n    }\r\n})(Utils = exports.Utils || (exports.Utils = {}));\r\n\r\n\r\n/***/ }),\r\n/* 84 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar core_1 = __webpack_require__(2);\r\nvar Enums_1 = __webpack_require__(82);\r\n// tslint:disable:max-classes-per-file\r\nvar Exceptions;\r\n(function (Exceptions) {\r\n    /**\r\n     * Indicates the session description handler has closed.\r\n     * Occurs when getDescription() or setDescription() are called after close() has been called.\r\n     * Occurs when close() is called while getDescription() or setDescription() are in progress.\r\n     */\r\n    var ClosedSessionDescriptionHandlerError = /** @class */ (function (_super) {\r\n        tslib_1.__extends(ClosedSessionDescriptionHandlerError, _super);\r\n        function ClosedSessionDescriptionHandlerError() {\r\n            return _super.call(this, \"The session description handler has closed.\") || this;\r\n        }\r\n        return ClosedSessionDescriptionHandlerError;\r\n    }(core_1.Exception));\r\n    Exceptions.ClosedSessionDescriptionHandlerError = ClosedSessionDescriptionHandlerError;\r\n    /**\r\n     * Indicates the session terminated before the action completed.\r\n     */\r\n    var TerminatedSessionError = /** @class */ (function (_super) {\r\n        tslib_1.__extends(TerminatedSessionError, _super);\r\n        function TerminatedSessionError() {\r\n            return _super.call(this, \"The session has terminated.\") || this;\r\n        }\r\n        return TerminatedSessionError;\r\n    }(core_1.Exception));\r\n    Exceptions.TerminatedSessionError = TerminatedSessionError;\r\n    /**\r\n     * Unsupported session description content type.\r\n     */\r\n    var UnsupportedSessionDescriptionContentTypeError = /** @class */ (function (_super) {\r\n        tslib_1.__extends(UnsupportedSessionDescriptionContentTypeError, _super);\r\n        function UnsupportedSessionDescriptionContentTypeError(message) {\r\n            return _super.call(this, message ? message : \"Unsupported session description content type.\") || this;\r\n        }\r\n        return UnsupportedSessionDescriptionContentTypeError;\r\n    }(core_1.Exception));\r\n    Exceptions.UnsupportedSessionDescriptionContentTypeError = UnsupportedSessionDescriptionContentTypeError;\r\n})(Exceptions = exports.Exceptions || (exports.Exceptions = {}));\r\n/**\r\n * DEPRECATED: The original implementation of exceptions in this library attempted to\r\n * deal with the lack of type checking in JavaScript by adding a \"type\" attribute\r\n * to objects and using that to discriminate. On top of that it layered allcoated\r\n * \"code\" numbers and constant \"name\" strings. All of that is unnecessary when using\r\n * TypeScript, inheriting from Error and properly setting up the prototype chain...\r\n */\r\nvar LegacyException = /** @class */ (function (_super) {\r\n    tslib_1.__extends(LegacyException, _super);\r\n    function LegacyException(code, name, message) {\r\n        var _this = _super.call(this, message) || this;\r\n        _this.code = code;\r\n        _this.name = name;\r\n        _this.message = message;\r\n        return _this;\r\n    }\r\n    return LegacyException;\r\n}(core_1.Exception));\r\n(function (Exceptions) {\r\n    var ConfigurationError = /** @class */ (function (_super) {\r\n        tslib_1.__extends(ConfigurationError, _super);\r\n        function ConfigurationError(parameter, value) {\r\n            var _this = _super.call(this, 1, \"CONFIGURATION_ERROR\", (!value) ? \"Missing parameter: \" + parameter :\r\n                \"Invalid value \" + JSON.stringify(value) + \" for parameter '\" + parameter + \"'\") || this;\r\n            _this.type = Enums_1.TypeStrings.ConfigurationError;\r\n            _this.parameter = parameter;\r\n            _this.value = value;\r\n            return _this;\r\n        }\r\n        return ConfigurationError;\r\n    }(LegacyException));\r\n    Exceptions.ConfigurationError = ConfigurationError;\r\n    var InvalidStateError = /** @class */ (function (_super) {\r\n        tslib_1.__extends(InvalidStateError, _super);\r\n        function InvalidStateError(status) {\r\n            var _this = _super.call(this, 2, \"INVALID_STATE_ERROR\", \"Invalid status: \" + status) || this;\r\n            _this.type = Enums_1.TypeStrings.InvalidStateError;\r\n            _this.status = status;\r\n            return _this;\r\n        }\r\n        return InvalidStateError;\r\n    }(LegacyException));\r\n    Exceptions.InvalidStateError = InvalidStateError;\r\n    var NotSupportedError = /** @class */ (function (_super) {\r\n        tslib_1.__extends(NotSupportedError, _super);\r\n        function NotSupportedError(message) {\r\n            var _this = _super.call(this, 3, \"NOT_SUPPORTED_ERROR\", message) || this;\r\n            _this.type = Enums_1.TypeStrings.NotSupportedError;\r\n            return _this;\r\n        }\r\n        return NotSupportedError;\r\n    }(LegacyException));\r\n    Exceptions.NotSupportedError = NotSupportedError;\r\n    // 4 was GetDescriptionError, which was deprecated and now removed\r\n    var RenegotiationError = /** @class */ (function (_super) {\r\n        tslib_1.__extends(RenegotiationError, _super);\r\n        function RenegotiationError(message) {\r\n            var _this = _super.call(this, 5, \"RENEGOTIATION_ERROR\", message) || this;\r\n            _this.type = Enums_1.TypeStrings.RenegotiationError;\r\n            return _this;\r\n        }\r\n        return RenegotiationError;\r\n    }(LegacyException));\r\n    Exceptions.RenegotiationError = RenegotiationError;\r\n    var MethodParameterError = /** @class */ (function (_super) {\r\n        tslib_1.__extends(MethodParameterError, _super);\r\n        function MethodParameterError(method, parameter, value) {\r\n            var _this = _super.call(this, 6, \"METHOD_PARAMETER_ERROR\", (!value) ?\r\n                \"Missing parameter: \" + parameter :\r\n                \"Invalid value \" + JSON.stringify(value) + \" for parameter '\" + parameter + \"'\") || this;\r\n            _this.type = Enums_1.TypeStrings.MethodParameterError;\r\n            _this.method = method;\r\n            _this.parameter = parameter;\r\n            _this.value = value;\r\n            return _this;\r\n        }\r\n        return MethodParameterError;\r\n    }(LegacyException));\r\n    Exceptions.MethodParameterError = MethodParameterError;\r\n    // 7 was TransportError, which was replaced\r\n    var SessionDescriptionHandlerError = /** @class */ (function (_super) {\r\n        tslib_1.__extends(SessionDescriptionHandlerError, _super);\r\n        function SessionDescriptionHandlerError(method, error, message) {\r\n            var _this = _super.call(this, 8, \"SESSION_DESCRIPTION_HANDLER_ERROR\", message || \"Error with Session Description Handler\") || this;\r\n            _this.type = Enums_1.TypeStrings.SessionDescriptionHandlerError;\r\n            _this.method = method;\r\n            _this.error = error;\r\n            return _this;\r\n        }\r\n        return SessionDescriptionHandlerError;\r\n    }(LegacyException));\r\n    Exceptions.SessionDescriptionHandlerError = SessionDescriptionHandlerError;\r\n})(Exceptions = exports.Exceptions || (exports.Exceptions = {}));\r\n\r\n\r\n/***/ }),\r\n/* 85 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar ClientContext_1 = __webpack_require__(79);\r\nvar Constants_1 = __webpack_require__(80);\r\nvar core_1 = __webpack_require__(2);\r\nvar Enums_1 = __webpack_require__(82);\r\nvar Exceptions_1 = __webpack_require__(84);\r\nvar Utils_1 = __webpack_require__(83);\r\n/**\r\n * SIP Publish (SIP Extension for Event State Publication RFC3903)\r\n * @class Class creating a SIP PublishContext.\r\n */\r\nvar PublishContext = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PublishContext, _super);\r\n    function PublishContext(ua, target, event, options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = this;\r\n        options.extraHeaders = (options.extraHeaders || []).slice();\r\n        options.contentType = (options.contentType || \"text/plain\");\r\n        if (typeof options.expires !== \"number\" || (options.expires % 1) !== 0) {\r\n            options.expires = 3600;\r\n        }\r\n        else {\r\n            options.expires = Number(options.expires);\r\n        }\r\n        if (typeof (options.unpublishOnClose) !== \"boolean\") {\r\n            options.unpublishOnClose = true;\r\n        }\r\n        if (target === undefined || target === null || target === \"\") {\r\n            throw new Exceptions_1.Exceptions.MethodParameterError(\"Publish\", \"Target\", target);\r\n        }\r\n        else {\r\n            target = ua.normalizeTarget(target);\r\n            if (target === undefined) {\r\n                throw new Exceptions_1.Exceptions.MethodParameterError(\"Publish\", \"Target\", target);\r\n            }\r\n        }\r\n        _this = _super.call(this, ua, Constants_1.C.PUBLISH, target, options) || this;\r\n        _this.type = Enums_1.TypeStrings.PublishContext;\r\n        _this.options = options;\r\n        _this.target = target;\r\n        if (event === undefined || event === null || event === \"\") {\r\n            throw new Exceptions_1.Exceptions.MethodParameterError(\"Publish\", \"Event\", event);\r\n        }\r\n        else {\r\n            _this.event = event;\r\n        }\r\n        _this.logger = ua.getLogger(\"sip.publish\");\r\n        _this.pubRequestExpires = _this.options.expires;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Publish\r\n     * @param {string} Event body to publish, optional\r\n     */\r\n    PublishContext.prototype.publish = function (body) {\r\n        // Clean up before the run\r\n        if (this.publishRefreshTimer) {\r\n            clearTimeout(this.publishRefreshTimer);\r\n            this.publishRefreshTimer = undefined;\r\n        }\r\n        // is Inital or Modify request\r\n        this.options.body = body;\r\n        this.pubRequestBody = this.options.body;\r\n        if (this.pubRequestExpires === 0) {\r\n            // This is Initial request after unpublish\r\n            this.pubRequestExpires = this.options.expires;\r\n            this.pubRequestEtag = undefined;\r\n        }\r\n        if (!(this.ua.publishers[this.target.toString() + \":\" + this.event])) {\r\n            this.ua.publishers[this.target.toString() + \":\" + this.event] = this;\r\n        }\r\n        this.sendPublishRequest();\r\n    };\r\n    /**\r\n     * Unpublish\r\n     */\r\n    PublishContext.prototype.unpublish = function () {\r\n        // Clean up before the run\r\n        if (this.publishRefreshTimer) {\r\n            clearTimeout(this.publishRefreshTimer);\r\n            this.publishRefreshTimer = undefined;\r\n        }\r\n        this.pubRequestBody = undefined;\r\n        this.pubRequestExpires = 0;\r\n        if (this.pubRequestEtag !== undefined) {\r\n            this.sendPublishRequest();\r\n        }\r\n    };\r\n    /**\r\n     * Close\r\n     */\r\n    PublishContext.prototype.close = function () {\r\n        // Send unpublish, if requested\r\n        if (this.options.unpublishOnClose) {\r\n            this.unpublish();\r\n        }\r\n        else {\r\n            if (this.publishRefreshTimer) {\r\n                clearTimeout(this.publishRefreshTimer);\r\n                this.publishRefreshTimer = undefined;\r\n            }\r\n            this.pubRequestBody = undefined;\r\n            this.pubRequestExpires = 0;\r\n            this.pubRequestEtag = undefined;\r\n        }\r\n        if (this.ua.publishers[this.target.toString() + \":\" + this.event]) {\r\n            delete this.ua.publishers[this.target.toString() + \":\" + this.event];\r\n        }\r\n    };\r\n    PublishContext.prototype.onRequestTimeout = function () {\r\n        _super.prototype.onRequestTimeout.call(this);\r\n        this.emit(\"unpublished\", undefined, Constants_1.C.causes.REQUEST_TIMEOUT);\r\n    };\r\n    PublishContext.prototype.onTransportError = function () {\r\n        _super.prototype.onTransportError.call(this);\r\n        this.emit(\"unpublished\", undefined, Constants_1.C.causes.CONNECTION_ERROR);\r\n    };\r\n    PublishContext.prototype.receiveResponse = function (response) {\r\n        var _this = this;\r\n        var statusCode = response.statusCode || 0;\r\n        var cause = Utils_1.Utils.getReasonPhrase(statusCode);\r\n        switch (true) {\r\n            case /^1[0-9]{2}$/.test(statusCode.toString()):\r\n                this.emit(\"progress\", response, cause);\r\n                break;\r\n            case /^2[0-9]{2}$/.test(statusCode.toString()):\r\n                // Set SIP-Etag\r\n                if (response.hasHeader(\"SIP-ETag\")) {\r\n                    this.pubRequestEtag = response.getHeader(\"SIP-ETag\");\r\n                }\r\n                else {\r\n                    this.logger.warn(\"SIP-ETag header missing in a 200-class response to PUBLISH\");\r\n                }\r\n                // Update Expire\r\n                if (response.hasHeader(\"Expires\")) {\r\n                    var expires = Number(response.getHeader(\"Expires\"));\r\n                    if (typeof expires === \"number\" && expires >= 0 && expires <= this.pubRequestExpires) {\r\n                        this.pubRequestExpires = expires;\r\n                    }\r\n                    else {\r\n                        this.logger.warn(\"Bad Expires header in a 200-class response to PUBLISH\");\r\n                    }\r\n                }\r\n                else {\r\n                    this.logger.warn(\"Expires header missing in a 200-class response to PUBLISH\");\r\n                }\r\n                if (this.pubRequestExpires !== 0) {\r\n                    // Schedule refresh\r\n                    this.publishRefreshTimer = setTimeout(function () { return _this.refreshRequest(); }, this.pubRequestExpires * 900);\r\n                    this.emit(\"published\", response, cause);\r\n                }\r\n                else {\r\n                    this.emit(\"unpublished\", response, cause);\r\n                }\r\n                break;\r\n            case /^412$/.test(statusCode.toString()):\r\n                // 412 code means no matching ETag - possibly the PUBLISH expired\r\n                // Resubmit as new request, if the current request is not a \"remove\"\r\n                if (this.pubRequestEtag !== undefined && this.pubRequestExpires !== 0) {\r\n                    this.logger.warn(\"412 response to PUBLISH, recovering\");\r\n                    this.pubRequestEtag = undefined;\r\n                    this.emit(\"progress\", response, cause);\r\n                    this.publish(this.options.body);\r\n                }\r\n                else {\r\n                    this.logger.warn(\"412 response to PUBLISH, recovery failed\");\r\n                    this.pubRequestExpires = 0;\r\n                    this.emit(\"failed\", response, cause);\r\n                    this.emit(\"unpublished\", response, cause);\r\n                }\r\n                break;\r\n            case /^423$/.test(statusCode.toString()):\r\n                // 423 code means we need to adjust the Expires interval up\r\n                if (this.pubRequestExpires !== 0 && response.hasHeader(\"Min-Expires\")) {\r\n                    var minExpires = Number(response.getHeader(\"Min-Expires\"));\r\n                    if (typeof minExpires === \"number\" || minExpires > this.pubRequestExpires) {\r\n                        this.logger.warn(\"423 code in response to PUBLISH, adjusting the Expires value and trying to recover\");\r\n                        this.pubRequestExpires = minExpires;\r\n                        this.emit(\"progress\", response, cause);\r\n                        this.publish(this.options.body);\r\n                    }\r\n                    else {\r\n                        this.logger.warn(\"Bad 423 response Min-Expires header received for PUBLISH\");\r\n                        this.pubRequestExpires = 0;\r\n                        this.emit(\"failed\", response, cause);\r\n                        this.emit(\"unpublished\", response, cause);\r\n                    }\r\n                }\r\n                else {\r\n                    this.logger.warn(\"423 response to PUBLISH, recovery failed\");\r\n                    this.pubRequestExpires = 0;\r\n                    this.emit(\"failed\", response, cause);\r\n                    this.emit(\"unpublished\", response, cause);\r\n                }\r\n                break;\r\n            default:\r\n                this.pubRequestExpires = 0;\r\n                this.emit(\"failed\", response, cause);\r\n                this.emit(\"unpublished\", response, cause);\r\n                break;\r\n        }\r\n        // Do the cleanup\r\n        if (this.pubRequestExpires === 0) {\r\n            if (this.publishRefreshTimer) {\r\n                clearTimeout(this.publishRefreshTimer);\r\n                this.publishRefreshTimer = undefined;\r\n            }\r\n            this.pubRequestBody = undefined;\r\n            this.pubRequestEtag = undefined;\r\n        }\r\n    };\r\n    PublishContext.prototype.send = function () {\r\n        var _this = this;\r\n        this.ua.userAgentCore.publish(this.request, {\r\n            onAccept: function (response) { return _this.receiveResponse(response.message); },\r\n            onProgress: function (response) { return _this.receiveResponse(response.message); },\r\n            onRedirect: function (response) { return _this.receiveResponse(response.message); },\r\n            onReject: function (response) { return _this.receiveResponse(response.message); },\r\n            onTrying: function (response) { return _this.receiveResponse(response.message); }\r\n        });\r\n        return this;\r\n    };\r\n    PublishContext.prototype.refreshRequest = function () {\r\n        // Clean up before the run\r\n        if (this.publishRefreshTimer) {\r\n            clearTimeout(this.publishRefreshTimer);\r\n            this.publishRefreshTimer = undefined;\r\n        }\r\n        // This is Refresh request\r\n        this.pubRequestBody = undefined;\r\n        if (this.pubRequestEtag === undefined) {\r\n            // Request not valid\r\n            throw new Exceptions_1.Exceptions.MethodParameterError(\"Publish\", \"Body\", undefined);\r\n        }\r\n        if (this.pubRequestExpires === 0) {\r\n            // Request not valid\r\n            throw new Exceptions_1.Exceptions.MethodParameterError(\"Publish\", \"Expire\", this.pubRequestExpires);\r\n        }\r\n        this.sendPublishRequest();\r\n    };\r\n    PublishContext.prototype.sendPublishRequest = function () {\r\n        var reqOptions = Object.create(this.options || Object.prototype);\r\n        reqOptions.extraHeaders = (this.options.extraHeaders || []).slice();\r\n        reqOptions.extraHeaders.push(\"Event: \" + this.event);\r\n        reqOptions.extraHeaders.push(\"Expires: \" + this.pubRequestExpires);\r\n        if (this.pubRequestEtag !== undefined) {\r\n            reqOptions.extraHeaders.push(\"SIP-If-Match: \" + this.pubRequestEtag);\r\n        }\r\n        var ruri = this.target instanceof core_1.URI ? this.target : this.ua.normalizeTarget(this.target);\r\n        if (!ruri) {\r\n            throw new Error(\"ruri undefined.\");\r\n        }\r\n        var params = this.options.params || {};\r\n        var bodyObj;\r\n        if (this.pubRequestBody !== undefined) {\r\n            bodyObj = {\r\n                body: this.pubRequestBody,\r\n                contentType: this.options.contentType\r\n            };\r\n        }\r\n        var body;\r\n        if (bodyObj) {\r\n            body = Utils_1.Utils.fromBodyObj(bodyObj);\r\n        }\r\n        this.request = this.ua.userAgentCore.makeOutgoingRequestMessage(Constants_1.C.PUBLISH, ruri, params.fromUri ? params.fromUri : this.ua.userAgentCore.configuration.aor, params.toUri ? params.toUri : this.target, params, reqOptions.extraHeaders, body);\r\n        this.send();\r\n    };\r\n    return PublishContext;\r\n}(ClientContext_1.ClientContext));\r\nexports.PublishContext = PublishContext;\r\n\r\n\r\n/***/ }),\r\n/* 86 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar ClientContext_1 = __webpack_require__(79);\r\nvar Constants_1 = __webpack_require__(80);\r\nvar core_1 = __webpack_require__(2);\r\nvar Enums_1 = __webpack_require__(82);\r\nvar Exceptions_1 = __webpack_require__(84);\r\nvar ServerContext_1 = __webpack_require__(87);\r\n// tslint:disable-next-line:max-classes-per-file\r\nvar ReferClientContext = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ReferClientContext, _super);\r\n    function ReferClientContext(ua, applicant, target, options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = this;\r\n        if (ua === undefined || applicant === undefined || target === undefined) {\r\n            throw new TypeError(\"Not enough arguments\");\r\n        }\r\n        _this = _super.call(this, ua, Constants_1.C.REFER, applicant.remoteIdentity.uri.toString(), options) || this;\r\n        _this.type = Enums_1.TypeStrings.ReferClientContext;\r\n        _this.options = options;\r\n        _this.extraHeaders = (_this.options.extraHeaders || []).slice();\r\n        _this.applicant = applicant;\r\n        _this.target = _this.initReferTo(target);\r\n        if (_this.ua) {\r\n            _this.extraHeaders.push(\"Referred-By: <\" + _this.ua.configuration.uri + \">\");\r\n        }\r\n        // TODO: Check that this is correct isc/icc\r\n        _this.extraHeaders.push(\"Contact: \" + applicant.contact);\r\n        // this is UA.C.ALLOWED_METHODS, removed to get around circular dependency\r\n        _this.extraHeaders.push(\"Allow: \" + [\r\n            \"ACK\",\r\n            \"CANCEL\",\r\n            \"INVITE\",\r\n            \"MESSAGE\",\r\n            \"BYE\",\r\n            \"OPTIONS\",\r\n            \"INFO\",\r\n            \"NOTIFY\",\r\n            \"REFER\"\r\n        ].toString());\r\n        _this.extraHeaders.push(\"Refer-To: \" + _this.target);\r\n        _this.errorListener = _this.onTransportError.bind(_this);\r\n        if (ua.transport) {\r\n            ua.transport.on(\"transportError\", _this.errorListener);\r\n        }\r\n        return _this;\r\n    }\r\n    ReferClientContext.prototype.refer = function (options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        var extraHeaders = (this.extraHeaders || []).slice();\r\n        if (options.extraHeaders) {\r\n            extraHeaders.concat(options.extraHeaders);\r\n        }\r\n        this.applicant.sendRequest(Constants_1.C.REFER, {\r\n            extraHeaders: this.extraHeaders,\r\n            receiveResponse: function (response) {\r\n                var statusCode = response && response.statusCode ? response.statusCode.toString() : \"\";\r\n                if (/^1[0-9]{2}$/.test(statusCode)) {\r\n                    _this.emit(\"referRequestProgress\", _this);\r\n                }\r\n                else if (/^2[0-9]{2}$/.test(statusCode)) {\r\n                    _this.emit(\"referRequestAccepted\", _this);\r\n                }\r\n                else if (/^[4-6][0-9]{2}$/.test(statusCode)) {\r\n                    _this.emit(\"referRequestRejected\", _this);\r\n                }\r\n                if (options.receiveResponse) {\r\n                    options.receiveResponse(response);\r\n                }\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    ReferClientContext.prototype.receiveNotify = function (request) {\r\n        // If we can correctly handle this, then we need to send a 200 OK!\r\n        var contentType = request.message.hasHeader(\"Content-Type\") ?\r\n            request.message.getHeader(\"Content-Type\") : undefined;\r\n        if (contentType && contentType.search(/^message\\/sipfrag/) !== -1) {\r\n            var messageBody = core_1.Grammar.parse(request.message.body, \"sipfrag\");\r\n            if (messageBody === -1) {\r\n                request.reject({\r\n                    statusCode: 489,\r\n                    reasonPhrase: \"Bad Event\"\r\n                });\r\n                return;\r\n            }\r\n            switch (true) {\r\n                case (/^1[0-9]{2}$/.test(messageBody.status_code)):\r\n                    this.emit(\"referProgress\", this);\r\n                    break;\r\n                case (/^2[0-9]{2}$/.test(messageBody.status_code)):\r\n                    this.emit(\"referAccepted\", this);\r\n                    if (!this.options.activeAfterTransfer && this.applicant.terminate) {\r\n                        this.applicant.terminate();\r\n                    }\r\n                    break;\r\n                default:\r\n                    this.emit(\"referRejected\", this);\r\n                    break;\r\n            }\r\n            request.accept();\r\n            this.emit(\"notify\", request.message);\r\n            return;\r\n        }\r\n        request.reject({\r\n            statusCode: 489,\r\n            reasonPhrase: \"Bad Event\"\r\n        });\r\n    };\r\n    ReferClientContext.prototype.initReferTo = function (target) {\r\n        var stringOrURI;\r\n        if (typeof target === \"string\") {\r\n            // REFER without Replaces (Blind Transfer)\r\n            var targetString = core_1.Grammar.parse(target, \"Refer_To\");\r\n            stringOrURI = targetString && targetString.uri ? targetString.uri : target;\r\n            // Check target validity\r\n            var targetUri = this.ua.normalizeTarget(target);\r\n            if (!targetUri) {\r\n                throw new TypeError(\"Invalid target: \" + target);\r\n            }\r\n            stringOrURI = targetUri;\r\n        }\r\n        else {\r\n            // REFER with Replaces (Attended Transfer)\r\n            if (!target.session) {\r\n                throw new Error(\"Session undefined.\");\r\n            }\r\n            var displayName = target.remoteIdentity.friendlyName;\r\n            var remoteTarget = target.session.remoteTarget.toString();\r\n            var callId = target.session.callId;\r\n            var remoteTag = target.session.remoteTag;\r\n            var localTag = target.session.localTag;\r\n            var replaces = encodeURIComponent(callId + \";to-tag=\" + remoteTag + \";from-tag=\" + localTag);\r\n            stringOrURI = \"\\\"\" + displayName + \"\\\" <\" + remoteTarget + \"?Replaces=\" + replaces + \">\";\r\n        }\r\n        return stringOrURI;\r\n    };\r\n    return ReferClientContext;\r\n}(ClientContext_1.ClientContext));\r\nexports.ReferClientContext = ReferClientContext;\r\n// tslint:disable-next-line:max-classes-per-file\r\nvar ReferServerContext = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ReferServerContext, _super);\r\n    function ReferServerContext(ua, incomingRequest, session) {\r\n        var _this = _super.call(this, ua, incomingRequest) || this;\r\n        _this.session = session;\r\n        _this.type = Enums_1.TypeStrings.ReferServerContext;\r\n        _this.ua = ua;\r\n        _this.status = Enums_1.SessionStatus.STATUS_INVITE_RECEIVED;\r\n        _this.fromTag = _this.request.fromTag;\r\n        _this.id = _this.request.callId + _this.fromTag;\r\n        _this.contact = _this.ua.contact.toString();\r\n        _this.logger = ua.getLogger(\"sip.referservercontext\", _this.id);\r\n        // Needed to send the NOTIFY's\r\n        _this.cseq = Math.floor(Math.random() * 10000);\r\n        _this.callId = _this.request.callId;\r\n        _this.fromUri = _this.request.to.uri;\r\n        _this.fromTag = _this.request.to.parameters.tag;\r\n        _this.remoteTarget = _this.request.headers.Contact[0].parsed.uri;\r\n        _this.toUri = _this.request.from.uri;\r\n        _this.toTag = _this.request.fromTag;\r\n        _this.routeSet = _this.request.getHeaders(\"record-route\");\r\n        // RFC 3515 2.4.1\r\n        if (!_this.request.hasHeader(\"refer-to\")) {\r\n            _this.logger.warn(\"Invalid REFER packet. A refer-to header is required. Rejecting refer.\");\r\n            _this.reject();\r\n            return _this;\r\n        }\r\n        _this.referTo = _this.request.parseHeader(\"refer-to\");\r\n        // TODO: Must set expiration timer and send 202 if there is no response by then\r\n        _this.referredSession = _this.ua.findSession(_this.request);\r\n        if (_this.request.hasHeader(\"referred-by\")) {\r\n            _this.referredBy = _this.request.getHeader(\"referred-by\");\r\n        }\r\n        if (_this.referTo.uri.hasHeader(\"replaces\")) {\r\n            _this.replaces = _this.referTo.uri.getHeader(\"replaces\");\r\n        }\r\n        _this.errorListener = _this.onTransportError.bind(_this);\r\n        if (ua.transport) {\r\n            ua.transport.on(\"transportError\", _this.errorListener);\r\n        }\r\n        _this.status = Enums_1.SessionStatus.STATUS_WAITING_FOR_ANSWER;\r\n        return _this;\r\n    }\r\n    ReferServerContext.prototype.progress = function () {\r\n        if (this.status !== Enums_1.SessionStatus.STATUS_WAITING_FOR_ANSWER) {\r\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\r\n        }\r\n        this.incomingRequest.trying();\r\n    };\r\n    ReferServerContext.prototype.reject = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        if (this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\r\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\r\n        }\r\n        this.logger.log(\"Rejecting refer\");\r\n        this.status = Enums_1.SessionStatus.STATUS_TERMINATED;\r\n        _super.prototype.reject.call(this, options);\r\n        this.emit(\"referRequestRejected\", this);\r\n    };\r\n    ReferServerContext.prototype.accept = function (options, modifiers) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        if (this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_ANSWER) {\r\n            this.status = Enums_1.SessionStatus.STATUS_ANSWERED;\r\n        }\r\n        else {\r\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\r\n        }\r\n        this.incomingRequest.accept({\r\n            statusCode: 202,\r\n            reasonPhrase: \"Accepted\"\r\n        });\r\n        this.emit(\"referRequestAccepted\", this);\r\n        if (options.followRefer) {\r\n            this.logger.log(\"Accepted refer, attempting to automatically follow it\");\r\n            var target = this.referTo.uri;\r\n            if (!target.scheme || !target.scheme.match(\"^sips?$\")) {\r\n                this.logger.error(\"SIP.js can only automatically follow SIP refer target\");\r\n                this.reject();\r\n                return;\r\n            }\r\n            var inviteOptions = options.inviteOptions || {};\r\n            var extraHeaders = (inviteOptions.extraHeaders || []).slice();\r\n            if (this.replaces) {\r\n                // decodeURIComponent is a holdover from 2c086eb4. Not sure that it is actually necessary\r\n                extraHeaders.push(\"Replaces: \" + decodeURIComponent(this.replaces));\r\n            }\r\n            if (this.referredBy) {\r\n                extraHeaders.push(\"Referred-By: \" + this.referredBy);\r\n            }\r\n            inviteOptions.extraHeaders = extraHeaders;\r\n            target.clearHeaders();\r\n            this.targetSession = this.ua.invite(target.toString(), inviteOptions, modifiers);\r\n            this.emit(\"referInviteSent\", this);\r\n            if (this.targetSession) {\r\n                this.targetSession.once(\"progress\", function (response) {\r\n                    var statusCode = response.statusCode || 100;\r\n                    var reasonPhrase = response.reasonPhrase;\r\n                    _this.sendNotify((\"SIP/2.0 \" + statusCode + \" \" + reasonPhrase).trim());\r\n                    _this.emit(\"referProgress\", _this);\r\n                    if (_this.referredSession) {\r\n                        _this.referredSession.emit(\"referProgress\", _this);\r\n                    }\r\n                });\r\n                this.targetSession.once(\"accepted\", function () {\r\n                    _this.logger.log(\"Successfully followed the refer\");\r\n                    _this.sendNotify(\"SIP/2.0 200 OK\");\r\n                    _this.emit(\"referAccepted\", _this);\r\n                    if (_this.referredSession) {\r\n                        _this.referredSession.emit(\"referAccepted\", _this);\r\n                    }\r\n                });\r\n                var referFailed = function (response) {\r\n                    if (_this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\r\n                        return; // No throw here because it is possible this gets called multiple times\r\n                    }\r\n                    _this.logger.log(\"Refer was not successful. Resuming session\");\r\n                    if (response && response.statusCode === 429) {\r\n                        _this.logger.log(\"Alerting referrer that identity is required.\");\r\n                        _this.sendNotify(\"SIP/2.0 429 Provide Referrer Identity\");\r\n                        return;\r\n                    }\r\n                    _this.sendNotify(\"SIP/2.0 603 Declined\");\r\n                    // Must change the status after sending the final Notify or it will not send due to check\r\n                    _this.status = Enums_1.SessionStatus.STATUS_TERMINATED;\r\n                    _this.emit(\"referRejected\", _this);\r\n                    if (_this.referredSession) {\r\n                        _this.referredSession.emit(\"referRejected\");\r\n                    }\r\n                };\r\n                this.targetSession.once(\"rejected\", referFailed);\r\n                this.targetSession.once(\"failed\", referFailed);\r\n            }\r\n        }\r\n        else {\r\n            this.logger.log(\"Accepted refer, but did not automatically follow it\");\r\n            this.sendNotify(\"SIP/2.0 200 OK\");\r\n            this.emit(\"referAccepted\", this);\r\n            if (this.referredSession) {\r\n                this.referredSession.emit(\"referAccepted\", this);\r\n            }\r\n        }\r\n    };\r\n    ReferServerContext.prototype.sendNotify = function (bodyStr) {\r\n        // FIXME: Ported this. Clean it up. Session knows its state.\r\n        if (this.status !== Enums_1.SessionStatus.STATUS_ANSWERED) {\r\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\r\n        }\r\n        if (core_1.Grammar.parse(bodyStr, \"sipfrag\") === -1) {\r\n            throw new Error(\"sipfrag body is required to send notify for refer\");\r\n        }\r\n        var body = {\r\n            contentDisposition: \"render\",\r\n            contentType: \"message/sipfrag\",\r\n            content: bodyStr\r\n        };\r\n        // NOTIFY requests sent in same dialog as in dialog REFER.\r\n        if (this.session) {\r\n            this.session.notify(undefined, {\r\n                extraHeaders: [\r\n                    \"Event: refer\",\r\n                    \"Subscription-State: terminated\",\r\n                ],\r\n                body: body\r\n            });\r\n            return;\r\n        }\r\n        // The implicit subscription created by a REFER is the same as a\r\n        // subscription created with a SUBSCRIBE request.  The agent issuing the\r\n        // REFER can terminate this subscription prematurely by unsubscribing\r\n        // using the mechanisms described in [2].  Terminating a subscription,\r\n        // either by explicitly unsubscribing or rejecting NOTIFY, is not an\r\n        // indication that the referenced request should be withdrawn or\r\n        // abandoned.\r\n        // https://tools.ietf.org/html/rfc3515#section-2.4.4\r\n        // NOTIFY requests sent in new dialog for out of dialog REFER.\r\n        // FIXME: TODO: This should be done in a subscribe dialog to satisfy the above.\r\n        var request = this.ua.userAgentCore.makeOutgoingRequestMessage(Constants_1.C.NOTIFY, this.remoteTarget, this.fromUri, this.toUri, {\r\n            cseq: this.cseq += 1,\r\n            callId: this.callId,\r\n            fromTag: this.fromTag,\r\n            toTag: this.toTag,\r\n            routeSet: this.routeSet\r\n        }, [\r\n            \"Event: refer\",\r\n            \"Subscription-State: terminated\",\r\n            \"Content-Type: message/sipfrag\"\r\n        ], body);\r\n        var transport = this.ua.transport;\r\n        if (!transport) {\r\n            throw new Error(\"Transport undefined.\");\r\n        }\r\n        var user = {\r\n            loggerFactory: this.ua.getLoggerFactory()\r\n        };\r\n        var nic = new core_1.NonInviteClientTransaction(request, transport, user);\r\n    };\r\n    ReferServerContext.prototype.on = function (name, callback) { return _super.prototype.on.call(this, name, callback); };\r\n    return ReferServerContext;\r\n}(ServerContext_1.ServerContext));\r\nexports.ReferServerContext = ReferServerContext;\r\n\r\n\r\n/***/ }),\r\n/* 87 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar events_1 = __webpack_require__(31);\r\nvar Constants_1 = __webpack_require__(80);\r\nvar core_1 = __webpack_require__(2);\r\nvar Enums_1 = __webpack_require__(82);\r\nvar Utils_1 = __webpack_require__(83);\r\nvar ServerContext = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ServerContext, _super);\r\n    function ServerContext(ua, incomingRequest) {\r\n        var _this = _super.call(this) || this;\r\n        _this.incomingRequest = incomingRequest;\r\n        _this.data = {};\r\n        ServerContext.initializer(_this, ua, incomingRequest);\r\n        return _this;\r\n    }\r\n    // hack to get around our multiple inheritance issues\r\n    ServerContext.initializer = function (objectToConstruct, ua, incomingRequest) {\r\n        var request = incomingRequest.message;\r\n        objectToConstruct.type = Enums_1.TypeStrings.ServerContext;\r\n        objectToConstruct.ua = ua;\r\n        objectToConstruct.logger = ua.getLogger(\"sip.servercontext\");\r\n        objectToConstruct.request = request;\r\n        if (request.body) {\r\n            objectToConstruct.body = request.body;\r\n        }\r\n        if (request.hasHeader(\"Content-Type\")) {\r\n            objectToConstruct.contentType = request.getHeader(\"Content-Type\");\r\n        }\r\n        objectToConstruct.method = request.method;\r\n        objectToConstruct.localIdentity = request.to;\r\n        objectToConstruct.remoteIdentity = request.from;\r\n        var hasAssertedIdentity = request.hasHeader(\"P-Asserted-Identity\");\r\n        if (hasAssertedIdentity) {\r\n            var assertedIdentity = request.getHeader(\"P-Asserted-Identity\");\r\n            if (assertedIdentity) {\r\n                objectToConstruct.assertedIdentity = core_1.Grammar.nameAddrHeaderParse(assertedIdentity);\r\n            }\r\n        }\r\n    };\r\n    ServerContext.prototype.progress = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        options.statusCode = options.statusCode || 180;\r\n        options.minCode = 100;\r\n        options.maxCode = 199;\r\n        options.events = [\"progress\"];\r\n        return this.reply(options);\r\n    };\r\n    ServerContext.prototype.accept = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        options.statusCode = options.statusCode || 200;\r\n        options.minCode = 200;\r\n        options.maxCode = 299;\r\n        options.events = [\"accepted\"];\r\n        return this.reply(options);\r\n    };\r\n    ServerContext.prototype.reject = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        options.statusCode = options.statusCode || 480;\r\n        options.minCode = 300;\r\n        options.maxCode = 699;\r\n        options.events = [\"rejected\", \"failed\"];\r\n        return this.reply(options);\r\n    };\r\n    ServerContext.prototype.reply = function (options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        var statusCode = options.statusCode || 100;\r\n        var minCode = options.minCode || 100;\r\n        var maxCode = options.maxCode || 699;\r\n        var reasonPhrase = Utils_1.Utils.getReasonPhrase(statusCode, options.reasonPhrase);\r\n        var extraHeaders = options.extraHeaders || [];\r\n        var body = options.body ? core_1.fromBodyLegacy(options.body) : undefined;\r\n        var events = options.events || [];\r\n        if (statusCode < minCode || statusCode > maxCode) {\r\n            throw new TypeError(\"Invalid statusCode: \" + statusCode);\r\n        }\r\n        var responseOptions = {\r\n            statusCode: statusCode,\r\n            reasonPhrase: reasonPhrase,\r\n            extraHeaders: extraHeaders,\r\n            body: body\r\n        };\r\n        var response;\r\n        var statusCodeString = statusCode.toString();\r\n        switch (true) {\r\n            case /^100$/.test(statusCodeString):\r\n                response = this.incomingRequest.trying(responseOptions).message;\r\n                break;\r\n            case /^1[0-9]{2}$/.test(statusCodeString):\r\n                response = this.incomingRequest.progress(responseOptions).message;\r\n                break;\r\n            case /^2[0-9]{2}$/.test(statusCodeString):\r\n                response = this.incomingRequest.accept(responseOptions).message;\r\n                break;\r\n            case /^3[0-9]{2}$/.test(statusCodeString):\r\n                response = this.incomingRequest.redirect([], responseOptions).message;\r\n                break;\r\n            case /^[4-6][0-9]{2}$/.test(statusCodeString):\r\n                response = this.incomingRequest.reject(responseOptions).message;\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid status code \" + statusCode);\r\n        }\r\n        events.forEach(function (event) {\r\n            _this.emit(event, response, reasonPhrase);\r\n        });\r\n        return this;\r\n    };\r\n    ServerContext.prototype.onRequestTimeout = function () {\r\n        this.emit(\"failed\", undefined, Constants_1.C.causes.REQUEST_TIMEOUT);\r\n    };\r\n    ServerContext.prototype.onTransportError = function () {\r\n        this.emit(\"failed\", undefined, Constants_1.C.causes.CONNECTION_ERROR);\r\n    };\r\n    return ServerContext;\r\n}(events_1.EventEmitter));\r\nexports.ServerContext = ServerContext;\r\n\r\n\r\n/***/ }),\r\n/* 88 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar ClientContext_1 = __webpack_require__(79);\r\nvar Constants_1 = __webpack_require__(80);\r\nvar core_1 = __webpack_require__(2);\r\nvar Enums_1 = __webpack_require__(82);\r\nvar Exceptions_1 = __webpack_require__(84);\r\nvar Utils_1 = __webpack_require__(83);\r\n/**\r\n * Configuration load.\r\n * @private\r\n * returns {any}\r\n */\r\nfunction loadConfig(configuration) {\r\n    var settings = {\r\n        expires: 600,\r\n        extraContactHeaderParams: [],\r\n        instanceId: undefined,\r\n        params: {},\r\n        regId: undefined,\r\n        registrar: undefined,\r\n    };\r\n    var configCheck = getConfigurationCheck();\r\n    // Check Mandatory parameters\r\n    for (var parameter in configCheck.mandatory) {\r\n        if (!configuration.hasOwnProperty(parameter)) {\r\n            throw new Exceptions_1.Exceptions.ConfigurationError(parameter);\r\n        }\r\n        else {\r\n            var value = configuration[parameter];\r\n            var checkedValue = configCheck.mandatory[parameter](value);\r\n            if (checkedValue !== undefined) {\r\n                settings[parameter] = checkedValue;\r\n            }\r\n            else {\r\n                throw new Exceptions_1.Exceptions.ConfigurationError(parameter, value);\r\n            }\r\n        }\r\n    }\r\n    // Check Optional parameters\r\n    for (var parameter in configCheck.optional) {\r\n        if (configuration.hasOwnProperty(parameter)) {\r\n            var value = configuration[parameter];\r\n            // If the parameter value is an empty array, but shouldn't be, apply its default value.\r\n            if (value instanceof Array && value.length === 0) {\r\n                continue;\r\n            }\r\n            // If the parameter value is null, empty string, or undefined then apply its default value.\r\n            // If it's a number with NaN value then also apply its default value.\r\n            // NOTE: JS does not allow \"value === NaN\", the following does the work:\r\n            if (value === null || value === \"\" || value === undefined ||\r\n                (typeof (value) === \"number\" && isNaN(value))) {\r\n                continue;\r\n            }\r\n            var checkedValue = configCheck.optional[parameter](value);\r\n            if (checkedValue !== undefined) {\r\n                settings[parameter] = checkedValue;\r\n            }\r\n            else {\r\n                throw new Exceptions_1.Exceptions.ConfigurationError(parameter, value);\r\n            }\r\n        }\r\n    }\r\n    return settings;\r\n}\r\nfunction getConfigurationCheck() {\r\n    return {\r\n        mandatory: {},\r\n        optional: {\r\n            expires: function (expires) {\r\n                if (Utils_1.Utils.isDecimal(expires)) {\r\n                    var value = Number(expires);\r\n                    if (value >= 0) {\r\n                        return value;\r\n                    }\r\n                }\r\n            },\r\n            extraContactHeaderParams: function (extraContactHeaderParams) {\r\n                if (extraContactHeaderParams instanceof Array) {\r\n                    return extraContactHeaderParams.filter(function (contactHeaderParam) { return (typeof contactHeaderParam === \"string\"); });\r\n                }\r\n            },\r\n            instanceId: function (instanceId) {\r\n                if (typeof instanceId !== \"string\") {\r\n                    return;\r\n                }\r\n                if ((/^uuid:/i.test(instanceId))) {\r\n                    instanceId = instanceId.substr(5);\r\n                }\r\n                if (core_1.Grammar.parse(instanceId, \"uuid\") === -1) {\r\n                    return;\r\n                }\r\n                else {\r\n                    return instanceId;\r\n                }\r\n            },\r\n            params: function (params) {\r\n                if (typeof params === \"object\") {\r\n                    return params;\r\n                }\r\n            },\r\n            regId: function (regId) {\r\n                if (Utils_1.Utils.isDecimal(regId)) {\r\n                    var value = Number(regId);\r\n                    if (value >= 0) {\r\n                        return value;\r\n                    }\r\n                }\r\n            },\r\n            registrar: function (registrar) {\r\n                if (typeof registrar !== \"string\") {\r\n                    return;\r\n                }\r\n                if (!/^sip:/i.test(registrar)) {\r\n                    registrar = Constants_1.C.SIP + \":\" + registrar;\r\n                }\r\n                var parsed = core_1.Grammar.URIParse(registrar);\r\n                if (!parsed) {\r\n                    return;\r\n                }\r\n                else if (parsed.user) {\r\n                    return;\r\n                }\r\n                else {\r\n                    return parsed;\r\n                }\r\n            }\r\n        }\r\n    };\r\n}\r\nvar RegisterContext = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RegisterContext, _super);\r\n    function RegisterContext(ua, options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = this;\r\n        var settings = loadConfig(options);\r\n        if (settings.regId && !settings.instanceId) {\r\n            settings.instanceId = Utils_1.Utils.newUUID();\r\n        }\r\n        else if (!settings.regId && settings.instanceId) {\r\n            settings.regId = 1;\r\n        }\r\n        settings.params.toUri = settings.params.toUri || ua.configuration.uri;\r\n        settings.params.toDisplayName = settings.params.toDisplayName || ua.configuration.displayName;\r\n        settings.params.callId = settings.params.callId || Utils_1.Utils.createRandomToken(22);\r\n        settings.params.cseq = settings.params.cseq || Math.floor(Math.random() * 10000);\r\n        /* If no 'registrarServer' is set use the 'uri' value without user portion. */\r\n        if (!settings.registrar) {\r\n            var registrarServer = {};\r\n            if (typeof ua.configuration.uri === \"object\") {\r\n                registrarServer = ua.configuration.uri.clone();\r\n                registrarServer.user = undefined;\r\n            }\r\n            else {\r\n                registrarServer = ua.configuration.uri;\r\n            }\r\n            settings.registrar = registrarServer;\r\n        }\r\n        _this = _super.call(this, ua, Constants_1.C.REGISTER, settings.registrar, settings) || this;\r\n        _this.type = Enums_1.TypeStrings.RegisterContext;\r\n        _this.options = settings;\r\n        _this.logger = ua.getLogger(\"sip.registercontext\");\r\n        _this.logger.log(\"configuration parameters for RegisterContext after validation:\");\r\n        for (var parameter in settings) {\r\n            if (settings.hasOwnProperty(parameter)) {\r\n                _this.logger.log(\"· \" + parameter + \": \" + JSON.stringify(settings[parameter]));\r\n            }\r\n        }\r\n        // Registration expires\r\n        _this.expires = settings.expires;\r\n        // Contact header\r\n        _this.contact = ua.contact.toString();\r\n        // Set status\r\n        _this.registered = false;\r\n        ua.transport.on(\"disconnected\", function () { return _this.onTransportDisconnected(); });\r\n        return _this;\r\n    }\r\n    RegisterContext.prototype.register = function (options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        // Handle Options\r\n        this.options = tslib_1.__assign(tslib_1.__assign({}, this.options), options);\r\n        var extraHeaders = (this.options.extraHeaders || []).slice();\r\n        extraHeaders.push(\"Contact: \" + this.generateContactHeader(this.expires));\r\n        // this is UA.C.ALLOWED_METHODS, removed to get around circular dependency\r\n        extraHeaders.push(\"Allow: \" + [\r\n            \"ACK\",\r\n            \"CANCEL\",\r\n            \"INVITE\",\r\n            \"MESSAGE\",\r\n            \"BYE\",\r\n            \"OPTIONS\",\r\n            \"INFO\",\r\n            \"NOTIFY\",\r\n            \"REFER\"\r\n        ].toString());\r\n        // Save original extraHeaders to be used in .close\r\n        this.closeHeaders = this.options.closeWithHeaders ?\r\n            (this.options.extraHeaders || []).slice() : [];\r\n        this.receiveResponse = function (response) {\r\n            // Discard responses to older REGISTER/un-REGISTER requests.\r\n            if (response.cseq !== _this.request.cseq) {\r\n                return;\r\n            }\r\n            // Clear registration timer\r\n            if (_this.registrationTimer !== undefined) {\r\n                clearTimeout(_this.registrationTimer);\r\n                _this.registrationTimer = undefined;\r\n            }\r\n            var statusCode = (response.statusCode || 0).toString();\r\n            switch (true) {\r\n                case /^1[0-9]{2}$/.test(statusCode):\r\n                    _this.emit(\"progress\", response);\r\n                    break;\r\n                case /^2[0-9]{2}$/.test(statusCode):\r\n                    _this.emit(\"accepted\", response);\r\n                    var expires = void 0;\r\n                    if (response.hasHeader(\"expires\")) {\r\n                        expires = Number(response.getHeader(\"expires\"));\r\n                    }\r\n                    if (_this.registrationExpiredTimer !== undefined) {\r\n                        clearTimeout(_this.registrationExpiredTimer);\r\n                        _this.registrationExpiredTimer = undefined;\r\n                    }\r\n                    // Search the Contact pointing to us and update the expires value accordingly.\r\n                    var contacts = response.getHeaders(\"contact\").length;\r\n                    if (!contacts) {\r\n                        _this.logger.warn(\"no Contact header in response to REGISTER, response ignored\");\r\n                        break;\r\n                    }\r\n                    var contact = void 0;\r\n                    while (contacts--) {\r\n                        contact = response.parseHeader(\"contact\", contacts);\r\n                        if (contact.uri.user === _this.ua.contact.uri.user) {\r\n                            expires = contact.getParam(\"expires\");\r\n                            break;\r\n                        }\r\n                        else {\r\n                            contact = undefined;\r\n                        }\r\n                    }\r\n                    if (!contact) {\r\n                        _this.logger.warn(\"no Contact header pointing to us, response ignored\");\r\n                        break;\r\n                    }\r\n                    if (expires === undefined) {\r\n                        expires = _this.expires;\r\n                    }\r\n                    // Re-Register before the expiration interval has elapsed.\r\n                    // For that, decrease the expires value. ie: 3 seconds\r\n                    _this.registrationTimer = setTimeout(function () {\r\n                        _this.registrationTimer = undefined;\r\n                        _this.register(_this.options);\r\n                    }, (expires * 1000) - 3000);\r\n                    _this.registrationExpiredTimer = setTimeout(function () {\r\n                        _this.logger.warn(\"registration expired\");\r\n                        if (_this.registered) {\r\n                            _this.unregistered(undefined, Constants_1.C.causes.EXPIRES);\r\n                        }\r\n                    }, expires * 1000);\r\n                    // Save gruu values\r\n                    if (contact.hasParam(\"temp-gruu\")) {\r\n                        _this.ua.contact.tempGruu = core_1.Grammar.URIParse(contact.getParam(\"temp-gruu\").replace(/\"/g, \"\"));\r\n                    }\r\n                    if (contact.hasParam(\"pub-gruu\")) {\r\n                        _this.ua.contact.pubGruu = core_1.Grammar.URIParse(contact.getParam(\"pub-gruu\").replace(/\"/g, \"\"));\r\n                    }\r\n                    _this.registered = true;\r\n                    _this.emit(\"registered\", response || undefined);\r\n                    break;\r\n                // Interval too brief RFC3261 10.2.8\r\n                case /^423$/.test(statusCode):\r\n                    if (response.hasHeader(\"min-expires\")) {\r\n                        // Increase our registration interval to the suggested minimum\r\n                        _this.expires = Number(response.getHeader(\"min-expires\"));\r\n                        // Attempt the registration again immediately\r\n                        _this.register(_this.options);\r\n                    }\r\n                    else { // This response MUST contain a Min-Expires header field\r\n                        _this.logger.warn(\"423 response received for REGISTER without Min-Expires\");\r\n                        _this.registrationFailure(response, Constants_1.C.causes.SIP_FAILURE_CODE);\r\n                    }\r\n                    break;\r\n                default:\r\n                    _this.registrationFailure(response, Utils_1.Utils.sipErrorCause(response.statusCode || 0));\r\n            }\r\n        };\r\n        this.onRequestTimeout = function () {\r\n            _this.registrationFailure(undefined, Constants_1.C.causes.REQUEST_TIMEOUT);\r\n        };\r\n        this.onTransportError = function () {\r\n            _this.registrationFailure(undefined, Constants_1.C.causes.CONNECTION_ERROR);\r\n        };\r\n        this.request.cseq++;\r\n        this.request.setHeader(\"cseq\", this.request.cseq + \" REGISTER\");\r\n        this.request.extraHeaders = extraHeaders;\r\n        this.send();\r\n    };\r\n    RegisterContext.prototype.close = function () {\r\n        var options = {\r\n            all: false,\r\n            extraHeaders: this.closeHeaders\r\n        };\r\n        this.registeredBefore = this.registered;\r\n        if (this.registered) {\r\n            this.unregister(options);\r\n        }\r\n    };\r\n    RegisterContext.prototype.unregister = function (options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        if (!this.registered && !options.all) {\r\n            this.logger.warn(\"Already unregistered, but sending an unregister anyways.\");\r\n        }\r\n        var extraHeaders = (options.extraHeaders || []).slice();\r\n        this.registered = false;\r\n        // Clear the registration timer.\r\n        if (this.registrationTimer !== undefined) {\r\n            clearTimeout(this.registrationTimer);\r\n            this.registrationTimer = undefined;\r\n        }\r\n        if (options.all) {\r\n            extraHeaders.push(\"Contact: *\");\r\n            extraHeaders.push(\"Expires: 0\");\r\n        }\r\n        else {\r\n            extraHeaders.push(\"Contact: \" + this.generateContactHeader(0));\r\n        }\r\n        this.receiveResponse = function (response) {\r\n            var statusCode = (response && response.statusCode) ? response.statusCode.toString() : \"\";\r\n            switch (true) {\r\n                case /^1[0-9]{2}$/.test(statusCode):\r\n                    _this.emit(\"progress\", response);\r\n                    break;\r\n                case /^2[0-9]{2}$/.test(statusCode):\r\n                    _this.emit(\"accepted\", response);\r\n                    if (_this.registrationExpiredTimer !== undefined) {\r\n                        clearTimeout(_this.registrationExpiredTimer);\r\n                        _this.registrationExpiredTimer = undefined;\r\n                    }\r\n                    _this.unregistered(response);\r\n                    break;\r\n                default:\r\n                    _this.unregistered(response, Utils_1.Utils.sipErrorCause(response.statusCode || 0));\r\n            }\r\n        };\r\n        this.onRequestTimeout = function () {\r\n            // Not actually unregistered...\r\n            // this.unregistered(undefined, SIP.C.causes.REQUEST_TIMEOUT);\r\n        };\r\n        this.request.cseq++;\r\n        this.request.setHeader(\"cseq\", this.request.cseq + \" REGISTER\");\r\n        this.request.extraHeaders = extraHeaders;\r\n        this.send();\r\n    };\r\n    RegisterContext.prototype.unregistered = function (response, cause) {\r\n        this.registered = false;\r\n        this.emit(\"unregistered\", response || undefined, cause || undefined);\r\n    };\r\n    RegisterContext.prototype.send = function () {\r\n        var _this = this;\r\n        this.ua.userAgentCore.register(this.request, {\r\n            onAccept: function (response) { return _this.receiveResponse(response.message); },\r\n            onProgress: function (response) { return _this.receiveResponse(response.message); },\r\n            onRedirect: function (response) { return _this.receiveResponse(response.message); },\r\n            onReject: function (response) { return _this.receiveResponse(response.message); },\r\n            onTrying: function (response) { return _this.receiveResponse(response.message); }\r\n        });\r\n        return this;\r\n    };\r\n    RegisterContext.prototype.registrationFailure = function (response, cause) {\r\n        this.emit(\"failed\", response || undefined, cause || undefined);\r\n    };\r\n    RegisterContext.prototype.onTransportDisconnected = function () {\r\n        this.registeredBefore = this.registered;\r\n        if (this.registrationTimer !== undefined) {\r\n            clearTimeout(this.registrationTimer);\r\n            this.registrationTimer = undefined;\r\n        }\r\n        if (this.registrationExpiredTimer !== undefined) {\r\n            clearTimeout(this.registrationExpiredTimer);\r\n            this.registrationExpiredTimer = undefined;\r\n        }\r\n        if (this.registered) {\r\n            this.unregistered(undefined, Constants_1.C.causes.CONNECTION_ERROR);\r\n        }\r\n    };\r\n    /**\r\n     * Helper Function to generate Contact Header\r\n     * @private\r\n     * returns {String}\r\n     */\r\n    RegisterContext.prototype.generateContactHeader = function (expires) {\r\n        if (expires === void 0) { expires = 0; }\r\n        var contact = this.contact;\r\n        if (this.options.regId && this.options.instanceId) {\r\n            contact += \";reg-id=\" + this.options.regId;\r\n            contact += ';+sip.instance=\"<urn:uuid:' + this.options.instanceId + '>\"';\r\n        }\r\n        if (this.options.extraContactHeaderParams) {\r\n            this.options.extraContactHeaderParams.forEach(function (header) {\r\n                contact += \";\" + header;\r\n            });\r\n        }\r\n        contact += \";expires=\" + expires;\r\n        return contact;\r\n    };\r\n    return RegisterContext;\r\n}(ClientContext_1.ClientContext));\r\nexports.RegisterContext = RegisterContext;\r\n\r\n\r\n/***/ }),\r\n/* 89 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar events_1 = __webpack_require__(31);\r\nvar ClientContext_1 = __webpack_require__(79);\r\nvar Constants_1 = __webpack_require__(80);\r\nvar core_1 = __webpack_require__(2);\r\nvar Enums_1 = __webpack_require__(82);\r\nvar Exceptions_1 = __webpack_require__(84);\r\nvar ReferContext_1 = __webpack_require__(86);\r\nvar ServerContext_1 = __webpack_require__(87);\r\nvar DTMF_1 = __webpack_require__(90);\r\nvar DTMFValidator_1 = __webpack_require__(91);\r\nvar Utils_1 = __webpack_require__(83);\r\n/*\r\n * @param {function returning SIP.sessionDescriptionHandler} [sessionDescriptionHandlerFactory]\r\n *        (See the documentation for the sessionDescriptionHandlerFactory argument of the UA constructor.)\r\n */\r\nvar Session = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Session, _super);\r\n    function Session(sessionDescriptionHandlerFactory) {\r\n        var _this = _super.call(this) || this;\r\n        _this.data = {};\r\n        _this.type = Enums_1.TypeStrings.Session;\r\n        if (!sessionDescriptionHandlerFactory) {\r\n            throw new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"A session description handler is required for the session to function\");\r\n        }\r\n        _this.status = Session.C.STATUS_NULL;\r\n        _this.pendingReinvite = false;\r\n        _this.sessionDescriptionHandlerFactory = sessionDescriptionHandlerFactory;\r\n        _this.hasOffer = false;\r\n        _this.hasAnswer = false;\r\n        // Session Timers\r\n        _this.timers = {\r\n            ackTimer: undefined,\r\n            expiresTimer: undefined,\r\n            invite2xxTimer: undefined,\r\n            userNoAnswerTimer: undefined,\r\n            rel1xxTimer: undefined,\r\n            prackTimer: undefined\r\n        };\r\n        // Session info\r\n        _this.startTime = undefined;\r\n        _this.endTime = undefined;\r\n        _this.tones = undefined;\r\n        // Hold state\r\n        _this.localHold = false;\r\n        _this.earlySdp = undefined;\r\n        _this.rel100 = Constants_1.C.supported.UNSUPPORTED;\r\n        return _this;\r\n    }\r\n    Session.prototype.dtmf = function (tones, options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        // Check Session Status\r\n        if (this.status !== Enums_1.SessionStatus.STATUS_CONFIRMED && this.status !== Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK) {\r\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\r\n        }\r\n        // Check tones' validity\r\n        DTMFValidator_1.DTMFValidator.validate(tones);\r\n        var sendDTMF = function () {\r\n            if (_this.status === Enums_1.SessionStatus.STATUS_TERMINATED || !_this.tones || _this.tones.length === 0) {\r\n                // Stop sending DTMF\r\n                _this.tones = undefined;\r\n                return;\r\n            }\r\n            var dtmf = _this.tones.shift();\r\n            var timeout;\r\n            if (dtmf.tone === \",\") {\r\n                timeout = 2000;\r\n            }\r\n            else {\r\n                dtmf.on(\"failed\", function () { _this.tones = undefined; });\r\n                dtmf.send(options);\r\n                timeout = dtmf.duration + dtmf.interToneGap;\r\n            }\r\n            // Set timeout for the next tone\r\n            setTimeout(sendDTMF, timeout);\r\n        };\r\n        tones = tones.toString();\r\n        var dtmfType = this.ua.configuration.dtmfType;\r\n        if (this.sessionDescriptionHandler && dtmfType === Constants_1.C.dtmfType.RTP) {\r\n            var sent = this.sessionDescriptionHandler.sendDtmf(tones, options);\r\n            if (!sent) {\r\n                this.logger.warn(\"Attempt to use dtmfType 'RTP' has failed, falling back to INFO packet method\");\r\n                dtmfType = Constants_1.C.dtmfType.INFO;\r\n            }\r\n        }\r\n        if (dtmfType === Constants_1.C.dtmfType.INFO) {\r\n            var dtmfs = [];\r\n            var tonesArray = tones.split(\"\");\r\n            while (tonesArray.length > 0) {\r\n                dtmfs.push(new DTMF_1.DTMF(this, tonesArray.shift(), options));\r\n            }\r\n            if (Array.isArray(this.tones) && this.tones.length) {\r\n                // Tones are already queued, just add to the queue\r\n                this.tones = this.tones.concat(dtmfs);\r\n                return this;\r\n            }\r\n            this.tones = dtmfs;\r\n            sendDTMF();\r\n        }\r\n        return this;\r\n    };\r\n    Session.prototype.bye = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        // Check Session Status\r\n        if (this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\r\n            this.logger.error(\"Error: Attempted to send BYE in a terminated session.\");\r\n            return this;\r\n        }\r\n        this.logger.log(\"terminating Session\");\r\n        var statusCode = options.statusCode;\r\n        if (statusCode && (statusCode < 200 || statusCode >= 700)) {\r\n            throw new TypeError(\"Invalid statusCode: \" + statusCode);\r\n        }\r\n        options.receiveResponse = function () { };\r\n        return this.sendRequest(Constants_1.C.BYE, options).terminated();\r\n    };\r\n    Session.prototype.refer = function (target, options) {\r\n        if (options === void 0) { options = {}; }\r\n        // Check Session Status\r\n        if (this.status !== Enums_1.SessionStatus.STATUS_CONFIRMED) {\r\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\r\n        }\r\n        this.referContext = new ReferContext_1.ReferClientContext(this.ua, this, target, options);\r\n        this.emit(\"referRequested\", this.referContext);\r\n        this.referContext.refer(options);\r\n        return this.referContext;\r\n    };\r\n    /**\r\n     * Sends in dialog request.\r\n     * @param method Request method.\r\n     * @param options Options bucket.\r\n     */\r\n    Session.prototype.sendRequest = function (method, options) {\r\n        if (options === void 0) { options = {}; }\r\n        if (!this.session) {\r\n            throw new Error(\"Session undefined.\");\r\n        }\r\n        // Convert any \"body\" option to a Body.\r\n        if (options.body) {\r\n            options.body = Utils_1.Utils.fromBodyObj(options.body);\r\n        }\r\n        // Convert any \"receiveResponse\" callback option passed to an OutgoingRequestDelegate.\r\n        var delegate;\r\n        var callback = options.receiveResponse;\r\n        if (callback) {\r\n            delegate = {\r\n                onAccept: function (response) { return callback(response.message); },\r\n                onProgress: function (response) { return callback(response.message); },\r\n                onRedirect: function (response) { return callback(response.message); },\r\n                onReject: function (response) { return callback(response.message); },\r\n                onTrying: function (response) { return callback(response.message); }\r\n            };\r\n        }\r\n        var request;\r\n        var requestOptions = options;\r\n        switch (method) {\r\n            case Constants_1.C.BYE:\r\n                request = this.session.bye(delegate, requestOptions);\r\n                break;\r\n            case Constants_1.C.INVITE:\r\n                request = this.session.invite(delegate, requestOptions);\r\n                break;\r\n            case Constants_1.C.MESSAGE:\r\n                request = this.session.message(delegate, requestOptions);\r\n                break;\r\n            case Constants_1.C.REFER:\r\n                request = this.session.refer(delegate, requestOptions);\r\n                break;\r\n            default:\r\n                throw new Error(\"Unexpected \" + method + \". Method not implemented by user agent core.\");\r\n        }\r\n        // Ported - Emit the request event\r\n        this.emit(method.toLowerCase(), request.message);\r\n        return this;\r\n    };\r\n    Session.prototype.close = function () {\r\n        if (this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\r\n            return this;\r\n        }\r\n        this.logger.log(\"closing INVITE session \" + this.id);\r\n        // 1st Step. Terminate media.\r\n        if (this.sessionDescriptionHandler) {\r\n            this.sessionDescriptionHandler.close();\r\n        }\r\n        // 2nd Step. Terminate signaling.\r\n        // Clear session timers\r\n        for (var timer in this.timers) {\r\n            if (this.timers[timer]) {\r\n                clearTimeout(this.timers[timer]);\r\n            }\r\n        }\r\n        this.status = Enums_1.SessionStatus.STATUS_TERMINATED;\r\n        if (this.ua.transport) {\r\n            this.ua.transport.removeListener(\"transportError\", this.errorListener);\r\n        }\r\n        delete this.ua.sessions[this.id];\r\n        return this;\r\n    };\r\n    Session.prototype.hold = function (options, modifiers) {\r\n        if (options === void 0) { options = {}; }\r\n        if (modifiers === void 0) { modifiers = []; }\r\n        if (this.status !== Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK && this.status !== Enums_1.SessionStatus.STATUS_CONFIRMED) {\r\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\r\n        }\r\n        if (this.localHold) {\r\n            this.logger.log(\"Session is already on hold, cannot put it on hold again\");\r\n            return;\r\n        }\r\n        options.modifiers = modifiers;\r\n        if (this.sessionDescriptionHandler) {\r\n            options.modifiers.push(this.sessionDescriptionHandler.holdModifier);\r\n        }\r\n        this.localHold = true;\r\n        this.sendReinvite(options);\r\n    };\r\n    Session.prototype.unhold = function (options, modifiers) {\r\n        if (options === void 0) { options = {}; }\r\n        if (modifiers === void 0) { modifiers = []; }\r\n        if (this.status !== Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK && this.status !== Enums_1.SessionStatus.STATUS_CONFIRMED) {\r\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\r\n        }\r\n        if (!this.localHold) {\r\n            this.logger.log(\"Session is not on hold, cannot unhold it\");\r\n            return;\r\n        }\r\n        options.modifiers = modifiers;\r\n        this.localHold = false;\r\n        this.sendReinvite(options);\r\n    };\r\n    Session.prototype.reinvite = function (options, modifiers) {\r\n        if (options === void 0) { options = {}; }\r\n        if (modifiers === void 0) { modifiers = []; }\r\n        options.modifiers = modifiers;\r\n        return this.sendReinvite(options);\r\n    };\r\n    Session.prototype.terminate = function (options) {\r\n        // here for types and to be overridden\r\n        return this;\r\n    };\r\n    Session.prototype.onTransportError = function () {\r\n        if (this.status !== Enums_1.SessionStatus.STATUS_CONFIRMED && this.status !== Enums_1.SessionStatus.STATUS_TERMINATED) {\r\n            this.failed(undefined, Constants_1.C.causes.CONNECTION_ERROR);\r\n        }\r\n    };\r\n    Session.prototype.onRequestTimeout = function () {\r\n        if (this.status === Enums_1.SessionStatus.STATUS_CONFIRMED) {\r\n            this.terminated(undefined, Constants_1.C.causes.REQUEST_TIMEOUT);\r\n        }\r\n        else if (this.status !== Enums_1.SessionStatus.STATUS_TERMINATED) {\r\n            this.failed(undefined, Constants_1.C.causes.REQUEST_TIMEOUT);\r\n            this.terminated(undefined, Constants_1.C.causes.REQUEST_TIMEOUT);\r\n        }\r\n    };\r\n    Session.prototype.onDialogError = function (response) {\r\n        if (this.status === Enums_1.SessionStatus.STATUS_CONFIRMED) {\r\n            this.terminated(response, Constants_1.C.causes.DIALOG_ERROR);\r\n        }\r\n        else if (this.status !== Enums_1.SessionStatus.STATUS_TERMINATED) {\r\n            this.failed(response, Constants_1.C.causes.DIALOG_ERROR);\r\n            this.terminated(response, Constants_1.C.causes.DIALOG_ERROR);\r\n        }\r\n    };\r\n    Session.prototype.on = function (name, callback) {\r\n        return _super.prototype.on.call(this, name, callback);\r\n    };\r\n    Session.prototype.onAck = function (incomingRequest) {\r\n        var _this = this;\r\n        var confirmSession = function () {\r\n            clearTimeout(_this.timers.ackTimer);\r\n            clearTimeout(_this.timers.invite2xxTimer);\r\n            _this.status = Enums_1.SessionStatus.STATUS_CONFIRMED;\r\n            var contentDisp = incomingRequest.message.getHeader(\"Content-Disposition\");\r\n            if (contentDisp && contentDisp.type === \"render\") {\r\n                _this.renderbody = incomingRequest.message.body;\r\n                _this.rendertype = incomingRequest.message.getHeader(\"Content-Type\");\r\n            }\r\n            _this.emit(\"confirmed\", incomingRequest.message);\r\n        };\r\n        if (this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK) {\r\n            if (this.sessionDescriptionHandler &&\r\n                this.sessionDescriptionHandler.hasDescription(incomingRequest.message.getHeader(\"Content-Type\") || \"\")) {\r\n                this.hasAnswer = true;\r\n                this.sessionDescriptionHandler.setDescription(incomingRequest.message.body, this.sessionDescriptionHandlerOptions, this.modifiers).catch(function (e) {\r\n                    _this.logger.warn(e);\r\n                    _this.terminate({\r\n                        statusCode: \"488\",\r\n                        reasonPhrase: \"Bad Media Description\"\r\n                    });\r\n                    _this.failed(incomingRequest.message, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\r\n                    _this.terminated(incomingRequest.message, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\r\n                    throw e;\r\n                }).then(function () { return confirmSession(); });\r\n            }\r\n            else {\r\n                confirmSession();\r\n            }\r\n        }\r\n    };\r\n    Session.prototype.receiveRequest = function (incomingRequest) {\r\n        switch (incomingRequest.message.method) { // TODO: This needs a default case\r\n            case Constants_1.C.BYE:\r\n                incomingRequest.accept();\r\n                if (this.status === Enums_1.SessionStatus.STATUS_CONFIRMED) {\r\n                    this.emit(\"bye\", incomingRequest.message);\r\n                    this.terminated(incomingRequest.message, Constants_1.C.BYE);\r\n                }\r\n                break;\r\n            case Constants_1.C.INVITE:\r\n                if (this.status === Enums_1.SessionStatus.STATUS_CONFIRMED) {\r\n                    this.logger.log(\"re-INVITE received\");\r\n                    this.receiveReinvite(incomingRequest);\r\n                }\r\n                break;\r\n            case Constants_1.C.INFO:\r\n                if (this.status === Enums_1.SessionStatus.STATUS_CONFIRMED || this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK) {\r\n                    if (this.onInfo) {\r\n                        return this.onInfo(incomingRequest.message);\r\n                    }\r\n                    var contentType = incomingRequest.message.getHeader(\"content-type\");\r\n                    if (contentType) {\r\n                        if (contentType.match(/^application\\/dtmf-relay/i)) {\r\n                            if (incomingRequest.message.body) {\r\n                                var body = incomingRequest.message.body.split(\"\\r\\n\", 2);\r\n                                if (body.length === 2) {\r\n                                    var tone = void 0;\r\n                                    var duration = void 0;\r\n                                    var regTone = /^(Signal\\s*?=\\s*?)([0-9A-D#*]{1})(\\s)?.*/;\r\n                                    if (regTone.test(body[0])) {\r\n                                        tone = body[0].replace(regTone, \"$2\");\r\n                                    }\r\n                                    var regDuration = /^(Duration\\s?=\\s?)([0-9]{1,4})(\\s)?.*/;\r\n                                    if (regDuration.test(body[1])) {\r\n                                        duration = parseInt(body[1].replace(regDuration, \"$2\"), 10);\r\n                                    }\r\n                                    if (tone && duration) {\r\n                                        new DTMF_1.DTMF(this, tone, { duration: duration }).init_incoming(incomingRequest);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            incomingRequest.reject({\r\n                                statusCode: 415,\r\n                                extraHeaders: [\"Accept: application/dtmf-relay\"]\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case Constants_1.C.REFER:\r\n                if (this.status === Enums_1.SessionStatus.STATUS_CONFIRMED) {\r\n                    this.logger.log(\"REFER received\");\r\n                    this.referContext = new ReferContext_1.ReferServerContext(this.ua, incomingRequest, this.session);\r\n                    if (this.listeners(\"referRequested\").length) {\r\n                        this.emit(\"referRequested\", this.referContext);\r\n                    }\r\n                    else {\r\n                        this.logger.log(\"No referRequested listeners, automatically accepting and following the refer\");\r\n                        var options = { followRefer: true };\r\n                        if (this.passedOptions) {\r\n                            options.inviteOptions = this.passedOptions;\r\n                        }\r\n                        this.referContext.accept(options, this.modifiers);\r\n                    }\r\n                }\r\n                break;\r\n            case Constants_1.C.NOTIFY:\r\n                if (this.referContext &&\r\n                    this.referContext.type === Enums_1.TypeStrings.ReferClientContext &&\r\n                    incomingRequest.message.hasHeader(\"event\") &&\r\n                    /^refer(;.*)?$/.test(incomingRequest.message.getHeader(\"event\"))) {\r\n                    this.referContext.receiveNotify(incomingRequest);\r\n                    return;\r\n                }\r\n                incomingRequest.accept();\r\n                this.emit(\"notify\", incomingRequest.message);\r\n                break;\r\n            case Constants_1.C.MESSAGE:\r\n                incomingRequest.accept();\r\n                this.emit(\"message\", incomingRequest.message);\r\n                break;\r\n        }\r\n    };\r\n    // In dialog INVITE Reception\r\n    Session.prototype.receiveReinvite = function (incomingRequest) {\r\n        // TODO: Should probably check state of the session\r\n        var _this = this;\r\n        this.emit(\"reinvite\", this, incomingRequest.message);\r\n        if (incomingRequest.message.hasHeader(\"P-Asserted-Identity\")) {\r\n            this.assertedIdentity =\r\n                core_1.Grammar.nameAddrHeaderParse(incomingRequest.message.getHeader(\"P-Asserted-Identity\"));\r\n        }\r\n        var promise;\r\n        if (!this.sessionDescriptionHandler) {\r\n            this.logger.warn(\"No SessionDescriptionHandler to reinvite\");\r\n            return;\r\n        }\r\n        if (incomingRequest.message.getHeader(\"Content-Length\") === \"0\" &&\r\n            !incomingRequest.message.getHeader(\"Content-Type\")) { // Invite w/o SDP\r\n            promise = this.sessionDescriptionHandler.getDescription(this.sessionDescriptionHandlerOptions, this.modifiers);\r\n        }\r\n        else if (this.sessionDescriptionHandler.hasDescription(incomingRequest.message.getHeader(\"Content-Type\") || \"\")) {\r\n            // Invite w/ SDP\r\n            promise = this.sessionDescriptionHandler.setDescription(incomingRequest.message.body, this.sessionDescriptionHandlerOptions, this.modifiers).then(this.sessionDescriptionHandler.getDescription.bind(this.sessionDescriptionHandler, this.sessionDescriptionHandlerOptions, this.modifiers));\r\n        }\r\n        else { // Bad Packet (should never get hit)\r\n            incomingRequest.reject({ statusCode: 415 });\r\n            this.emit(\"reinviteFailed\", this);\r\n            return;\r\n        }\r\n        promise.catch(function (e) {\r\n            var statusCode;\r\n            if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\r\n                statusCode = 500;\r\n            }\r\n            else if (e.type === Enums_1.TypeStrings.RenegotiationError) {\r\n                _this.emit(\"renegotiationError\", e);\r\n                _this.logger.warn(e.toString());\r\n                statusCode = 488;\r\n            }\r\n            else {\r\n                _this.logger.error(e);\r\n                statusCode = 488;\r\n            }\r\n            incomingRequest.reject({ statusCode: statusCode });\r\n            _this.emit(\"reinviteFailed\", _this);\r\n            // TODO: This could be better\r\n            throw e;\r\n        }).then(function (description) {\r\n            var extraHeaders = [\"Contact: \" + _this.contact];\r\n            incomingRequest.accept({\r\n                statusCode: 200,\r\n                extraHeaders: extraHeaders,\r\n                body: Utils_1.Utils.fromBodyObj(description)\r\n            });\r\n            _this.status = Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK;\r\n            _this.emit(\"reinviteAccepted\", _this);\r\n        });\r\n    };\r\n    Session.prototype.sendReinvite = function (options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        if (this.pendingReinvite) {\r\n            this.logger.warn(\"Reinvite in progress. Please wait until complete, then try again.\");\r\n            return;\r\n        }\r\n        if (!this.sessionDescriptionHandler) {\r\n            this.logger.warn(\"No SessionDescriptionHandler, can't reinvite..\");\r\n            return;\r\n        }\r\n        this.pendingReinvite = true;\r\n        options.modifiers = options.modifiers || [];\r\n        var extraHeaders = (options.extraHeaders || []).slice();\r\n        extraHeaders.push(\"Contact: \" + this.contact);\r\n        // this is UA.C.ALLOWED_METHODS, removed to get around circular dependency\r\n        extraHeaders.push(\"Allow: \" + [\r\n            \"ACK\",\r\n            \"CANCEL\",\r\n            \"INVITE\",\r\n            \"MESSAGE\",\r\n            \"BYE\",\r\n            \"OPTIONS\",\r\n            \"INFO\",\r\n            \"NOTIFY\",\r\n            \"REFER\"\r\n        ].toString());\r\n        this.sessionDescriptionHandler.getDescription(options.sessionDescriptionHandlerOptions, options.modifiers)\r\n            .then(function (description) {\r\n            if (!_this.session) {\r\n                throw new Error(\"Session undefined.\");\r\n            }\r\n            var delegate = {\r\n                onAccept: function (response) {\r\n                    if (_this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\r\n                        _this.logger.error(\"Received reinvite response, but in STATUS_TERMINATED\");\r\n                        // TODO: Do we need to send a SIP response?\r\n                        return;\r\n                    }\r\n                    if (!_this.pendingReinvite) {\r\n                        _this.logger.error(\"Received reinvite response, but have no pending reinvite\");\r\n                        // TODO: Do we need to send a SIP response?\r\n                        return;\r\n                    }\r\n                    // FIXME: Why is this set here?\r\n                    _this.status = Enums_1.SessionStatus.STATUS_CONFIRMED;\r\n                    // 17.1.1.1 - For each final response that is received at the client transaction,\r\n                    // the client transaction sends an ACK,\r\n                    _this.emit(\"ack\", response.ack());\r\n                    _this.pendingReinvite = false;\r\n                    // TODO: All of these timers should move into the Transaction layer\r\n                    clearTimeout(_this.timers.invite2xxTimer);\r\n                    if (!_this.sessionDescriptionHandler ||\r\n                        !_this.sessionDescriptionHandler.hasDescription(response.message.getHeader(\"Content-Type\") || \"\")) {\r\n                        _this.logger.error(\"2XX response received to re-invite but did not have a description\");\r\n                        _this.emit(\"reinviteFailed\", _this);\r\n                        _this.emit(\"renegotiationError\", new Exceptions_1.Exceptions.RenegotiationError(\"2XX response received to re-invite but did not have a description\"));\r\n                        return;\r\n                    }\r\n                    _this.sessionDescriptionHandler\r\n                        .setDescription(response.message.body, _this.sessionDescriptionHandlerOptions, _this.modifiers)\r\n                        .catch(function (e) {\r\n                        _this.logger.error(\"Could not set the description in 2XX response\");\r\n                        _this.logger.error(e);\r\n                        _this.emit(\"reinviteFailed\", _this);\r\n                        _this.emit(\"renegotiationError\", e);\r\n                        _this.sendRequest(Constants_1.C.BYE, {\r\n                            extraHeaders: [\"Reason: \" + Utils_1.Utils.getReasonHeaderValue(488, \"Not Acceptable Here\")]\r\n                        });\r\n                        _this.terminated(undefined, Constants_1.C.causes.INCOMPATIBLE_SDP);\r\n                        throw e;\r\n                    })\r\n                        .then(function () {\r\n                        _this.emit(\"reinviteAccepted\", _this);\r\n                    });\r\n                },\r\n                onProgress: function (response) {\r\n                    return;\r\n                },\r\n                onRedirect: function (response) {\r\n                    // FIXME: Does ACK need to be sent?\r\n                    _this.pendingReinvite = false;\r\n                    _this.logger.log(\"Received a non 1XX or 2XX response to a re-invite\");\r\n                    _this.emit(\"reinviteFailed\", _this);\r\n                    _this.emit(\"renegotiationError\", new Exceptions_1.Exceptions.RenegotiationError(\"Invalid response to a re-invite\"));\r\n                },\r\n                onReject: function (response) {\r\n                    // FIXME: Does ACK need to be sent?\r\n                    _this.pendingReinvite = false;\r\n                    _this.logger.log(\"Received a non 1XX or 2XX response to a re-invite\");\r\n                    _this.emit(\"reinviteFailed\", _this);\r\n                    _this.emit(\"renegotiationError\", new Exceptions_1.Exceptions.RenegotiationError(\"Invalid response to a re-invite\"));\r\n                },\r\n                onTrying: function (response) {\r\n                    return;\r\n                }\r\n            };\r\n            var requestOptions = {\r\n                extraHeaders: extraHeaders,\r\n                body: Utils_1.Utils.fromBodyObj(description)\r\n            };\r\n            _this.session.invite(delegate, requestOptions);\r\n        }).catch(function (e) {\r\n            if (e.type === Enums_1.TypeStrings.RenegotiationError) {\r\n                _this.pendingReinvite = false;\r\n                _this.emit(\"renegotiationError\", e);\r\n                _this.logger.warn(\"Renegotiation Error\");\r\n                _this.logger.warn(e.toString());\r\n                throw e;\r\n            }\r\n            _this.logger.error(\"sessionDescriptionHandler error\");\r\n            _this.logger.error(e);\r\n            throw e;\r\n        });\r\n    };\r\n    Session.prototype.failed = function (response, cause) {\r\n        if (this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\r\n            return this;\r\n        }\r\n        this.emit(\"failed\", response, cause);\r\n        return this;\r\n    };\r\n    Session.prototype.rejected = function (response, cause) {\r\n        this.emit(\"rejected\", response, cause);\r\n        return this;\r\n    };\r\n    Session.prototype.canceled = function () {\r\n        if (this.sessionDescriptionHandler) {\r\n            this.sessionDescriptionHandler.close();\r\n        }\r\n        this.emit(\"cancel\");\r\n        return this;\r\n    };\r\n    Session.prototype.accepted = function (response, cause) {\r\n        if (!(response instanceof String)) {\r\n            cause = Utils_1.Utils.getReasonPhrase((response && response.statusCode) || 0, cause);\r\n        }\r\n        this.startTime = new Date();\r\n        if (this.replacee) {\r\n            this.replacee.emit(\"replaced\", this);\r\n            this.replacee.terminate();\r\n        }\r\n        this.emit(\"accepted\", response, cause);\r\n        return this;\r\n    };\r\n    Session.prototype.terminated = function (message, cause) {\r\n        if (this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\r\n            return this;\r\n        }\r\n        this.endTime = new Date();\r\n        this.close();\r\n        this.emit(\"terminated\", message, cause);\r\n        return this;\r\n    };\r\n    Session.prototype.connecting = function (request) {\r\n        this.emit(\"connecting\", { request: request });\r\n        return this;\r\n    };\r\n    Session.C = Enums_1.SessionStatus;\r\n    return Session;\r\n}(events_1.EventEmitter));\r\nexports.Session = Session;\r\n// tslint:disable-next-line:max-classes-per-file\r\nvar InviteServerContext = /** @class */ (function (_super) {\r\n    tslib_1.__extends(InviteServerContext, _super);\r\n    function InviteServerContext(ua, incomingInviteRequest) {\r\n        var _this = this;\r\n        if (!ua.configuration.sessionDescriptionHandlerFactory) {\r\n            ua.logger.warn(\"Can't build ISC without SDH Factory\");\r\n            throw new Error(\"ISC Constructor Failed\");\r\n        }\r\n        _this = _super.call(this, ua.configuration.sessionDescriptionHandlerFactory) || this;\r\n        _this._canceled = false;\r\n        _this.rseq = Math.floor(Math.random() * 10000);\r\n        _this.incomingRequest = incomingInviteRequest;\r\n        var request = incomingInviteRequest.message;\r\n        ServerContext_1.ServerContext.initializer(_this, ua, incomingInviteRequest);\r\n        _this.type = Enums_1.TypeStrings.InviteServerContext;\r\n        var contentDisp = request.parseHeader(\"Content-Disposition\");\r\n        if (contentDisp && contentDisp.type === \"render\") {\r\n            _this.renderbody = request.body;\r\n            _this.rendertype = request.getHeader(\"Content-Type\");\r\n        }\r\n        _this.status = Enums_1.SessionStatus.STATUS_INVITE_RECEIVED;\r\n        _this.fromTag = request.fromTag;\r\n        _this.id = request.callId + _this.fromTag;\r\n        _this.request = request;\r\n        _this.contact = _this.ua.contact.toString();\r\n        _this.logger = ua.getLogger(\"sip.inviteservercontext\", _this.id);\r\n        // Save the session into the ua sessions collection.\r\n        _this.ua.sessions[_this.id] = _this;\r\n        // Set 100rel if necessary\r\n        var set100rel = function (header, relSetting) {\r\n            if (request.hasHeader(header) && request.getHeader(header).toLowerCase().indexOf(\"100rel\") >= 0) {\r\n                _this.rel100 = relSetting;\r\n            }\r\n        };\r\n        set100rel(\"require\", Constants_1.C.supported.REQUIRED);\r\n        set100rel(\"supported\", Constants_1.C.supported.SUPPORTED);\r\n        // Set the toTag on the incoming request to the toTag which\r\n        // will be used in the response to the incoming request!!!\r\n        // FIXME: HACK: This is a hack to port an existing behavior.\r\n        // The behavior being ported appears to be a hack itself,\r\n        // so this is a hack to port a hack. At least one test spec\r\n        // relies on it (which is yet another hack).\r\n        _this.request.toTag = incomingInviteRequest.toTag;\r\n        _this.status = Enums_1.SessionStatus.STATUS_WAITING_FOR_ANSWER;\r\n        // Set userNoAnswerTimer\r\n        _this.timers.userNoAnswerTimer = setTimeout(function () {\r\n            incomingInviteRequest.reject({ statusCode: 408 });\r\n            _this.failed(request, Constants_1.C.causes.NO_ANSWER);\r\n            _this.terminated(request, Constants_1.C.causes.NO_ANSWER);\r\n        }, _this.ua.configuration.noAnswerTimeout || 60);\r\n        /* Set expiresTimer\r\n        * RFC3261 13.3.1\r\n        */\r\n        // Get the Expires header value if exists\r\n        if (request.hasHeader(\"expires\")) {\r\n            var expires = Number(request.getHeader(\"expires\") || 0) * 1000;\r\n            _this.timers.expiresTimer = setTimeout(function () {\r\n                if (_this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_ANSWER) {\r\n                    incomingInviteRequest.reject({ statusCode: 487 });\r\n                    _this.failed(request, Constants_1.C.causes.EXPIRES);\r\n                    _this.terminated(request, Constants_1.C.causes.EXPIRES);\r\n                }\r\n            }, expires);\r\n        }\r\n        _this.errorListener = _this.onTransportError.bind(_this);\r\n        if (ua.transport) {\r\n            ua.transport.on(\"transportError\", _this.errorListener);\r\n        }\r\n        return _this;\r\n    }\r\n    Object.defineProperty(InviteServerContext.prototype, \"autoSendAnInitialProvisionalResponse\", {\r\n        /**\r\n         * If true, a first provisional response after the 100 Trying\r\n         * will be sent automatically. This is false it the UAC required\r\n         * reliable provisional responses (100rel in Require header),\r\n         * otherwise it is true. The provisional is sent by calling\r\n         * `progress()` without any options.\r\n         *\r\n         * FIXME: TODO: It seems reasonable that the ISC user should\r\n         * be able to optionally disable this behavior. As the provisional\r\n         * is sent prior to the \"invite\" event being emitted, it's a known\r\n         * issue that the ISC user cannot register listeners or do any other\r\n         * setup prior to the call to `progress()`. As an example why this is\r\n         * an issue, setting `ua.configuration.rel100` to REQUIRED will result\r\n         * in an attempt by `progress()` to send a 183 with SDP produced by\r\n         * calling `getDescription()` on a session description handler, but\r\n         * the ISC user cannot perform any potentially required session description\r\n         * handler initialization (thus preventing the utilization of setting\r\n         * `ua.configuration.rel100` to REQUIRED). That begs the question of\r\n         * why this behavior is disabled when the UAC requires 100rel but not\r\n         * when the UAS requires 100rel? But ignoring that, it's just one example\r\n         * of a class of cases where the ISC user needs to do something prior\r\n         * to the first call to `progress()` and is unable to do so.\r\n         */\r\n        get: function () {\r\n            return this.rel100 === Constants_1.C.supported.REQUIRED ? false : true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // type hack for servercontext interface\r\n    InviteServerContext.prototype.reply = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        return this;\r\n    };\r\n    // typing note: this was the only function using its super in ServerContext\r\n    // so the bottom half of this function is copied and paired down from that\r\n    InviteServerContext.prototype.reject = function (options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        // Check Session Status\r\n        if (this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\r\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\r\n        }\r\n        this.logger.log(\"rejecting RTCSession\");\r\n        var statusCode = options.statusCode || 480;\r\n        var reasonPhrase = Utils_1.Utils.getReasonPhrase(statusCode, options.reasonPhrase);\r\n        var extraHeaders = options.extraHeaders || [];\r\n        if (statusCode < 300 || statusCode > 699) {\r\n            throw new TypeError(\"Invalid statusCode: \" + statusCode);\r\n        }\r\n        var body = options.body ? core_1.fromBodyLegacy(options.body) : undefined;\r\n        // FIXME: Need to redirect to someplae\r\n        var response = statusCode < 400 ?\r\n            this.incomingRequest.redirect([], { statusCode: statusCode, reasonPhrase: reasonPhrase, extraHeaders: extraHeaders, body: body }) :\r\n            this.incomingRequest.reject({ statusCode: statusCode, reasonPhrase: reasonPhrase, extraHeaders: extraHeaders, body: body });\r\n        ([\"rejected\", \"failed\"]).forEach(function (event) {\r\n            _this.emit(event, response.message, reasonPhrase);\r\n        });\r\n        return this.terminated();\r\n    };\r\n    /**\r\n     * Accept the incoming INVITE request to start a Session.\r\n     * Replies to the INVITE request with a 200 Ok response.\r\n     * @param options Options bucket.\r\n     */\r\n    InviteServerContext.prototype.accept = function (options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        // FIXME: Need guard against calling more than once.\r\n        this._accept(options)\r\n            .then(function (_a) {\r\n            var message = _a.message, session = _a.session;\r\n            session.delegate = {\r\n                onAck: function (ackRequest) { return _this.onAck(ackRequest); },\r\n                onAckTimeout: function () { return _this.onAckTimeout(); },\r\n                onBye: function (byeRequest) { return _this.receiveRequest(byeRequest); },\r\n                onInfo: function (infoRequest) { return _this.receiveRequest(infoRequest); },\r\n                onInvite: function (inviteRequest) { return _this.receiveRequest(inviteRequest); },\r\n                onMessage: function (messageRequest) { return _this.receiveRequest(messageRequest); },\r\n                onNotify: function (notifyRequest) { return _this.receiveRequest(notifyRequest); },\r\n                onPrack: function (prackRequest) { return _this.receiveRequest(prackRequest); },\r\n                onRefer: function (referRequest) { return _this.receiveRequest(referRequest); },\r\n            };\r\n            _this.session = session;\r\n            _this.status = Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK;\r\n            _this.accepted(message, Utils_1.Utils.getReasonPhrase(200));\r\n        })\r\n            .catch(function (error) {\r\n            _this.onContextError(error);\r\n            // FIXME: Assuming error due to async race on CANCEL and eating error.\r\n            if (!_this._canceled) {\r\n                throw error;\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Report progress to the the caller.\r\n     * Replies to the INVITE request with a 1xx provisional response.\r\n     * @param options Options bucket.\r\n     */\r\n    InviteServerContext.prototype.progress = function (options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        // Ported\r\n        var statusCode = options.statusCode || 180;\r\n        if (statusCode < 100 || statusCode > 199) {\r\n            throw new TypeError(\"Invalid statusCode: \" + statusCode);\r\n        }\r\n        // Ported\r\n        if (this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\r\n            this.logger.warn(\"Unexpected call for progress while terminated, ignoring\");\r\n            return this;\r\n        }\r\n        // Added\r\n        if (this.status === Enums_1.SessionStatus.STATUS_ANSWERED) {\r\n            this.logger.warn(\"Unexpected call for progress while answered, ignoring\");\r\n            return this;\r\n        }\r\n        // Added\r\n        if (this.status === Enums_1.SessionStatus.STATUS_ANSWERED_WAITING_FOR_PRACK) {\r\n            this.logger.warn(\"Unexpected call for progress while answered (waiting for prack), ignoring\");\r\n            return this;\r\n        }\r\n        // After the first reliable provisional response for a request has been\r\n        // acknowledged, the UAS MAY send additional reliable provisional\r\n        // responses.  The UAS MUST NOT send a second reliable provisional\r\n        // response until the first is acknowledged.  After the first, it is\r\n        // RECOMMENDED that the UAS not send an additional reliable provisional\r\n        // response until the previous is acknowledged.  The first reliable\r\n        // provisional response receives special treatment because it conveys\r\n        // the initial sequence number.  If additional reliable provisional\r\n        // responses were sent before the first was acknowledged, the UAS could\r\n        // not be certain these were received in order.\r\n        // https://tools.ietf.org/html/rfc3262#section-3\r\n        if (this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_PRACK) {\r\n            this.logger.warn(\"Unexpected call for progress while waiting for prack, ignoring\");\r\n            return this;\r\n        }\r\n        // Ported\r\n        if (options.statusCode === 100) {\r\n            try {\r\n                this.incomingRequest.trying();\r\n            }\r\n            catch (error) {\r\n                this.onContextError(error);\r\n                // FIXME: Assuming error due to async race on CANCEL and eating error.\r\n                if (!this._canceled) {\r\n                    throw error;\r\n                }\r\n            }\r\n            return this;\r\n        }\r\n        // Standard provisional response.\r\n        if (!(this.rel100 === Constants_1.C.supported.REQUIRED) &&\r\n            !(this.rel100 === Constants_1.C.supported.SUPPORTED && options.rel100) &&\r\n            !(this.rel100 === Constants_1.C.supported.SUPPORTED && this.ua.configuration.rel100 === Constants_1.C.supported.REQUIRED)) {\r\n            this._progress(options)\r\n                .catch(function (error) {\r\n                _this.onContextError(error);\r\n                // FIXME: Assuming error due to async race on CANCEL and eating error.\r\n                if (!_this._canceled) {\r\n                    throw error;\r\n                }\r\n            });\r\n            return this;\r\n        }\r\n        // Reliable provisional response.\r\n        this._reliableProgressWaitForPrack(options)\r\n            .catch(function (error) {\r\n            _this.onContextError(error);\r\n            // FIXME: Assuming error due to async race on CANCEL and eating error.\r\n            if (!_this._canceled) {\r\n                throw error;\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Reject an unaccepted incoming INVITE request or send BYE if established session.\r\n     * @param options Options bucket. FIXME: This options bucket needs to be typed.\r\n     */\r\n    InviteServerContext.prototype.terminate = function (options) {\r\n        // The caller's UA MAY send a BYE for either confirmed or early dialogs,\r\n        // and the callee's UA MAY send a BYE on confirmed dialogs, but MUST NOT\r\n        // send a BYE on early dialogs. However, the callee's UA MUST NOT send a\r\n        // BYE on a confirmed dialog until it has received an ACK for its 2xx\r\n        // response or until the server transaction times out.\r\n        // https://tools.ietf.org/html/rfc3261#section-15\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        // We don't yet have a dialog, so reject request.\r\n        if (!this.session) {\r\n            this.reject(options);\r\n            return this;\r\n        }\r\n        switch (this.session.sessionState) {\r\n            case core_1.SessionState.Initial:\r\n                this.reject(options);\r\n                return this;\r\n            case core_1.SessionState.Early:\r\n                this.reject(options);\r\n                return this;\r\n            case core_1.SessionState.AckWait:\r\n                this.session.delegate = {\r\n                    // When ACK shows up, say BYE.\r\n                    onAck: function () {\r\n                        _this.sendRequest(Constants_1.C.BYE, options);\r\n                    },\r\n                    // Or the server transaction times out before the ACK arrives.\r\n                    onAckTimeout: function () {\r\n                        _this.sendRequest(Constants_1.C.BYE, options);\r\n                    }\r\n                };\r\n                // Ported\r\n                this.emit(\"bye\", this.request);\r\n                this.terminated();\r\n                return this;\r\n            case core_1.SessionState.Confirmed:\r\n                this.bye(options);\r\n                return this;\r\n            case core_1.SessionState.Terminated:\r\n                return this;\r\n            default:\r\n                return this;\r\n        }\r\n    };\r\n    InviteServerContext.prototype.onCancel = function (message) {\r\n        if (this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_ANSWER ||\r\n            this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_PRACK ||\r\n            this.status === Enums_1.SessionStatus.STATUS_ANSWERED_WAITING_FOR_PRACK ||\r\n            this.status === Enums_1.SessionStatus.STATUS_EARLY_MEDIA ||\r\n            this.status === Enums_1.SessionStatus.STATUS_ANSWERED) {\r\n            this.status = Enums_1.SessionStatus.STATUS_CANCELED;\r\n            this.incomingRequest.reject({ statusCode: 487 });\r\n            this.canceled();\r\n            this.rejected(message, Constants_1.C.causes.CANCELED);\r\n            this.failed(message, Constants_1.C.causes.CANCELED);\r\n            this.terminated(message, Constants_1.C.causes.CANCELED);\r\n        }\r\n    };\r\n    InviteServerContext.prototype.receiveRequest = function (incomingRequest) {\r\n        var _this = this;\r\n        switch (incomingRequest.message.method) {\r\n            case Constants_1.C.PRACK:\r\n                if (this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_PRACK ||\r\n                    this.status === Enums_1.SessionStatus.STATUS_ANSWERED_WAITING_FOR_PRACK) {\r\n                    if (!this.hasAnswer) {\r\n                        this.sessionDescriptionHandler = this.setupSessionDescriptionHandler();\r\n                        this.emit(\"SessionDescriptionHandler-created\", this.sessionDescriptionHandler);\r\n                        if (this.sessionDescriptionHandler.hasDescription(incomingRequest.message.getHeader(\"Content-Type\") || \"\")) {\r\n                            this.hasAnswer = true;\r\n                            this.sessionDescriptionHandler.setDescription(incomingRequest.message.body, this.sessionDescriptionHandlerOptions, this.modifiers).then(function () {\r\n                                clearTimeout(_this.timers.rel1xxTimer);\r\n                                clearTimeout(_this.timers.prackTimer);\r\n                                incomingRequest.accept();\r\n                                if (_this.status === Enums_1.SessionStatus.STATUS_ANSWERED_WAITING_FOR_PRACK) {\r\n                                    _this.status = Enums_1.SessionStatus.STATUS_EARLY_MEDIA;\r\n                                    _this.accept();\r\n                                }\r\n                                _this.status = Enums_1.SessionStatus.STATUS_EARLY_MEDIA;\r\n                            }, function (e) {\r\n                                _this.logger.warn(e);\r\n                                _this.terminate({\r\n                                    statusCode: \"488\",\r\n                                    reasonPhrase: \"Bad Media Description\"\r\n                                });\r\n                                _this.failed(incomingRequest.message, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\r\n                                _this.terminated(incomingRequest.message, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\r\n                            });\r\n                        }\r\n                        else {\r\n                            this.terminate({\r\n                                statusCode: \"488\",\r\n                                reasonPhrase: \"Bad Media Description\"\r\n                            });\r\n                            this.failed(incomingRequest.message, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\r\n                            this.terminated(incomingRequest.message, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\r\n                        }\r\n                    }\r\n                    else {\r\n                        clearTimeout(this.timers.rel1xxTimer);\r\n                        clearTimeout(this.timers.prackTimer);\r\n                        incomingRequest.accept();\r\n                        if (this.status === Enums_1.SessionStatus.STATUS_ANSWERED_WAITING_FOR_PRACK) {\r\n                            this.status = Enums_1.SessionStatus.STATUS_EARLY_MEDIA;\r\n                            this.accept();\r\n                        }\r\n                        this.status = Enums_1.SessionStatus.STATUS_EARLY_MEDIA;\r\n                    }\r\n                }\r\n                else if (this.status === Enums_1.SessionStatus.STATUS_EARLY_MEDIA) {\r\n                    incomingRequest.accept();\r\n                }\r\n                break;\r\n            default:\r\n                _super.prototype.receiveRequest.call(this, incomingRequest);\r\n                break;\r\n        }\r\n    };\r\n    // Internal Function to setup the handler consistently\r\n    InviteServerContext.prototype.setupSessionDescriptionHandler = function () {\r\n        if (this.sessionDescriptionHandler) {\r\n            return this.sessionDescriptionHandler;\r\n        }\r\n        return this.sessionDescriptionHandlerFactory(this, this.ua.configuration.sessionDescriptionHandlerFactoryOptions);\r\n    };\r\n    InviteServerContext.prototype.generateResponseOfferAnswer = function (options) {\r\n        if (!this.session) {\r\n            var body = core_1.getBody(this.incomingRequest.message);\r\n            if (!body || body.contentDisposition !== \"session\") {\r\n                return this.getOffer(options);\r\n            }\r\n            else {\r\n                return this.setOfferAndGetAnswer(body, options);\r\n            }\r\n        }\r\n        else {\r\n            switch (this.session.signalingState) {\r\n                case core_1.SignalingState.Initial:\r\n                    return this.getOffer(options);\r\n                case core_1.SignalingState.Stable:\r\n                    return Promise.resolve(undefined);\r\n                case core_1.SignalingState.HaveLocalOffer:\r\n                    // o  Once the UAS has sent or received an answer to the initial\r\n                    // offer, it MUST NOT generate subsequent offers in any responses\r\n                    // to the initial INVITE.  This means that a UAS based on this\r\n                    // specification alone can never generate subsequent offers until\r\n                    // completion of the initial transaction.\r\n                    // https://tools.ietf.org/html/rfc3261#section-13.2.1\r\n                    return Promise.resolve(undefined);\r\n                case core_1.SignalingState.HaveRemoteOffer:\r\n                    if (!this.session.offer) {\r\n                        throw new Error(\"Session offer undefined\");\r\n                    }\r\n                    return this.setOfferAndGetAnswer(this.session.offer, options);\r\n                case core_1.SignalingState.Closed:\r\n                    throw new Error(\"Invalid signaling state \" + this.session.signalingState + \".\");\r\n                default:\r\n                    throw new Error(\"Invalid signaling state \" + this.session.signalingState + \".\");\r\n            }\r\n        }\r\n    };\r\n    InviteServerContext.prototype.handlePrackOfferAnswer = function (request, options) {\r\n        if (!this.session) {\r\n            throw new Error(\"Session undefined.\");\r\n        }\r\n        // If the PRACK doesn't have an offer/answer, nothing to be done.\r\n        var body = core_1.getBody(request.message);\r\n        if (!body || body.contentDisposition !== \"session\") {\r\n            return Promise.resolve(undefined);\r\n        }\r\n        // If the UAC receives a reliable provisional response with an offer\r\n        // (this would occur if the UAC sent an INVITE without an offer, in\r\n        // which case the first reliable provisional response will contain the\r\n        // offer), it MUST generate an answer in the PRACK.  If the UAC receives\r\n        // a reliable provisional response with an answer, it MAY generate an\r\n        // additional offer in the PRACK.  If the UAS receives a PRACK with an\r\n        // offer, it MUST place the answer in the 2xx to the PRACK.\r\n        // https://tools.ietf.org/html/rfc3262#section-5\r\n        switch (this.session.signalingState) {\r\n            case core_1.SignalingState.Initial:\r\n                // State should never be reached as first reliable provisional response must have answer/offer.\r\n                throw new Error(\"Invalid signaling state \" + this.session.signalingState + \".\");\r\n            case core_1.SignalingState.Stable:\r\n                // Receved answer.\r\n                return this.setAnswer(body, options).then(function () { return undefined; });\r\n            case core_1.SignalingState.HaveLocalOffer:\r\n                // State should never be reached as local offer would be answered by this PRACK\r\n                throw new Error(\"Invalid signaling state \" + this.session.signalingState + \".\");\r\n            case core_1.SignalingState.HaveRemoteOffer:\r\n                // Receved offer, generate answer.\r\n                return this.setOfferAndGetAnswer(body, options);\r\n            case core_1.SignalingState.Closed:\r\n                throw new Error(\"Invalid signaling state \" + this.session.signalingState + \".\");\r\n            default:\r\n                throw new Error(\"Invalid signaling state \" + this.session.signalingState + \".\");\r\n        }\r\n    };\r\n    /**\r\n     * Called when session canceled.\r\n     */\r\n    InviteServerContext.prototype.canceled = function () {\r\n        this._canceled = true;\r\n        return _super.prototype.canceled.call(this);\r\n    };\r\n    /**\r\n     * Called when session terminated.\r\n     * Using it here just for the PRACK timeout.\r\n     */\r\n    InviteServerContext.prototype.terminated = function (message, cause) {\r\n        this.prackNeverArrived();\r\n        return _super.prototype.terminated.call(this, message, cause);\r\n    };\r\n    /**\r\n     * A version of `accept` which resolves a session when the 200 Ok response is sent.\r\n     * @param options Options bucket.\r\n     * @throws {ClosedSessionDescriptionHandlerError} The session description handler closed before method completed.\r\n     * @throws {TransactionStateError} The transaction state does not allow for `accept()` to be called.\r\n     *                                 Note that the transaction state can change while this call is in progress.\r\n     */\r\n    InviteServerContext.prototype._accept = function (options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        // FIXME: Ported - callback for in dialog INFO requests.\r\n        // Turns out accept() can be called more than once if we are waiting\r\n        // for a PRACK in which case \"options\" get completely tossed away.\r\n        // So this is broken in that case (and potentially other uses of options).\r\n        // Tempted to just try to fix it now, but leaving it broken for the moment.\r\n        this.onInfo = options.onInfo;\r\n        // The UAS MAY send a final response to the initial request before\r\n        // having received PRACKs for all unacknowledged reliable provisional\r\n        // responses, unless the final response is 2xx and any of the\r\n        // unacknowledged reliable provisional responses contained a session\r\n        // description.  In that case, it MUST NOT send a final response until\r\n        // those provisional responses are acknowledged.  If the UAS does send a\r\n        // final response when reliable responses are still unacknowledged, it\r\n        // SHOULD NOT continue to retransmit the unacknowledged reliable\r\n        // provisional responses, but it MUST be prepared to process PRACK\r\n        // requests for those outstanding responses.  A UAS MUST NOT send new\r\n        // reliable provisional responses (as opposed to retransmissions of\r\n        // unacknowledged ones) after sending a final response to a request.\r\n        // https://tools.ietf.org/html/rfc3262#section-3\r\n        if (this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_PRACK) {\r\n            this.status = Enums_1.SessionStatus.STATUS_ANSWERED_WAITING_FOR_PRACK;\r\n            return this.waitForArrivalOfPrack()\r\n                .then(function () {\r\n                _this.status = Enums_1.SessionStatus.STATUS_ANSWERED;\r\n                clearTimeout(_this.timers.userNoAnswerTimer); // Ported\r\n            })\r\n                .then(function () { return _this.generateResponseOfferAnswer(options); })\r\n                .then(function (body) { return _this.incomingRequest.accept({ statusCode: 200, body: body }); });\r\n        }\r\n        // Ported\r\n        if (this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_ANSWER) {\r\n            this.status = Enums_1.SessionStatus.STATUS_ANSWERED;\r\n        }\r\n        else {\r\n            return Promise.reject(new Exceptions_1.Exceptions.InvalidStateError(this.status));\r\n        }\r\n        this.status = Enums_1.SessionStatus.STATUS_ANSWERED;\r\n        clearTimeout(this.timers.userNoAnswerTimer); // Ported\r\n        return this.generateResponseOfferAnswer(options)\r\n            .then(function (body) { return _this.incomingRequest.accept({ statusCode: 200, body: body }); });\r\n    };\r\n    /**\r\n     * A version of `progress` which resolves when the provisional response is sent.\r\n     * @param options Options bucket.\r\n     * @throws {ClosedSessionDescriptionHandlerError} The session description handler closed before method completed.\r\n     * @throws {TransactionStateError} The transaction state does not allow for `progress()` to be called.\r\n     *                                 Note that the transaction state can change while this call is in progress.\r\n     */\r\n    InviteServerContext.prototype._progress = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        // Ported\r\n        var statusCode = options.statusCode || 180;\r\n        var reasonPhrase = options.reasonPhrase;\r\n        var extraHeaders = (options.extraHeaders || []).slice();\r\n        var body = options.body ? core_1.fromBodyLegacy(options.body) : undefined;\r\n        // The 183 (Session Progress) response is used to convey information\r\n        // about the progress of the call that is not otherwise classified.  The\r\n        // Reason-Phrase, header fields, or message body MAY be used to convey\r\n        // more details about the call progress.\r\n        // https://tools.ietf.org/html/rfc3261#section-21.1.5\r\n        // It is the de facto industry standard to utilize 183 with SDP to provide \"early media\".\r\n        // While it is unlikely someone would want to send a 183 without SDP, so it should be an option.\r\n        if (statusCode === 183 && !body) {\r\n            return this._progressWithSDP(options);\r\n        }\r\n        try {\r\n            var progressResponse = this.incomingRequest.progress({ statusCode: statusCode, reasonPhrase: reasonPhrase, extraHeaders: extraHeaders, body: body });\r\n            this.emit(\"progress\", progressResponse.message, reasonPhrase); // Ported\r\n            this.session = progressResponse.session;\r\n            return Promise.resolve(progressResponse);\r\n        }\r\n        catch (error) {\r\n            return Promise.reject(error);\r\n        }\r\n    };\r\n    /**\r\n     * A version of `progress` which resolves when the provisional response with sdp is sent.\r\n     * @param options Options bucket.\r\n     * @throws {ClosedSessionDescriptionHandlerError} The session description handler closed before method completed.\r\n     * @throws {TransactionStateError} The transaction state does not allow for `progress()` to be called.\r\n     *                                 Note that the transaction state can change while this call is in progress.\r\n     */\r\n    InviteServerContext.prototype._progressWithSDP = function (options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        var statusCode = options.statusCode || 183;\r\n        var reasonPhrase = options.reasonPhrase;\r\n        var extraHeaders = (options.extraHeaders || []).slice();\r\n        // Get an offer/answer and send a reply.\r\n        return this.generateResponseOfferAnswer(options)\r\n            .then(function (body) { return _this.incomingRequest.progress({ statusCode: statusCode, reasonPhrase: reasonPhrase, extraHeaders: extraHeaders, body: body }); })\r\n            .then(function (progressResponse) {\r\n            _this.emit(\"progress\", progressResponse.message, reasonPhrase); // Ported\r\n            _this.session = progressResponse.session;\r\n            return progressResponse;\r\n        });\r\n    };\r\n    /**\r\n     * A version of `progress` which resolves when the reliable provisional response is sent.\r\n     * @param options Options bucket.\r\n     * @throws {ClosedSessionDescriptionHandlerError} The session description handler closed before method completed.\r\n     * @throws {TransactionStateError} The transaction state does not allow for `progress()` to be called.\r\n     *                                 Note that the transaction state can change while this call is in progress.\r\n     */\r\n    InviteServerContext.prototype._reliableProgress = function (options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        var statusCode = options.statusCode || 183;\r\n        var reasonPhrase = options.reasonPhrase;\r\n        var extraHeaders = (options.extraHeaders || []).slice();\r\n        extraHeaders.push(\"Require: 100rel\");\r\n        extraHeaders.push(\"RSeq: \" + Math.floor(Math.random() * 10000));\r\n        // Get an offer/answer and send a reply.\r\n        return this.generateResponseOfferAnswer(options)\r\n            .then(function (body) { return _this.incomingRequest.progress({ statusCode: statusCode, reasonPhrase: reasonPhrase, extraHeaders: extraHeaders, body: body }); })\r\n            .then(function (progressResponse) {\r\n            _this.emit(\"progress\", progressResponse.message, reasonPhrase); // Ported\r\n            _this.session = progressResponse.session;\r\n            return progressResponse;\r\n        });\r\n    };\r\n    /**\r\n     * A version of `progress` which resolves when the reliable provisional response is acknowledged.\r\n     * @param options Options bucket.\r\n     * @throws {ClosedSessionDescriptionHandlerError} The session description handler closed before method completed.\r\n     * @throws {TransactionStateError} The transaction state does not allow for `progress()` to be called.\r\n     *                                 Note that the transaction state can change while this call is in progress.\r\n     */\r\n    InviteServerContext.prototype._reliableProgressWaitForPrack = function (options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        var statusCode = options.statusCode || 183;\r\n        var reasonPhrase = options.reasonPhrase;\r\n        var extraHeaders = (options.extraHeaders || []).slice();\r\n        extraHeaders.push(\"Require: 100rel\");\r\n        extraHeaders.push(\"RSeq: \" + this.rseq++);\r\n        var body;\r\n        // Ported - set status.\r\n        this.status = Enums_1.SessionStatus.STATUS_WAITING_FOR_PRACK;\r\n        return new Promise(function (resolve, reject) {\r\n            var waitingForPrack = true;\r\n            return _this.generateResponseOfferAnswer(options)\r\n                .then(function (offerAnswer) {\r\n                body = offerAnswer;\r\n                return _this.incomingRequest.progress({ statusCode: statusCode, reasonPhrase: reasonPhrase, extraHeaders: extraHeaders, body: body });\r\n            })\r\n                .then(function (progressResponse) {\r\n                _this.emit(\"progress\", progressResponse.message, reasonPhrase); // Ported\r\n                _this.session = progressResponse.session;\r\n                var prackRequest;\r\n                var prackResponse;\r\n                progressResponse.session.delegate = {\r\n                    onPrack: function (request) {\r\n                        prackRequest = request;\r\n                        clearTimeout(prackWaitTimeoutTimer);\r\n                        clearTimeout(rel1xxRetransmissionTimer);\r\n                        if (!waitingForPrack) {\r\n                            return;\r\n                        }\r\n                        waitingForPrack = false;\r\n                        _this.handlePrackOfferAnswer(prackRequest, options)\r\n                            .then(function (prackResponseBody) {\r\n                            try {\r\n                                prackResponse = prackRequest.accept({ statusCode: 200, body: prackResponseBody });\r\n                                // Ported - set status.\r\n                                if (_this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_PRACK) {\r\n                                    _this.status = Enums_1.SessionStatus.STATUS_WAITING_FOR_ANSWER;\r\n                                }\r\n                                _this.prackArrived();\r\n                                resolve({ prackRequest: prackRequest, prackResponse: prackResponse, progressResponse: progressResponse });\r\n                            }\r\n                            catch (error) {\r\n                                reject(error);\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n                // https://tools.ietf.org/html/rfc3262#section-3\r\n                var prackWaitTimeout = function () {\r\n                    if (!waitingForPrack) {\r\n                        return;\r\n                    }\r\n                    waitingForPrack = false;\r\n                    _this.logger.warn(\"No PRACK received, rejecting INVITE.\");\r\n                    clearTimeout(rel1xxRetransmissionTimer);\r\n                    try {\r\n                        _this.incomingRequest.reject({ statusCode: 504 });\r\n                        _this.terminated(undefined, Constants_1.C.causes.NO_PRACK);\r\n                        reject(new Exceptions_1.Exceptions.TerminatedSessionError());\r\n                    }\r\n                    catch (error) {\r\n                        reject(error);\r\n                    }\r\n                };\r\n                var prackWaitTimeoutTimer = setTimeout(prackWaitTimeout, core_1.Timers.T1 * 64);\r\n                // https://tools.ietf.org/html/rfc3262#section-3\r\n                var rel1xxRetransmission = function () {\r\n                    try {\r\n                        _this.incomingRequest.progress({ statusCode: statusCode, reasonPhrase: reasonPhrase, extraHeaders: extraHeaders, body: body });\r\n                    }\r\n                    catch (error) {\r\n                        waitingForPrack = false;\r\n                        reject(error);\r\n                        return;\r\n                    }\r\n                    rel1xxRetransmissionTimer = setTimeout(rel1xxRetransmission, timeout *= 2);\r\n                };\r\n                var timeout = core_1.Timers.T1;\r\n                var rel1xxRetransmissionTimer = setTimeout(rel1xxRetransmission, timeout);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Callback for when ACK for a 2xx response is never received.\r\n     * @param session Session the ACK never arrived for\r\n     */\r\n    InviteServerContext.prototype.onAckTimeout = function () {\r\n        if (this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK) {\r\n            this.logger.log(\"no ACK received for an extended period of time, terminating the call\");\r\n            if (!this.session) {\r\n                throw new Error(\"Session undefined.\");\r\n            }\r\n            this.session.bye();\r\n            this.terminated(undefined, Constants_1.C.causes.NO_ACK);\r\n        }\r\n    };\r\n    /**\r\n     * FIXME: TODO: The current library interface presents async methods without a\r\n     * proper async error handling mechanism. Arguably a promise based interface\r\n     * would be an improvement over the pattern of returning `this`. The approach has\r\n     * been generally along the lines of log a error and terminate.\r\n     */\r\n    InviteServerContext.prototype.onContextError = function (error) {\r\n        var statusCode = 480;\r\n        if (error instanceof core_1.Exception) { // There might be interest in catching these Exceptions.\r\n            if (error instanceof Exceptions_1.Exceptions.SessionDescriptionHandlerError) {\r\n                this.logger.error(error.message);\r\n                if (error.error) {\r\n                    this.logger.error(error.error);\r\n                }\r\n            }\r\n            else if (error instanceof Exceptions_1.Exceptions.TerminatedSessionError) {\r\n                // PRACK never arrived, so we timed out waiting for it.\r\n                this.logger.warn(\"Incoming session terminated while waiting for PRACK.\");\r\n            }\r\n            else if (error instanceof Exceptions_1.Exceptions.UnsupportedSessionDescriptionContentTypeError) {\r\n                statusCode = 415;\r\n            }\r\n            else if (error instanceof core_1.Exception) {\r\n                this.logger.error(error.message);\r\n            }\r\n        }\r\n        else if (error instanceof Error) { // Other Errors hould go uncaught.\r\n            this.logger.error(error.message);\r\n        }\r\n        else {\r\n            // We don't actually know what a session description handler implementation might throw\r\n            // our way, so as a last resort, just assume we are getting an \"any\" and log it.\r\n            this.logger.error(\"An error occurred in the session description handler.\");\r\n            this.logger.error(error);\r\n        }\r\n        try {\r\n            this.incomingRequest.reject({ statusCode: statusCode }); // \"Temporarily Unavailable\"\r\n            this.failed(this.incomingRequest.message, error.message);\r\n            this.terminated(this.incomingRequest.message, error.message);\r\n        }\r\n        catch (error) {\r\n            return;\r\n        }\r\n    };\r\n    InviteServerContext.prototype.prackArrived = function () {\r\n        if (this.waitingForPrackResolve) {\r\n            this.waitingForPrackResolve();\r\n        }\r\n        this.waitingForPrackPromise = undefined;\r\n        this.waitingForPrackResolve = undefined;\r\n        this.waitingForPrackReject = undefined;\r\n    };\r\n    InviteServerContext.prototype.prackNeverArrived = function () {\r\n        if (this.waitingForPrackReject) {\r\n            this.waitingForPrackReject(new Exceptions_1.Exceptions.TerminatedSessionError());\r\n        }\r\n        this.waitingForPrackPromise = undefined;\r\n        this.waitingForPrackResolve = undefined;\r\n        this.waitingForPrackReject = undefined;\r\n    };\r\n    /**\r\n     * @throws {Exceptions.TerminatedSessionError} The session terminated before being accepted (i.e. cancel arrived).\r\n     */\r\n    InviteServerContext.prototype.waitForArrivalOfPrack = function () {\r\n        var _this = this;\r\n        if (this.waitingForPrackPromise) {\r\n            throw new Error(\"Already waiting for PRACK\");\r\n        }\r\n        this.waitingForPrackPromise = new Promise(function (resolve, reject) {\r\n            _this.waitingForPrackResolve = resolve;\r\n            _this.waitingForPrackReject = reject;\r\n        });\r\n        return this.waitingForPrackPromise;\r\n    };\r\n    InviteServerContext.prototype.getOffer = function (options) {\r\n        this.hasOffer = true;\r\n        var sdh = this.getSessionDescriptionHandler();\r\n        return sdh\r\n            .getDescription(options.sessionDescriptionHandlerOptions, options.modifiers)\r\n            .then(function (bodyObj) { return Utils_1.Utils.fromBodyObj(bodyObj); });\r\n    };\r\n    InviteServerContext.prototype.setAnswer = function (answer, options) {\r\n        this.hasAnswer = true;\r\n        var sdh = this.getSessionDescriptionHandler();\r\n        if (!sdh.hasDescription(answer.contentType)) {\r\n            return Promise.reject(new Exceptions_1.Exceptions.UnsupportedSessionDescriptionContentTypeError());\r\n        }\r\n        return sdh\r\n            .setDescription(answer.content, options.sessionDescriptionHandlerOptions, options.modifiers);\r\n    };\r\n    InviteServerContext.prototype.setOfferAndGetAnswer = function (offer, options) {\r\n        this.hasOffer = true;\r\n        this.hasAnswer = true;\r\n        var sdh = this.getSessionDescriptionHandler();\r\n        if (!sdh.hasDescription(offer.contentType)) {\r\n            return Promise.reject(new Exceptions_1.Exceptions.UnsupportedSessionDescriptionContentTypeError());\r\n        }\r\n        return sdh\r\n            .setDescription(offer.content, options.sessionDescriptionHandlerOptions, options.modifiers)\r\n            .then(function () { return sdh.getDescription(options.sessionDescriptionHandlerOptions, options.modifiers); })\r\n            .then(function (bodyObj) { return Utils_1.Utils.fromBodyObj(bodyObj); });\r\n    };\r\n    InviteServerContext.prototype.getSessionDescriptionHandler = function () {\r\n        // Create our session description handler if not already done so...\r\n        var sdh = this.sessionDescriptionHandler = this.setupSessionDescriptionHandler();\r\n        // FIXME: Ported - this can get emitted multiple times even when only created once... don't we care?\r\n        this.emit(\"SessionDescriptionHandler-created\", this.sessionDescriptionHandler);\r\n        // Return.\r\n        return sdh;\r\n    };\r\n    return InviteServerContext;\r\n}(Session));\r\nexports.InviteServerContext = InviteServerContext;\r\n// tslint:disable-next-line:max-classes-per-file\r\nvar InviteClientContext = /** @class */ (function (_super) {\r\n    tslib_1.__extends(InviteClientContext, _super);\r\n    function InviteClientContext(ua, target, options, modifiers) {\r\n        if (options === void 0) { options = {}; }\r\n        if (modifiers === void 0) { modifiers = []; }\r\n        var _this = this;\r\n        if (!ua.configuration.sessionDescriptionHandlerFactory) {\r\n            ua.logger.warn(\"Can't build ISC without SDH Factory\");\r\n            throw new Error(\"ICC Constructor Failed\");\r\n        }\r\n        options.params = options.params || {};\r\n        var anonymous = options.anonymous || false;\r\n        var fromTag = Utils_1.Utils.newTag();\r\n        options.params.fromTag = fromTag;\r\n        /* Do not add ;ob in initial forming dialog requests if the registration over\r\n        *  the current connection got a GRUU URI.\r\n        */\r\n        var contact = ua.contact.toString({\r\n            anonymous: anonymous,\r\n            outbound: anonymous ? !ua.contact.tempGruu : !ua.contact.pubGruu\r\n        });\r\n        var extraHeaders = (options.extraHeaders || []).slice();\r\n        if (anonymous && ua.configuration.uri) {\r\n            options.params.fromDisplayName = \"Anonymous\";\r\n            options.params.fromUri = \"sip:anonymous@anonymous.invalid\";\r\n            extraHeaders.push(\"P-Preferred-Identity: \" + ua.configuration.uri.toString());\r\n            extraHeaders.push(\"Privacy: id\");\r\n        }\r\n        extraHeaders.push(\"Contact: \" + contact);\r\n        // this is UA.C.ALLOWED_METHODS, removed to get around circular dependency\r\n        extraHeaders.push(\"Allow: \" + [\r\n            \"ACK\",\r\n            \"CANCEL\",\r\n            \"INVITE\",\r\n            \"MESSAGE\",\r\n            \"BYE\",\r\n            \"OPTIONS\",\r\n            \"INFO\",\r\n            \"NOTIFY\",\r\n            \"REFER\"\r\n        ].toString());\r\n        if (ua.configuration.rel100 === Constants_1.C.supported.REQUIRED) {\r\n            extraHeaders.push(\"Require: 100rel\");\r\n        }\r\n        if (ua.configuration.replaces === Constants_1.C.supported.REQUIRED) {\r\n            extraHeaders.push(\"Require: replaces\");\r\n        }\r\n        options.extraHeaders = extraHeaders;\r\n        _this = _super.call(this, ua.configuration.sessionDescriptionHandlerFactory) || this;\r\n        ClientContext_1.ClientContext.initializer(_this, ua, Constants_1.C.INVITE, target, options);\r\n        _this.earlyMediaSessionDescriptionHandlers = new Map();\r\n        _this.type = Enums_1.TypeStrings.InviteClientContext;\r\n        _this.passedOptions = options; // Save for later to use with refer\r\n        _this.sessionDescriptionHandlerOptions = options.sessionDescriptionHandlerOptions || {};\r\n        _this.modifiers = modifiers;\r\n        _this.inviteWithoutSdp = options.inviteWithoutSdp || false;\r\n        // Set anonymous property\r\n        _this.anonymous = options.anonymous || false;\r\n        // Custom data to be sent either in INVITE or in ACK\r\n        _this.renderbody = options.renderbody || undefined;\r\n        _this.rendertype = options.rendertype || \"text/plain\";\r\n        // Session parameter initialization\r\n        _this.fromTag = fromTag;\r\n        _this.contact = contact;\r\n        // Check Session Status\r\n        if (_this.status !== Enums_1.SessionStatus.STATUS_NULL) {\r\n            throw new Exceptions_1.Exceptions.InvalidStateError(_this.status);\r\n        }\r\n        // OutgoingSession specific parameters\r\n        _this.isCanceled = false;\r\n        _this.received100 = false;\r\n        _this.method = Constants_1.C.INVITE;\r\n        _this.logger = ua.getLogger(\"sip.inviteclientcontext\");\r\n        ua.applicants[_this.toString()] = _this;\r\n        _this.id = _this.request.callId + _this.fromTag;\r\n        _this.onInfo = options.onInfo;\r\n        _this.errorListener = _this.onTransportError.bind(_this);\r\n        if (ua.transport) {\r\n            ua.transport.on(\"transportError\", _this.errorListener);\r\n        }\r\n        return _this;\r\n    }\r\n    InviteClientContext.prototype.receiveResponse = function (response) {\r\n        throw new Error(\"Unimplemented.\");\r\n    };\r\n    // hack for getting around ClientContext interface\r\n    InviteClientContext.prototype.send = function () {\r\n        this.sendInvite();\r\n        return this;\r\n    };\r\n    InviteClientContext.prototype.invite = function () {\r\n        var _this = this;\r\n        // Save the session into the ua sessions collection.\r\n        // Note: placing in constructor breaks call to request.cancel on close... User does not need this anyway\r\n        this.ua.sessions[this.id] = this;\r\n        // This should allow the function to return so that listeners can be set up for these events\r\n        Promise.resolve().then(function () {\r\n            // FIXME: There is a race condition where cancel (or terminate) can be called synchronously after invite.\r\n            if (_this.isCanceled || _this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\r\n                return;\r\n            }\r\n            if (_this.inviteWithoutSdp) {\r\n                // just send an invite with no sdp...\r\n                if (_this.renderbody && _this.rendertype) {\r\n                    _this.request.body = {\r\n                        body: _this.renderbody,\r\n                        contentType: _this.rendertype\r\n                    };\r\n                }\r\n                _this.status = Enums_1.SessionStatus.STATUS_INVITE_SENT;\r\n                _this.send();\r\n            }\r\n            else {\r\n                // Initialize Media Session\r\n                _this.sessionDescriptionHandler = _this.sessionDescriptionHandlerFactory(_this, _this.ua.configuration.sessionDescriptionHandlerFactoryOptions || {});\r\n                _this.emit(\"SessionDescriptionHandler-created\", _this.sessionDescriptionHandler);\r\n                _this.sessionDescriptionHandler.getDescription(_this.sessionDescriptionHandlerOptions, _this.modifiers)\r\n                    .then(function (description) {\r\n                    // FIXME: There is a race condition where cancel (or terminate) can be called (a)synchronously after invite.\r\n                    if (_this.isCanceled || _this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\r\n                        return;\r\n                    }\r\n                    _this.hasOffer = true;\r\n                    _this.request.body = description;\r\n                    _this.status = Enums_1.SessionStatus.STATUS_INVITE_SENT;\r\n                    _this.send();\r\n                }, function (err) {\r\n                    if (err.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\r\n                        _this.logger.log(err.message);\r\n                        if (err.error) {\r\n                            _this.logger.log(err.error);\r\n                        }\r\n                    }\r\n                    if (_this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\r\n                        return;\r\n                    }\r\n                    _this.failed(undefined, Constants_1.C.causes.WEBRTC_ERROR);\r\n                    _this.terminated(undefined, Constants_1.C.causes.WEBRTC_ERROR);\r\n                });\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    InviteClientContext.prototype.cancel = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        // Check Session Status\r\n        if (this.status === Enums_1.SessionStatus.STATUS_TERMINATED || this.status === Enums_1.SessionStatus.STATUS_CONFIRMED) {\r\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.status);\r\n        }\r\n        if (this.isCanceled) {\r\n            throw new Exceptions_1.Exceptions.InvalidStateError(Enums_1.SessionStatus.STATUS_CANCELED);\r\n        }\r\n        this.isCanceled = true;\r\n        this.logger.log(\"Canceling session\");\r\n        var cancelReason = Utils_1.Utils.getCancelReason(options.statusCode, options.reasonPhrase);\r\n        options.extraHeaders = (options.extraHeaders || []).slice();\r\n        if (this.outgoingInviteRequest) {\r\n            this.logger.warn(\"Canceling session before it was created\");\r\n            this.outgoingInviteRequest.cancel(cancelReason, options);\r\n        }\r\n        return this.canceled();\r\n    };\r\n    InviteClientContext.prototype.terminate = function (options) {\r\n        if (this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\r\n            return this;\r\n        }\r\n        if (this.status === Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK || this.status === Enums_1.SessionStatus.STATUS_CONFIRMED) {\r\n            this.bye(options);\r\n        }\r\n        else {\r\n            this.cancel(options);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 13.2.1 Creating the Initial INVITE\r\n     *\r\n     * Since the initial INVITE represents a request outside of a dialog,\r\n     * its construction follows the procedures of Section 8.1.1.  Additional\r\n     * processing is required for the specific case of INVITE.\r\n     *\r\n     * An Allow header field (Section 20.5) SHOULD be present in the INVITE.\r\n     * It indicates what methods can be invoked within a dialog, on the UA\r\n     * sending the INVITE, for the duration of the dialog.  For example, a\r\n     * UA capable of receiving INFO requests within a dialog [34] SHOULD\r\n     * include an Allow header field listing the INFO method.\r\n     *\r\n     * A Supported header field (Section 20.37) SHOULD be present in the\r\n     * INVITE.  It enumerates all the extensions understood by the UAC.\r\n     *\r\n     * An Accept (Section 20.1) header field MAY be present in the INVITE.\r\n     * It indicates which Content-Types are acceptable to the UA, in both\r\n     * the response received by it, and in any subsequent requests sent to\r\n     * it within dialogs established by the INVITE.  The Accept header field\r\n     * is especially useful for indicating support of various session\r\n     * description formats.\r\n     *\r\n     * The UAC MAY add an Expires header field (Section 20.19) to limit the\r\n     * validity of the invitation.  If the time indicated in the Expires\r\n     * header field is reached and no final answer for the INVITE has been\r\n     * received, the UAC core SHOULD generate a CANCEL request for the\r\n     * INVITE, as per Section 9.\r\n     *\r\n     * A UAC MAY also find it useful to add, among others, Subject (Section\r\n     * 20.36), Organization (Section 20.25) and User-Agent (Section 20.41)\r\n     * header fields.  They all contain information related to the INVITE.\r\n     *\r\n     * The UAC MAY choose to add a message body to the INVITE.  Section\r\n     * 8.1.1.10 deals with how to construct the header fields -- Content-\r\n     * Type among others -- needed to describe the message body.\r\n     *\r\n     * https://tools.ietf.org/html/rfc3261#section-13.2.1\r\n     */\r\n    InviteClientContext.prototype.sendInvite = function () {\r\n        //    There are special rules for message bodies that contain a session\r\n        //    description - their corresponding Content-Disposition is \"session\".\r\n        //    SIP uses an offer/answer model where one UA sends a session\r\n        //    description, called the offer, which contains a proposed description\r\n        //    of the session.  The offer indicates the desired communications means\r\n        //    (audio, video, games), parameters of those means (such as codec\r\n        //    types) and addresses for receiving media from the answerer.  The\r\n        //    other UA responds with another session description, called the\r\n        //    answer, which indicates which communications means are accepted, the\r\n        //    parameters that apply to those means, and addresses for receiving\r\n        //    media from the offerer. An offer/answer exchange is within the\r\n        //    context of a dialog, so that if a SIP INVITE results in multiple\r\n        //    dialogs, each is a separate offer/answer exchange.  The offer/answer\r\n        //    model defines restrictions on when offers and answers can be made\r\n        //    (for example, you cannot make a new offer while one is in progress).\r\n        //    This results in restrictions on where the offers and answers can\r\n        //    appear in SIP messages.  In this specification, offers and answers\r\n        //    can only appear in INVITE requests and responses, and ACK.  The usage\r\n        //    of offers and answers is further restricted.  For the initial INVITE\r\n        //    transaction, the rules are:\r\n        //\r\n        //       o  The initial offer MUST be in either an INVITE or, if not there,\r\n        //          in the first reliable non-failure message from the UAS back to\r\n        //          the UAC.  In this specification, that is the final 2xx\r\n        //          response.\r\n        //\r\n        //       o  If the initial offer is in an INVITE, the answer MUST be in a\r\n        //          reliable non-failure message from UAS back to UAC which is\r\n        //          correlated to that INVITE.  For this specification, that is\r\n        //          only the final 2xx response to that INVITE.  That same exact\r\n        //          answer MAY also be placed in any provisional responses sent\r\n        //          prior to the answer.  The UAC MUST treat the first session\r\n        //          description it receives as the answer, and MUST ignore any\r\n        //          session descriptions in subsequent responses to the initial\r\n        //          INVITE.\r\n        //\r\n        //       o  If the initial offer is in the first reliable non-failure\r\n        //          message from the UAS back to UAC, the answer MUST be in the\r\n        //          acknowledgement for that message (in this specification, ACK\r\n        //          for a 2xx response).\r\n        //\r\n        //       o  After having sent or received an answer to the first offer, the\r\n        //          UAC MAY generate subsequent offers in requests based on rules\r\n        //          specified for that method, but only if it has received answers\r\n        //          to any previous offers, and has not sent any offers to which it\r\n        //          hasn't gotten an answer.\r\n        //\r\n        //       o  Once the UAS has sent or received an answer to the initial\r\n        //          offer, it MUST NOT generate subsequent offers in any responses\r\n        //          to the initial INVITE.  This means that a UAS based on this\r\n        //          specification alone can never generate subsequent offers until\r\n        //          completion of the initial transaction.\r\n        //\r\n        // https://tools.ietf.org/html/rfc3261#section-13.2.1\r\n        var _this = this;\r\n        // 5 The Offer/Answer Model and PRACK\r\n        //\r\n        //    RFC 3261 describes guidelines for the sets of messages in which\r\n        //    offers and answers [3] can appear.  Based on those guidelines, this\r\n        //    extension provides additional opportunities for offer/answer\r\n        //    exchanges.\r\n        //    If the INVITE contained an offer, the UAS MAY generate an answer in a\r\n        //    reliable provisional response (assuming these are supported by the\r\n        //    UAC).  That results in the establishment of the session before\r\n        //    completion of the call.  Similarly, if a reliable provisional\r\n        //    response is the first reliable message sent back to the UAC, and the\r\n        //    INVITE did not contain an offer, one MUST appear in that reliable\r\n        //    provisional response.\r\n        //    If the UAC receives a reliable provisional response with an offer\r\n        //    (this would occur if the UAC sent an INVITE without an offer, in\r\n        //    which case the first reliable provisional response will contain the\r\n        //    offer), it MUST generate an answer in the PRACK.  If the UAC receives\r\n        //    a reliable provisional response with an answer, it MAY generate an\r\n        //    additional offer in the PRACK.  If the UAS receives a PRACK with an\r\n        //    offer, it MUST place the answer in the 2xx to the PRACK.\r\n        //    Once an answer has been sent or received, the UA SHOULD establish the\r\n        //    session based on the parameters of the offer and answer, even if the\r\n        //    original INVITE itself has not been responded to.\r\n        //    If the UAS had placed a session description in any reliable\r\n        //    provisional response that is unacknowledged when the INVITE is\r\n        //    accepted, the UAS MUST delay sending the 2xx until the provisional\r\n        //    response is acknowledged.  Otherwise, the reliability of the 1xx\r\n        //    cannot be guaranteed, and reliability is needed for proper operation\r\n        //    of the offer/answer exchange.\r\n        //    All user agents that support this extension MUST support all\r\n        //    offer/answer exchanges that are possible based on the rules in\r\n        //    Section 13.2 of RFC 3261, based on the existence of INVITE and PRACK\r\n        //    as requests, and 2xx and reliable 1xx as non-failure reliable\r\n        //    responses.\r\n        //\r\n        // https://tools.ietf.org/html/rfc3262#section-5\r\n        ////\r\n        // The Offer/Answer Model Implementation\r\n        //\r\n        // The offer/answer model is straight forward, but one MUST READ the specifications...\r\n        //\r\n        // 13.2.1 Creating the Initial INVITE (paragraph 8 in particular)\r\n        // https://tools.ietf.org/html/rfc3261#section-13.2.1\r\n        //\r\n        // 5 The Offer/Answer Model and PRACK\r\n        // https://tools.ietf.org/html/rfc3262#section-5\r\n        //\r\n        // Session Initiation Protocol (SIP) Usage of the Offer/Answer Model\r\n        // https://tools.ietf.org/html/rfc6337\r\n        //\r\n        // *** IMPORTANT IMPLEMENTATION CHOICES ***\r\n        //\r\n        // TLDR...\r\n        //\r\n        //  1) Only one offer/answer exchange permitted during initial INVITE.\r\n        //  2) No \"early media\" if the initial offer is in an INVITE.\r\n        //\r\n        //\r\n        // 1) Initial Offer/Answer Restriction.\r\n        //\r\n        // Our implementation replaces the following bullet point...\r\n        //\r\n        // o  After having sent or received an answer to the first offer, the\r\n        //    UAC MAY generate subsequent offers in requests based on rules\r\n        //    specified for that method, but only if it has received answers\r\n        //    to any previous offers, and has not sent any offers to which it\r\n        //    hasn't gotten an answer.\r\n        // https://tools.ietf.org/html/rfc3261#section-13.2.1\r\n        //\r\n        // ...with...\r\n        //\r\n        // o  After having sent or received an answer to the first offer, the\r\n        //    UAC MUST NOT generate subsequent offers in requests based on rules\r\n        //    specified for that method.\r\n        //\r\n        // ...which in combination with this bullet point...\r\n        //\r\n        // o  Once the UAS has sent or received an answer to the initial\r\n        //    offer, it MUST NOT generate subsequent offers in any responses\r\n        //    to the initial INVITE.  This means that a UAS based on this\r\n        //    specification alone can never generate subsequent offers until\r\n        //    completion of the initial transaction.\r\n        // https://tools.ietf.org/html/rfc3261#section-13.2.1\r\n        //\r\n        // ...ensures that EXACTLY ONE offer/answer exchange will occur\r\n        // during an initial out of dialog INVITE request made by our UAC.\r\n        //\r\n        //\r\n        // 2) Early Media Restriction.\r\n        //\r\n        // While our implementation adheres to the following bullet point...\r\n        //\r\n        // o  If the initial offer is in an INVITE, the answer MUST be in a\r\n        //    reliable non-failure message from UAS back to UAC which is\r\n        //    correlated to that INVITE.  For this specification, that is\r\n        //    only the final 2xx response to that INVITE.  That same exact\r\n        //    answer MAY also be placed in any provisional responses sent\r\n        //    prior to the answer.  The UAC MUST treat the first session\r\n        //    description it receives as the answer, and MUST ignore any\r\n        //    session descriptions in subsequent responses to the initial\r\n        //    INVITE.\r\n        // https://tools.ietf.org/html/rfc3261#section-13.2.1\r\n        //\r\n        // We have made the following implementation decision with regard to early media...\r\n        //\r\n        // o  If the initial offer is in the INVITE, the answer from the\r\n        //    UAS back to the UAC will establish a media session only\r\n        //    only after the final 2xx response to that INVITE is received.\r\n        //\r\n        // The reason for this decision is rooted in a restriction currently\r\n        // inherent in WebRTC. Specifically, while a SIP INVITE request with an\r\n        // initial offer may fork resulting in more than one provisional answer,\r\n        // there is currently no easy/good way to to \"fork\" an offer generated\r\n        // by a peer connection. In particular, a WebRTC offer currently may only\r\n        // be matched with one answer and we have no good way to know which\r\n        // \"provisional answer\" is going to be the \"final answer\". So we have\r\n        // decided to punt and not create any \"early media\" sessions in this case.\r\n        //\r\n        // The upshot is that if you want \"early media\", you must not put the\r\n        // initial offer in the INVITE. Instead, force the UAS to provide the\r\n        // initial offer by sending an INVITE without an offer. In the WebRTC\r\n        // case this allows us to create a unique peer connection with a unique\r\n        // answer for every provisional offer with \"early media\" on all of them.\r\n        ////\r\n        ////\r\n        // ROADMAP: The Offer/Answer Model Implementation\r\n        //\r\n        // The \"no early media if offer in INVITE\" implementation is not a\r\n        // welcome one. The masses want it. The want it and they want it\r\n        // to work for WebRTC (so they want to have their cake and eat too).\r\n        //\r\n        // So while we currently cannot make the offer in INVITE+forking+webrtc\r\n        // case work, we decided to do the following...\r\n        //\r\n        // 1) modify SDH Factory to provide an initial offer without giving us the SDH, and then...\r\n        // 2) stick that offer in the initial INVITE, and when 183 with initial answer is received...\r\n        // 3) ask SDH Factory if it supports \"earlyRemoteAnswer\"\r\n        //   a) if true, ask SDH Factory to createSDH(localOffer).then((sdh) => sdh.setDescription(remoteAnswer)\r\n        //   b) if false, defer getting a SDH until 2xx response is received\r\n        //\r\n        // Our supplied WebRTC SDH will default to behavior 3b which works in forking environment (without)\r\n        // early media if initial offer is in the INVITE). We will, however, provide an \"inviteWillNotFork\"\r\n        // option which if set to \"true\" will have our supplied WebRTC SDH behave in the 3a manner.\r\n        // That will result in\r\n        //  - early media working with initial offer in the INVITE, and...\r\n        //  - if the INVITE forks, the session terminating with an ERROR that reads like\r\n        //    \"You set 'inviteWillNotFork' to true but the INVITE forked. You can't eat your cake, and have it too.\"\r\n        //  - furthermore, we accept that users will report that error to us as \"bug\" regardless\r\n        //\r\n        // So, SDH Factory is going to end up with a new interface along the lines of...\r\n        //\r\n        // interface SessionDescriptionHandlerFactory {\r\n        //   makeLocalOffer(): Promise<ContentTypeAndBody>;\r\n        //   makeSessionDescriptionHandler(\r\n        //     initialOffer: ContentTypeAndBody, offerType: \"local\" | \"remote\"\r\n        //   ): Promise<SessionDescriptionHandler>;\r\n        //   supportsEarlyRemoteAnswer: boolean;\r\n        //   supportsContentType(contentType: string): boolean;\r\n        //   getDescription(description: ContentTypeAndBody): Promise<ContentTypeAndBody>\r\n        //   setDescription(description: ContentTypeAndBody): Promise<void>\r\n        // }\r\n        //\r\n        // We should be able to get rid of all the hasOffer/hasAnswer tracking code and otherwise code\r\n        // it up to the same interaction with the SDH Factory and SDH regardless of signaling scenario.\r\n        ////\r\n        // Send the INVITE request.\r\n        this.outgoingInviteRequest = this.ua.userAgentCore.invite(this.request, {\r\n            onAccept: function (inviteResponse) { return _this.onAccept(inviteResponse); },\r\n            onProgress: function (inviteResponse) { return _this.onProgress(inviteResponse); },\r\n            onRedirect: function (inviteResponse) { return _this.onRedirect(inviteResponse); },\r\n            onReject: function (inviteResponse) { return _this.onReject(inviteResponse); },\r\n            onTrying: function (inviteResponse) { return _this.onTrying(inviteResponse); }\r\n        });\r\n    };\r\n    InviteClientContext.prototype.ackAndBye = function (inviteResponse, session, statusCode, reasonPhrase) {\r\n        if (!this.ua.userAgentCore) {\r\n            throw new Error(\"Method requires user agent core.\");\r\n        }\r\n        var extraHeaders = [];\r\n        if (statusCode) {\r\n            extraHeaders.push(\"Reason: \" + Utils_1.Utils.getReasonHeaderValue(statusCode, reasonPhrase));\r\n        }\r\n        var outgoingAckRequest = inviteResponse.ack();\r\n        this.emit(\"ack\", outgoingAckRequest.message);\r\n        var outgoingByeRequest = session.bye(undefined, { extraHeaders: extraHeaders });\r\n        this.emit(\"bye\", outgoingByeRequest.message);\r\n    };\r\n    InviteClientContext.prototype.disposeEarlyMedia = function () {\r\n        if (!this.earlyMediaSessionDescriptionHandlers) {\r\n            throw new Error(\"Early media session description handlers undefined.\");\r\n        }\r\n        this.earlyMediaSessionDescriptionHandlers.forEach(function (sessionDescriptionHandler) {\r\n            sessionDescriptionHandler.close();\r\n        });\r\n    };\r\n    /**\r\n     * Handle final response to initial INVITE.\r\n     * @param inviteResponse 2xx response.\r\n     */\r\n    InviteClientContext.prototype.onAccept = function (inviteResponse) {\r\n        var _this = this;\r\n        if (!this.earlyMediaSessionDescriptionHandlers) {\r\n            throw new Error(\"Early media session description handlers undefined.\");\r\n        }\r\n        var response = inviteResponse.message;\r\n        var session = inviteResponse.session;\r\n        // Our transaction layer is \"non-standard\" in that it will only\r\n        // pass us a 2xx response once per branch, so there is no need to\r\n        // worry about dealing with 2xx retransmissions. However, we can\r\n        // and do still get 2xx responses for multiple branches (when an\r\n        // INVITE is forked) which may create multiple confirmed dialogs.\r\n        // Herein we are acking and sending a bye to any confirmed dialogs\r\n        // which arrive beyond the first one. This is the desired behavior\r\n        // for most applications (but certainly not all).\r\n        // If we already received a confirmed dialog, ack & bye this session.\r\n        if (this.session) {\r\n            this.ackAndBye(inviteResponse, session);\r\n            return;\r\n        }\r\n        // If the user requested cancellation, ack & bye this session.\r\n        if (this.isCanceled) {\r\n            this.ackAndBye(inviteResponse, session);\r\n            this.emit(\"bye\", this.request); // FIXME: Ported this odd second \"bye\" emit\r\n            return;\r\n        }\r\n        // Ported behavior.\r\n        if (response.hasHeader(\"P-Asserted-Identity\")) {\r\n            this.assertedIdentity = core_1.Grammar.nameAddrHeaderParse(response.getHeader(\"P-Asserted-Identity\"));\r\n        }\r\n        // We have a confirmed dialog.\r\n        this.session = session;\r\n        this.session.delegate = {\r\n            onAck: function (ackRequest) { return _this.onAck(ackRequest); },\r\n            onBye: function (byeRequest) { return _this.receiveRequest(byeRequest); },\r\n            onInfo: function (infoRequest) { return _this.receiveRequest(infoRequest); },\r\n            onInvite: function (inviteRequest) { return _this.receiveRequest(inviteRequest); },\r\n            onMessage: function (messageRequest) { return _this.receiveRequest(messageRequest); },\r\n            onNotify: function (notifyRequest) { return _this.receiveRequest(notifyRequest); },\r\n            onPrack: function (prackRequest) { return _this.receiveRequest(prackRequest); },\r\n            onRefer: function (referRequest) { return _this.receiveRequest(referRequest); },\r\n        };\r\n        switch (session.signalingState) {\r\n            case core_1.SignalingState.Initial:\r\n                // INVITE without Offer, so MUST have Offer at this point, so invalid state.\r\n                this.ackAndBye(inviteResponse, session, 400, \"Missing session description\");\r\n                this.failed(response, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\r\n                break;\r\n            case core_1.SignalingState.HaveLocalOffer:\r\n                // INVITE with Offer, so MUST have Answer at this point, so invalid state.\r\n                this.ackAndBye(inviteResponse, session, 400, \"Missing session description\");\r\n                this.failed(response, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\r\n                break;\r\n            case core_1.SignalingState.HaveRemoteOffer:\r\n                // INVITE without Offer, received offer in 2xx, so MUST send Answer in ACK.\r\n                var sdh_1 = this.sessionDescriptionHandlerFactory(this, this.ua.configuration.sessionDescriptionHandlerFactoryOptions || {});\r\n                this.sessionDescriptionHandler = sdh_1;\r\n                this.emit(\"SessionDescriptionHandler-created\", this.sessionDescriptionHandler);\r\n                if (!sdh_1.hasDescription(response.getHeader(\"Content-Type\") || \"\")) {\r\n                    this.ackAndBye(inviteResponse, session, 400, \"Missing session description\");\r\n                    this.failed(response, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\r\n                    break;\r\n                }\r\n                this.hasOffer = true;\r\n                sdh_1\r\n                    .setDescription(response.body, this.sessionDescriptionHandlerOptions, this.modifiers)\r\n                    .then(function () { return sdh_1.getDescription(_this.sessionDescriptionHandlerOptions, _this.modifiers); })\r\n                    .then(function (description) {\r\n                    if (_this.isCanceled || _this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\r\n                        return;\r\n                    }\r\n                    _this.status = Enums_1.SessionStatus.STATUS_CONFIRMED;\r\n                    _this.hasAnswer = true;\r\n                    var body = {\r\n                        contentDisposition: \"session\", contentType: description.contentType, content: description.body\r\n                    };\r\n                    var ackRequest = inviteResponse.ack({ body: body });\r\n                    _this.emit(\"ack\", ackRequest.message);\r\n                    _this.accepted(response);\r\n                })\r\n                    .catch(function (e) {\r\n                    if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\r\n                        _this.logger.warn(\"invalid description\");\r\n                        _this.logger.warn(e.toString());\r\n                        // TODO: This message is inconsistent\r\n                        _this.ackAndBye(inviteResponse, session, 488, \"Invalid session description\");\r\n                        _this.failed(response, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\r\n                    }\r\n                    else {\r\n                        throw e;\r\n                    }\r\n                });\r\n                break;\r\n            case core_1.SignalingState.Stable:\r\n                // This session has completed an initial offer/answer exchange...\r\n                var options_1;\r\n                if (this.renderbody && this.rendertype) {\r\n                    options_1 = { body: { contentDisposition: \"render\", contentType: this.rendertype, content: this.renderbody } };\r\n                }\r\n                // If INVITE with Offer and we have been waiting till now to apply the answer.\r\n                if (this.hasOffer && !this.hasAnswer) {\r\n                    if (!this.sessionDescriptionHandler) {\r\n                        throw new Error(\"Session description handler undefined.\");\r\n                    }\r\n                    var answer = session.answer;\r\n                    if (!answer) {\r\n                        throw new Error(\"Answer is undefined.\");\r\n                    }\r\n                    this.sessionDescriptionHandler\r\n                        .setDescription(answer.content, this.sessionDescriptionHandlerOptions, this.modifiers)\r\n                        .then(function () {\r\n                        _this.hasAnswer = true;\r\n                        _this.status = Enums_1.SessionStatus.STATUS_CONFIRMED;\r\n                        var ackRequest = inviteResponse.ack(options_1);\r\n                        _this.emit(\"ack\", ackRequest.message);\r\n                        _this.accepted(response);\r\n                    })\r\n                        .catch(function (error) {\r\n                        _this.logger.error(error);\r\n                        _this.ackAndBye(inviteResponse, session, 488, \"Not Acceptable Here\");\r\n                        _this.failed(response, Constants_1.C.causes.BAD_MEDIA_DESCRIPTION);\r\n                        // FIME: DON'T EAT UNHANDLED ERRORS!\r\n                    });\r\n                }\r\n                else {\r\n                    // Otherwise INVITE with or without Offer and we have already completed the initial exchange.\r\n                    this.sessionDescriptionHandler = this.earlyMediaSessionDescriptionHandlers.get(session.id);\r\n                    if (!this.sessionDescriptionHandler) {\r\n                        throw new Error(\"Session description handler undefined.\");\r\n                    }\r\n                    this.earlyMediaSessionDescriptionHandlers.delete(session.id);\r\n                    this.hasOffer = true;\r\n                    this.hasAnswer = true;\r\n                    this.status = Enums_1.SessionStatus.STATUS_CONFIRMED;\r\n                    var ackRequest = inviteResponse.ack();\r\n                    this.emit(\"ack\", ackRequest.message);\r\n                    this.accepted(response);\r\n                }\r\n                break;\r\n            case core_1.SignalingState.Closed:\r\n                // Dialog has terminated.\r\n                break;\r\n            default:\r\n                throw new Error(\"Unknown session signaling state.\");\r\n        }\r\n        this.disposeEarlyMedia();\r\n    };\r\n    /**\r\n     * Handle provisional response to initial INVITE.\r\n     * @param inviteResponse 1xx response.\r\n     */\r\n    InviteClientContext.prototype.onProgress = function (inviteResponse) {\r\n        var _this = this;\r\n        // Ported - User requested cancellation.\r\n        if (this.isCanceled) {\r\n            return;\r\n        }\r\n        if (!this.outgoingInviteRequest) {\r\n            throw new Error(\"Outgoing INVITE request undefined.\");\r\n        }\r\n        if (!this.earlyMediaSessionDescriptionHandlers) {\r\n            throw new Error(\"Early media session description handlers undefined.\");\r\n        }\r\n        var response = inviteResponse.message;\r\n        var session = inviteResponse.session;\r\n        // Ported - Set status.\r\n        this.status = Enums_1.SessionStatus.STATUS_1XX_RECEIVED;\r\n        // Ported - Set assertedIdentity.\r\n        if (response.hasHeader(\"P-Asserted-Identity\")) {\r\n            this.assertedIdentity = core_1.Grammar.nameAddrHeaderParse(response.getHeader(\"P-Asserted-Identity\"));\r\n        }\r\n        // The provisional response MUST establish a dialog if one is not yet created.\r\n        // https://tools.ietf.org/html/rfc3262#section-4\r\n        if (!session) {\r\n            // A response with a to tag MUST create a session (should never get here).\r\n            throw new Error(\"Session undefined.\");\r\n        }\r\n        // If a provisional response is received for an initial request, and\r\n        // that response contains a Require header field containing the option\r\n        // tag 100rel, the response is to be sent reliably.  If the response is\r\n        // a 100 (Trying) (as opposed to 101 to 199), this option tag MUST be\r\n        // ignored, and the procedures below MUST NOT be used.\r\n        // https://tools.ietf.org/html/rfc3262#section-4\r\n        var requireHeader = response.getHeader(\"require\");\r\n        var rseqHeader = response.getHeader(\"rseq\");\r\n        var rseq = requireHeader && requireHeader.includes(\"100rel\") && rseqHeader ? Number(rseqHeader) : undefined;\r\n        var responseReliable = !!rseq;\r\n        var extraHeaders = [];\r\n        if (responseReliable) {\r\n            extraHeaders.push(\"RAck: \" + response.getHeader(\"rseq\") + \" \" + response.getHeader(\"cseq\"));\r\n        }\r\n        // INVITE without Offer and session still has no offer (and no answer).\r\n        if (session.signalingState === core_1.SignalingState.Initial) {\r\n            // Similarly, if a reliable provisional\r\n            // response is the first reliable message sent back to the UAC, and the\r\n            // INVITE did not contain an offer, one MUST appear in that reliable\r\n            // provisional response.\r\n            // https://tools.ietf.org/html/rfc3262#section-5\r\n            if (responseReliable) {\r\n                this.logger.warn(\"First reliable provisional response received MUST contain an offer when INVITE does not contain an offer.\");\r\n                // FIXME: Known popular UA's currently end up here...\r\n                inviteResponse.prack({ extraHeaders: extraHeaders });\r\n            }\r\n            this.emit(\"progress\", response);\r\n            return;\r\n        }\r\n        // INVITE with Offer and session only has that initial local offer.\r\n        if (session.signalingState === core_1.SignalingState.HaveLocalOffer) {\r\n            if (responseReliable) {\r\n                inviteResponse.prack({ extraHeaders: extraHeaders });\r\n            }\r\n            this.emit(\"progress\", response);\r\n            return;\r\n        }\r\n        // INVITE without Offer and received initial offer in provisional response\r\n        if (session.signalingState === core_1.SignalingState.HaveRemoteOffer) {\r\n            // The initial offer MUST be in either an INVITE or, if not there,\r\n            // in the first reliable non-failure message from the UAS back to\r\n            // the UAC.\r\n            // https://tools.ietf.org/html/rfc3261#section-13.2.1\r\n            // According to Section 13.2.1 of [RFC3261], 'The first reliable\r\n            // non-failure message' must have an offer if there is no offer in the\r\n            // INVITE request.  This means that the User Agent (UA) that receives\r\n            // the INVITE request without an offer must include an offer in the\r\n            // first reliable response with 100rel extension.  If no reliable\r\n            // provisional response has been sent, the User Agent Server (UAS) must\r\n            // include an offer when sending 2xx response.\r\n            // https://tools.ietf.org/html/rfc6337#section-2.2\r\n            if (!responseReliable) {\r\n                this.logger.warn(\"Non-reliable provisional response MUST NOT contain an initial offer, discarding response.\");\r\n                return;\r\n            }\r\n            // If the initial offer is in the first reliable non-failure\r\n            // message from the UAS back to UAC, the answer MUST be in the\r\n            // acknowledgement for that message\r\n            var sdh_2 = this.sessionDescriptionHandlerFactory(this, this.ua.configuration.sessionDescriptionHandlerFactoryOptions || {});\r\n            this.emit(\"SessionDescriptionHandler-created\", sdh_2);\r\n            this.earlyMediaSessionDescriptionHandlers.set(session.id, sdh_2);\r\n            sdh_2\r\n                .setDescription(response.body, this.sessionDescriptionHandlerOptions, this.modifiers)\r\n                .then(function () { return sdh_2.getDescription(_this.sessionDescriptionHandlerOptions, _this.modifiers); })\r\n                .then(function (description) {\r\n                var body = {\r\n                    contentDisposition: \"session\", contentType: description.contentType, content: description.body\r\n                };\r\n                inviteResponse.prack({ extraHeaders: extraHeaders, body: body });\r\n                _this.status = Enums_1.SessionStatus.STATUS_EARLY_MEDIA;\r\n                _this.emit(\"progress\", response);\r\n            })\r\n                .catch(function (error) {\r\n                if (_this.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\r\n                    return;\r\n                }\r\n                _this.failed(undefined, Constants_1.C.causes.WEBRTC_ERROR);\r\n                _this.terminated(undefined, Constants_1.C.causes.WEBRTC_ERROR);\r\n            });\r\n            return;\r\n        }\r\n        // This session has completed an initial offer/answer exchange, so...\r\n        // - INVITE with SDP and this provisional response MAY be reliable\r\n        // - INVITE without SDP and this provisional response MAY be reliable\r\n        if (session.signalingState === core_1.SignalingState.Stable) {\r\n            if (responseReliable) {\r\n                inviteResponse.prack({ extraHeaders: extraHeaders });\r\n            }\r\n            // Note: As documented, no early media if offer was in INVITE, so nothing to be done.\r\n            // FIXME: TODO: Add a flag/hack to allow early media in this case. There are people\r\n            //              in non-forking environments (think straight to FreeSWITCH) who want\r\n            //              early media on a 183. Not sure how to actually make it work, basically\r\n            //              something like...\r\n            if (false) {}\r\n            this.emit(\"progress\", response);\r\n            return;\r\n        }\r\n    };\r\n    /**\r\n     * Handle final response to initial INVITE.\r\n     * @param inviteResponse 3xx response.\r\n     */\r\n    InviteClientContext.prototype.onRedirect = function (inviteResponse) {\r\n        this.disposeEarlyMedia();\r\n        var response = inviteResponse.message;\r\n        var statusCode = response.statusCode;\r\n        var cause = Utils_1.Utils.sipErrorCause(statusCode || 0);\r\n        this.rejected(response, cause);\r\n        this.failed(response, cause);\r\n        this.terminated(response, cause);\r\n    };\r\n    /**\r\n     * Handle final response to initial INVITE.\r\n     * @param inviteResponse 4xx, 5xx, or 6xx response.\r\n     */\r\n    InviteClientContext.prototype.onReject = function (inviteResponse) {\r\n        this.disposeEarlyMedia();\r\n        var response = inviteResponse.message;\r\n        var statusCode = response.statusCode;\r\n        var cause = Utils_1.Utils.sipErrorCause(statusCode || 0);\r\n        this.rejected(response, cause);\r\n        this.failed(response, cause);\r\n        this.terminated(response, cause);\r\n    };\r\n    /**\r\n     * Handle final response to initial INVITE.\r\n     * @param inviteResponse 100 response.\r\n     */\r\n    InviteClientContext.prototype.onTrying = function (inviteResponse) {\r\n        this.received100 = true;\r\n        this.emit(\"progress\", inviteResponse.message);\r\n    };\r\n    return InviteClientContext;\r\n}(Session));\r\nexports.InviteClientContext = InviteClientContext;\r\n\r\n\r\n/***/ }),\r\n/* 90 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar events_1 = __webpack_require__(31);\r\nvar Constants_1 = __webpack_require__(80);\r\nvar Enums_1 = __webpack_require__(82);\r\nvar Exceptions_1 = __webpack_require__(84);\r\nvar Utils_1 = __webpack_require__(83);\r\nvar DTMFValidator_1 = __webpack_require__(91);\r\n/**\r\n * @class DTMF\r\n * @param {SIP.Session} session\r\n */\r\nvar DTMF = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DTMF, _super);\r\n    function DTMF(session, tone, options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this) || this;\r\n        _this.C = {\r\n            MIN_DURATION: 70,\r\n            MAX_DURATION: 6000,\r\n            DEFAULT_DURATION: 100,\r\n            MIN_INTER_TONE_GAP: 50,\r\n            DEFAULT_INTER_TONE_GAP: 500\r\n        };\r\n        _this.type = Enums_1.TypeStrings.DTMF;\r\n        if (tone === undefined) {\r\n            throw new TypeError(\"Not enough arguments\");\r\n        }\r\n        _this.logger = session.ua.getLogger(\"sip.invitecontext.dtmf\", session.id);\r\n        _this.owner = session;\r\n        var moreThanOneTone = false;\r\n        // If tone is invalid, it will automatically generate an exception.\r\n        // Otherwise, it will return the tone in the correct format.\r\n        _this.tone = DTMFValidator_1.DTMFValidator.validate(tone, moreThanOneTone);\r\n        var duration = options.duration;\r\n        var interToneGap = options.interToneGap;\r\n        // Check duration\r\n        if (duration && !Utils_1.Utils.isDecimal(duration)) {\r\n            throw new TypeError(\"Invalid tone duration: \" + duration);\r\n        }\r\n        else if (!duration) {\r\n            duration = _this.C.DEFAULT_DURATION;\r\n        }\r\n        else if (duration < _this.C.MIN_DURATION) {\r\n            _this.logger.warn(\"'duration' value is lower than the minimum allowed, setting it to \" +\r\n                _this.C.MIN_DURATION + \" milliseconds\");\r\n            duration = _this.C.MIN_DURATION;\r\n        }\r\n        else if (duration > _this.C.MAX_DURATION) {\r\n            _this.logger.warn(\"'duration' value is greater than the maximum allowed, setting it to \" +\r\n                _this.C.MAX_DURATION + \" milliseconds\");\r\n            duration = _this.C.MAX_DURATION;\r\n        }\r\n        else {\r\n            duration = Math.abs(duration);\r\n        }\r\n        _this.duration = duration;\r\n        // Check interToneGap\r\n        if (interToneGap && !Utils_1.Utils.isDecimal(interToneGap)) {\r\n            throw new TypeError(\"Invalid interToneGap: \" + interToneGap);\r\n        }\r\n        else if (!interToneGap) {\r\n            interToneGap = _this.C.DEFAULT_INTER_TONE_GAP;\r\n        }\r\n        else if (interToneGap < _this.C.MIN_INTER_TONE_GAP) {\r\n            _this.logger.warn(\"'interToneGap' value is lower than the minimum allowed, setting it to \" +\r\n                _this.C.MIN_INTER_TONE_GAP + \" milliseconds\");\r\n            interToneGap = _this.C.MIN_INTER_TONE_GAP;\r\n        }\r\n        else {\r\n            interToneGap = Math.abs(interToneGap);\r\n        }\r\n        _this.interToneGap = interToneGap;\r\n        return _this;\r\n    }\r\n    DTMF.prototype.send = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        // Check RTCSession Status\r\n        if (this.owner.status !== Enums_1.SessionStatus.STATUS_CONFIRMED &&\r\n            this.owner.status !== Enums_1.SessionStatus.STATUS_WAITING_FOR_ACK) {\r\n            throw new Exceptions_1.Exceptions.InvalidStateError(this.owner.status);\r\n        }\r\n        // Get DTMF options\r\n        var extraHeaders = options.extraHeaders ? options.extraHeaders.slice() : [];\r\n        var body = {\r\n            contentType: \"application/dtmf-relay\",\r\n            body: \"Signal= \" + this.tone + \"\\r\\nDuration= \" + this.duration\r\n        };\r\n        if (this.owner.session) {\r\n            var request = this.owner.session.info(undefined, {\r\n                extraHeaders: extraHeaders,\r\n                body: Utils_1.Utils.fromBodyObj(body)\r\n            });\r\n            this.owner.emit(\"dtmf\", request.message, this);\r\n            return;\r\n        }\r\n    };\r\n    DTMF.prototype.init_incoming = function (request) {\r\n        request.accept();\r\n        if (!this.tone || !this.duration) {\r\n            this.logger.warn(\"invalid INFO DTMF received, discarded\");\r\n        }\r\n        else {\r\n            this.owner.emit(\"dtmf\", request.message, this);\r\n        }\r\n    };\r\n    DTMF.prototype.receiveResponse = function (response) {\r\n        var statusCode = response && response.statusCode ? response.statusCode : 0;\r\n        switch (true) {\r\n            case /^1[0-9]{2}$/.test(statusCode.toString()):\r\n                // Ignore provisional responses.\r\n                break;\r\n            case /^2[0-9]{2}$/.test(statusCode.toString()):\r\n                this.emit(\"succeeded\", {\r\n                    originator: \"remote\",\r\n                    response: response\r\n                });\r\n                break;\r\n            default:\r\n                var cause = Utils_1.Utils.sipErrorCause(statusCode);\r\n                this.emit(\"failed\", response, cause);\r\n                break;\r\n        }\r\n    };\r\n    DTMF.prototype.onRequestTimeout = function () {\r\n        this.emit(\"failed\", undefined, Constants_1.C.causes.REQUEST_TIMEOUT);\r\n        this.owner.onRequestTimeout();\r\n    };\r\n    DTMF.prototype.onTransportError = function () {\r\n        this.emit(\"failed\", undefined, Constants_1.C.causes.CONNECTION_ERROR);\r\n        this.owner.onTransportError();\r\n    };\r\n    DTMF.prototype.onDialogError = function (response) {\r\n        this.emit(\"failed\", response, Constants_1.C.causes.DIALOG_ERROR);\r\n        this.owner.onDialogError(response);\r\n    };\r\n    return DTMF;\r\n}(events_1.EventEmitter));\r\nexports.DTMF = DTMF;\r\n\r\n\r\n/***/ }),\r\n/* 91 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar DTMFValidator = /** @class */ (function () {\r\n    function DTMFValidator() {\r\n    }\r\n    DTMFValidator.validate = function (tone, moreThanOneTone) {\r\n        if (moreThanOneTone === void 0) { moreThanOneTone = true; }\r\n        // Check tone type\r\n        if (typeof tone === \"string\") {\r\n            tone = tone.toUpperCase();\r\n        }\r\n        else if (typeof tone === \"number\") {\r\n            tone = tone.toString();\r\n        }\r\n        else {\r\n            DTMFValidator.generateInvalidToneError(tone);\r\n        }\r\n        var regex = moreThanOneTone ? /^[0-9A-D#*,]+$/i : /^[0-9A-D#*]$/i;\r\n        // Check tone value\r\n        if (!tone.match(regex)) {\r\n            DTMFValidator.generateInvalidToneError(tone);\r\n        }\r\n        return tone;\r\n    };\r\n    DTMFValidator.generateInvalidToneError = function (tone) {\r\n        var toneForMsg = (!!tone && typeof tone !== \"boolean\" ? tone.toString().toLowerCase() : tone);\r\n        throw new TypeError(\"Invalid tone(s): \" + toneForMsg);\r\n    };\r\n    return DTMFValidator;\r\n}());\r\nexports.DTMFValidator = DTMFValidator;\r\n\r\n\r\n/***/ }),\r\n/* 92 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar events_1 = __webpack_require__(31);\r\nvar Constants_1 = __webpack_require__(80);\r\nvar core_1 = __webpack_require__(2);\r\nvar allowed_methods_1 = __webpack_require__(61);\r\nvar Enums_1 = __webpack_require__(82);\r\nvar Utils_1 = __webpack_require__(83);\r\n/**\r\n * While this class is named `Subscription`, it is closer to\r\n * an implementation of a \"subscriber\" as defined in RFC 6665\r\n * \"SIP-Specific Event Notifications\".\r\n * https://tools.ietf.org/html/rfc6665\r\n * @class Class creating a SIP Subscriber.\r\n */\r\nvar Subscription = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Subscription, _super);\r\n    /**\r\n     * Constructor.\r\n     * @param ua User agent.\r\n     * @param target Subscription target.\r\n     * @param event Subscription event.\r\n     * @param options Options bucket.\r\n     */\r\n    function Subscription(ua, target, event, options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this) || this;\r\n        _this.data = {};\r\n        _this.method = Constants_1.C.SUBSCRIBE;\r\n        _this.body = undefined;\r\n        // ClientContext interface\r\n        _this.type = Enums_1.TypeStrings.Subscription;\r\n        _this.ua = ua;\r\n        _this.logger = ua.getLogger(\"sip.subscription\");\r\n        if (options.body) {\r\n            _this.body = {\r\n                body: options.body,\r\n                contentType: options.contentType ? options.contentType : \"application/sdp\"\r\n            };\r\n        }\r\n        // Target URI\r\n        var uri = ua.normalizeTarget(target);\r\n        if (!uri) {\r\n            throw new TypeError(\"Invalid target: \" + target);\r\n        }\r\n        _this.uri = uri;\r\n        // Subscription event\r\n        _this.event = event;\r\n        // Subscription expires\r\n        if (options.expires === undefined) {\r\n            _this.expires = 3600;\r\n        }\r\n        else if (typeof options.expires !== \"number\") { // pre-typescript type guard\r\n            ua.logger.warn(\"Option \\\"expires\\\" must be a number. Using default of 3600.\");\r\n            _this.expires = 3600;\r\n        }\r\n        else {\r\n            _this.expires = options.expires;\r\n        }\r\n        // Subscription extra headers\r\n        _this.extraHeaders = (options.extraHeaders || []).slice();\r\n        // Subscription context.\r\n        _this.context = _this.initContext();\r\n        _this.disposed = false;\r\n        // ClientContext interface\r\n        _this.request = _this.context.message;\r\n        if (!_this.request.from) {\r\n            throw new Error(\"From undefined.\");\r\n        }\r\n        if (!_this.request.to) {\r\n            throw new Error(\"From undefined.\");\r\n        }\r\n        _this.localIdentity = _this.request.from;\r\n        _this.remoteIdentity = _this.request.to;\r\n        // Add to UA's collection\r\n        _this.id = _this.request.callId + _this.request.from.parameters.tag + _this.event;\r\n        _this.ua.subscriptions[_this.id] = _this;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Destructor.\r\n     */\r\n    Subscription.prototype.dispose = function () {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n        if (this.retryAfterTimer) {\r\n            clearTimeout(this.retryAfterTimer);\r\n            this.retryAfterTimer = undefined;\r\n        }\r\n        this.context.dispose();\r\n        this.disposed = true;\r\n        // Remove from UA's collection\r\n        delete this.ua.subscriptions[this.id];\r\n    };\r\n    Subscription.prototype.on = function (name, callback) {\r\n        return _super.prototype.on.call(this, name, callback);\r\n    };\r\n    Subscription.prototype.emit = function (event) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        return _super.prototype.emit.apply(this, tslib_1.__spreadArrays([event], args));\r\n    };\r\n    /**\r\n     * Gracefully terminate.\r\n     */\r\n    Subscription.prototype.close = function () {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n        this.dispose();\r\n        switch (this.context.state) {\r\n            case core_1.SubscriptionState.Initial:\r\n                this.onTerminated();\r\n                break;\r\n            case core_1.SubscriptionState.NotifyWait:\r\n                this.onTerminated();\r\n                break;\r\n            case core_1.SubscriptionState.Pending:\r\n                this.unsubscribe();\r\n                break;\r\n            case core_1.SubscriptionState.Active:\r\n                this.unsubscribe();\r\n                break;\r\n            case core_1.SubscriptionState.Terminated:\r\n                this.onTerminated();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Send a re-SUBSCRIBE request if there is an \"active\" subscription.\r\n     */\r\n    Subscription.prototype.refresh = function () {\r\n        var _this = this;\r\n        switch (this.context.state) {\r\n            case core_1.SubscriptionState.Initial:\r\n                break;\r\n            case core_1.SubscriptionState.NotifyWait:\r\n                break;\r\n            case core_1.SubscriptionState.Pending:\r\n                break;\r\n            case core_1.SubscriptionState.Active:\r\n                if (this.subscription) {\r\n                    var request = this.subscription.refresh();\r\n                    request.delegate = {\r\n                        onAccept: (function (response) { return _this.onAccepted(response); }),\r\n                        onRedirect: (function (response) { return _this.onFailed(response); }),\r\n                        onReject: (function (response) { return _this.onFailed(response); }),\r\n                    };\r\n                }\r\n                break;\r\n            case core_1.SubscriptionState.Terminated:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Send an initial SUBSCRIBE request if no subscription.\r\n     * Send a re-SUBSCRIBE request if there is an \"active\" subscription.\r\n     */\r\n    Subscription.prototype.subscribe = function () {\r\n        var _this = this;\r\n        switch (this.context.state) {\r\n            case core_1.SubscriptionState.Initial:\r\n                this.context.subscribe().then(function (result) {\r\n                    if (result.success) {\r\n                        if (result.success.subscription) {\r\n                            _this.subscription = result.success.subscription;\r\n                            _this.subscription.delegate = {\r\n                                onNotify: function (request) { return _this.onNotify(request); },\r\n                                onRefresh: function (request) { return _this.onRefresh(request); },\r\n                                onTerminated: function () { return _this.close(); }\r\n                            };\r\n                        }\r\n                        _this.onNotify(result.success.request);\r\n                    }\r\n                    else if (result.failure) {\r\n                        _this.onFailed(result.failure.response);\r\n                    }\r\n                });\r\n                break;\r\n            case core_1.SubscriptionState.NotifyWait:\r\n                break;\r\n            case core_1.SubscriptionState.Pending:\r\n                break;\r\n            case core_1.SubscriptionState.Active:\r\n                this.refresh();\r\n                break;\r\n            case core_1.SubscriptionState.Terminated:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Send a re-SUBSCRIBE request if there is a \"pending\" or \"active\" subscription.\r\n     */\r\n    Subscription.prototype.unsubscribe = function () {\r\n        this.dispose();\r\n        switch (this.context.state) {\r\n            case core_1.SubscriptionState.Initial:\r\n                break;\r\n            case core_1.SubscriptionState.NotifyWait:\r\n                break;\r\n            case core_1.SubscriptionState.Pending:\r\n                if (this.subscription) {\r\n                    this.subscription.unsubscribe();\r\n                    // responses intentionally ignored\r\n                }\r\n                break;\r\n            case core_1.SubscriptionState.Active:\r\n                if (this.subscription) {\r\n                    this.subscription.unsubscribe();\r\n                    // responses intentionally ignored\r\n                }\r\n                break;\r\n            case core_1.SubscriptionState.Terminated:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.onTerminated();\r\n    };\r\n    Subscription.prototype.onAccepted = function (response) {\r\n        var statusCode = response.message.statusCode ? response.message.statusCode : 0;\r\n        var cause = Utils_1.Utils.getReasonPhrase(statusCode);\r\n        this.emit(\"accepted\", response.message, cause);\r\n    };\r\n    Subscription.prototype.onFailed = function (response) {\r\n        this.close();\r\n        if (response) {\r\n            var statusCode = response.message.statusCode ? response.message.statusCode : 0;\r\n            var cause = Utils_1.Utils.getReasonPhrase(statusCode);\r\n            this.emit(\"failed\", response.message, cause);\r\n            this.emit(\"rejected\", response.message, cause);\r\n        }\r\n    };\r\n    Subscription.prototype.onNotify = function (request) {\r\n        var _this = this;\r\n        request.accept(); // Send 200 response.\r\n        this.emit(\"notify\", { request: request.message });\r\n        // If we've set state to done, no further processing should take place\r\n        // and we are only interested in cleaning up after the appropriate NOTIFY.\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n        //  If the \"Subscription-State\" value is \"terminated\", the subscriber\r\n        //  MUST consider the subscription terminated.  The \"expires\" parameter\r\n        //  has no semantics for \"terminated\" -- notifiers SHOULD NOT include an\r\n        //  \"expires\" parameter on a \"Subscription-State\" header field with a\r\n        //  value of \"terminated\", and subscribers MUST ignore any such\r\n        //  parameter, if present.  If a reason code is present, the client\r\n        //  should behave as described below.  If no reason code or an unknown\r\n        //  reason code is present, the client MAY attempt to re-subscribe at any\r\n        //  time (unless a \"retry-after\" parameter is present, in which case the\r\n        //  client SHOULD NOT attempt re-subscription until after the number of\r\n        //  seconds specified by the \"retry-after\" parameter).  The reason codes\r\n        //  defined by this document are:\r\n        // https://tools.ietf.org/html/rfc6665#section-4.1.3\r\n        var subscriptionState = request.message.parseHeader(\"Subscription-State\");\r\n        if (subscriptionState && subscriptionState.state) {\r\n            switch (subscriptionState.state) {\r\n                case \"terminated\":\r\n                    if (subscriptionState.reason) {\r\n                        this.logger.log(\"Terminated subscription with reason \" + subscriptionState.reason);\r\n                        switch (subscriptionState.reason) {\r\n                            case \"deactivated\":\r\n                            case \"timeout\":\r\n                                this.initContext();\r\n                                this.subscribe();\r\n                                return;\r\n                            case \"probation\":\r\n                            case \"giveup\":\r\n                                this.initContext();\r\n                                if (subscriptionState.params && subscriptionState.params[\"retry-after\"]) {\r\n                                    this.retryAfterTimer = setTimeout(function () { return _this.subscribe(); }, subscriptionState.params[\"retry-after\"]);\r\n                                }\r\n                                else {\r\n                                    this.subscribe();\r\n                                }\r\n                                return;\r\n                            case \"rejected\":\r\n                            case \"noresource\":\r\n                            case \"invariant\":\r\n                                break;\r\n                        }\r\n                    }\r\n                    this.close();\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    Subscription.prototype.onRefresh = function (request) {\r\n        var _this = this;\r\n        request.delegate = {\r\n            onAccept: function (response) { return _this.onAccepted(response); }\r\n        };\r\n    };\r\n    Subscription.prototype.onTerminated = function () {\r\n        this.emit(\"terminated\");\r\n    };\r\n    Subscription.prototype.initContext = function () {\r\n        var _this = this;\r\n        var options = {\r\n            extraHeaders: this.extraHeaders,\r\n            body: this.body ? Utils_1.Utils.fromBodyObj(this.body) : undefined\r\n        };\r\n        this.context = new SubscribeClientContext(this.ua.userAgentCore, this.uri, this.event, this.expires, options);\r\n        this.context.delegate = {\r\n            onAccept: (function (response) { return _this.onAccepted(response); })\r\n        };\r\n        return this.context;\r\n    };\r\n    return Subscription;\r\n}(events_1.EventEmitter));\r\nexports.Subscription = Subscription;\r\n// tslint:disable-next-line:max-classes-per-file\r\nvar SubscribeClientContext = /** @class */ (function () {\r\n    function SubscribeClientContext(core, target, event, expires, options, delegate) {\r\n        this.core = core;\r\n        this.target = target;\r\n        this.event = event;\r\n        this.expires = expires;\r\n        this.subscribed = false;\r\n        this.logger = core.loggerFactory.getLogger(\"sip.subscription\");\r\n        this.delegate = delegate;\r\n        var allowHeader = \"Allow: \" + allowed_methods_1.AllowedMethods.toString();\r\n        var extraHeaders = (options && options.extraHeaders || []).slice();\r\n        extraHeaders.push(allowHeader);\r\n        extraHeaders.push(\"Event: \" + this.event);\r\n        extraHeaders.push(\"Expires: \" + this.expires);\r\n        extraHeaders.push(\"Contact: \" + this.core.configuration.contact.toString());\r\n        var body = options && options.body;\r\n        this.message = core.makeOutgoingRequestMessage(Constants_1.C.SUBSCRIBE, this.target, this.core.configuration.aor, this.target, {}, extraHeaders, body);\r\n    }\r\n    /** Destructor. */\r\n    SubscribeClientContext.prototype.dispose = function () {\r\n        if (this.subscription) {\r\n            this.subscription.dispose();\r\n        }\r\n        if (this.request) {\r\n            this.request.waitNotifyStop();\r\n            this.request.dispose();\r\n        }\r\n    };\r\n    Object.defineProperty(SubscribeClientContext.prototype, \"state\", {\r\n        /** Subscription state. */\r\n        get: function () {\r\n            if (this.subscription) {\r\n                return this.subscription.subscriptionState;\r\n            }\r\n            else if (this.subscribed) {\r\n                return core_1.SubscriptionState.NotifyWait;\r\n            }\r\n            else {\r\n                return core_1.SubscriptionState.Initial;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Establish subscription.\r\n     * @param options Options bucket.\r\n     */\r\n    SubscribeClientContext.prototype.subscribe = function () {\r\n        var _this = this;\r\n        if (this.subscribed) {\r\n            return Promise.reject(new Error(\"Not in initial state. Did you call subscribe more than once?\"));\r\n        }\r\n        this.subscribed = true;\r\n        return new Promise(function (resolve, reject) {\r\n            if (!_this.message) {\r\n                throw new Error(\"Message undefined.\");\r\n            }\r\n            _this.request = _this.core.subscribe(_this.message, {\r\n                // This SUBSCRIBE request will be confirmed with a final response.\r\n                // 200-class responses indicate that the subscription has been accepted\r\n                // and that a NOTIFY request will be sent immediately.\r\n                // https://tools.ietf.org/html/rfc6665#section-4.1.2.1\r\n                onAccept: function (response) {\r\n                    if (_this.delegate && _this.delegate.onAccept) {\r\n                        _this.delegate.onAccept(response);\r\n                    }\r\n                },\r\n                // Due to the potential for out-of-order messages, packet loss, and\r\n                // forking, the subscriber MUST be prepared to receive NOTIFY requests\r\n                // before the SUBSCRIBE transaction has completed.\r\n                // https://tools.ietf.org/html/rfc6665#section-4.1.2.4\r\n                onNotify: function (requestWithSubscription) {\r\n                    _this.subscription = requestWithSubscription.subscription;\r\n                    if (_this.subscription) {\r\n                        _this.subscription.autoRefresh = true;\r\n                    }\r\n                    resolve({ success: requestWithSubscription });\r\n                },\r\n                // If this Timer N expires prior to the receipt of a NOTIFY request,\r\n                // the subscriber considers the subscription failed, and cleans up\r\n                // any state associated with the subscription attempt.\r\n                // https://tools.ietf.org/html/rfc6665#section-4.1.2.4\r\n                onNotifyTimeout: function () {\r\n                    resolve({ failure: {} });\r\n                },\r\n                // This SUBSCRIBE request will be confirmed with a final response.\r\n                // Non-200-class final responses indicate that no subscription or new\r\n                // dialog usage has been created, and no subsequent NOTIFY request will\r\n                // be sent.\r\n                // https://tools.ietf.org/html/rfc6665#section-4.1.2.1\r\n                onRedirect: function (response) {\r\n                    resolve({ failure: { response: response } });\r\n                },\r\n                // This SUBSCRIBE request will be confirmed with a final response.\r\n                // Non-200-class final responses indicate that no subscription or new\r\n                // dialog usage has been created, and no subsequent NOTIFY request will\r\n                // be sent.\r\n                // https://tools.ietf.org/html/rfc6665#section-4.1.2.1\r\n                onReject: function (response) {\r\n                    resolve({ failure: { response: response } });\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return SubscribeClientContext;\r\n}());\r\n\r\n\r\n/***/ }),\r\n/* 93 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar events_1 = __webpack_require__(31);\r\n/**\r\n * Legacy Transport.\r\n * @remarks\r\n * Abstract transport layer base class.\r\n * @public\r\n */\r\nvar Transport = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Transport, _super);\r\n    /**\r\n     * Constructor\r\n     * @param logger - Logger.\r\n     * @param options - Options bucket. Deprecated.\r\n     */\r\n    function Transport(logger, options) {\r\n        var _this = _super.call(this) || this;\r\n        _this.logger = logger;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Transport.prototype, \"protocol\", {\r\n        /**\r\n         * The protocol.\r\n         *\r\n         * @remarks\r\n         * Formatted as defined for the Via header sent-protocol transport.\r\n         * https://tools.ietf.org/html/rfc3261#section-20.42\r\n         */\r\n        get: function () {\r\n            return this.server && this.server.scheme ? this.server.scheme : \"WSS\";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the promise designated by the child layer then emits a connected event.\r\n     * Automatically emits an event upon resolution, unless overrideEvent is set. If you\r\n     * override the event in this fashion, you should emit it in your implementation of connectPromise\r\n     * @param options - Options bucket.\r\n     */\r\n    Transport.prototype.connect = function (options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        return this.connectPromise(options).then(function (data) {\r\n            if (!data.overrideEvent) {\r\n                _this.emit(\"connected\");\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Sends a message then emits a 'messageSent' event. Automatically emits an\r\n     * event upon resolution, unless data.overrideEvent is set. If you override\r\n     * the event in this fashion, you should emit it in your implementation of sendPromise\r\n     * Rejects with an Error if message fails to send.\r\n     * @param message - Message.\r\n     * @param options - Options bucket.\r\n     */\r\n    Transport.prototype.send = function (message, options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        // Error handling is independent of whether the message was a request or\r\n        // response.\r\n        //\r\n        // If the transport user asks for a message to be sent over an\r\n        // unreliable transport, and the result is an ICMP error, the behavior\r\n        // depends on the type of ICMP error.  Host, network, port or protocol\r\n        // unreachable errors, or parameter problem errors SHOULD cause the\r\n        // transport layer to inform the transport user of a failure in sending.\r\n        // Source quench and TTL exceeded ICMP errors SHOULD be ignored.\r\n        //\r\n        // If the transport user asks for a request to be sent over a reliable\r\n        // transport, and the result is a connection failure, the transport\r\n        // layer SHOULD inform the transport user of a failure in sending.\r\n        // https://tools.ietf.org/html/rfc3261#section-18.4\r\n        return this.sendPromise(message).then(function (result) {\r\n            if (!result.overrideEvent) {\r\n                _this.emit(\"messageSent\", result.msg);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Returns the promise designated by the child layer then emits a\r\n     * disconnected event. Automatically emits an event upon resolution,\r\n     * unless overrideEvent is set. If you override the event in this fashion,\r\n     * you should emit it in your implementation of disconnectPromise\r\n     * @param options - Options bucket\r\n     */\r\n    Transport.prototype.disconnect = function (options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        return this.disconnectPromise(options).then(function (data) {\r\n            if (!data.overrideEvent) {\r\n                _this.emit(\"disconnected\");\r\n            }\r\n        });\r\n    };\r\n    Transport.prototype.afterConnected = function (callback) {\r\n        if (this.isConnected()) {\r\n            callback();\r\n        }\r\n        else {\r\n            this.once(\"connected\", callback);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a promise which resolves once the UA is connected. DEPRECATION WARNING: just use afterConnected()\r\n     */\r\n    Transport.prototype.waitForConnected = function () {\r\n        var _this = this;\r\n        // tslint:disable-next-line:no-console\r\n        console.warn(\"DEPRECATION WARNING Transport.waitForConnected(): use afterConnected() instead\");\r\n        return new Promise(function (resolve) {\r\n            _this.afterConnected(resolve);\r\n        });\r\n    };\r\n    return Transport;\r\n}(events_1.EventEmitter));\r\nexports.Transport = Transport;\r\n\r\n\r\n/***/ }),\r\n/* 94 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar events_1 = __webpack_require__(31);\r\nvar ClientContext_1 = __webpack_require__(79);\r\nvar Constants_1 = __webpack_require__(80);\r\nvar core_1 = __webpack_require__(2);\r\nvar Enums_1 = __webpack_require__(82);\r\nvar Exceptions_1 = __webpack_require__(84);\r\nvar PublishContext_1 = __webpack_require__(85);\r\nvar ReferContext_1 = __webpack_require__(86);\r\nvar RegisterContext_1 = __webpack_require__(88);\r\nvar ServerContext_1 = __webpack_require__(87);\r\nvar Session_1 = __webpack_require__(89);\r\nvar Subscription_1 = __webpack_require__(92);\r\nvar Utils_1 = __webpack_require__(83);\r\nvar SessionDescriptionHandler_1 = __webpack_require__(95);\r\nvar Transport_1 = __webpack_require__(112);\r\n/**\r\n * @class Class creating a SIP User Agent.\r\n * @param {function returning SIP.sessionDescriptionHandler} [configuration.sessionDescriptionHandlerFactory]\r\n *  A function will be invoked by each of the UA's Sessions to build the sessionDescriptionHandler for that Session.\r\n *  If no (or a falsy) value is provided, each Session will use a default (WebRTC) sessionDescriptionHandler.\r\n */\r\nvar UA = /** @class */ (function (_super) {\r\n    tslib_1.__extends(UA, _super);\r\n    function UA(configuration) {\r\n        var _this = _super.call(this) || this;\r\n        /** Unload listener. */\r\n        _this.unloadListener = (function () { _this.stop(); });\r\n        _this.type = Enums_1.TypeStrings.UA;\r\n        _this.log = new core_1.LoggerFactory();\r\n        _this.logger = _this.getLogger(\"sip.ua\");\r\n        _this.configuration = {};\r\n        // User actions outside any session/dialog (MESSAGE)\r\n        _this.applicants = {};\r\n        _this.data = {};\r\n        _this.sessions = {};\r\n        _this.subscriptions = {};\r\n        _this.publishers = {};\r\n        _this.status = Enums_1.UAStatus.STATUS_INIT;\r\n        /**\r\n         * Load configuration\r\n         *\r\n         * @throws {SIP.Exceptions.ConfigurationError}\r\n         * @throws {TypeError}\r\n         */\r\n        if (configuration === undefined) {\r\n            configuration = {};\r\n        }\r\n        else if (typeof configuration === \"string\" || configuration instanceof String) {\r\n            configuration = {\r\n                uri: configuration\r\n            };\r\n        }\r\n        // Apply log configuration if present\r\n        if (configuration.log) {\r\n            _this.log.builtinEnabled = configuration.log.builtinEnabled;\r\n            if (configuration.log.hasOwnProperty(\"connector\")) {\r\n                _this.log.connector = configuration.log.connector;\r\n            }\r\n            if (configuration.log.hasOwnProperty(\"level\")) {\r\n                var level = configuration.log.level;\r\n                var normalized = void 0;\r\n                if (typeof level === \"string\") {\r\n                    switch (level) {\r\n                        case \"error\":\r\n                            normalized = core_1.Levels.error;\r\n                            break;\r\n                        case \"warn\":\r\n                            normalized = core_1.Levels.warn;\r\n                            break;\r\n                        case \"log\":\r\n                            normalized = core_1.Levels.log;\r\n                            break;\r\n                        case \"debug\":\r\n                            normalized = core_1.Levels.debug;\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n                else {\r\n                    switch (level) {\r\n                        case 0:\r\n                            normalized = core_1.Levels.error;\r\n                            break;\r\n                        case 1:\r\n                            normalized = core_1.Levels.warn;\r\n                            break;\r\n                        case 2:\r\n                            normalized = core_1.Levels.log;\r\n                            break;\r\n                        case 3:\r\n                            normalized = core_1.Levels.debug;\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n                // avoid setting level when invalid, use default level instead\r\n                if (normalized === undefined) {\r\n                    _this.logger.error(\"Invalid \\\"level\\\" parameter value: \" + JSON.stringify(level));\r\n                }\r\n                else {\r\n                    _this.log.level = normalized;\r\n                }\r\n            }\r\n        }\r\n        var deprecatedMessage = \"The UA class has been deprecated and will no longer be available starting with SIP.js release 0.16.0. \" +\r\n            \"The UA has been replaced by the UserAgent class. Please update accordingly.\";\r\n        _this.logger.warn(deprecatedMessage);\r\n        try {\r\n            _this.loadConfig(configuration);\r\n        }\r\n        catch (e) {\r\n            _this.status = Enums_1.UAStatus.STATUS_NOT_READY;\r\n            _this.error = UA.C.CONFIGURATION_ERROR;\r\n            throw e;\r\n        }\r\n        if (!_this.configuration.transportConstructor) {\r\n            throw new core_1.TransportError(\"Transport constructor not set\");\r\n        }\r\n        _this.transport = new _this.configuration.transportConstructor(_this.getLogger(\"sip.transport\"), _this.configuration.transportOptions);\r\n        var userAgentCoreConfiguration = makeUserAgentCoreConfigurationFromUA(_this);\r\n        // The Replaces header contains information used to match an existing\r\n        // SIP dialog (call-id, to-tag, and from-tag).  Upon receiving an INVITE\r\n        // with a Replaces header, the User Agent (UA) attempts to match this\r\n        // information with a confirmed or early dialog.\r\n        // https://tools.ietf.org/html/rfc3891#section-3\r\n        var handleInviteWithReplacesHeader = function (context, request) {\r\n            if (_this.configuration.replaces !== Constants_1.C.supported.UNSUPPORTED) {\r\n                var replaces = request.parseHeader(\"replaces\");\r\n                if (replaces) {\r\n                    var targetSession = _this.sessions[replaces.call_id + replaces.replaces_from_tag] ||\r\n                        _this.sessions[replaces.call_id + replaces.replaces_to_tag] ||\r\n                        undefined;\r\n                    if (!targetSession) {\r\n                        _this.userAgentCore.replyStateless(request, { statusCode: 481 });\r\n                        return;\r\n                    }\r\n                    if (targetSession.status === Enums_1.SessionStatus.STATUS_TERMINATED) {\r\n                        _this.userAgentCore.replyStateless(request, { statusCode: 603 });\r\n                        return;\r\n                    }\r\n                    var targetDialogId = replaces.call_id + replaces.replaces_to_tag + replaces.replaces_from_tag;\r\n                    var targetDialog = _this.userAgentCore.dialogs.get(targetDialogId);\r\n                    if (!targetDialog) {\r\n                        _this.userAgentCore.replyStateless(request, { statusCode: 481 });\r\n                        return;\r\n                    }\r\n                    if (!targetDialog.early && replaces.early_only) {\r\n                        _this.userAgentCore.replyStateless(request, { statusCode: 486 });\r\n                        return;\r\n                    }\r\n                    context.replacee = targetSession;\r\n                }\r\n            }\r\n        };\r\n        var userAgentCoreDelegate = {\r\n            onInvite: function (incomingInviteRequest) {\r\n                // FIXME: Ported - 100 Trying send should be configurable.\r\n                // Only required if TU will not respond in 200ms.\r\n                // https://tools.ietf.org/html/rfc3261#section-17.2.1\r\n                incomingInviteRequest.trying();\r\n                incomingInviteRequest.delegate = {\r\n                    onCancel: function (cancel) {\r\n                        context.onCancel(cancel);\r\n                    },\r\n                    onTransportError: function (error) {\r\n                        context.onTransportError();\r\n                    }\r\n                };\r\n                var context = new Session_1.InviteServerContext(_this, incomingInviteRequest);\r\n                // Ported - handling of out of dialog INVITE with Replaces.\r\n                handleInviteWithReplacesHeader(context, incomingInviteRequest.message);\r\n                // Ported - make the first call to progress automatically.\r\n                if (context.autoSendAnInitialProvisionalResponse) {\r\n                    context.progress();\r\n                }\r\n                _this.emit(\"invite\", context);\r\n            },\r\n            onMessage: function (incomingMessageRequest) {\r\n                // Ported - handling of out of dialog MESSAGE.\r\n                var serverContext = new ServerContext_1.ServerContext(_this, incomingMessageRequest);\r\n                serverContext.body = incomingMessageRequest.message.body;\r\n                serverContext.contentType = incomingMessageRequest.message.getHeader(\"Content-Type\") || \"text/plain\";\r\n                incomingMessageRequest.accept();\r\n                _this.emit(\"message\", serverContext); // TODO: Review. Why is a \"ServerContext\" emitted? What use it is?\r\n            },\r\n            onNotify: function (incomingNotifyRequest) {\r\n                // DEPRECATED: Out of dialog NOTIFY is an obsolete usage.\r\n                // Ported - handling of out of dialog NOTIFY.\r\n                if (_this.configuration.allowLegacyNotifications && _this.listeners(\"notify\").length > 0) {\r\n                    incomingNotifyRequest.accept();\r\n                    _this.emit(\"notify\", { request: incomingNotifyRequest.message });\r\n                }\r\n                else {\r\n                    incomingNotifyRequest.reject({ statusCode: 481 });\r\n                }\r\n            },\r\n            onRefer: function (incomingReferRequest) {\r\n                // Ported - handling of out of dialog REFER.\r\n                _this.logger.log(\"Received an out of dialog refer\");\r\n                if (!_this.configuration.allowOutOfDialogRefers) {\r\n                    incomingReferRequest.reject({ statusCode: 405 });\r\n                }\r\n                _this.logger.log(\"Allow out of dialog refers is enabled on the UA\");\r\n                var referContext = new ReferContext_1.ReferServerContext(_this, incomingReferRequest);\r\n                if (_this.listeners(\"outOfDialogReferRequested\").length) {\r\n                    _this.emit(\"outOfDialogReferRequested\", referContext);\r\n                }\r\n                else {\r\n                    _this.logger.log(\"No outOfDialogReferRequest listeners, automatically accepting and following the out of dialog refer\");\r\n                    referContext.accept({ followRefer: true });\r\n                }\r\n            },\r\n            onSubscribe: function (incomingSubscribeRequest) {\r\n                _this.emit(\"subscribe\", incomingSubscribeRequest);\r\n            },\r\n        };\r\n        _this.userAgentCore = new core_1.UserAgentCore(userAgentCoreConfiguration, userAgentCoreDelegate);\r\n        // Initialize registerContext\r\n        _this.registerContext = new RegisterContext_1.RegisterContext(_this, configuration.registerOptions);\r\n        _this.registerContext.on(\"failed\", _this.emit.bind(_this, \"registrationFailed\"));\r\n        _this.registerContext.on(\"registered\", _this.emit.bind(_this, \"registered\"));\r\n        _this.registerContext.on(\"unregistered\", _this.emit.bind(_this, \"unregistered\"));\r\n        if (_this.configuration.autostart) {\r\n            _this.start();\r\n        }\r\n        return _this;\r\n    }\r\n    // =================\r\n    //  High Level API\r\n    // =================\r\n    UA.prototype.register = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        if (options.register) {\r\n            this.configuration.register = true;\r\n        }\r\n        this.registerContext.register(options);\r\n        return this;\r\n    };\r\n    /**\r\n     * Unregister.\r\n     *\r\n     * @param {Boolean} [all] unregister all user bindings.\r\n     *\r\n     */\r\n    UA.prototype.unregister = function (options) {\r\n        var _this = this;\r\n        this.configuration.register = false;\r\n        this.transport.afterConnected(function () {\r\n            _this.registerContext.unregister(options);\r\n        });\r\n        return this;\r\n    };\r\n    UA.prototype.isRegistered = function () {\r\n        return this.registerContext.registered;\r\n    };\r\n    /**\r\n     * Make an outgoing call.\r\n     *\r\n     * @param {String} target\r\n     * @param {Object} views\r\n     * @param {Object} [options.media] gets passed to SIP.sessionDescriptionHandler.getDescription as mediaHint\r\n     *\r\n     * @throws {TypeError}\r\n     *\r\n     */\r\n    UA.prototype.invite = function (target, options, modifiers) {\r\n        var _this = this;\r\n        var context = new Session_1.InviteClientContext(this, target, options, modifiers);\r\n        // Delay sending actual invite until the next 'tick' if we are already\r\n        // connected, so that API consumers can register to events fired by the\r\n        // the session.\r\n        this.transport.afterConnected(function () {\r\n            context.invite();\r\n            _this.emit(\"inviteSent\", context);\r\n        });\r\n        return context;\r\n    };\r\n    UA.prototype.subscribe = function (target, event, options) {\r\n        var sub = new Subscription_1.Subscription(this, target, event, options);\r\n        this.transport.afterConnected(function () { return sub.subscribe(); });\r\n        return sub;\r\n    };\r\n    /**\r\n     * Send PUBLISH Event State Publication (RFC3903)\r\n     *\r\n     * @param {String} target\r\n     * @param {String} event\r\n     * @param {String} body\r\n     * @param {Object} [options]\r\n     *\r\n     * @throws {SIP.Exceptions.MethodParameterError}\r\n     */\r\n    UA.prototype.publish = function (target, event, body, options) {\r\n        var pub = new PublishContext_1.PublishContext(this, target, event, options);\r\n        this.transport.afterConnected(function () {\r\n            pub.publish(body);\r\n        });\r\n        return pub;\r\n    };\r\n    /**\r\n     * Send a message.\r\n     *\r\n     * @param {String} target\r\n     * @param {String} body\r\n     * @param {Object} [options]\r\n     *\r\n     * @throws {TypeError}\r\n     */\r\n    UA.prototype.message = function (target, body, options) {\r\n        if (options === void 0) { options = {}; }\r\n        if (body === undefined) {\r\n            throw new TypeError(\"Not enough arguments\");\r\n        }\r\n        // There is no Message module, so it is okay that the UA handles defaults here.\r\n        options.contentType = options.contentType || \"text/plain\";\r\n        options.body = body;\r\n        return this.request(Constants_1.C.MESSAGE, target, options);\r\n    };\r\n    UA.prototype.request = function (method, target, options) {\r\n        var req = new ClientContext_1.ClientContext(this, method, target, options);\r\n        this.transport.afterConnected(function () { return req.send(); });\r\n        return req;\r\n    };\r\n    /**\r\n     * Gracefully close.\r\n     */\r\n    UA.prototype.stop = function () {\r\n        this.logger.log(\"user requested closure...\");\r\n        if (this.status === Enums_1.UAStatus.STATUS_USER_CLOSED) {\r\n            this.logger.warn(\"UA already closed\");\r\n            return this;\r\n        }\r\n        // Close registerContext\r\n        this.logger.log(\"closing registerContext\");\r\n        this.registerContext.close();\r\n        // Run terminate on every Session\r\n        for (var session in this.sessions) {\r\n            if (this.sessions[session]) {\r\n                this.logger.log(\"closing session \" + session);\r\n                this.sessions[session].terminate();\r\n            }\r\n        }\r\n        // Run unsubscribe on every Subscription\r\n        for (var subscription in this.subscriptions) {\r\n            if (this.subscriptions[subscription]) {\r\n                this.logger.log(\"unsubscribe \" + subscription);\r\n                this.subscriptions[subscription].unsubscribe();\r\n            }\r\n        }\r\n        // Run close on every Publisher\r\n        for (var publisher in this.publishers) {\r\n            if (this.publishers[publisher]) {\r\n                this.logger.log(\"unpublish \" + publisher);\r\n                this.publishers[publisher].close();\r\n            }\r\n        }\r\n        // Run close on every applicant\r\n        for (var applicant in this.applicants) {\r\n            if (this.applicants[applicant]) {\r\n                this.applicants[applicant].close();\r\n            }\r\n        }\r\n        this.status = Enums_1.UAStatus.STATUS_USER_CLOSED;\r\n        // Disconnect the transport and reset user agent core\r\n        this.transport.disconnect();\r\n        this.userAgentCore.reset();\r\n        if (this.configuration.autostop) {\r\n            // Google Chrome Packaged Apps don't allow 'unload' listeners: unload is not available in packaged apps\r\n            var googleChromePackagedApp = typeof chrome !== \"undefined\" && chrome.app && chrome.app.runtime ? true : false;\r\n            if (typeof window !== \"undefined\" &&\r\n                typeof window.removeEventListener === \"function\" &&\r\n                !googleChromePackagedApp) {\r\n                window.removeEventListener(\"unload\", this.unloadListener);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Connect to the WS server if status = STATUS_INIT.\r\n     * Resume UA after being closed.\r\n     *\r\n     */\r\n    UA.prototype.start = function () {\r\n        this.logger.log(\"user requested startup...\");\r\n        if (this.status === Enums_1.UAStatus.STATUS_INIT) {\r\n            this.status = Enums_1.UAStatus.STATUS_STARTING;\r\n            this.setTransportListeners();\r\n            this.emit(\"transportCreated\", this.transport);\r\n            this.transport.connect();\r\n        }\r\n        else if (this.status === Enums_1.UAStatus.STATUS_USER_CLOSED) {\r\n            this.logger.log(\"resuming\");\r\n            this.status = Enums_1.UAStatus.STATUS_READY;\r\n            this.transport.connect();\r\n        }\r\n        else if (this.status === Enums_1.UAStatus.STATUS_STARTING) {\r\n            this.logger.log(\"UA is in STARTING status, not opening new connection\");\r\n        }\r\n        else if (this.status === Enums_1.UAStatus.STATUS_READY) {\r\n            this.logger.log(\"UA is in READY status, not resuming\");\r\n        }\r\n        else {\r\n            this.logger.error(\"Connection is down. Auto-Recovery system is trying to connect\");\r\n        }\r\n        if (this.configuration.autostop) {\r\n            // Google Chrome Packaged Apps don't allow 'unload' listeners: unload is not available in packaged apps\r\n            var googleChromePackagedApp = typeof chrome !== \"undefined\" && chrome.app && chrome.app.runtime ? true : false;\r\n            if (typeof window !== \"undefined\" &&\r\n                typeof window.addEventListener === \"function\" &&\r\n                !googleChromePackagedApp) {\r\n                window.addEventListener(\"unload\", this.unloadListener);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Normalize a string into a valid SIP request URI\r\n     *\r\n     * @param {String} target\r\n     *\r\n     * @returns {SIP.URI|undefined}\r\n     */\r\n    UA.prototype.normalizeTarget = function (target) {\r\n        return Utils_1.Utils.normalizeTarget(target, this.configuration.hostportParams);\r\n    };\r\n    UA.prototype.getLogger = function (category, label) {\r\n        return this.log.getLogger(category, label);\r\n    };\r\n    UA.prototype.getLoggerFactory = function () {\r\n        return this.log;\r\n    };\r\n    UA.prototype.getSupportedResponseOptions = function () {\r\n        var optionTags = [];\r\n        if (this.contact.pubGruu || this.contact.tempGruu) {\r\n            optionTags.push(\"gruu\");\r\n        }\r\n        if (this.configuration.rel100 === Constants_1.C.supported.SUPPORTED) {\r\n            optionTags.push(\"100rel\");\r\n        }\r\n        if (this.configuration.replaces === Constants_1.C.supported.SUPPORTED) {\r\n            optionTags.push(\"replaces\");\r\n        }\r\n        optionTags.push(\"outbound\");\r\n        optionTags = optionTags.concat(this.configuration.extraSupported || []);\r\n        var allowUnregistered = this.configuration.hackAllowUnregisteredOptionTags || false;\r\n        var optionTagSet = {};\r\n        optionTags = optionTags.filter(function (optionTag) {\r\n            var registered = Constants_1.C.OPTION_TAGS[optionTag];\r\n            var unique = !optionTagSet[optionTag];\r\n            optionTagSet[optionTag] = true;\r\n            return (registered || allowUnregistered) && unique;\r\n        });\r\n        return optionTags;\r\n    };\r\n    /**\r\n     * Get the session to which the request belongs to, if any.\r\n     * @param {SIP.IncomingRequest} request.\r\n     * @returns {SIP.OutgoingSession|SIP.IncomingSession|undefined}\r\n     */\r\n    UA.prototype.findSession = function (request) {\r\n        return this.sessions[request.callId + request.fromTag] ||\r\n            this.sessions[request.callId + request.toTag] ||\r\n            undefined;\r\n    };\r\n    UA.prototype.on = function (name, callback) { return _super.prototype.on.call(this, name, callback); };\r\n    // ==============================\r\n    // Event Handlers\r\n    // ==============================\r\n    UA.prototype.onTransportError = function () {\r\n        if (this.status === Enums_1.UAStatus.STATUS_USER_CLOSED) {\r\n            return;\r\n        }\r\n        if (!this.error || this.error !== UA.C.NETWORK_ERROR) {\r\n            this.status = Enums_1.UAStatus.STATUS_NOT_READY;\r\n            this.error = UA.C.NETWORK_ERROR;\r\n        }\r\n    };\r\n    /**\r\n     * Helper function. Sets transport listeners\r\n     */\r\n    UA.prototype.setTransportListeners = function () {\r\n        var _this = this;\r\n        this.transport.on(\"connected\", function () { return _this.onTransportConnected(); });\r\n        this.transport.on(\"message\", function (message) { return _this.onTransportReceiveMsg(message); });\r\n        this.transport.on(\"transportError\", function () { return _this.onTransportError(); });\r\n    };\r\n    /**\r\n     * Transport connection event.\r\n     * @event\r\n     * @param {SIP.Transport} transport.\r\n     */\r\n    UA.prototype.onTransportConnected = function () {\r\n        var _this = this;\r\n        if (this.configuration.register) {\r\n            // In an effor to maintain behavior from when we \"initialized\" an\r\n            // authentication factory, this is in a Promise.then\r\n            Promise.resolve().then(function () { return _this.registerContext.register(); });\r\n        }\r\n    };\r\n    /**\r\n     * Handle SIP message received from the transport.\r\n     * @param messageString The message.\r\n     */\r\n    UA.prototype.onTransportReceiveMsg = function (messageString) {\r\n        var _this = this;\r\n        var message = core_1.Parser.parseMessage(messageString, this.getLogger(\"sip.parser\"));\r\n        if (!message) {\r\n            this.logger.warn(\"UA failed to parse incoming SIP message - discarding.\");\r\n            return;\r\n        }\r\n        if (this.status === Enums_1.UAStatus.STATUS_USER_CLOSED && message instanceof core_1.IncomingRequestMessage) {\r\n            this.logger.warn(\"UA received message when status = USER_CLOSED - aborting\");\r\n            return;\r\n        }\r\n        // A valid SIP request formulated by a UAC MUST, at a minimum, contain\r\n        // the following header fields: To, From, CSeq, Call-ID, Max-Forwards,\r\n        // and Via; all of these header fields are mandatory in all SIP\r\n        // requests.\r\n        // https://tools.ietf.org/html/rfc3261#section-8.1.1\r\n        var hasMinimumHeaders = function () {\r\n            var mandatoryHeaders = [\"from\", \"to\", \"call_id\", \"cseq\", \"via\"];\r\n            for (var _i = 0, mandatoryHeaders_1 = mandatoryHeaders; _i < mandatoryHeaders_1.length; _i++) {\r\n                var header = mandatoryHeaders_1[_i];\r\n                if (!message.hasHeader(header)) {\r\n                    _this.logger.warn(\"Missing mandatory header field : \" + header + \".\");\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        // Request Checks\r\n        if (message instanceof core_1.IncomingRequestMessage) {\r\n            // This is port of SanityCheck.minimumHeaders().\r\n            if (!hasMinimumHeaders()) {\r\n                this.logger.warn(\"Request missing mandatory header field. Dropping.\");\r\n                return;\r\n            }\r\n            // FIXME: This is non-standard and should be a configruable behavior (desirable regardless).\r\n            // Custom SIP.js check to reject request from ourself (this instance of SIP.js).\r\n            // This is port of SanityCheck.rfc3261_16_3_4().\r\n            if (!message.toTag && message.callId.substr(0, 5) === this.configuration.sipjsId) {\r\n                this.userAgentCore.replyStateless(message, { statusCode: 482 });\r\n                return;\r\n            }\r\n            // FIXME: This should be Transport check before we get here (Section 18).\r\n            // Custom SIP.js check to reject requests if body length wrong.\r\n            // This is port of SanityCheck.rfc3261_18_3_request().\r\n            var len = Utils_1.Utils.str_utf8_length(message.body);\r\n            var contentLength = message.getHeader(\"content-length\");\r\n            if (contentLength && len < Number(contentLength)) {\r\n                this.userAgentCore.replyStateless(message, { statusCode: 400 });\r\n                return;\r\n            }\r\n        }\r\n        // Reponse Checks\r\n        if (message instanceof core_1.IncomingResponseMessage) {\r\n            // This is port of SanityCheck.minimumHeaders().\r\n            if (!hasMinimumHeaders()) {\r\n                this.logger.warn(\"Response missing mandatory header field. Dropping.\");\r\n                return;\r\n            }\r\n            // Custom SIP.js check to drop responses if multiple Via headers.\r\n            // This is port of SanityCheck.rfc3261_8_1_3_3().\r\n            if (message.getHeaders(\"via\").length > 1) {\r\n                this.logger.warn(\"More than one Via header field present in the response. Dropping.\");\r\n                return;\r\n            }\r\n            // FIXME: This should be Transport check before we get here (Section 18).\r\n            // Custom SIP.js check to drop responses if bad Via header.\r\n            // This is port of SanityCheck.rfc3261_18_1_2().\r\n            if (message.via.host !== this.configuration.viaHost || message.via.port !== undefined) {\r\n                this.logger.warn(\"Via sent-by in the response does not match UA Via host value. Dropping.\");\r\n                return;\r\n            }\r\n            // FIXME: This should be Transport check before we get here (Section 18).\r\n            // Custom SIP.js check to reject requests if body length wrong.\r\n            // This is port of SanityCheck.rfc3261_18_3_response().\r\n            var len = Utils_1.Utils.str_utf8_length(message.body);\r\n            var contentLength = message.getHeader(\"content-length\");\r\n            if (contentLength && len < Number(contentLength)) {\r\n                this.logger.warn(\"Message body length is lower than the value in Content-Length header field. Dropping.\");\r\n                return;\r\n            }\r\n        }\r\n        // Handle Request\r\n        if (message instanceof core_1.IncomingRequestMessage) {\r\n            this.userAgentCore.receiveIncomingRequestFromTransport(message);\r\n            return;\r\n        }\r\n        // Handle Response\r\n        if (message instanceof core_1.IncomingResponseMessage) {\r\n            this.userAgentCore.receiveIncomingResponseFromTransport(message);\r\n            return;\r\n        }\r\n        throw new Error(\"Invalid message type.\");\r\n    };\r\n    // =================\r\n    // Utils\r\n    // =================\r\n    UA.prototype.checkAuthenticationFactory = function (authenticationFactory) {\r\n        if (!(authenticationFactory instanceof Function)) {\r\n            return;\r\n        }\r\n        if (!authenticationFactory.initialize) {\r\n            authenticationFactory.initialize = function () {\r\n                return Promise.resolve();\r\n            };\r\n        }\r\n        return authenticationFactory;\r\n    };\r\n    /**\r\n     * Configuration load.\r\n     * returns {void}\r\n     */\r\n    UA.prototype.loadConfig = function (configuration) {\r\n        var _this = this;\r\n        // Settings and default values\r\n        var settings = {\r\n            /* Host address\r\n             * Value to be set in Via sent_by and host part of Contact FQDN\r\n             */\r\n            viaHost: Utils_1.Utils.createRandomToken(12) + \".invalid\",\r\n            uri: new core_1.URI(\"sip\", \"anonymous.\" + Utils_1.Utils.createRandomToken(6), \"anonymous.invalid\", undefined, undefined),\r\n            // Custom Configuration Settings\r\n            custom: {},\r\n            // Display name\r\n            displayName: \"\",\r\n            // Password\r\n            password: undefined,\r\n            register: true,\r\n            // Registration parameters\r\n            registerOptions: {},\r\n            // Transport related parameters\r\n            transportConstructor: Transport_1.Transport,\r\n            transportOptions: {},\r\n            usePreloadedRoute: false,\r\n            // string to be inserted into User-Agent request header\r\n            userAgentString: Constants_1.C.USER_AGENT,\r\n            // Session parameters\r\n            noAnswerTimeout: 60,\r\n            // Hacks\r\n            hackViaTcp: false,\r\n            hackIpInContact: false,\r\n            hackWssInTransport: false,\r\n            hackAllowUnregisteredOptionTags: false,\r\n            // Session Description Handler Options\r\n            sessionDescriptionHandlerFactoryOptions: {\r\n                constraints: {},\r\n                peerConnectionOptions: {}\r\n            },\r\n            extraSupported: [],\r\n            contactName: Utils_1.Utils.createRandomToken(8),\r\n            contactTransport: \"ws\",\r\n            forceRport: false,\r\n            // autostarting\r\n            autostart: true,\r\n            autostop: true,\r\n            // Reliable Provisional Responses\r\n            rel100: Constants_1.C.supported.UNSUPPORTED,\r\n            // DTMF type: 'info' or 'rtp' (RFC 4733)\r\n            // RTP Payload Spec: https://tools.ietf.org/html/rfc4733\r\n            // WebRTC Audio Spec: https://tools.ietf.org/html/rfc7874\r\n            dtmfType: Constants_1.C.dtmfType.INFO,\r\n            // Replaces header (RFC 3891)\r\n            // http://tools.ietf.org/html/rfc3891\r\n            replaces: Constants_1.C.supported.UNSUPPORTED,\r\n            sessionDescriptionHandlerFactory: SessionDescriptionHandler_1.SessionDescriptionHandler.defaultFactory,\r\n            authenticationFactory: this.checkAuthenticationFactory(function (ua) {\r\n                return new core_1.DigestAuthentication(ua.getLoggerFactory(), _this.configuration.authorizationUser, _this.configuration.password);\r\n            }),\r\n            allowLegacyNotifications: false,\r\n            allowOutOfDialogRefers: false,\r\n            experimentalFeatures: false\r\n        };\r\n        var configCheck = this.getConfigurationCheck();\r\n        // Check Mandatory parameters\r\n        for (var parameter in configCheck.mandatory) {\r\n            if (!configuration.hasOwnProperty(parameter)) {\r\n                throw new Exceptions_1.Exceptions.ConfigurationError(parameter);\r\n            }\r\n            else {\r\n                var value = configuration[parameter];\r\n                var checkedValue = configCheck.mandatory[parameter](value);\r\n                if (checkedValue !== undefined) {\r\n                    settings[parameter] = checkedValue;\r\n                }\r\n                else {\r\n                    throw new Exceptions_1.Exceptions.ConfigurationError(parameter, value);\r\n                }\r\n            }\r\n        }\r\n        // Check Optional parameters\r\n        for (var parameter in configCheck.optional) {\r\n            if (configuration.hasOwnProperty(parameter)) {\r\n                var value = configuration[parameter];\r\n                // If the parameter value is an empty array, but shouldn't be, apply its default value.\r\n                // If the parameter value is null, empty string, or undefined then apply its default value.\r\n                // If it's a number with NaN value then also apply its default value.\r\n                // NOTE: JS does not allow \"value === NaN\", the following does the work:\r\n                if ((value instanceof Array && value.length === 0) ||\r\n                    (value === null || value === \"\" || value === undefined) ||\r\n                    (typeof (value) === \"number\" && isNaN(value))) {\r\n                    continue;\r\n                }\r\n                var checkedValue = configCheck.optional[parameter](value);\r\n                if (checkedValue !== undefined) {\r\n                    settings[parameter] = checkedValue;\r\n                }\r\n                else {\r\n                    throw new Exceptions_1.Exceptions.ConfigurationError(parameter, value);\r\n                }\r\n            }\r\n        }\r\n        // Post Configuration Process\r\n        // Allow passing 0 number as displayName.\r\n        if (settings.displayName === 0) {\r\n            settings.displayName = \"0\";\r\n        }\r\n        // sipjsId instance parameter. Static random tag of length 5\r\n        settings.sipjsId = Utils_1.Utils.createRandomToken(5);\r\n        // String containing settings.uri without scheme and user.\r\n        var hostportParams = settings.uri.clone();\r\n        hostportParams.user = undefined;\r\n        settings.hostportParams = hostportParams.toRaw().replace(/^sip:/i, \"\");\r\n        /* Check whether authorizationUser is explicitly defined.\r\n         * Take 'settings.uri.user' value if not.\r\n         */\r\n        if (!settings.authorizationUser) {\r\n            settings.authorizationUser = settings.uri.user;\r\n        }\r\n        // User noAnswerTimeout\r\n        settings.noAnswerTimeout = settings.noAnswerTimeout * 1000;\r\n        // Via Host\r\n        if (settings.hackIpInContact) {\r\n            if (typeof settings.hackIpInContact === \"boolean\") {\r\n                var from = 1;\r\n                var to = 254;\r\n                var octet = Math.floor(Math.random() * (to - from + 1) + from);\r\n                // random Test-Net IP (http://tools.ietf.org/html/rfc5735)\r\n                settings.viaHost = \"192.0.2.\" + octet;\r\n            }\r\n            else if (typeof settings.hackIpInContact === \"string\") {\r\n                settings.viaHost = settings.hackIpInContact;\r\n            }\r\n        }\r\n        // Contact transport parameter\r\n        if (settings.hackWssInTransport) {\r\n            settings.contactTransport = \"wss\";\r\n        }\r\n        this.contact = {\r\n            pubGruu: undefined,\r\n            tempGruu: undefined,\r\n            uri: new core_1.URI(\"sip\", settings.contactName, settings.viaHost, undefined, { transport: settings.contactTransport }),\r\n            toString: function (options) {\r\n                if (options === void 0) { options = {}; }\r\n                var anonymous = options.anonymous || false;\r\n                var outbound = options.outbound || false;\r\n                var contact = \"<\";\r\n                if (anonymous) {\r\n                    contact += (_this.contact.tempGruu ||\r\n                        (\"sip:anonymous@anonymous.invalid;transport=\" + settings.contactTransport)).toString();\r\n                }\r\n                else {\r\n                    contact += (_this.contact.pubGruu || _this.contact.uri).toString();\r\n                }\r\n                if (outbound) {\r\n                    contact += \";ob\";\r\n                }\r\n                contact += \">\";\r\n                return contact;\r\n            }\r\n        };\r\n        var skeleton = {};\r\n        // Fill the value of the configuration_skeleton\r\n        for (var parameter in settings) {\r\n            if (settings.hasOwnProperty(parameter)) {\r\n                skeleton[parameter] = settings[parameter];\r\n            }\r\n        }\r\n        Object.assign(this.configuration, skeleton);\r\n        this.logger.log(\"configuration parameters after validation:\");\r\n        for (var parameter in settings) {\r\n            if (settings.hasOwnProperty(parameter)) {\r\n                switch (parameter) {\r\n                    case \"uri\":\r\n                    case \"sessionDescriptionHandlerFactory\":\r\n                        this.logger.log(\"· \" + parameter + \": \" + settings[parameter]);\r\n                        break;\r\n                    case \"password\":\r\n                        this.logger.log(\"· \" + parameter + \": \" + \"NOT SHOWN\");\r\n                        break;\r\n                    case \"transportConstructor\":\r\n                        this.logger.log(\"· \" + parameter + \": \" + settings[parameter].name);\r\n                        break;\r\n                    default:\r\n                        this.logger.log(\"· \" + parameter + \": \" + JSON.stringify(settings[parameter]));\r\n                }\r\n            }\r\n        }\r\n        return;\r\n    };\r\n    /**\r\n     * Configuration checker.\r\n     * @return {Boolean}\r\n     */\r\n    UA.prototype.getConfigurationCheck = function () {\r\n        return {\r\n            mandatory: {},\r\n            optional: {\r\n                uri: function (uri) {\r\n                    if (!(/^sip:/i).test(uri)) {\r\n                        uri = Constants_1.C.SIP + \":\" + uri;\r\n                    }\r\n                    var parsed = core_1.Grammar.URIParse(uri);\r\n                    if (!parsed || !parsed.user) {\r\n                        return;\r\n                    }\r\n                    else {\r\n                        return parsed;\r\n                    }\r\n                },\r\n                transportConstructor: function (transportConstructor) {\r\n                    if (transportConstructor instanceof Function) {\r\n                        return transportConstructor;\r\n                    }\r\n                },\r\n                transportOptions: function (transportOptions) {\r\n                    if (typeof transportOptions === \"object\") {\r\n                        return transportOptions;\r\n                    }\r\n                },\r\n                authorizationUser: function (authorizationUser) {\r\n                    if (core_1.Grammar.parse('\"' + authorizationUser + '\"', \"quoted_string\") === -1) {\r\n                        return;\r\n                    }\r\n                    else {\r\n                        return authorizationUser;\r\n                    }\r\n                },\r\n                displayName: function (displayName) {\r\n                    if (core_1.Grammar.parse('\"' + displayName + '\"', \"displayName\") === -1) {\r\n                        return;\r\n                    }\r\n                    else {\r\n                        return displayName;\r\n                    }\r\n                },\r\n                dtmfType: function (dtmfType) {\r\n                    switch (dtmfType) {\r\n                        case Constants_1.C.dtmfType.RTP:\r\n                            return Constants_1.C.dtmfType.RTP;\r\n                        case Constants_1.C.dtmfType.INFO:\r\n                        // Fall through\r\n                        default:\r\n                            return Constants_1.C.dtmfType.INFO;\r\n                    }\r\n                },\r\n                hackViaTcp: function (hackViaTcp) {\r\n                    if (typeof hackViaTcp === \"boolean\") {\r\n                        return hackViaTcp;\r\n                    }\r\n                },\r\n                hackIpInContact: function (hackIpInContact) {\r\n                    if (typeof hackIpInContact === \"boolean\") {\r\n                        return hackIpInContact;\r\n                    }\r\n                    else if (typeof hackIpInContact === \"string\" && core_1.Grammar.parse(hackIpInContact, \"host\") !== -1) {\r\n                        return hackIpInContact;\r\n                    }\r\n                },\r\n                hackWssInTransport: function (hackWssInTransport) {\r\n                    if (typeof hackWssInTransport === \"boolean\") {\r\n                        return hackWssInTransport;\r\n                    }\r\n                },\r\n                hackAllowUnregisteredOptionTags: function (hackAllowUnregisteredOptionTags) {\r\n                    if (typeof hackAllowUnregisteredOptionTags === \"boolean\") {\r\n                        return hackAllowUnregisteredOptionTags;\r\n                    }\r\n                },\r\n                contactTransport: function (contactTransport) {\r\n                    if (typeof contactTransport === \"string\") {\r\n                        return contactTransport;\r\n                    }\r\n                },\r\n                extraSupported: function (optionTags) {\r\n                    if (!(optionTags instanceof Array)) {\r\n                        return;\r\n                    }\r\n                    for (var _i = 0, optionTags_1 = optionTags; _i < optionTags_1.length; _i++) {\r\n                        var tag = optionTags_1[_i];\r\n                        if (typeof tag !== \"string\") {\r\n                            return;\r\n                        }\r\n                    }\r\n                    return optionTags;\r\n                },\r\n                forceRport: function (forceRport) {\r\n                    if (typeof forceRport === \"boolean\") {\r\n                        return forceRport;\r\n                    }\r\n                },\r\n                noAnswerTimeout: function (noAnswerTimeout) {\r\n                    if (Utils_1.Utils.isDecimal(noAnswerTimeout)) {\r\n                        var value = Number(noAnswerTimeout);\r\n                        if (value > 0) {\r\n                            return value;\r\n                        }\r\n                    }\r\n                },\r\n                password: function (password) {\r\n                    return String(password);\r\n                },\r\n                rel100: function (rel100) {\r\n                    if (rel100 === Constants_1.C.supported.REQUIRED) {\r\n                        return Constants_1.C.supported.REQUIRED;\r\n                    }\r\n                    else if (rel100 === Constants_1.C.supported.SUPPORTED) {\r\n                        return Constants_1.C.supported.SUPPORTED;\r\n                    }\r\n                    else {\r\n                        return Constants_1.C.supported.UNSUPPORTED;\r\n                    }\r\n                },\r\n                replaces: function (replaces) {\r\n                    if (replaces === Constants_1.C.supported.REQUIRED) {\r\n                        return Constants_1.C.supported.REQUIRED;\r\n                    }\r\n                    else if (replaces === Constants_1.C.supported.SUPPORTED) {\r\n                        return Constants_1.C.supported.SUPPORTED;\r\n                    }\r\n                    else {\r\n                        return Constants_1.C.supported.UNSUPPORTED;\r\n                    }\r\n                },\r\n                register: function (register) {\r\n                    if (typeof register === \"boolean\") {\r\n                        return register;\r\n                    }\r\n                },\r\n                registerOptions: function (registerOptions) {\r\n                    if (typeof registerOptions === \"object\") {\r\n                        return registerOptions;\r\n                    }\r\n                },\r\n                usePreloadedRoute: function (usePreloadedRoute) {\r\n                    if (typeof usePreloadedRoute === \"boolean\") {\r\n                        return usePreloadedRoute;\r\n                    }\r\n                },\r\n                userAgentString: function (userAgentString) {\r\n                    if (typeof userAgentString === \"string\") {\r\n                        return userAgentString;\r\n                    }\r\n                },\r\n                autostart: function (autostart) {\r\n                    if (typeof autostart === \"boolean\") {\r\n                        return autostart;\r\n                    }\r\n                },\r\n                autostop: function (autostop) {\r\n                    if (typeof autostop === \"boolean\") {\r\n                        return autostop;\r\n                    }\r\n                },\r\n                sessionDescriptionHandlerFactory: function (sessionDescriptionHandlerFactory) {\r\n                    if (sessionDescriptionHandlerFactory instanceof Function) {\r\n                        return sessionDescriptionHandlerFactory;\r\n                    }\r\n                },\r\n                sessionDescriptionHandlerFactoryOptions: function (options) {\r\n                    if (typeof options === \"object\") {\r\n                        return options;\r\n                    }\r\n                },\r\n                authenticationFactory: this.checkAuthenticationFactory,\r\n                allowLegacyNotifications: function (allowLegacyNotifications) {\r\n                    if (typeof allowLegacyNotifications === \"boolean\") {\r\n                        return allowLegacyNotifications;\r\n                    }\r\n                },\r\n                custom: function (custom) {\r\n                    if (typeof custom === \"object\") {\r\n                        return custom;\r\n                    }\r\n                },\r\n                contactName: function (contactName) {\r\n                    if (typeof contactName === \"string\") {\r\n                        return contactName;\r\n                    }\r\n                },\r\n                experimentalFeatures: function (experimentalFeatures) {\r\n                    if (typeof experimentalFeatures === \"boolean\") {\r\n                        return experimentalFeatures;\r\n                    }\r\n                },\r\n            }\r\n        };\r\n    };\r\n    UA.C = {\r\n        // UA status codes\r\n        STATUS_INIT: 0,\r\n        STATUS_STARTING: 1,\r\n        STATUS_READY: 2,\r\n        STATUS_USER_CLOSED: 3,\r\n        STATUS_NOT_READY: 4,\r\n        // UA error codes\r\n        CONFIGURATION_ERROR: 1,\r\n        NETWORK_ERROR: 2,\r\n        ALLOWED_METHODS: [\r\n            \"ACK\",\r\n            \"CANCEL\",\r\n            \"INVITE\",\r\n            \"MESSAGE\",\r\n            \"BYE\",\r\n            \"OPTIONS\",\r\n            \"INFO\",\r\n            \"NOTIFY\",\r\n            \"REFER\"\r\n        ],\r\n        ACCEPTED_BODY_TYPES: [\r\n            \"application/sdp\",\r\n            \"application/dtmf-relay\"\r\n        ],\r\n        MAX_FORWARDS: 70,\r\n        TAG_LENGTH: 10\r\n    };\r\n    return UA;\r\n}(events_1.EventEmitter));\r\nexports.UA = UA;\r\n(function (UA) {\r\n    var DtmfType;\r\n    (function (DtmfType) {\r\n        DtmfType[\"RTP\"] = \"rtp\";\r\n        DtmfType[\"INFO\"] = \"info\";\r\n    })(DtmfType = UA.DtmfType || (UA.DtmfType = {}));\r\n})(UA = exports.UA || (exports.UA = {}));\r\nexports.UA = UA;\r\n/**\r\n * Factory function to generate configuration give a UA.\r\n * @param ua UA\r\n */\r\nfunction makeUserAgentCoreConfigurationFromUA(ua) {\r\n    // FIXME: Configuration URI is a bad mix of types currently. It also needs to exist.\r\n    if (!(ua.configuration.uri instanceof core_1.URI)) {\r\n        throw new Error(\"Configuration URI not instance of URI.\");\r\n    }\r\n    var aor = ua.configuration.uri;\r\n    var contact = ua.contact;\r\n    var displayName = ua.configuration.displayName ? ua.configuration.displayName : \"\";\r\n    var hackViaTcp = ua.configuration.hackViaTcp ? true : false;\r\n    var routeSet = ua.configuration.usePreloadedRoute && ua.transport.server && ua.transport.server.sipUri ?\r\n        [ua.transport.server.sipUri] :\r\n        [];\r\n    var sipjsId = ua.configuration.sipjsId || Utils_1.Utils.createRandomToken(5);\r\n    var supportedOptionTags = [];\r\n    supportedOptionTags.push(\"outbound\"); // TODO: is this really supported?\r\n    if (ua.configuration.rel100 === Constants_1.C.supported.SUPPORTED) {\r\n        supportedOptionTags.push(\"100rel\");\r\n    }\r\n    if (ua.configuration.replaces === Constants_1.C.supported.SUPPORTED) {\r\n        supportedOptionTags.push(\"replaces\");\r\n    }\r\n    if (ua.configuration.extraSupported) {\r\n        supportedOptionTags.push.apply(supportedOptionTags, ua.configuration.extraSupported);\r\n    }\r\n    if (!ua.configuration.hackAllowUnregisteredOptionTags) {\r\n        supportedOptionTags = supportedOptionTags.filter(function (optionTag) { return Constants_1.C.OPTION_TAGS[optionTag]; });\r\n    }\r\n    supportedOptionTags = Array.from(new Set(supportedOptionTags)); // array of unique values\r\n    var supportedOptionTagsResponse = ua.getSupportedResponseOptions();\r\n    var userAgentHeaderFieldValue = ua.configuration.userAgentString || \"sipjs\";\r\n    if (!(ua.configuration.viaHost)) {\r\n        throw new Error(\"Configuration via host undefined\");\r\n    }\r\n    var viaForceRport = ua.configuration.forceRport ? true : false;\r\n    var viaHost = ua.configuration.viaHost;\r\n    var configuration = {\r\n        aor: aor,\r\n        contact: contact,\r\n        displayName: displayName,\r\n        hackViaTcp: hackViaTcp,\r\n        loggerFactory: ua.getLoggerFactory(),\r\n        routeSet: routeSet,\r\n        sipjsId: sipjsId,\r\n        supportedOptionTags: supportedOptionTags,\r\n        supportedOptionTagsResponse: supportedOptionTagsResponse,\r\n        userAgentHeaderFieldValue: userAgentHeaderFieldValue,\r\n        viaForceRport: viaForceRport,\r\n        viaHost: viaHost,\r\n        authenticationFactory: function () {\r\n            if (ua.configuration.authenticationFactory) {\r\n                return ua.configuration.authenticationFactory(ua);\r\n            }\r\n            return undefined;\r\n        },\r\n        transportAccessor: function () { return ua.transport; }\r\n    };\r\n    return configuration;\r\n}\r\nexports.makeUserAgentCoreConfigurationFromUA = makeUserAgentCoreConfigurationFromUA;\r\n\r\n\r\n/***/ }),\r\n/* 95 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar events_1 = __webpack_require__(31);\r\nvar session_1 = __webpack_require__(96);\r\nvar Enums_1 = __webpack_require__(82);\r\nvar Exceptions_1 = __webpack_require__(84);\r\nvar Utils_1 = __webpack_require__(83);\r\nvar Modifiers = tslib_1.__importStar(__webpack_require__(110));\r\nvar SessionDescriptionHandlerObserver_1 = __webpack_require__(111);\r\n/* SessionDescriptionHandler\r\n * @class PeerConnection helper Class.\r\n * @param {SIP.Session} session\r\n * @param {Object} [options]\r\n */\r\nvar SessionDescriptionHandler = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SessionDescriptionHandler, _super);\r\n    function SessionDescriptionHandler(logger, observer, options) {\r\n        var _this = _super.call(this) || this;\r\n        _this.type = Enums_1.TypeStrings.SessionDescriptionHandler;\r\n        // TODO: Validate the options\r\n        _this.options = options || {};\r\n        _this.logger = logger;\r\n        _this.observer = observer;\r\n        _this.dtmfSender = undefined;\r\n        _this.shouldAcquireMedia = true;\r\n        _this.CONTENT_TYPE = \"application/sdp\";\r\n        _this.C = {\r\n            DIRECTION: {\r\n                NULL: null,\r\n                SENDRECV: \"sendrecv\",\r\n                SENDONLY: \"sendonly\",\r\n                RECVONLY: \"recvonly\",\r\n                INACTIVE: \"inactive\"\r\n            }\r\n        };\r\n        _this.logger.log(\"SessionDescriptionHandlerOptions: \" + JSON.stringify(_this.options));\r\n        _this.direction = _this.C.DIRECTION.NULL;\r\n        _this.modifiers = _this.options.modifiers || [];\r\n        if (!Array.isArray(_this.modifiers)) {\r\n            _this.modifiers = [_this.modifiers];\r\n        }\r\n        _this.iceGatheringTimeout = false;\r\n        _this.initPeerConnection(_this.options.peerConnectionOptions);\r\n        _this.constraints = _this.checkAndDefaultConstraints(_this.options.constraints);\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {SIP.Session} session\r\n     * @param {Object} [options]\r\n     */\r\n    SessionDescriptionHandler.defaultFactory = function (session, options) {\r\n        var logger = (session instanceof session_1.Session) ?\r\n            session.userAgent.getLogger(\"sip.sessionDescriptionHandler\", session.id) :\r\n            session.ua.getLogger(\"sip.invitecontext.sessionDescriptionHandler\", session.id);\r\n        var observer = new SessionDescriptionHandlerObserver_1.SessionDescriptionHandlerObserver(session, options);\r\n        return new SessionDescriptionHandler(logger, observer, options);\r\n    };\r\n    // Functions the sesssion can use\r\n    /**\r\n     * Destructor\r\n     */\r\n    SessionDescriptionHandler.prototype.close = function () {\r\n        this.logger.log(\"closing PeerConnection\");\r\n        // have to check signalingState since this.close() gets called multiple times\r\n        if (this.peerConnection && this.peerConnection.signalingState !== \"closed\") {\r\n            if (this.peerConnection.getSenders) {\r\n                this.peerConnection.getSenders().forEach(function (sender) {\r\n                    if (sender.track) {\r\n                        sender.track.stop();\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                this.logger.warn(\"Using getLocalStreams which is deprecated\");\r\n                this.peerConnection.getLocalStreams().forEach(function (stream) {\r\n                    stream.getTracks().forEach(function (track) {\r\n                        track.stop();\r\n                    });\r\n                });\r\n            }\r\n            if (this.peerConnection.getReceivers) {\r\n                this.peerConnection.getReceivers().forEach(function (receiver) {\r\n                    if (receiver.track) {\r\n                        receiver.track.stop();\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                this.logger.warn(\"Using getRemoteStreams which is deprecated\");\r\n                this.peerConnection.getRemoteStreams().forEach(function (stream) {\r\n                    stream.getTracks().forEach(function (track) {\r\n                        track.stop();\r\n                    });\r\n                });\r\n            }\r\n            this.resetIceGatheringComplete();\r\n            this.peerConnection.close();\r\n        }\r\n    };\r\n    /**\r\n     * Gets the local description from the underlying media implementation\r\n     * @param {Object} [options] Options object to be used by getDescription\r\n     * @param {MediaStreamConstraints} [options.constraints] MediaStreamConstraints\r\n     *   https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints\r\n     * @param {Object} [options.peerConnectionOptions] If this is set it will recreate the peer\r\n     *   connection with the new options\r\n     * @param {Array} [modifiers] Array with one time use description modifiers\r\n     * @returns {Promise} Promise that resolves with the local description to be used for the session\r\n     */\r\n    SessionDescriptionHandler.prototype.getDescription = function (options, modifiers) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        if (modifiers === void 0) { modifiers = []; }\r\n        if (options.peerConnectionOptions) {\r\n            this.initPeerConnection(options.peerConnectionOptions);\r\n        }\r\n        // Merge passed constraints with saved constraints and save\r\n        var newConstraints = Object.assign({}, this.constraints, options.constraints);\r\n        newConstraints = this.checkAndDefaultConstraints(newConstraints);\r\n        if (JSON.stringify(newConstraints) !== JSON.stringify(this.constraints)) {\r\n            this.constraints = newConstraints;\r\n            this.shouldAcquireMedia = true;\r\n        }\r\n        if (!Array.isArray(modifiers)) {\r\n            modifiers = [modifiers];\r\n        }\r\n        modifiers = modifiers.concat(this.modifiers);\r\n        return Promise.resolve().then(function () {\r\n            if (_this.shouldAcquireMedia) {\r\n                return _this.acquire(_this.constraints).then(function () {\r\n                    _this.shouldAcquireMedia = false;\r\n                });\r\n            }\r\n        }).then(function () { return _this.createOfferOrAnswer(options.RTCOfferOptions, modifiers); })\r\n            .then(function (description) {\r\n            if (description.sdp === undefined) {\r\n                throw new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"getDescription\", undefined, \"SDP undefined\");\r\n            }\r\n            _this.emit(\"getDescription\", description);\r\n            return {\r\n                body: description.sdp,\r\n                contentType: _this.CONTENT_TYPE\r\n            };\r\n        });\r\n    };\r\n    /**\r\n     * Check if the Session Description Handler can handle the Content-Type described by a SIP Message\r\n     * @param {String} contentType The content type that is in the SIP Message\r\n     * @returns {boolean}\r\n     */\r\n    SessionDescriptionHandler.prototype.hasDescription = function (contentType) {\r\n        return contentType === this.CONTENT_TYPE;\r\n    };\r\n    /**\r\n     * The modifier that should be used when the session would like to place the call on hold\r\n     * @param {String} [sdp] The description that will be modified\r\n     * @returns {Promise} Promise that resolves with modified SDP\r\n     */\r\n    SessionDescriptionHandler.prototype.holdModifier = function (description) {\r\n        if (!description.sdp) {\r\n            return Promise.resolve(description);\r\n        }\r\n        if (!(/a=(sendrecv|sendonly|recvonly|inactive)/).test(description.sdp)) {\r\n            description.sdp = description.sdp.replace(/(m=[^\\r]*\\r\\n)/g, \"$1a=sendonly\\r\\n\");\r\n        }\r\n        else {\r\n            description.sdp = description.sdp.replace(/a=sendrecv\\r\\n/g, \"a=sendonly\\r\\n\");\r\n            description.sdp = description.sdp.replace(/a=recvonly\\r\\n/g, \"a=inactive\\r\\n\");\r\n        }\r\n        return Promise.resolve(description);\r\n    };\r\n    /**\r\n     * Set the remote description to the underlying media implementation\r\n     * @param {String} sessionDescription The description provided by a SIP message to be set on the media implementation\r\n     * @param {Object} [options] Options object to be used by getDescription\r\n     * @param {MediaStreamConstraints} [options.constraints] MediaStreamConstraints\r\n     *   https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints\r\n     * @param {Object} [options.peerConnectionOptions] If this is set it will recreate the peer\r\n     *   connection with the new options\r\n     * @param {Array} [modifiers] Array with one time use description modifiers\r\n     * @returns {Promise} Promise that resolves once the description is set\r\n     */\r\n    SessionDescriptionHandler.prototype.setDescription = function (sessionDescription, options, modifiers) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        if (modifiers === void 0) { modifiers = []; }\r\n        if (options.peerConnectionOptions) {\r\n            this.initPeerConnection(options.peerConnectionOptions);\r\n        }\r\n        if (!Array.isArray(modifiers)) {\r\n            modifiers = [modifiers];\r\n        }\r\n        modifiers = modifiers.concat(this.modifiers);\r\n        var description = {\r\n            type: this.hasOffer(\"local\") ? \"answer\" : \"offer\",\r\n            sdp: sessionDescription\r\n        };\r\n        return Promise.resolve().then(function () {\r\n            // Media should be acquired in getDescription unless we need to do it sooner for some reason (FF61+)\r\n            if (_this.shouldAcquireMedia && _this.options.alwaysAcquireMediaFirst) {\r\n                return _this.acquire(_this.constraints).then(function () {\r\n                    _this.shouldAcquireMedia = false;\r\n                });\r\n            }\r\n        }).then(function () { return Utils_1.Utils.reducePromises(modifiers, description); })\r\n            .catch(function (e) {\r\n            if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\r\n                throw e;\r\n            }\r\n            var error = new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"setDescription\", e, \"The modifiers did not resolve successfully\");\r\n            _this.logger.error(error.message);\r\n            _this.emit(\"peerConnection-setRemoteDescriptionFailed\", error);\r\n            throw error;\r\n        }).then(function (modifiedDescription) {\r\n            _this.emit(\"setDescription\", modifiedDescription);\r\n            return _this.peerConnection.setRemoteDescription(modifiedDescription);\r\n        }).catch(function (e) {\r\n            if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\r\n                throw e;\r\n            }\r\n            // Check the original SDP for video, and ensure that we have want to do audio fallback\r\n            if ((/^m=video.+$/gm).test(sessionDescription) && !options.disableAudioFallback) {\r\n                // Do not try to audio fallback again\r\n                options.disableAudioFallback = true;\r\n                // Remove video first, then do the other modifiers\r\n                return _this.setDescription(sessionDescription, options, [Modifiers.stripVideo].concat(modifiers));\r\n            }\r\n            var error = new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"setDescription\", e);\r\n            if (error.error) {\r\n                _this.logger.error(error.error);\r\n            }\r\n            _this.emit(\"peerConnection-setRemoteDescriptionFailed\", error);\r\n            throw error;\r\n        }).then(function () {\r\n            if (_this.peerConnection.getReceivers) {\r\n                _this.emit(\"setRemoteDescription\", _this.peerConnection.getReceivers());\r\n            }\r\n            else {\r\n                _this.emit(\"setRemoteDescription\", _this.peerConnection.getRemoteStreams());\r\n            }\r\n            _this.emit(\"confirmed\", _this);\r\n        });\r\n    };\r\n    /**\r\n     * Send DTMF via RTP (RFC 4733)\r\n     * @param {String} tones A string containing DTMF digits\r\n     * @param {Object} [options] Options object to be used by sendDtmf\r\n     * @returns {boolean} true if DTMF send is successful, false otherwise\r\n     */\r\n    SessionDescriptionHandler.prototype.sendDtmf = function (tones, options) {\r\n        if (options === void 0) { options = {}; }\r\n        if (!this.dtmfSender && this.hasBrowserGetSenderSupport()) {\r\n            var senders = this.peerConnection.getSenders();\r\n            if (senders.length > 0) {\r\n                this.dtmfSender = senders[0].dtmf;\r\n            }\r\n        }\r\n        if (!this.dtmfSender && this.hasBrowserTrackSupport()) {\r\n            var streams = this.peerConnection.getLocalStreams();\r\n            if (streams.length > 0) {\r\n                var audioTracks = streams[0].getAudioTracks();\r\n                if (audioTracks.length > 0) {\r\n                    this.dtmfSender = this.peerConnection.createDTMFSender(audioTracks[0]);\r\n                }\r\n            }\r\n        }\r\n        if (!this.dtmfSender) {\r\n            return false;\r\n        }\r\n        try {\r\n            this.dtmfSender.insertDTMF(tones, options.duration, options.interToneGap);\r\n        }\r\n        catch (e) {\r\n            if (e.type === \"InvalidStateError\" || e.type === \"InvalidCharacterError\") {\r\n                this.logger.error(e);\r\n                return false;\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n        this.logger.log(\"DTMF sent via RTP: \" + tones.toString());\r\n        return true;\r\n    };\r\n    /**\r\n     * Get the direction of the session description\r\n     * @returns {String} direction of the description\r\n     */\r\n    SessionDescriptionHandler.prototype.getDirection = function () {\r\n        return this.direction;\r\n    };\r\n    SessionDescriptionHandler.prototype.on = function (name, callback) { return _super.prototype.on.call(this, name, callback); };\r\n    SessionDescriptionHandler.prototype.getMediaStream = function (constraints) {\r\n        console.log(\"getMediaStream\")\r\n        console.log(constraints)\r\n        //if(constraints.video && constraints.video.mediaSource !== undefined) {\r\n        //    return navigator.mediaDevices.getDisplayMedia(constraints);\r\n        //}\r\n        //else {\r\n            return navigator.mediaDevices.getUserMedia(constraints);\r\n        //}\r\n    };\r\n    // Internal functions\r\n    SessionDescriptionHandler.prototype.createOfferOrAnswer = function (RTCOfferOptions, modifiers) {\r\n        var _this = this;\r\n        console.log(\"====================================\")\r\n        console.log(RTCOfferOptions)\r\n        if (RTCOfferOptions === void 0) { \r\n            RTCOfferOptions = {}; \r\n        }\r\n        if (modifiers === void 0) { modifiers = []; }\r\n        var methodName = this.hasOffer(\"remote\") ? \"createAnswer\" : \"createOffer\";\r\n        var pc = this.peerConnection;\r\n        try {\r\n            if(RTCOfferOptions.offerToReceiveVideo) {\r\n                pc.addTransceiver(\"video\", {direction: \"sendrecv\"})    \r\n            }\r\n            if(RTCOfferOptions.offerToReceiveAudio) {\r\n                pc.addTransceiver(\"audio\", {direction: \"sendrecv\"})\r\n            }\r\n        }\r\n        catch(e) {\r\n            console.log(\"Problem adding null receiver\")\r\n            console.log(e)\r\n        }\r\n        this.logger.log(methodName);\r\n        var method = this.hasOffer(\"remote\") ? pc.createAnswer : pc.createOffer;\r\n        return method.apply(pc, RTCOfferOptions).catch(function (e) {\r\n            if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\r\n                throw e;\r\n            }\r\n            var error = new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"createOfferOrAnswer\", e, \"peerConnection-\" + methodName + \"Failed\");\r\n            _this.emit(\"peerConnection-\" + methodName + \"Failed\", error);\r\n            throw error;\r\n        }).then(function (sdp) {\r\n            console.log(\"offer sdp\")\r\n            console.log(sdp)\r\n            return Utils_1.Utils.reducePromises(modifiers, _this.createRTCSessionDescriptionInit(sdp));\r\n        }).then(function (sdp) {\r\n            _this.resetIceGatheringComplete();\r\n            _this.logger.log(\"Setting local sdp.\");\r\n            _this.logger.log(\"sdp is \" + sdp.sdp || false);\r\n            return pc.setLocalDescription(sdp);\r\n        }).catch(function (e) {\r\n            if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\r\n                throw e;\r\n            }\r\n            var error = new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"createOfferOrAnswer\", e, \"peerConnection-SetLocalDescriptionFailed\");\r\n            _this.emit(\"peerConnection-SetLocalDescriptionFailed\", error);\r\n            throw error;\r\n        }).then(function () { return _this.waitForIceGatheringComplete(); })\r\n            .then(function () {\r\n            if (!_this.peerConnection.localDescription) {\r\n                throw new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"Missing local description\");\r\n            }\r\n            var localDescription = _this.createRTCSessionDescriptionInit(_this.peerConnection.localDescription);\r\n            return Utils_1.Utils.reducePromises(modifiers, localDescription);\r\n        }).then(function (localDescription) {\r\n            _this.setDirection(localDescription.sdp || \"\");\r\n            return localDescription;\r\n        }).catch(function (e) {\r\n            if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\r\n                throw e;\r\n            }\r\n            var error = new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"createOfferOrAnswer\", e);\r\n            _this.logger.error(error.toString());\r\n            throw error;\r\n        });\r\n    };\r\n    // Creates an RTCSessionDescriptionInit from an RTCSessionDescription\r\n    SessionDescriptionHandler.prototype.createRTCSessionDescriptionInit = function (RTCSessionDescription) {\r\n        return {\r\n            type: RTCSessionDescription.type,\r\n            sdp: RTCSessionDescription.sdp\r\n        };\r\n    };\r\n    SessionDescriptionHandler.prototype.addDefaultIceCheckingTimeout = function (peerConnectionOptions) {\r\n        if (peerConnectionOptions.iceCheckingTimeout === undefined) {\r\n            peerConnectionOptions.iceCheckingTimeout = 5000;\r\n        }\r\n        return peerConnectionOptions;\r\n    };\r\n    SessionDescriptionHandler.prototype.addDefaultIceServers = function (rtcConfiguration) {\r\n        if (!rtcConfiguration.iceServers) {\r\n            rtcConfiguration.iceServers = [{ urls: \"stun:stun.l.google.com:19302\" }];\r\n        }\r\n        return rtcConfiguration;\r\n    };\r\n    SessionDescriptionHandler.prototype.checkAndDefaultConstraints = function (constraints) {\r\n        var defaultConstraints = { audio: true, video: !this.options.alwaysAcquireMediaFirst };\r\n        constraints = constraints || defaultConstraints;\r\n        // Empty object check\r\n        if (Object.keys(constraints).length === 0 && constraints.constructor === Object) {\r\n            return defaultConstraints;\r\n        }\r\n        return constraints;\r\n    };\r\n    SessionDescriptionHandler.prototype.hasBrowserTrackSupport = function () {\r\n        return Boolean(this.peerConnection.addTrack);\r\n    };\r\n    SessionDescriptionHandler.prototype.hasBrowserGetSenderSupport = function () {\r\n        return Boolean(this.peerConnection.getSenders);\r\n    };\r\n    SessionDescriptionHandler.prototype.initPeerConnection = function (options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        options = this.addDefaultIceCheckingTimeout(options);\r\n        options.rtcConfiguration = options.rtcConfiguration || {};\r\n        options.rtcConfiguration = this.addDefaultIceServers(options.rtcConfiguration);\r\n        this.logger.log(\"initPeerConnection\");\r\n        if (this.peerConnection) {\r\n            this.logger.log(\"Already have a peer connection for this session. Tearing down.\");\r\n            this.resetIceGatheringComplete();\r\n            this.peerConnection.close();\r\n        }\r\n        this.peerConnection = new RTCPeerConnection(options.rtcConfiguration);\r\n        this.logger.log(\"New peer connection created\");\r\n        if (\"ontrack\" in this.peerConnection) {\r\n            this.peerConnection.addEventListener(\"track\", function (e) {\r\n                _this.logger.log(\"track added\");\r\n                _this.observer.trackAdded();\r\n                _this.emit(\"addTrack\", e);\r\n            });\r\n        }\r\n        else {\r\n            this.logger.warn(\"Using onaddstream which is deprecated\");\r\n            this.peerConnection.onaddstream = function (e) {\r\n                _this.logger.log(\"stream added\");\r\n                _this.emit(\"addStream\", e);\r\n            };\r\n        }\r\n        this.peerConnection.onicecandidate = function (e) {\r\n            _this.emit(\"iceCandidate\", e);\r\n            if (e.candidate) {\r\n                _this.logger.log(\"ICE candidate received: \" +\r\n                    (e.candidate.candidate === null ? null : e.candidate.candidate.trim()));\r\n            }\r\n            else if (e.candidate === null) {\r\n                // indicates the end of candidate gathering\r\n                _this.logger.log(\"ICE candidate gathering complete\");\r\n                _this.triggerIceGatheringComplete();\r\n            }\r\n        };\r\n        this.peerConnection.onicegatheringstatechange = function () {\r\n            _this.logger.log(\"RTCIceGatheringState changed: \" + _this.peerConnection.iceGatheringState);\r\n            switch (_this.peerConnection.iceGatheringState) {\r\n                case \"gathering\":\r\n                    _this.emit(\"iceGathering\", _this);\r\n                    if (!_this.iceGatheringTimer && options.iceCheckingTimeout) {\r\n                        _this.iceGatheringTimeout = false;\r\n                        _this.iceGatheringTimer = setTimeout(function () {\r\n                            _this.logger.log(\"RTCIceChecking Timeout Triggered after \" + options.iceCheckingTimeout + \" milliseconds\");\r\n                            _this.iceGatheringTimeout = true;\r\n                            _this.triggerIceGatheringComplete();\r\n                        }, options.iceCheckingTimeout);\r\n                    }\r\n                    break;\r\n                case \"complete\":\r\n                    _this.triggerIceGatheringComplete();\r\n                    break;\r\n            }\r\n        };\r\n        this.peerConnection.oniceconnectionstatechange = function () {\r\n            var stateEvent;\r\n            switch (_this.peerConnection.iceConnectionState) {\r\n                case \"new\":\r\n                    stateEvent = \"iceConnection\";\r\n                    break;\r\n                case \"checking\":\r\n                    stateEvent = \"iceConnectionChecking\";\r\n                    break;\r\n                case \"connected\":\r\n                    stateEvent = \"iceConnectionConnected\";\r\n                    break;\r\n                case \"completed\":\r\n                    stateEvent = \"iceConnectionCompleted\";\r\n                    break;\r\n                case \"failed\":\r\n                    stateEvent = \"iceConnectionFailed\";\r\n                    break;\r\n                case \"disconnected\":\r\n                    stateEvent = \"iceConnectionDisconnected\";\r\n                    break;\r\n                case \"closed\":\r\n                    stateEvent = \"iceConnectionClosed\";\r\n                    break;\r\n                default:\r\n                    _this.logger.warn(\"Unknown iceConnection state: \" + _this.peerConnection.iceConnectionState);\r\n                    return;\r\n            }\r\n            _this.logger.log(\"ICE Connection State changed to \" + stateEvent);\r\n            _this.emit(stateEvent, _this);\r\n        };\r\n    };\r\n    SessionDescriptionHandler.prototype.acquire = function (constraints) {\r\n        var _this = this;\r\n        // Default audio & video to true\r\n        constraints = this.checkAndDefaultConstraints(constraints);\r\n        return new Promise(function (resolve, reject) {\r\n            /*\r\n             * Make the call asynchronous, so that ICCs have a chance\r\n             * to define callbacks to `userMediaRequest`\r\n             */\r\n            _this.logger.log(\"acquiring local media\");\r\n            _this.emit(\"userMediaRequest\", constraints);\r\n            if (constraints.audio || constraints.video) {\r\n                _this.getMediaStream(constraints).then(function (streams) {\r\n                    _this.observer.trackAdded();\r\n                    _this.emit(\"userMedia\", streams);\r\n                    resolve(streams);\r\n                }).catch(function (e) {\r\n                    _this.emit(\"userMediaFailed\", e);\r\n                    reject(e);\r\n                });\r\n            }\r\n            else {\r\n                // Local streams were explicitly excluded.\r\n                resolve([]);\r\n            }\r\n        }).catch(function (e) {\r\n            if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\r\n                throw e;\r\n            }\r\n            var error = new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"acquire\", e, \"unable to acquire streams\");\r\n            _this.logger.error(error.message);\r\n            if (error.error) {\r\n                _this.logger.error(error.error);\r\n            }\r\n            throw error;\r\n        }).then(function (streams) {\r\n            _this.logger.log(\"acquired local media streams\");\r\n            // Remove old tracks\r\n            if (_this.peerConnection.removeTrack) {\r\n                _this.peerConnection.getSenders().forEach(function (sender) {\r\n                    _this.peerConnection.removeTrack(sender);\r\n                });\r\n            }\r\n            return streams;\r\n        }).catch(function (e) {\r\n            if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\r\n                throw e;\r\n            }\r\n            var error = new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"acquire\", e, \"error removing streams\");\r\n            _this.logger.error(error.message);\r\n            if (error.error) {\r\n                _this.logger.error(error.error);\r\n            }\r\n            throw error;\r\n        }).then(function (streams) {\r\n            var streamsArr = [].concat(streams);\r\n            streamsArr.forEach(function (stream) {\r\n                if (_this.peerConnection.addTrack) {\r\n                    stream.getTracks().forEach(function (track) {\r\n                        _this.peerConnection.addTrack(track, stream);\r\n                    });\r\n                }\r\n                else {\r\n                    // Chrome 59 does not support addTrack\r\n                    _this.peerConnection.addStream(stream);\r\n                }\r\n            });\r\n            return Promise.resolve();\r\n        }).catch(function (e) {\r\n            if (e.type === Enums_1.TypeStrings.SessionDescriptionHandlerError) {\r\n                throw e;\r\n            }\r\n            var error = new Exceptions_1.Exceptions.SessionDescriptionHandlerError(\"acquire\", e, \"error adding stream\");\r\n            _this.logger.error(error.message);\r\n            if (error.error) {\r\n                _this.logger.error(error.error);\r\n            }\r\n            throw error;\r\n        });\r\n    };\r\n    SessionDescriptionHandler.prototype.hasOffer = function (where) {\r\n        var offerState = \"have-\" + where + \"-offer\";\r\n        return this.peerConnection.signalingState === offerState;\r\n    };\r\n    // ICE gathering state handling\r\n    SessionDescriptionHandler.prototype.isIceGatheringComplete = function () {\r\n        return this.peerConnection.iceGatheringState === \"complete\" || this.iceGatheringTimeout;\r\n    };\r\n    SessionDescriptionHandler.prototype.resetIceGatheringComplete = function () {\r\n        this.iceGatheringTimeout = false;\r\n        this.logger.log(\"resetIceGatheringComplete\");\r\n        if (this.iceGatheringTimer) {\r\n            clearTimeout(this.iceGatheringTimer);\r\n            this.iceGatheringTimer = undefined;\r\n        }\r\n        if (this.iceGatheringDeferred) {\r\n            this.iceGatheringDeferred.reject();\r\n            this.iceGatheringDeferred = undefined;\r\n        }\r\n    };\r\n    SessionDescriptionHandler.prototype.setDirection = function (sdp) {\r\n        var match = sdp.match(/a=(sendrecv|sendonly|recvonly|inactive)/);\r\n        if (match === null) {\r\n            this.direction = this.C.DIRECTION.NULL;\r\n            this.observer.directionChanged();\r\n            return;\r\n        }\r\n        var direction = match[1];\r\n        switch (direction) {\r\n            case this.C.DIRECTION.SENDRECV:\r\n            case this.C.DIRECTION.SENDONLY:\r\n            case this.C.DIRECTION.RECVONLY:\r\n            case this.C.DIRECTION.INACTIVE:\r\n                this.direction = direction;\r\n                break;\r\n            default:\r\n                this.direction = this.C.DIRECTION.NULL;\r\n                break;\r\n        }\r\n        this.observer.directionChanged();\r\n    };\r\n    SessionDescriptionHandler.prototype.triggerIceGatheringComplete = function () {\r\n        if (this.isIceGatheringComplete()) {\r\n            this.emit(\"iceGatheringComplete\", this);\r\n            if (this.iceGatheringTimer) {\r\n                clearTimeout(this.iceGatheringTimer);\r\n                this.iceGatheringTimer = undefined;\r\n            }\r\n            if (this.iceGatheringDeferred) {\r\n                this.iceGatheringDeferred.resolve();\r\n                this.iceGatheringDeferred = undefined;\r\n            }\r\n        }\r\n    };\r\n    SessionDescriptionHandler.prototype.waitForIceGatheringComplete = function () {\r\n        this.logger.log(\"waitForIceGatheringComplete\");\r\n        if (this.isIceGatheringComplete()) {\r\n            this.logger.log(\"ICE is already complete. Return resolved.\");\r\n            return Promise.resolve();\r\n        }\r\n        else if (!this.iceGatheringDeferred) {\r\n            this.iceGatheringDeferred = Utils_1.Utils.defer();\r\n        }\r\n        this.logger.log(\"ICE is not complete. Returning promise\");\r\n        return this.iceGatheringDeferred ? this.iceGatheringDeferred.promise : Promise.resolve();\r\n    };\r\n    return SessionDescriptionHandler;\r\n}(events_1.EventEmitter));\r\nexports.SessionDescriptionHandler = SessionDescriptionHandler;\r\n\r\n\r\n/***/ }),\r\n/* 96 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar events_1 = __webpack_require__(31);\r\nvar core_1 = __webpack_require__(2);\r\nvar utils_1 = __webpack_require__(16);\r\nvar allowed_methods_1 = __webpack_require__(61);\r\nvar bye_1 = __webpack_require__(97);\r\nvar emitter_1 = __webpack_require__(98);\r\nvar exceptions_1 = __webpack_require__(99);\r\nvar info_1 = __webpack_require__(105);\r\nvar message_1 = __webpack_require__(106);\r\nvar notification_1 = __webpack_require__(107);\r\nvar referral_1 = __webpack_require__(108);\r\nvar session_state_1 = __webpack_require__(109);\r\n/**\r\n * A session provides real time communication between one or more participants.\r\n *\r\n * @remarks\r\n * The transport behaves in a deterministic manner according to the\r\n * the state defined in {@link SessionState}.\r\n * @public\r\n */\r\nvar Session = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     * @param userAgent - User agent. See {@link UserAgent} for details.\r\n     * @internal\r\n     */\r\n    function Session(userAgent, options) {\r\n        if (options === void 0) { options = {}; }\r\n        /** True if there is a re-INVITE request outstanding. */\r\n        this.pendingReinvite = false;\r\n        /** Session state. */\r\n        this._state = session_state_1.SessionState.Initial;\r\n        /** Session state emitter. */\r\n        this._stateEventEmitter = new events_1.EventEmitter();\r\n        this.delegate = options.delegate;\r\n        this._userAgent = userAgent;\r\n    }\r\n    /**\r\n     * Destructor.\r\n     */\r\n    Session.prototype.dispose = function () {\r\n        var _this = this;\r\n        this.logger.log(\"Session \" + this.id + \" in state \" + this._state + \" is being disposed\");\r\n        // Remove from the user agent's session collection\r\n        delete this.userAgent._sessions[this.id];\r\n        // Dispose of dialog media\r\n        if (this._sessionDescriptionHandler) {\r\n            this._sessionDescriptionHandler.close();\r\n            // TODO: The SDH needs to remain defined as it will be called after it is closed in cases\r\n            // where an answer/offer arrives while the session is being torn down. There are a variety\r\n            // of circumstances where this can happen - sending a BYE during a re-INVITE for example.\r\n            // The code is currently written such that it lazily makes a new SDH when it needs one\r\n            // and one is not yet defined. Thus if we undefined it here, it will currently make a\r\n            // new one which is out of sync and then never gets cleaned up.\r\n            //\r\n            // The downside of leaving it defined are that calls this closed SDH will continue to be\r\n            // made (think setDescription) and those should/will fail. These failures are handled, but\r\n            // it would be nice to have it all coded up in a way where having an undefined SDH where\r\n            // one is expected throws an error.\r\n            //\r\n            // this._sessionDescriptionHandler = undefined;\r\n        }\r\n        switch (this.state) {\r\n            case session_state_1.SessionState.Initial:\r\n                break; // the Inviter/Invitation sub class dispose method handles this case\r\n            case session_state_1.SessionState.Establishing:\r\n                break; // the Inviter/Invitation sub class dispose method handles this case\r\n            case session_state_1.SessionState.Established:\r\n                return new Promise(function (resolve, reject) {\r\n                    _this._bye({\r\n                        onAccept: function () { return resolve(); },\r\n                        onRedirect: function () { return resolve(); },\r\n                        onReject: function () { return resolve(); }\r\n                    });\r\n                });\r\n            case session_state_1.SessionState.Terminating:\r\n                break; // nothing to be done\r\n            case session_state_1.SessionState.Terminated:\r\n                break; // nothing to be done\r\n            default:\r\n                throw new Error(\"Unknown state.\");\r\n        }\r\n        return Promise.resolve();\r\n    };\r\n    Object.defineProperty(Session.prototype, \"assertedIdentity\", {\r\n        /**\r\n         * The asserted identity of the remote user.\r\n         */\r\n        get: function () {\r\n            return this._assertedIdentity;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Session.prototype, \"dialog\", {\r\n        /**\r\n         * The confirmed session dialog.\r\n         */\r\n        get: function () {\r\n            return this._dialog;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Session.prototype, \"id\", {\r\n        /**\r\n         * A unique identifier for this session.\r\n         */\r\n        get: function () {\r\n            return this._id;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Session.prototype, \"replacee\", {\r\n        /**\r\n         * The session being replace by this one.\r\n         */\r\n        get: function () {\r\n            return this._replacee;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Session.prototype, \"sessionDescriptionHandler\", {\r\n        /**\r\n         * Session description handler.\r\n         * @remarks\r\n         * If `this` is an instance of `Invitation`,\r\n         * `sessionDescriptionHandler` will be defined when the session state changes to \"established\".\r\n         * If `this` is an instance of `Inviter` and an offer was sent in the INVITE,\r\n         * `sessionDescriptionHandler` will be defined when the session state changes to \"establishing\".\r\n         * If `this` is an instance of `Inviter` and an offer was not sent in the INVITE,\r\n         * `sessionDescriptionHandler` will be defined when the session state changes to \"established\".\r\n         * Otherwise `undefined`.\r\n         */\r\n        get: function () {\r\n            return this._sessionDescriptionHandler;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Session.prototype, \"sessionDescriptionHandlerFactory\", {\r\n        /**\r\n         * Session description handler factory.\r\n         */\r\n        get: function () {\r\n            return this.userAgent.configuration.sessionDescriptionHandlerFactory;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Session.prototype, \"state\", {\r\n        /**\r\n         * Session state.\r\n         */\r\n        get: function () {\r\n            return this._state;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Session.prototype, \"stateChange\", {\r\n        /**\r\n         * Session state change emitter.\r\n         */\r\n        get: function () {\r\n            return emitter_1._makeEmitter(this._stateEventEmitter);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Session.prototype, \"userAgent\", {\r\n        /**\r\n         * The user agent.\r\n         */\r\n        get: function () {\r\n            return this._userAgent;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * End the {@link Session}. Sends a BYE.\r\n     * @param options - Options bucket. See {@link SessionByeOptions} for details.\r\n     */\r\n    Session.prototype.bye = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        var message = \"Session.bye() may only be called if established session.\";\r\n        switch (this.state) {\r\n            case session_state_1.SessionState.Initial:\r\n                if (typeof this.cancel === \"function\") {\r\n                    message += \" However Inviter.invite() has not yet been called.\";\r\n                    message += \" Perhaps you should have called Inviter.cancel()?\";\r\n                }\r\n                else if (typeof this.reject === \"function\") {\r\n                    message += \" However Invitation.accept() has not yet been called.\";\r\n                    message += \" Perhaps you should have called Invitation.reject()?\";\r\n                }\r\n                break;\r\n            case session_state_1.SessionState.Establishing:\r\n                if (typeof this.cancel === \"function\") {\r\n                    message += \" However a dialog does not yet exist.\";\r\n                    message += \" Perhaps you should have called Inviter.cancel()?\";\r\n                }\r\n                else if (typeof this.reject === \"function\") {\r\n                    message += \" However Invitation.accept() has not yet been called (or not yet resolved).\";\r\n                    message += \" Perhaps you should have called Invitation.reject()?\";\r\n                }\r\n                break;\r\n            case session_state_1.SessionState.Established:\r\n                var requestDelegate = options.requestDelegate;\r\n                var requestOptions = this.copyRequestOptions(options.requestOptions);\r\n                return this._bye(requestDelegate, requestOptions);\r\n            case session_state_1.SessionState.Terminating:\r\n                message += \" However this session is already terminating.\";\r\n                if (typeof this.cancel === \"function\") {\r\n                    message += \" Perhaps you have already called Inviter.cancel()?\";\r\n                }\r\n                else if (typeof this.reject === \"function\") {\r\n                    message += \" Perhaps you have already called Session.bye()?\";\r\n                }\r\n                break;\r\n            case session_state_1.SessionState.Terminated:\r\n                message += \" However this session is already terminated.\";\r\n                break;\r\n            default:\r\n                throw new Error(\"Unknown state\");\r\n        }\r\n        this.logger.error(message);\r\n        return Promise.reject(new Error(\"Invalid session state \" + this.state));\r\n    };\r\n    /**\r\n     * Share {@link Info} with peer. Sends an INFO.\r\n     * @param options - Options bucket. See {@link SessionInfoOptions} for details.\r\n     */\r\n    Session.prototype.info = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        // guard session state\r\n        if (this.state !== session_state_1.SessionState.Established) {\r\n            var message = \"Session.info() may only be called if established session.\";\r\n            this.logger.error(message);\r\n            return Promise.reject(new Error(\"Invalid session state \" + this.state));\r\n        }\r\n        var requestDelegate = options.requestDelegate;\r\n        var requestOptions = this.copyRequestOptions(options.requestOptions);\r\n        return this._info(requestDelegate, requestOptions);\r\n    };\r\n    /**\r\n     * Renegotiate the session. Sends a re-INVITE.\r\n     * @param options - Options bucket. See {@link SessionInviteOptions} for details.\r\n     */\r\n    Session.prototype.invite = function (options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        this.logger.log(\"Session.invite\");\r\n        if (this.state !== session_state_1.SessionState.Established) {\r\n            return Promise.reject(new Error(\"Invalid session state \" + this.state));\r\n        }\r\n        if (this.pendingReinvite) {\r\n            return Promise.reject(new exceptions_1.RequestPendingError(\"Reinvite in progress. Please wait until complete, then try again.\"));\r\n        }\r\n        this.pendingReinvite = true;\r\n        var delegate = {\r\n            onAccept: function (response) {\r\n                // A re-INVITE transaction has an offer/answer [RFC3264] exchange\r\n                // associated with it.  The UAC (User Agent Client) generating a given\r\n                // re-INVITE can act as the offerer or as the answerer.  A UAC willing\r\n                // to act as the offerer includes an offer in the re-INVITE.  The UAS\r\n                // (User Agent Server) then provides an answer in a response to the\r\n                // re-INVITE.  A UAC willing to act as answerer does not include an\r\n                // offer in the re-INVITE.  The UAS then provides an offer in a response\r\n                // to the re-INVITE becoming, thus, the offerer.\r\n                // https://tools.ietf.org/html/rfc6141#section-1\r\n                var body = core_1.getBody(response.message);\r\n                if (!body) {\r\n                    // No way to recover, so terminate session and mark as failed.\r\n                    _this.logger.error(\"Received 2xx response to re-INVITE without a session description\");\r\n                    _this.ackAndBye(response, 400, \"Missing session description\");\r\n                    _this.stateTransition(session_state_1.SessionState.Terminated);\r\n                    _this.pendingReinvite = false;\r\n                    return;\r\n                }\r\n                if (options.withoutSdp) {\r\n                    // INVITE without SDP - set remote offer and send an answer in the ACK\r\n                    // FIXME: SDH options & SDH modifiers options are applied somewhat ambiguously\r\n                    //        This behavior was ported from legacy code and the issue punted down the road.\r\n                    var answerOptions = {\r\n                        sessionDescriptionHandlerOptions: options.sessionDescriptionHandlerOptions,\r\n                        sessionDescriptionHandlerModifiers: options.sessionDescriptionHandlerModifiers\r\n                    };\r\n                    _this.setOfferAndGetAnswer(body, answerOptions)\r\n                        .then(function (answerBody) {\r\n                        response.ack({ body: answerBody });\r\n                    })\r\n                        .catch(function (error) {\r\n                        // No way to recover, so terminate session and mark as failed.\r\n                        _this.logger.error(\"Failed to handle offer in 2xx response to re-INVITE\");\r\n                        _this.logger.error(error.message);\r\n                        if (_this.state === session_state_1.SessionState.Terminated) {\r\n                            // A BYE should not be sent if already terminated.\r\n                            // For example, a BYE may be sent/received while re-INVITE is outstanding.\r\n                            response.ack();\r\n                        }\r\n                        else {\r\n                            _this.ackAndBye(response, 488, \"Bad Media Description\");\r\n                            _this.stateTransition(session_state_1.SessionState.Terminated);\r\n                        }\r\n                    })\r\n                        .then(function () {\r\n                        _this.pendingReinvite = false;\r\n                        if (options.requestDelegate && options.requestDelegate.onAccept) {\r\n                            options.requestDelegate.onAccept(response);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    // INVITE with SDP - set remote answer and send an ACK\r\n                    // FIXME: SDH options & SDH modifiers options are applied somewhat ambiguously\r\n                    //        This behavior was ported from legacy code and the issue punted down the road.\r\n                    var answerOptions = {\r\n                        sessionDescriptionHandlerOptions: _this._sessionDescriptionHandlerOptions,\r\n                        sessionDescriptionHandlerModifiers: _this._sessionDescriptionHandlerModifiers\r\n                    };\r\n                    _this.setAnswer(body, answerOptions)\r\n                        .then(function () {\r\n                        response.ack();\r\n                    })\r\n                        .catch(function (error) {\r\n                        // No way to recover, so terminate session and mark as failed.\r\n                        _this.logger.error(\"Failed to handle answer in 2xx response to re-INVITE\");\r\n                        _this.logger.error(error.message);\r\n                        // A BYE should only be sent if session is not already terminated.\r\n                        // For example, a BYE may be sent/received while re-INVITE is outstanding.\r\n                        // The ACK needs to be sent regardless as it was not handled by the transaction.\r\n                        if (_this.state !== session_state_1.SessionState.Terminated) {\r\n                            _this.ackAndBye(response, 488, \"Bad Media Description\");\r\n                            _this.stateTransition(session_state_1.SessionState.Terminated);\r\n                        }\r\n                        else {\r\n                            response.ack();\r\n                        }\r\n                    })\r\n                        .then(function () {\r\n                        _this.pendingReinvite = false;\r\n                        if (options.requestDelegate && options.requestDelegate.onAccept) {\r\n                            options.requestDelegate.onAccept(response);\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n            onProgress: function (response) {\r\n                return;\r\n            },\r\n            onRedirect: function (response) {\r\n                return;\r\n            },\r\n            onReject: function (response) {\r\n                _this.logger.warn(\"Received a non-2xx response to re-INVITE\");\r\n                _this.pendingReinvite = false;\r\n                if (options.withoutSdp) {\r\n                    if (options.requestDelegate && options.requestDelegate.onReject) {\r\n                        options.requestDelegate.onReject(response);\r\n                    }\r\n                }\r\n                else {\r\n                    _this.rollbackOffer()\r\n                        .catch(function (error) {\r\n                        // No way to recover, so terminate session and mark as failed.\r\n                        _this.logger.error(\"Failed to rollback offer on non-2xx response to re-INVITE\");\r\n                        _this.logger.error(error.message);\r\n                        // A BYE should only be sent if session is not already terminated.\r\n                        // For example, a BYE may be sent/received while re-INVITE is outstanding.\r\n                        // Note that the ACK was already sent by the transaction, so just need to send BYE.\r\n                        if (_this.state !== session_state_1.SessionState.Terminated) {\r\n                            if (!_this.dialog) {\r\n                                throw new Error(\"Dialog undefined.\");\r\n                            }\r\n                            var extraHeaders = [];\r\n                            extraHeaders.push(\"Reason: \" + _this.getReasonHeaderValue(500, \"Internal Server Error\"));\r\n                            _this.dialog.bye(undefined, { extraHeaders: extraHeaders });\r\n                            _this.stateTransition(session_state_1.SessionState.Terminated);\r\n                        }\r\n                    })\r\n                        .then(function () {\r\n                        if (options.requestDelegate && options.requestDelegate.onReject) {\r\n                            options.requestDelegate.onReject(response);\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n            onTrying: function (response) {\r\n                return;\r\n            }\r\n        };\r\n        var requestOptions = options.requestOptions || {};\r\n        requestOptions.extraHeaders = (requestOptions.extraHeaders || []).slice();\r\n        requestOptions.extraHeaders.push(\"Allow: \" + allowed_methods_1.AllowedMethods.toString());\r\n        requestOptions.extraHeaders.push(\"Contact: \" + this._contact);\r\n        // Just send an INVITE with no sdp...\r\n        if (options.withoutSdp) {\r\n            if (!this.dialog) {\r\n                this.pendingReinvite = false;\r\n                throw new Error(\"Dialog undefined.\");\r\n            }\r\n            return Promise.resolve(this.dialog.invite(delegate, requestOptions));\r\n        }\r\n        // Get an offer and send it in an INVITE\r\n        // FIXME: SDH options & SDH modifiers options are applied somewhat ambiguously\r\n        //        This behavior was ported from legacy code and the issue punted down the road.\r\n        var offerOptions = {\r\n            sessionDescriptionHandlerOptions: options.sessionDescriptionHandlerOptions,\r\n            sessionDescriptionHandlerModifiers: options.sessionDescriptionHandlerModifiers\r\n        };\r\n        return this.getOffer(offerOptions)\r\n            .then(function (offerBody) {\r\n            if (!_this.dialog) {\r\n                _this.pendingReinvite = false;\r\n                throw new Error(\"Dialog undefined.\");\r\n            }\r\n            requestOptions.body = offerBody;\r\n            return _this.dialog.invite(delegate, requestOptions);\r\n        })\r\n            .catch(function (error) {\r\n            _this.logger.error(error.message);\r\n            _this.logger.error(\"Failed to send re-INVITE\");\r\n            _this.pendingReinvite = false;\r\n            throw error;\r\n        });\r\n    };\r\n    /**\r\n     * Deliver a {@link Message}. Sends a MESSAGE.\r\n     * @param options - Options bucket. See {@link SessionMessageOptions} for details.\r\n     */\r\n    Session.prototype.message = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        // guard session state\r\n        if (this.state !== session_state_1.SessionState.Established) {\r\n            var message = \"Session.message() may only be called if established session.\";\r\n            this.logger.error(message);\r\n            return Promise.reject(new Error(\"Invalid session state \" + this.state));\r\n        }\r\n        var requestDelegate = options.requestDelegate;\r\n        var requestOptions = this.copyRequestOptions(options.requestOptions);\r\n        return this._message(requestDelegate, requestOptions);\r\n    };\r\n    /**\r\n     * Proffer a {@link Referral}. Send a REFER.\r\n     * @param referTo - The referral target. If a `Session`, a REFER w/Replaces is sent.\r\n     * @param options - Options bucket. See {@link SessionReferOptions} for details.\r\n     */\r\n    Session.prototype.refer = function (referTo, options) {\r\n        if (options === void 0) { options = {}; }\r\n        // guard session state\r\n        if (this.state !== session_state_1.SessionState.Established) {\r\n            var message = \"Session.refer() may only be called if established session.\";\r\n            this.logger.error(message);\r\n            return Promise.reject(new Error(\"Invalid session state \" + this.state));\r\n        }\r\n        var requestDelegate = options.requestDelegate;\r\n        var requestOptions = this.copyRequestOptions(options.requestOptions);\r\n        requestOptions.extraHeaders = requestOptions.extraHeaders ?\r\n            requestOptions.extraHeaders.concat(this.referExtraHeaders(this.referToString(referTo))) :\r\n            this.referExtraHeaders(this.referToString(referTo));\r\n        return this._refer(options.onNotify, requestDelegate, requestOptions);\r\n    };\r\n    /**\r\n     * Send BYE.\r\n     * @param delegate - Request delegate.\r\n     * @param options - Request options bucket.\r\n     * @internal\r\n     */\r\n    Session.prototype._bye = function (delegate, options) {\r\n        var _this = this;\r\n        // Using core session dialog\r\n        if (!this.dialog) {\r\n            return Promise.reject(new Error(\"Session dialog undefined.\"));\r\n        }\r\n        var dialog = this.dialog;\r\n        // The caller's UA MAY send a BYE for either confirmed or early dialogs,\r\n        // and the callee's UA MAY send a BYE on confirmed dialogs, but MUST NOT\r\n        // send a BYE on early dialogs. However, the callee's UA MUST NOT send a\r\n        // BYE on a confirmed dialog until it has received an ACK for its 2xx\r\n        // response or until the server transaction times out.\r\n        // https://tools.ietf.org/html/rfc3261#section-15\r\n        switch (dialog.sessionState) {\r\n            case core_1.SessionState.Initial:\r\n                throw new Error(\"Invalid dialog state \" + dialog.sessionState);\r\n            case core_1.SessionState.Early: // Implementation choice - not sending BYE for early dialogs.\r\n                throw new Error(\"Invalid dialog state \" + dialog.sessionState);\r\n            case core_1.SessionState.AckWait: { // This state only occurs if we are the callee.\r\n                this.stateTransition(session_state_1.SessionState.Terminating); // We're terminating\r\n                return new Promise(function (resolve, reject) {\r\n                    dialog.delegate = {\r\n                        // When ACK shows up, say BYE.\r\n                        onAck: function () {\r\n                            var request = dialog.bye(delegate, options);\r\n                            _this.stateTransition(session_state_1.SessionState.Terminated);\r\n                            resolve(request);\r\n                        },\r\n                        // Or the server transaction times out before the ACK arrives.\r\n                        onAckTimeout: function () {\r\n                            var request = dialog.bye(delegate, options);\r\n                            _this.stateTransition(session_state_1.SessionState.Terminated);\r\n                            resolve(request);\r\n                        }\r\n                    };\r\n                });\r\n            }\r\n            case core_1.SessionState.Confirmed: {\r\n                var request = dialog.bye(delegate, options);\r\n                this.stateTransition(session_state_1.SessionState.Terminated);\r\n                return Promise.resolve(request);\r\n            }\r\n            case core_1.SessionState.Terminated:\r\n                throw new Error(\"Invalid dialog state \" + dialog.sessionState);\r\n            default:\r\n                throw new Error(\"Unrecognized state.\");\r\n        }\r\n    };\r\n    /**\r\n     * Send INFO.\r\n     * @param delegate - Request delegate.\r\n     * @param options - Request options bucket.\r\n     * @internal\r\n     */\r\n    Session.prototype._info = function (delegate, options) {\r\n        // Using core session dialog\r\n        if (!this.dialog) {\r\n            return Promise.reject(new Error(\"Session dialog undefined.\"));\r\n        }\r\n        return Promise.resolve(this.dialog.info(delegate, options));\r\n    };\r\n    /**\r\n     * Send MESSAGE.\r\n     * @param delegate - Request delegate.\r\n     * @param options - Request options bucket.\r\n     * @internal\r\n     */\r\n    Session.prototype._message = function (delegate, options) {\r\n        // Using core session dialog\r\n        if (!this.dialog) {\r\n            return Promise.reject(new Error(\"Session dialog undefined.\"));\r\n        }\r\n        return Promise.resolve(this.dialog.message(delegate, options));\r\n    };\r\n    /**\r\n     * Send REFER.\r\n     * @param onNotify - Notification callback.\r\n     * @param delegate - Request delegate.\r\n     * @param options - Request options bucket.\r\n     * @internal\r\n     */\r\n    Session.prototype._refer = function (onNotify, delegate, options) {\r\n        // Using core session dialog\r\n        if (!this.dialog) {\r\n            return Promise.reject(new Error(\"Session dialog undefined.\"));\r\n        }\r\n        // If set, deliver any in-dialog NOTIFY requests here...\r\n        this.onNotify = onNotify;\r\n        return Promise.resolve(this.dialog.refer(delegate, options));\r\n    };\r\n    /**\r\n     * Send ACK and then BYE. There are unrecoverable errors which can occur\r\n     * while handling dialog forming and in-dialog INVITE responses and when\r\n     * they occur we ACK the response and send a BYE.\r\n     * Note that the BYE is sent in the dialog associated with the response\r\n     * which is not necessarily `this.dialog`. And, accordingly, the\r\n     * session state is not transitioned to terminated and session is not closed.\r\n     * @param inviteResponse - The response causing the error.\r\n     * @param statusCode - Status code for he reason phrase.\r\n     * @param reasonPhrase - Reason phrase for the BYE.\r\n     * @internal\r\n     */\r\n    Session.prototype.ackAndBye = function (response, statusCode, reasonPhrase) {\r\n        response.ack();\r\n        var extraHeaders = [];\r\n        if (statusCode) {\r\n            extraHeaders.push(\"Reason: \" + this.getReasonHeaderValue(statusCode, reasonPhrase));\r\n        }\r\n        // Using the dialog session associate with the response (which might not be this.dialog)\r\n        response.session.bye(undefined, { extraHeaders: extraHeaders });\r\n    };\r\n    /**\r\n     * Handle in dialog ACK request.\r\n     * @internal\r\n     */\r\n    Session.prototype.onAckRequest = function (request) {\r\n        var _this = this;\r\n        this.logger.log(\"Session.onAckRequest\");\r\n        if (this.state !== session_state_1.SessionState.Established && this.state !== session_state_1.SessionState.Terminating) {\r\n            this.logger.error(\"ACK received while in state \" + this.state + \", dropping request\");\r\n            return;\r\n        }\r\n        var dialog = this.dialog;\r\n        if (!dialog) {\r\n            throw new Error(\"Dialog undefined.\");\r\n        }\r\n        switch (dialog.signalingState) {\r\n            case core_1.SignalingState.Initial: {\r\n                // State should never be reached as first reliable response must have answer/offer.\r\n                // So we must have never has sent an offer.\r\n                this.logger.error(\"Invalid signaling state \" + dialog.signalingState + \".\");\r\n                var extraHeaders = [\"Reason: \" + this.getReasonHeaderValue(488, \"Bad Media Description\")];\r\n                dialog.bye(undefined, { extraHeaders: extraHeaders });\r\n                this.stateTransition(session_state_1.SessionState.Terminated);\r\n                return;\r\n            }\r\n            case core_1.SignalingState.Stable: {\r\n                // State we should be in.\r\n                // Either the ACK has the answer that got us here, or we were in this state prior to the ACK.\r\n                var body = core_1.getBody(request.message);\r\n                // If the ACK doesn't have an answer, nothing to be done.\r\n                if (!body) {\r\n                    return;\r\n                }\r\n                if (body.contentDisposition === \"render\") {\r\n                    this._renderbody = body.content;\r\n                    this._rendertype = body.contentType;\r\n                    return;\r\n                }\r\n                if (body.contentDisposition !== \"session\") {\r\n                    return;\r\n                }\r\n                // Received answer in ACK.\r\n                var options = {\r\n                    sessionDescriptionHandlerOptions: this._sessionDescriptionHandlerOptions,\r\n                    sessionDescriptionHandlerModifiers: this._sessionDescriptionHandlerModifiers\r\n                };\r\n                this.setAnswer(body, options)\r\n                    .catch(function (error) {\r\n                    _this.logger.error(error.message);\r\n                    var extraHeaders = [\"Reason: \" + _this.getReasonHeaderValue(488, \"Bad Media Description\")];\r\n                    dialog.bye(undefined, { extraHeaders: extraHeaders });\r\n                    _this.stateTransition(session_state_1.SessionState.Terminated);\r\n                });\r\n                return;\r\n            }\r\n            case core_1.SignalingState.HaveLocalOffer: {\r\n                // State should never be reached as local offer would be answered by this ACK.\r\n                // So we must have received an ACK without an answer.\r\n                this.logger.error(\"Invalid signaling state \" + dialog.signalingState + \".\");\r\n                var extraHeaders = [\"Reason: \" + this.getReasonHeaderValue(488, \"Bad Media Description\")];\r\n                dialog.bye(undefined, { extraHeaders: extraHeaders });\r\n                this.stateTransition(session_state_1.SessionState.Terminated);\r\n                return;\r\n            }\r\n            case core_1.SignalingState.HaveRemoteOffer: {\r\n                // State should never be reached as remote offer would be answered in first reliable response.\r\n                // So we must have never has sent an answer.\r\n                this.logger.error(\"Invalid signaling state \" + dialog.signalingState + \".\");\r\n                var extraHeaders = [\"Reason: \" + this.getReasonHeaderValue(488, \"Bad Media Description\")];\r\n                dialog.bye(undefined, { extraHeaders: extraHeaders });\r\n                this.stateTransition(session_state_1.SessionState.Terminated);\r\n                return;\r\n            }\r\n            case core_1.SignalingState.Closed:\r\n                throw new Error(\"Invalid signaling state \" + dialog.signalingState + \".\");\r\n            default:\r\n                throw new Error(\"Invalid signaling state \" + dialog.signalingState + \".\");\r\n        }\r\n    };\r\n    /**\r\n     * Handle in dialog BYE request.\r\n     * @internal\r\n     */\r\n    Session.prototype.onByeRequest = function (request) {\r\n        this.logger.log(\"Session.onByeRequest\");\r\n        if (this.state !== session_state_1.SessionState.Established) {\r\n            this.logger.error(\"BYE received while in state \" + this.state + \", dropping request\");\r\n            return;\r\n        }\r\n        if (this.delegate && this.delegate.onBye) {\r\n            var bye = new bye_1.Bye(request);\r\n            this.delegate.onBye(bye);\r\n        }\r\n        else {\r\n            request.accept();\r\n        }\r\n        this.stateTransition(session_state_1.SessionState.Terminated);\r\n    };\r\n    /**\r\n     * Handle in dialog INFO request.\r\n     * @internal\r\n     */\r\n    Session.prototype.onInfoRequest = function (request) {\r\n        this.logger.log(\"Session.onInfoRequest\");\r\n        if (this.state !== session_state_1.SessionState.Established) {\r\n            this.logger.error(\"INFO received while in state \" + this.state + \", dropping request\");\r\n            return;\r\n        }\r\n        if (this.delegate && this.delegate.onInfo) {\r\n            var info = new info_1.Info(request);\r\n            this.delegate.onInfo(info);\r\n        }\r\n        else {\r\n            // FIXME: TODO: We should reject request...\r\n            //\r\n            // If a UA receives an INFO request associated with an Info Package that\r\n            // the UA has not indicated willingness to receive, the UA MUST send a\r\n            // 469 (Bad Info Package) response (see Section 11.6), which contains a\r\n            // Recv-Info header field with Info Packages for which the UA is willing\r\n            // to receive INFO requests.\r\n            // https://tools.ietf.org/html/rfc6086#section-4.2.2\r\n            request.accept();\r\n        }\r\n    };\r\n    /**\r\n     * Handle in dialog INVITE request.\r\n     * @internal\r\n     */\r\n    Session.prototype.onInviteRequest = function (request) {\r\n        var _this = this;\r\n        this.logger.log(\"Session.onInviteRequest\");\r\n        if (this.state !== session_state_1.SessionState.Established) {\r\n            this.logger.error(\"INVITE received while in state \" + this.state + \", dropping request\");\r\n            return;\r\n        }\r\n        // TODO: would be nice to have core track and set the Contact header,\r\n        // but currently the session which is setting it is holding onto it.\r\n        var extraHeaders = [\"Contact: \" + this._contact];\r\n        // Handle P-Asserted-Identity\r\n        if (request.message.hasHeader(\"P-Asserted-Identity\")) {\r\n            var header = request.message.getHeader(\"P-Asserted-Identity\");\r\n            if (!header) {\r\n                throw new Error(\"Header undefined.\");\r\n            }\r\n            this._assertedIdentity = core_1.Grammar.nameAddrHeaderParse(header);\r\n        }\r\n        // FIXME: SDH options & SDH modifiers options are applied somewhat ambiguously\r\n        //        This behavior was ported from legacy code and the issue punted down the road.\r\n        var options = {\r\n            sessionDescriptionHandlerOptions: this._sessionDescriptionHandlerOptions,\r\n            sessionDescriptionHandlerModifiers: this._sessionDescriptionHandlerModifiers\r\n        };\r\n        this.generateResponseOfferAnswerInDialog(options)\r\n            .then(function (body) {\r\n            var outgoingResponse = request.accept({ statusCode: 200, extraHeaders: extraHeaders, body: body });\r\n            if (_this.delegate && _this.delegate.onInvite) {\r\n                _this.delegate.onInvite(request.message, outgoingResponse.message, 200);\r\n            }\r\n        })\r\n            .catch(function (error) {\r\n            _this.logger.error(error.message);\r\n            _this.logger.error(\"Failed to handle to re-INVITE request\");\r\n            if (!_this.dialog) {\r\n                throw new Error(\"Dialog undefined.\");\r\n            }\r\n            _this.logger.error(_this.dialog.signalingState);\r\n            // If we don't have a local/remote offer...\r\n            if (_this.dialog.signalingState === core_1.SignalingState.Stable) {\r\n                var outgoingResponse = request.reject({ statusCode: 488 }); // Not Acceptable Here\r\n                if (_this.delegate && _this.delegate.onInvite) {\r\n                    _this.delegate.onInvite(request.message, outgoingResponse.message, 488);\r\n                }\r\n                return;\r\n            }\r\n            // Otherwise rollback\r\n            _this.rollbackOffer()\r\n                .then(function () {\r\n                var outgoingResponse = request.reject({ statusCode: 488 }); // Not Acceptable Here\r\n                if (_this.delegate && _this.delegate.onInvite) {\r\n                    _this.delegate.onInvite(request.message, outgoingResponse.message, 488);\r\n                }\r\n            })\r\n                .catch(function (errorRollback) {\r\n                // No way to recover, so terminate session and mark as failed.\r\n                _this.logger.error(errorRollback.message);\r\n                _this.logger.error(\"Failed to rollback offer on re-INVITE request\");\r\n                var outgoingResponse = request.reject({ statusCode: 488 }); // Not Acceptable Here\r\n                // A BYE should only be sent if session is not already terminated.\r\n                // For example, a BYE may be sent/received while re-INVITE is outstanding.\r\n                // Note that the ACK was already sent by the transaction, so just need to send BYE.\r\n                if (_this.state !== session_state_1.SessionState.Terminated) {\r\n                    if (!_this.dialog) {\r\n                        throw new Error(\"Dialog undefined.\");\r\n                    }\r\n                    var extraHeadersBye = [];\r\n                    extraHeadersBye.push(\"Reason: \" + _this.getReasonHeaderValue(500, \"Internal Server Error\"));\r\n                    _this.dialog.bye(undefined, { extraHeaders: extraHeaders });\r\n                    _this.stateTransition(session_state_1.SessionState.Terminated);\r\n                }\r\n                if (_this.delegate && _this.delegate.onInvite) {\r\n                    _this.delegate.onInvite(request.message, outgoingResponse.message, 488);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Handle in dialog MESSAGE request.\r\n     * @internal\r\n     */\r\n    Session.prototype.onMessageRequest = function (request) {\r\n        this.logger.log(\"Session.onMessageRequest\");\r\n        if (this.state !== session_state_1.SessionState.Established) {\r\n            this.logger.error(\"MESSAGE received while in state \" + this.state + \", dropping request\");\r\n            return;\r\n        }\r\n        if (this.delegate && this.delegate.onMessage) {\r\n            var message = new message_1.Message(request);\r\n            this.delegate.onMessage(message);\r\n        }\r\n        else {\r\n            request.accept();\r\n        }\r\n    };\r\n    /**\r\n     * Handle in dialog NOTIFY request.\r\n     * @internal\r\n     */\r\n    Session.prototype.onNotifyRequest = function (request) {\r\n        this.logger.log(\"Session.onNotifyRequest\");\r\n        if (this.state !== session_state_1.SessionState.Established) {\r\n            this.logger.error(\"NOTIFY received while in state \" + this.state + \", dropping request\");\r\n            return;\r\n        }\r\n        // If this a NOTIFY associated with the progress of a REFER,\r\n        // look to delegate handling to the associated callback.\r\n        if (this.onNotify) {\r\n            var notification = new notification_1.Notification(request);\r\n            this.onNotify(notification);\r\n            return;\r\n        }\r\n        // Otherwise accept the NOTIFY.\r\n        if (this.delegate && this.delegate.onNotify) {\r\n            var notification = new notification_1.Notification(request);\r\n            this.delegate.onNotify(notification);\r\n        }\r\n        else {\r\n            request.accept();\r\n        }\r\n    };\r\n    /**\r\n     * Handle in dialog PRACK request.\r\n     * @internal\r\n     */\r\n    Session.prototype.onPrackRequest = function (request) {\r\n        this.logger.log(\"Session.onPrackRequest\");\r\n        if (this.state !== session_state_1.SessionState.Established) {\r\n            this.logger.error(\"PRACK received while in state \" + this.state + \", dropping request\");\r\n            return;\r\n        }\r\n        throw new Error(\"Unimplemented.\");\r\n    };\r\n    /**\r\n     * Handle in dialog REFER request.\r\n     * @internal\r\n     */\r\n    Session.prototype.onReferRequest = function (request) {\r\n        var _this = this;\r\n        this.logger.log(\"Session.onReferRequest\");\r\n        if (this.state !== session_state_1.SessionState.Established) {\r\n            this.logger.error(\"REFER received while in state \" + this.state + \", dropping request\");\r\n            return;\r\n        }\r\n        // REFER is a SIP request and is constructed as defined in [1].  A REFER\r\n        // request MUST contain exactly one Refer-To header field value.\r\n        // https://tools.ietf.org/html/rfc3515#section-2.4.1\r\n        if (!request.message.hasHeader(\"refer-to\")) {\r\n            this.logger.warn(\"Invalid REFER packet. A refer-to header is required. Rejecting.\");\r\n            request.reject();\r\n            return;\r\n        }\r\n        var referral = new referral_1.Referral(request, this);\r\n        if (this.delegate && this.delegate.onRefer) {\r\n            this.delegate.onRefer(referral);\r\n        }\r\n        else {\r\n            this.logger.log(\"No delegate available to handle REFER, automatically accepting and following.\");\r\n            referral\r\n                .accept()\r\n                .then(function () { return referral\r\n                .makeInviter(_this._referralInviterOptions)\r\n                .invite(); })\r\n                .catch(function (error) {\r\n                // FIXME: logging and eating error...\r\n                _this.logger.error(error.message);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Generate an offer or answer for a response to an INVITE request.\r\n     * If a remote offer was provided in the request, set the remote\r\n     * description and get a local answer. If a remote offer was not\r\n     * provided, generates a local offer.\r\n     * @internal\r\n     */\r\n    Session.prototype.generateResponseOfferAnswer = function (request, options) {\r\n        if (this.dialog) {\r\n            return this.generateResponseOfferAnswerInDialog(options);\r\n        }\r\n        var body = core_1.getBody(request.message);\r\n        if (!body || body.contentDisposition !== \"session\") {\r\n            return this.getOffer(options);\r\n        }\r\n        else {\r\n            return this.setOfferAndGetAnswer(body, options);\r\n        }\r\n    };\r\n    /**\r\n     * Generate an offer or answer for a response to an INVITE request\r\n     * when a dialog (early or otherwise) has already been established.\r\n     * This method may NOT be called if a dialog has yet to be established.\r\n     * @internal\r\n     */\r\n    Session.prototype.generateResponseOfferAnswerInDialog = function (options) {\r\n        if (!this.dialog) {\r\n            throw new Error(\"Dialog undefined.\");\r\n        }\r\n        switch (this.dialog.signalingState) {\r\n            case core_1.SignalingState.Initial:\r\n                return this.getOffer(options);\r\n            case core_1.SignalingState.HaveLocalOffer:\r\n                // o  Once the UAS has sent or received an answer to the initial\r\n                // offer, it MUST NOT generate subsequent offers in any responses\r\n                // to the initial INVITE.  This means that a UAS based on this\r\n                // specification alone can never generate subsequent offers until\r\n                // completion of the initial transaction.\r\n                // https://tools.ietf.org/html/rfc3261#section-13.2.1\r\n                return Promise.resolve(undefined);\r\n            case core_1.SignalingState.HaveRemoteOffer:\r\n                if (!this.dialog.offer) {\r\n                    throw new Error(\"Session offer undefined in signaling state \" + this.dialog.signalingState + \".\");\r\n                }\r\n                return this.setOfferAndGetAnswer(this.dialog.offer, options);\r\n            case core_1.SignalingState.Stable:\r\n                // o  Once the UAS has sent or received an answer to the initial\r\n                // offer, it MUST NOT generate subsequent offers in any responses\r\n                // to the initial INVITE.  This means that a UAS based on this\r\n                // specification alone can never generate subsequent offers until\r\n                // completion of the initial transaction.\r\n                // https://tools.ietf.org/html/rfc3261#section-13.2.1\r\n                if (this.state !== session_state_1.SessionState.Established) {\r\n                    return Promise.resolve(undefined);\r\n                }\r\n                // In dialog INVITE without offer, get an offer for the response.\r\n                return this.getOffer(options);\r\n            case core_1.SignalingState.Closed:\r\n                throw new Error(\"Invalid signaling state \" + this.dialog.signalingState + \".\");\r\n            default:\r\n                throw new Error(\"Invalid signaling state \" + this.dialog.signalingState + \".\");\r\n        }\r\n    };\r\n    /**\r\n     * Get local offer.\r\n     * @internal\r\n     */\r\n    Session.prototype.getOffer = function (options) {\r\n        var _this = this;\r\n        var sdh = this.setupSessionDescriptionHandler();\r\n        var sdhOptions = options.sessionDescriptionHandlerOptions;\r\n        var sdhModifiers = options.sessionDescriptionHandlerModifiers;\r\n        // This is intentionally written very defensively. Don't trust SDH to behave.\r\n        try {\r\n            return sdh.getDescription(sdhOptions, sdhModifiers)\r\n                .then(function (bodyAndContentType) { return core_1.fromBodyLegacy(bodyAndContentType); })\r\n                .catch(function (error) {\r\n                _this.logger.error(\"Session.getOffer: SDH getDescription rejected...\");\r\n                var e = error instanceof Error ? error : new Error(error);\r\n                _this.logger.error(e.message);\r\n                throw e;\r\n            });\r\n        }\r\n        catch (error) { // don't trust SDH to throw an Error\r\n            this.logger.error(\"Session.getOffer: SDH getDescription threw...\");\r\n            var e = error instanceof Error ? error : new Error(error);\r\n            this.logger.error(e.message);\r\n            return Promise.reject(e);\r\n        }\r\n    };\r\n    /**\r\n     * Rollback local/remote offer.\r\n     * @internal\r\n     */\r\n    Session.prototype.rollbackOffer = function () {\r\n        var _this = this;\r\n        var sdh = this.setupSessionDescriptionHandler();\r\n        if (!sdh.rollbackDescription) {\r\n            return Promise.resolve();\r\n        }\r\n        // This is intentionally written very defensively. Don't trust SDH to behave.\r\n        try {\r\n            return sdh.rollbackDescription()\r\n                .catch(function (error) {\r\n                _this.logger.error(\"Session.rollbackOffer: SDH rollbackDescription rejected...\");\r\n                var e = error instanceof Error ? error : new Error(error);\r\n                _this.logger.error(e.message);\r\n                throw e;\r\n            });\r\n        }\r\n        catch (error) { // don't trust SDH to throw an Error\r\n            this.logger.error(\"Session.rollbackOffer: SDH rollbackDescription threw...\");\r\n            var e = error instanceof Error ? error : new Error(error);\r\n            this.logger.error(e.message);\r\n            return Promise.reject(e);\r\n        }\r\n    };\r\n    /**\r\n     * Set remote answer.\r\n     * @internal\r\n     */\r\n    Session.prototype.setAnswer = function (answer, options) {\r\n        var _this = this;\r\n        var sdh = this.setupSessionDescriptionHandler();\r\n        var sdhOptions = options.sessionDescriptionHandlerOptions;\r\n        var sdhModifiers = options.sessionDescriptionHandlerModifiers;\r\n        // This is intentionally written very defensively. Don't trust SDH to behave.\r\n        try {\r\n            if (!sdh.hasDescription(answer.contentType)) {\r\n                return Promise.reject(new exceptions_1.ContentTypeUnsupportedError());\r\n            }\r\n        }\r\n        catch (error) {\r\n            this.logger.error(\"Session.setAnswer: SDH hasDescription threw...\");\r\n            var e = error instanceof Error ? error : new Error(error);\r\n            this.logger.error(e.message);\r\n            return Promise.reject(e);\r\n        }\r\n        try {\r\n            return sdh.setDescription(answer.content, sdhOptions, sdhModifiers)\r\n                .catch(function (error) {\r\n                _this.logger.error(\"Session.setAnswer: SDH setDescription rejected...\");\r\n                var e = error instanceof Error ? error : new Error(error);\r\n                _this.logger.error(e.message);\r\n                throw e;\r\n            });\r\n        }\r\n        catch (error) { // don't trust SDH to throw an Error\r\n            this.logger.error(\"Session.setAnswer: SDH setDescription threw...\");\r\n            var e = error instanceof Error ? error : new Error(error);\r\n            this.logger.error(e.message);\r\n            return Promise.reject(e);\r\n        }\r\n    };\r\n    /**\r\n     * Set remote offer and get local answer.\r\n     * @internal\r\n     */\r\n    Session.prototype.setOfferAndGetAnswer = function (offer, options) {\r\n        var _this = this;\r\n        var sdh = this.setupSessionDescriptionHandler();\r\n        var sdhOptions = options.sessionDescriptionHandlerOptions;\r\n        var sdhModifiers = options.sessionDescriptionHandlerModifiers;\r\n        // This is intentionally written very defensively. Don't trust SDH to behave.\r\n        try {\r\n            if (!sdh.hasDescription(offer.contentType)) {\r\n                return Promise.reject(new exceptions_1.ContentTypeUnsupportedError());\r\n            }\r\n        }\r\n        catch (error) {\r\n            this.logger.error(\"Session.setOfferAndGetAnswer: SDH hasDescription threw...\");\r\n            var e = error instanceof Error ? error : new Error(error);\r\n            this.logger.error(e.message);\r\n            return Promise.reject(e);\r\n        }\r\n        try {\r\n            return sdh.setDescription(offer.content, sdhOptions, sdhModifiers)\r\n                .then(function () { return sdh.getDescription(sdhOptions, sdhModifiers); })\r\n                .then(function (bodyAndContentType) { return core_1.fromBodyLegacy(bodyAndContentType); })\r\n                .catch(function (error) {\r\n                _this.logger.error(\"Session.setOfferAndGetAnswer: SDH setDescription or getDescription rejected...\");\r\n                var e = error instanceof Error ? error : new Error(error);\r\n                _this.logger.error(e.message);\r\n                throw e;\r\n            });\r\n        }\r\n        catch (error) { // don't trust SDH to throw an Error\r\n            this.logger.error(\"Session.setOfferAndGetAnswer: SDH setDescription or getDescription threw...\");\r\n            var e = error instanceof Error ? error : new Error(error);\r\n            this.logger.error(e.message);\r\n            return Promise.reject(e);\r\n        }\r\n    };\r\n    /**\r\n     * SDH for confirmed dialog.\r\n     * @internal\r\n     */\r\n    Session.prototype.setSessionDescriptionHandler = function (sdh) {\r\n        if (this._sessionDescriptionHandler) {\r\n            throw new Error(\"Session description handler defined.\");\r\n        }\r\n        this._sessionDescriptionHandler = sdh;\r\n    };\r\n    /**\r\n     * SDH for confirmed dialog.\r\n     * @internal\r\n     */\r\n    Session.prototype.setupSessionDescriptionHandler = function () {\r\n        if (this._sessionDescriptionHandler) {\r\n            return this._sessionDescriptionHandler;\r\n        }\r\n        this._sessionDescriptionHandler =\r\n            this.sessionDescriptionHandlerFactory(this, this.userAgent.configuration.sessionDescriptionHandlerFactoryOptions);\r\n        return this._sessionDescriptionHandler;\r\n    };\r\n    /**\r\n     * Transition session state.\r\n     * @internal\r\n     */\r\n    Session.prototype.stateTransition = function (newState) {\r\n        var _this = this;\r\n        var invalidTransition = function () {\r\n            throw new Error(\"Invalid state transition from \" + _this._state + \" to \" + newState);\r\n        };\r\n        // Validate transition\r\n        switch (this._state) {\r\n            case session_state_1.SessionState.Initial:\r\n                if (newState !== session_state_1.SessionState.Establishing &&\r\n                    newState !== session_state_1.SessionState.Established &&\r\n                    newState !== session_state_1.SessionState.Terminating &&\r\n                    newState !== session_state_1.SessionState.Terminated) {\r\n                    invalidTransition();\r\n                }\r\n                break;\r\n            case session_state_1.SessionState.Establishing:\r\n                if (newState !== session_state_1.SessionState.Established &&\r\n                    newState !== session_state_1.SessionState.Terminating &&\r\n                    newState !== session_state_1.SessionState.Terminated) {\r\n                    invalidTransition();\r\n                }\r\n                break;\r\n            case session_state_1.SessionState.Established:\r\n                if (newState !== session_state_1.SessionState.Terminating &&\r\n                    newState !== session_state_1.SessionState.Terminated) {\r\n                    invalidTransition();\r\n                }\r\n                break;\r\n            case session_state_1.SessionState.Terminating:\r\n                if (newState !== session_state_1.SessionState.Terminated) {\r\n                    invalidTransition();\r\n                }\r\n                break;\r\n            case session_state_1.SessionState.Terminated:\r\n                invalidTransition();\r\n                break;\r\n            default:\r\n                throw new Error(\"Unrecognized state.\");\r\n        }\r\n        // Transition\r\n        this._state = newState;\r\n        this.logger.log(\"Session \" + this.id + \" transitioned to state \" + this._state);\r\n        this._stateEventEmitter.emit(\"event\", this._state);\r\n        // Dispose\r\n        if (newState === session_state_1.SessionState.Terminated) {\r\n            this.dispose();\r\n        }\r\n    };\r\n    Session.prototype.copyRequestOptions = function (requestOptions) {\r\n        if (requestOptions === void 0) { requestOptions = {}; }\r\n        var extraHeaders = requestOptions.extraHeaders ? requestOptions.extraHeaders.slice() : undefined;\r\n        var body = requestOptions.body ?\r\n            {\r\n                contentDisposition: requestOptions.body.contentDisposition || \"render\",\r\n                contentType: requestOptions.body.contentType || \"text/plain\",\r\n                content: requestOptions.body.content || \"\"\r\n            } : undefined;\r\n        return {\r\n            extraHeaders: extraHeaders,\r\n            body: body\r\n        };\r\n    };\r\n    Session.prototype.getReasonHeaderValue = function (code, reason) {\r\n        var cause = code;\r\n        var text = utils_1.getReasonPhrase(code);\r\n        if (!text && reason) {\r\n            text = reason;\r\n        }\r\n        return \"SIP;cause=\" + cause + ';text=\"' + text + '\"';\r\n    };\r\n    Session.prototype.referExtraHeaders = function (referTo) {\r\n        var extraHeaders = [];\r\n        extraHeaders.push(\"Referred-By: <\" + this.userAgent.configuration.uri + \">\");\r\n        extraHeaders.push(\"Contact: \" + this._contact);\r\n        extraHeaders.push(\"Allow: \" + [\r\n            \"ACK\",\r\n            \"CANCEL\",\r\n            \"INVITE\",\r\n            \"MESSAGE\",\r\n            \"BYE\",\r\n            \"OPTIONS\",\r\n            \"INFO\",\r\n            \"NOTIFY\",\r\n            \"REFER\"\r\n        ].toString());\r\n        extraHeaders.push(\"Refer-To: \" + referTo);\r\n        return extraHeaders;\r\n    };\r\n    Session.prototype.referToString = function (target) {\r\n        var referTo;\r\n        if (target instanceof core_1.URI) {\r\n            // REFER without Replaces (Blind Transfer)\r\n            referTo = target.toString();\r\n        }\r\n        else {\r\n            // REFER with Replaces (Attended Transfer)\r\n            if (!target.dialog) {\r\n                throw new Error(\"Dialog undefined.\");\r\n            }\r\n            var displayName = target.remoteIdentity.friendlyName;\r\n            var remoteTarget = target.dialog.remoteTarget.toString();\r\n            var callId = target.dialog.callId;\r\n            var remoteTag = target.dialog.remoteTag;\r\n            var localTag = target.dialog.localTag;\r\n            var replaces = encodeURIComponent(callId + \";to-tag=\" + remoteTag + \";from-tag=\" + localTag);\r\n            referTo = \"\\\"\" + displayName + \"\\\" <\" + remoteTarget + \"?Replaces=\" + replaces + \">\";\r\n        }\r\n        return referTo;\r\n    };\r\n    return Session;\r\n}());\r\nexports.Session = Session;\r\n\r\n\r\n/***/ }),\r\n/* 97 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * A request to end a {@link Session} (incoming BYE).\r\n * @public\r\n */\r\nvar Bye = /** @class */ (function () {\r\n    /** @internal */\r\n    function Bye(incomingByeRequest) {\r\n        this.incomingByeRequest = incomingByeRequest;\r\n    }\r\n    Object.defineProperty(Bye.prototype, \"request\", {\r\n        /** Incoming BYE request message. */\r\n        get: function () {\r\n            return this.incomingByeRequest.message;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** Accept the request. */\r\n    Bye.prototype.accept = function (options) {\r\n        this.incomingByeRequest.accept(options);\r\n        return Promise.resolve();\r\n    };\r\n    /** Reject the request. */\r\n    Bye.prototype.reject = function (options) {\r\n        this.incomingByeRequest.reject(options);\r\n        return Promise.resolve();\r\n    };\r\n    return Bye;\r\n}());\r\nexports.Bye = Bye;\r\n\r\n\r\n/***/ }),\r\n/* 98 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Creates an {@link Emitter}.\r\n * @param eventEmitter - An event emitter.\r\n * @param eventName - Event name.\r\n * @internal\r\n */\r\nfunction _makeEmitter(eventEmitter, eventName) {\r\n    if (eventName === void 0) { eventName = \"event\"; }\r\n    return {\r\n        addListener: function (listener, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (options.once) {\r\n                eventEmitter.once(eventName, listener);\r\n            }\r\n            else {\r\n                eventEmitter.addListener(eventName, listener);\r\n            }\r\n        },\r\n        removeListener: function (listener) {\r\n            eventEmitter.removeListener(eventName, listener);\r\n        },\r\n        on: function (listener) {\r\n            eventEmitter.on(eventName, listener);\r\n        },\r\n        off: function (listener) {\r\n            eventEmitter.removeListener(eventName, listener);\r\n        },\r\n        once: function (listener) {\r\n            eventEmitter.once(eventName, listener);\r\n        }\r\n    };\r\n}\r\nexports._makeEmitter = _makeEmitter;\r\n\r\n\r\n/***/ }),\r\n/* 99 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\ntslib_1.__exportStar(__webpack_require__(100), exports);\r\ntslib_1.__exportStar(__webpack_require__(101), exports);\r\ntslib_1.__exportStar(__webpack_require__(102), exports);\r\ntslib_1.__exportStar(__webpack_require__(103), exports);\r\ntslib_1.__exportStar(__webpack_require__(104), exports);\r\n\r\n\r\n/***/ }),\r\n/* 100 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar core_1 = __webpack_require__(2);\r\n/**\r\n * An exception indicating an unsupported content type prevented execution.\r\n * @public\r\n */\r\nvar ContentTypeUnsupportedError = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ContentTypeUnsupportedError, _super);\r\n    function ContentTypeUnsupportedError(message) {\r\n        return _super.call(this, message ? message : \"Unsupported content type.\") || this;\r\n    }\r\n    return ContentTypeUnsupportedError;\r\n}(core_1.Exception));\r\nexports.ContentTypeUnsupportedError = ContentTypeUnsupportedError;\r\n\r\n\r\n/***/ }),\r\n/* 101 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar core_1 = __webpack_require__(2);\r\n/**\r\n * An exception indicating an outstanding prior request prevented execution.\r\n * @public\r\n */\r\nvar RequestPendingError = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RequestPendingError, _super);\r\n    /** @internal */\r\n    function RequestPendingError(message) {\r\n        return _super.call(this, message ? message : \"Request pending.\") || this;\r\n    }\r\n    return RequestPendingError;\r\n}(core_1.Exception));\r\nexports.RequestPendingError = RequestPendingError;\r\n\r\n\r\n/***/ }),\r\n/* 102 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar core_1 = __webpack_require__(2);\r\n/**\r\n * An exception indicating a session description handler error occured.\r\n * @public\r\n */\r\nvar SessionDescriptionHandlerError = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SessionDescriptionHandlerError, _super);\r\n    function SessionDescriptionHandlerError(message) {\r\n        return _super.call(this, message ? message : \"Unspecified session description handler error.\") || this;\r\n    }\r\n    return SessionDescriptionHandlerError;\r\n}(core_1.Exception));\r\nexports.SessionDescriptionHandlerError = SessionDescriptionHandlerError;\r\n\r\n\r\n/***/ }),\r\n/* 103 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar core_1 = __webpack_require__(2);\r\n/**\r\n * An exception indicating the session terminated before the action completed.\r\n * @public\r\n */\r\nvar SessionTerminatedError = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SessionTerminatedError, _super);\r\n    function SessionTerminatedError() {\r\n        return _super.call(this, \"The session has terminated.\") || this;\r\n    }\r\n    return SessionTerminatedError;\r\n}(core_1.Exception));\r\nexports.SessionTerminatedError = SessionTerminatedError;\r\n\r\n\r\n/***/ }),\r\n/* 104 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar core_1 = __webpack_require__(2);\r\n/**\r\n * An exception indicating an invalid state transition error occured.\r\n * @public\r\n */\r\nvar StateTransitionError = /** @class */ (function (_super) {\r\n    tslib_1.__extends(StateTransitionError, _super);\r\n    function StateTransitionError(message) {\r\n        return _super.call(this, message ? message : \"An error occurred during state transition.\") || this;\r\n    }\r\n    return StateTransitionError;\r\n}(core_1.Exception));\r\nexports.StateTransitionError = StateTransitionError;\r\n\r\n\r\n/***/ }),\r\n/* 105 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * An exchange of information (incoming INFO).\r\n * @public\r\n */\r\nvar Info = /** @class */ (function () {\r\n    /** @internal */\r\n    function Info(incomingInfoRequest) {\r\n        this.incomingInfoRequest = incomingInfoRequest;\r\n    }\r\n    Object.defineProperty(Info.prototype, \"request\", {\r\n        /** Incoming MESSAGE request message. */\r\n        get: function () {\r\n            return this.incomingInfoRequest.message;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** Accept the request. */\r\n    Info.prototype.accept = function (options) {\r\n        this.incomingInfoRequest.accept(options);\r\n        return Promise.resolve();\r\n    };\r\n    /** Reject the request. */\r\n    Info.prototype.reject = function (options) {\r\n        this.incomingInfoRequest.reject(options);\r\n        return Promise.resolve();\r\n    };\r\n    return Info;\r\n}());\r\nexports.Info = Info;\r\n\r\n\r\n/***/ }),\r\n/* 106 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * A received message (incoming MESSAGE).\r\n * @public\r\n */\r\nvar Message = /** @class */ (function () {\r\n    /** @internal */\r\n    function Message(incomingMessageRequest) {\r\n        this.incomingMessageRequest = incomingMessageRequest;\r\n    }\r\n    Object.defineProperty(Message.prototype, \"request\", {\r\n        /** Incoming MESSAGE request message. */\r\n        get: function () {\r\n            return this.incomingMessageRequest.message;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** Accept the request. */\r\n    Message.prototype.accept = function (options) {\r\n        this.incomingMessageRequest.accept(options);\r\n        return Promise.resolve();\r\n    };\r\n    /** Reject the request. */\r\n    Message.prototype.reject = function (options) {\r\n        this.incomingMessageRequest.reject(options);\r\n        return Promise.resolve();\r\n    };\r\n    return Message;\r\n}());\r\nexports.Message = Message;\r\n\r\n\r\n/***/ }),\r\n/* 107 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * A notification of an event (incoming NOTIFY).\r\n * @public\r\n */\r\nvar Notification = /** @class */ (function () {\r\n    /** @internal */\r\n    function Notification(incomingNotifyRequest) {\r\n        this.incomingNotifyRequest = incomingNotifyRequest;\r\n    }\r\n    Object.defineProperty(Notification.prototype, \"request\", {\r\n        /** Incoming NOTIFY request message. */\r\n        get: function () {\r\n            return this.incomingNotifyRequest.message;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** Accept the request. */\r\n    Notification.prototype.accept = function (options) {\r\n        this.incomingNotifyRequest.accept(options);\r\n        return Promise.resolve();\r\n    };\r\n    /** Reject the request. */\r\n    Notification.prototype.reject = function (options) {\r\n        this.incomingNotifyRequest.reject(options);\r\n        return Promise.resolve();\r\n    };\r\n    return Notification;\r\n}());\r\nexports.Notification = Notification;\r\n\r\n\r\n/***/ }),\r\n/* 108 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = __webpack_require__(2);\r\n/**\r\n * A request to establish a {@link Session} elsewhere (incoming REFER).\r\n * @public\r\n */\r\nvar Referral = /** @class */ (function () {\r\n    /** @internal */\r\n    function Referral(incomingReferRequest, session) {\r\n        this.incomingReferRequest = incomingReferRequest;\r\n        this.session = session;\r\n    }\r\n    Object.defineProperty(Referral.prototype, \"referTo\", {\r\n        get: function () {\r\n            var referTo = this.incomingReferRequest.message.parseHeader(\"refer-to\");\r\n            if (!(referTo instanceof core_1.NameAddrHeader)) {\r\n                throw new Error(\"Failed to parse Refer-To header.\");\r\n            }\r\n            return referTo;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Referral.prototype, \"referredBy\", {\r\n        get: function () {\r\n            return this.incomingReferRequest.message.getHeader(\"referred-by\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Referral.prototype, \"replaces\", {\r\n        get: function () {\r\n            return this.referTo.uri.getHeader(\"replaces\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Referral.prototype, \"request\", {\r\n        /** Incoming REFER request message. */\r\n        get: function () {\r\n            return this.incomingReferRequest.message;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** Accept the request. */\r\n    Referral.prototype.accept = function (options) {\r\n        if (options === void 0) { options = { statusCode: 202 }; }\r\n        this.incomingReferRequest.accept(options);\r\n        return Promise.resolve();\r\n    };\r\n    /** Reject the request. */\r\n    Referral.prototype.reject = function (options) {\r\n        this.incomingReferRequest.reject(options);\r\n        return Promise.resolve();\r\n    };\r\n    /**\r\n     * Creates an inviter which may be used to send an out of dialog INVITE request.\r\n     *\r\n     * @remarks\r\n     * This a helper method to create an Inviter which will execute the referral\r\n     * of the `Session` which was referred. The appropriate headers are set and\r\n     * the referred `Session` is linked to the new `Session`. Note that only a\r\n     * single instance of the `Inviter` will be created and returned (if called\r\n     * more than once a reference to the same `Inviter` will be returned every time).\r\n     *\r\n     * @param options - Options bucket.\r\n     * @param modifiers - Session description handler modifiers.\r\n     */\r\n    Referral.prototype.makeInviter = function (options) {\r\n        if (this.inviter) {\r\n            return this.inviter;\r\n        }\r\n        var targetURI = this.referTo.uri.clone();\r\n        targetURI.clearHeaders();\r\n        options = options || {};\r\n        var extraHeaders = (options.extraHeaders || []).slice();\r\n        var replaces = this.replaces;\r\n        if (replaces) {\r\n            // decodeURIComponent is a holdover from 2c086eb4. Not sure that it is actually necessary\r\n            extraHeaders.push(\"Replaces: \" + decodeURIComponent(replaces));\r\n        }\r\n        var referredBy = this.referredBy;\r\n        if (referredBy) {\r\n            extraHeaders.push(\"Referred-By: \" + referredBy);\r\n        }\r\n        options.extraHeaders = extraHeaders;\r\n        this.inviter = this.session.userAgent._makeInviter(targetURI, options);\r\n        this.inviter._referred = this.session;\r\n        this.session._referral = this.inviter;\r\n        return this.inviter;\r\n    };\r\n    return Referral;\r\n}());\r\nexports.Referral = Referral;\r\n\r\n\r\n/***/ }),\r\n/* 109 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * {@link Session} state.\r\n *\r\n * @remarks\r\n * The {@link Session} behaves in a deterministic manner according to the following\r\n * Finite State Machine (FSM).\r\n * ```txt\r\n *                   ___________________________________________________________\r\n *                  |  ____________________________________________             |\r\n *                  | |            ____________________________    |            |\r\n * Session          | |           |                            v   v            v\r\n * Constructed -> Initial -> Establishing -> Established -> Terminating -> Terminated\r\n *                                |               |___________________________^   ^\r\n *                                |_______________________________________________|\r\n * ```\r\n * @public\r\n */\r\nvar SessionState;\r\n(function (SessionState) {\r\n    /**\r\n     * If `Inviter`, INVITE not sent yet.\r\n     * If `Invitation`, received INVITE (but no final response sent yet).\r\n     */\r\n    SessionState[\"Initial\"] = \"Initial\";\r\n    /**\r\n     * If `Inviter`, sent INVITE and waiting for a final response.\r\n     * If `Invitation`, received INVITE and attempting to send 200 final response (but has not sent it yet).\r\n     */\r\n    SessionState[\"Establishing\"] = \"Establishing\";\r\n    /**\r\n     * If `Inviter`, sent INVITE and received 200 final response and sent ACK.\r\n     * If `Invitation`, received INVITE and sent 200 final response.\r\n     */\r\n    SessionState[\"Established\"] = \"Established\";\r\n    /**\r\n     * If `Inviter`, sent INVITE, sent CANCEL and now waiting for 487 final response to ACK (or 200 to ACK & BYE).\r\n     * If `Invitation`, received INVITE, sent 200 final response and now waiting on ACK and upon receipt will attempt BYE\r\n     * (as the protocol specification requires, before sending a BYE we must receive the ACK - so we are waiting).\r\n     */\r\n    SessionState[\"Terminating\"] = \"Terminating\";\r\n    /**\r\n     * If `Inviter`, sent INVITE and received non-200 final response (or sent/received BYE after receiving 200).\r\n     * If `Invitation`, received INVITE and sent non-200 final response (or sent/received BYE after sending 200).\r\n     */\r\n    SessionState[\"Terminated\"] = \"Terminated\";\r\n})(SessionState = exports.SessionState || (exports.SessionState = {}));\r\n\r\n\r\n/***/ }),\r\n/* 110 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar stripPayload = function (sdp, payload) {\r\n    var mediaDescs = [];\r\n    var lines = sdp.split(/\\r\\n/);\r\n    var currentMediaDesc;\r\n    for (var i = 0; i < lines.length;) {\r\n        var line = lines[i];\r\n        if (/^m=(?:audio|video)/.test(line)) {\r\n            currentMediaDesc = {\r\n                index: i,\r\n                stripped: []\r\n            };\r\n            mediaDescs.push(currentMediaDesc);\r\n        }\r\n        else if (currentMediaDesc) {\r\n            var rtpmap = /^a=rtpmap:(\\d+) ([^/]+)\\//.exec(line);\r\n            if (rtpmap && payload === rtpmap[2]) {\r\n                lines.splice(i, 1);\r\n                currentMediaDesc.stripped.push(rtpmap[1]);\r\n                continue; // Don't increment 'i'\r\n            }\r\n        }\r\n        i++;\r\n    }\r\n    for (var _i = 0, mediaDescs_1 = mediaDescs; _i < mediaDescs_1.length; _i++) {\r\n        var mediaDesc = mediaDescs_1[_i];\r\n        var mline = lines[mediaDesc.index].split(\" \");\r\n        // Ignore the first 3 parameters of the mline. The codec information is after that\r\n        for (var j = 3; j < mline.length;) {\r\n            if (mediaDesc.stripped.indexOf(mline[j]) !== -1) {\r\n                mline.splice(j, 1);\r\n                continue;\r\n            }\r\n            j++;\r\n        }\r\n        lines[mediaDesc.index] = mline.join(\" \");\r\n    }\r\n    return lines.join(\"\\r\\n\");\r\n};\r\nvar stripMediaDescription = function (sdp, description) {\r\n    var descriptionRegExp = new RegExp(\"m=\" + description + \".*$\", \"gm\");\r\n    var groupRegExp = new RegExp(\"^a=group:.*$\", \"gm\");\r\n    if (descriptionRegExp.test(sdp)) {\r\n        var midLineToRemove_1;\r\n        sdp = sdp.split(/^m=/gm).filter(function (section) {\r\n            if (section.substr(0, description.length) === description) {\r\n                midLineToRemove_1 = section.match(/^a=mid:.*$/gm);\r\n                if (midLineToRemove_1) {\r\n                    var step = midLineToRemove_1[0].match(/:.+$/g);\r\n                    if (step) {\r\n                        midLineToRemove_1 = step[0].substr(1);\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            return true;\r\n        }).join(\"m=\");\r\n        var groupLine = sdp.match(groupRegExp);\r\n        if (groupLine && groupLine.length === 1) {\r\n            var groupLinePortion = groupLine[0];\r\n            var groupRegExpReplace = new RegExp(\"\\ *\" + midLineToRemove_1 + \"[^\\ ]*\", \"g\");\r\n            groupLinePortion = groupLinePortion.replace(groupRegExpReplace, \"\");\r\n            sdp = sdp.split(groupRegExp).join(groupLinePortion);\r\n        }\r\n    }\r\n    return sdp;\r\n};\r\nfunction stripTcpCandidates(description) {\r\n    description.sdp = (description.sdp || \"\").replace(/^a=candidate:\\d+ \\d+ tcp .*?\\r\\n/img, \"\");\r\n    return Promise.resolve(description);\r\n}\r\nexports.stripTcpCandidates = stripTcpCandidates;\r\nfunction stripTelephoneEvent(description) {\r\n    description.sdp = stripPayload(description.sdp || \"\", \"telephone-event\");\r\n    return Promise.resolve(description);\r\n}\r\nexports.stripTelephoneEvent = stripTelephoneEvent;\r\nfunction cleanJitsiSdpImageattr(description) {\r\n    description.sdp = (description.sdp || \"\").replace(/^(a=imageattr:.*?)(x|y)=\\[0-/gm, \"$1$2=[1:\");\r\n    return Promise.resolve(description);\r\n}\r\nexports.cleanJitsiSdpImageattr = cleanJitsiSdpImageattr;\r\nfunction stripG722(description) {\r\n    description.sdp = stripPayload(description.sdp || \"\", \"G722\");\r\n    return Promise.resolve(description);\r\n}\r\nexports.stripG722 = stripG722;\r\nfunction stripRtpPayload(payload) {\r\n    return function (description) {\r\n        description.sdp = stripPayload(description.sdp || \"\", payload);\r\n        return Promise.resolve(description);\r\n    };\r\n}\r\nexports.stripRtpPayload = stripRtpPayload;\r\nfunction stripVideo(description) {\r\n    description.sdp = stripMediaDescription(description.sdp || \"\", \"video\");\r\n    return Promise.resolve(description);\r\n}\r\nexports.stripVideo = stripVideo;\r\nfunction addMidLines(description) {\r\n    var sdp = description.sdp || \"\";\r\n    if (sdp.search(/^a=mid.*$/gm) === -1) {\r\n        var mlines_1 = sdp.match(/^m=.*$/gm);\r\n        var sdpArray_1 = sdp.split(/^m=.*$/gm);\r\n        if (mlines_1) {\r\n            mlines_1.forEach(function (elem, idx) {\r\n                mlines_1[idx] = elem + \"\\na=mid:\" + idx;\r\n            });\r\n        }\r\n        sdpArray_1.forEach(function (elem, idx) {\r\n            if (mlines_1 && mlines_1[idx]) {\r\n                sdpArray_1[idx] = elem + mlines_1[idx];\r\n            }\r\n        });\r\n        sdp = sdpArray_1.join(\"\");\r\n        description.sdp = sdp;\r\n    }\r\n    return Promise.resolve(description);\r\n}\r\nexports.addMidLines = addMidLines;\r\n\r\n\r\n/***/ }),\r\n/* 111 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar session_1 = __webpack_require__(96);\r\nvar Enums_1 = __webpack_require__(82);\r\n/* SessionDescriptionHandlerObserver\r\n * @class SessionDescriptionHandler Observer Class.\r\n * @param {SIP.Session} session\r\n * @param {Object} [options]\r\n */\r\nvar SessionDescriptionHandlerObserver = /** @class */ (function () {\r\n    function SessionDescriptionHandlerObserver(session, options) {\r\n        this.type = Enums_1.TypeStrings.SessionDescriptionHandlerObserver;\r\n        this.session = session;\r\n        this.options = options;\r\n    }\r\n    SessionDescriptionHandlerObserver.prototype.trackAdded = function () {\r\n        if (this.session instanceof session_1.Session) {\r\n            return;\r\n        }\r\n        this.session.emit(\"trackAdded\");\r\n    };\r\n    SessionDescriptionHandlerObserver.prototype.directionChanged = function () {\r\n        if (this.session instanceof session_1.Session) {\r\n            return;\r\n        }\r\n        this.session.emit(\"directionChanged\");\r\n    };\r\n    return SessionDescriptionHandlerObserver;\r\n}());\r\nexports.SessionDescriptionHandlerObserver = SessionDescriptionHandlerObserver;\r\n\r\n\r\n/***/ }),\r\n/* 112 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar core_1 = __webpack_require__(2);\r\nvar Enums_1 = __webpack_require__(82);\r\nvar Exceptions_1 = __webpack_require__(84);\r\nvar Transport_1 = __webpack_require__(93);\r\nvar Utils_1 = __webpack_require__(83);\r\nvar TransportStatus;\r\n(function (TransportStatus) {\r\n    TransportStatus[TransportStatus[\"STATUS_CONNECTING\"] = 0] = \"STATUS_CONNECTING\";\r\n    TransportStatus[TransportStatus[\"STATUS_OPEN\"] = 1] = \"STATUS_OPEN\";\r\n    TransportStatus[TransportStatus[\"STATUS_CLOSING\"] = 2] = \"STATUS_CLOSING\";\r\n    TransportStatus[TransportStatus[\"STATUS_CLOSED\"] = 3] = \"STATUS_CLOSED\";\r\n})(TransportStatus = exports.TransportStatus || (exports.TransportStatus = {}));\r\n/**\r\n * Compute an amount of time in seconds to wait before sending another\r\n * keep-alive.\r\n * @returns {Number}\r\n */\r\nvar computeKeepAliveTimeout = function (upperBound) {\r\n    var lowerBound = upperBound * 0.8;\r\n    return 1000 * (Math.random() * (upperBound - lowerBound) + lowerBound);\r\n};\r\n/**\r\n * @class Transport\r\n * @param {Object} options\r\n */\r\nvar Transport = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Transport, _super);\r\n    function Transport(logger, options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this, logger) || this;\r\n        _this.type = Enums_1.TypeStrings.Transport;\r\n        _this.reconnectionAttempts = 0;\r\n        _this.status = TransportStatus.STATUS_CONNECTING;\r\n        _this.configuration = _this.loadConfig(options);\r\n        _this.server = _this.configuration.wsServers[0];\r\n        return _this;\r\n    }\r\n    /**\r\n     * @returns {Boolean}\r\n     */\r\n    Transport.prototype.isConnected = function () {\r\n        return this.status === TransportStatus.STATUS_OPEN;\r\n    };\r\n    /**\r\n     * Send a message.\r\n     * @param message - Outgoing message.\r\n     * @param options - Options bucket.\r\n     */\r\n    Transport.prototype.sendPromise = function (message, options) {\r\n        if (options === void 0) { options = {}; }\r\n        if (this.ws === undefined) {\r\n            this.onError(\"unable to send message - WebSocket undefined\");\r\n            return Promise.reject(new Error(\"WebSocket undefined.\"));\r\n        }\r\n        // FIXME: This check is likely not necessary as WebSocket.send() will\r\n        // throw INVALID_STATE_ERR if the connection is not currently open\r\n        // which could happen regardless of what we thing the state is.\r\n        if (!this.statusAssert(TransportStatus.STATUS_OPEN, options.force)) {\r\n            this.onError(\"unable to send message - WebSocket not open\");\r\n            return Promise.reject(new Error(\"WebSocket not open.\"));\r\n        }\r\n        if (this.configuration.traceSip === true) {\r\n            this.logger.log(\"sending WebSocket message:\\n\\n\" + message + \"\\n\");\r\n        }\r\n        // WebSocket.send() can throw.\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\r\n        try {\r\n            this.ws.send(message);\r\n        }\r\n        catch (error) {\r\n            if (error instanceof error) {\r\n                Promise.reject(error);\r\n            }\r\n            return Promise.reject(new Error(\"Failed to send message.\"));\r\n        }\r\n        return Promise.resolve({ msg: message });\r\n    };\r\n    /**\r\n     * Disconnect socket.\r\n     */\r\n    Transport.prototype.disconnectPromise = function (options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        if (this.disconnectionPromise) { // Already disconnecting. Just return this.\r\n            return this.disconnectionPromise;\r\n        }\r\n        options.code = options.code || 1000;\r\n        if (!this.statusTransition(TransportStatus.STATUS_CLOSING, options.force)) {\r\n            if (this.status === TransportStatus.STATUS_CLOSED) { // Websocket is already closed\r\n                return Promise.resolve({ overrideEvent: true });\r\n            }\r\n            else if (this.connectionPromise) { // Websocket is connecting, cannot move to disconneting yet\r\n                return this.connectionPromise.then(function () { return Promise.reject(\"The websocket did not disconnect\"); })\r\n                    .catch(function () { return Promise.resolve({ overrideEvent: true }); });\r\n            }\r\n            else {\r\n                // Cannot move to disconnecting, but not in connecting state.\r\n                return Promise.reject(\"The websocket did not disconnect\");\r\n            }\r\n        }\r\n        this.emit(\"disconnecting\");\r\n        this.disconnectionPromise = new Promise(function (resolve, reject) {\r\n            _this.disconnectDeferredResolve = resolve;\r\n            if (_this.reconnectTimer) {\r\n                clearTimeout(_this.reconnectTimer);\r\n                _this.reconnectTimer = undefined;\r\n            }\r\n            if (_this.ws) {\r\n                _this.stopSendingKeepAlives();\r\n                _this.logger.log(\"closing WebSocket \" + _this.server.wsUri);\r\n                _this.ws.close(options.code, options.reason);\r\n            }\r\n            else {\r\n                reject(\"Attempted to disconnect but the websocket doesn't exist\");\r\n            }\r\n        });\r\n        return this.disconnectionPromise;\r\n    };\r\n    /**\r\n     * Connect socket.\r\n     */\r\n    Transport.prototype.connectPromise = function (options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        if (this.status === TransportStatus.STATUS_CLOSING && !options.force) {\r\n            return Promise.reject(\"WebSocket \" + this.server.wsUri + \" is closing\");\r\n        }\r\n        if (this.connectionPromise) {\r\n            return this.connectionPromise;\r\n        }\r\n        this.server = this.server || this.getNextWsServer(options.force);\r\n        this.connectionPromise = new Promise(function (resolve, reject) {\r\n            if ((_this.status === TransportStatus.STATUS_OPEN || _this.status === TransportStatus.STATUS_CLOSING)\r\n                && !options.force) {\r\n                _this.logger.warn(\"WebSocket \" + _this.server.wsUri + \" is already connected\");\r\n                reject(\"Failed status check - attempted to open a connection but already open/closing\");\r\n                return;\r\n            }\r\n            _this.connectDeferredResolve = resolve;\r\n            _this.connectDeferredReject = reject;\r\n            _this.status = TransportStatus.STATUS_CONNECTING;\r\n            _this.emit(\"connecting\");\r\n            _this.logger.log(\"connecting to WebSocket \" + _this.server.wsUri);\r\n            _this.disposeWs();\r\n            try {\r\n                _this.ws = new WebSocket(_this.server.wsUri, \"sip\");\r\n                _this.ws.binaryType = \"arraybuffer\"; // set data type of received binary messages\r\n            }\r\n            catch (e) {\r\n                _this.ws = undefined;\r\n                _this.statusTransition(TransportStatus.STATUS_CLOSED, true);\r\n                _this.onError(\"error connecting to WebSocket \" + _this.server.wsUri + \":\" + e);\r\n                reject(\"Failed to create a websocket\");\r\n                _this.connectDeferredResolve = undefined;\r\n                _this.connectDeferredReject = undefined;\r\n                return;\r\n            }\r\n            if (!_this.ws) {\r\n                reject(\"Unexpected instance websocket not set\");\r\n                _this.connectDeferredResolve = undefined;\r\n                _this.connectDeferredReject = undefined;\r\n                return;\r\n            }\r\n            _this.connectionTimeout = setTimeout(function () {\r\n                _this.statusTransition(TransportStatus.STATUS_CLOSED);\r\n                _this.logger.warn(\"took too long to connect - exceeded time set in configuration.connectionTimeout: \" +\r\n                    _this.configuration.connectionTimeout + \"s\");\r\n                _this.emit(\"disconnected\", { code: 1000 });\r\n                _this.connectionPromise = undefined;\r\n                reject(\"Connection timeout\");\r\n                _this.connectDeferredResolve = undefined;\r\n                _this.connectDeferredReject = undefined;\r\n                var ws = _this.ws;\r\n                _this.disposeWs();\r\n                if (ws) {\r\n                    ws.close(1000);\r\n                }\r\n            }, _this.configuration.connectionTimeout * 1000);\r\n            _this.boundOnOpen = _this.onOpen.bind(_this);\r\n            _this.boundOnMessage = _this.onMessage.bind(_this);\r\n            _this.boundOnClose = _this.onClose.bind(_this);\r\n            _this.boundOnError = _this.onWebsocketError.bind(_this);\r\n            _this.ws.addEventListener(\"open\", _this.boundOnOpen);\r\n            _this.ws.addEventListener(\"message\", _this.boundOnMessage);\r\n            _this.ws.addEventListener(\"close\", _this.boundOnClose);\r\n            _this.ws.addEventListener(\"error\", _this.boundOnError);\r\n        });\r\n        return this.connectionPromise;\r\n    };\r\n    /**\r\n     * @event\r\n     * @param {event} e\r\n     */\r\n    Transport.prototype.onMessage = function (e) {\r\n        var data = e.data;\r\n        var finishedData;\r\n        // CRLF Keep Alive response from server. Clear our keep alive timeout.\r\n        if (/^(\\r\\n)+$/.test(data)) {\r\n            this.clearKeepAliveTimeout();\r\n            if (this.configuration.traceSip === true) {\r\n                this.logger.log(\"received WebSocket message with CRLF Keep Alive response\");\r\n            }\r\n            return;\r\n        }\r\n        else if (!data) {\r\n            this.logger.warn(\"received empty message, message discarded\");\r\n            return;\r\n        }\r\n        else if (typeof data !== \"string\") { // WebSocket binary message.\r\n            try {\r\n                // the UInt8Data was here prior to types, and doesn't check\r\n                finishedData = String.fromCharCode.apply(null, new Uint8Array(data));\r\n            }\r\n            catch (err) {\r\n                this.logger.warn(\"received WebSocket binary message failed to be converted into string, message discarded\");\r\n                return;\r\n            }\r\n            if (this.configuration.traceSip === true) {\r\n                this.logger.log(\"received WebSocket binary message:\\n\\n\" + data + \"\\n\");\r\n            }\r\n        }\r\n        else { // WebSocket text message.\r\n            if (this.configuration.traceSip === true) {\r\n                this.logger.log(\"received WebSocket text message:\\n\\n\" + data + \"\\n\");\r\n            }\r\n            finishedData = data;\r\n        }\r\n        this.emit(\"message\", finishedData);\r\n    };\r\n    // Transport Event Handlers\r\n    /**\r\n     * @event\r\n     * @param {event} e\r\n     */\r\n    Transport.prototype.onOpen = function () {\r\n        if (this.status === TransportStatus.STATUS_CLOSED) { // Indicated that the transport thinks the ws is dead already\r\n            var ws = this.ws;\r\n            this.disposeWs();\r\n            if (ws) {\r\n                ws.close(1000);\r\n            }\r\n            return;\r\n        }\r\n        this.statusTransition(TransportStatus.STATUS_OPEN, true);\r\n        this.emit(\"connected\");\r\n        if (this.connectionTimeout) {\r\n            clearTimeout(this.connectionTimeout);\r\n            this.connectionTimeout = undefined;\r\n        }\r\n        this.logger.log(\"WebSocket \" + this.server.wsUri + \" connected\");\r\n        // Clear reconnectTimer since we are not disconnected\r\n        if (this.reconnectTimer !== undefined) {\r\n            clearTimeout(this.reconnectTimer);\r\n            this.reconnectTimer = undefined;\r\n        }\r\n        // Reset reconnectionAttempts\r\n        this.reconnectionAttempts = 0;\r\n        // Reset disconnection promise so we can disconnect from a fresh state\r\n        this.disconnectionPromise = undefined;\r\n        this.disconnectDeferredResolve = undefined;\r\n        // Start sending keep-alives\r\n        this.startSendingKeepAlives();\r\n        if (this.connectDeferredResolve) {\r\n            this.connectDeferredResolve({ overrideEvent: true });\r\n            this.connectDeferredResolve = undefined;\r\n            this.connectDeferredReject = undefined;\r\n        }\r\n        else {\r\n            this.logger.warn(\"Unexpected websocket.onOpen with no connectDeferredResolve\");\r\n        }\r\n    };\r\n    /**\r\n     * @event\r\n     * @param {event} e\r\n     */\r\n    Transport.prototype.onClose = function (e) {\r\n        this.logger.log(\"WebSocket disconnected (code: \" + e.code + (e.reason ? \"| reason: \" + e.reason : \"\") + \")\");\r\n        if (this.status !== TransportStatus.STATUS_CLOSING) {\r\n            this.logger.warn(\"WebSocket closed without SIP.js requesting it\");\r\n            this.emit(\"transportError\");\r\n        }\r\n        this.stopSendingKeepAlives();\r\n        // Clean up connection variables so we can connect again from a fresh state\r\n        if (this.connectionTimeout) {\r\n            clearTimeout(this.connectionTimeout);\r\n        }\r\n        if (this.connectDeferredReject) {\r\n            this.connectDeferredReject(\"Websocket Closed\");\r\n        }\r\n        this.connectionTimeout = undefined;\r\n        this.connectionPromise = undefined;\r\n        this.connectDeferredResolve = undefined;\r\n        this.connectDeferredReject = undefined;\r\n        // Check whether the user requested to close.\r\n        if (this.disconnectDeferredResolve) {\r\n            this.disconnectDeferredResolve({ overrideEvent: true });\r\n            this.statusTransition(TransportStatus.STATUS_CLOSED);\r\n            this.disconnectDeferredResolve = undefined;\r\n            return;\r\n        }\r\n        this.statusTransition(TransportStatus.STATUS_CLOSED, true);\r\n        this.emit(\"disconnected\", { code: e.code, reason: e.reason });\r\n        this.disposeWs();\r\n        this.reconnect();\r\n    };\r\n    /**\r\n     * Removes event listeners and clears the instance ws\r\n     */\r\n    Transport.prototype.disposeWs = function () {\r\n        if (this.ws) {\r\n            this.ws.removeEventListener(\"open\", this.boundOnOpen);\r\n            this.ws.removeEventListener(\"message\", this.boundOnMessage);\r\n            this.ws.removeEventListener(\"close\", this.boundOnClose);\r\n            this.ws.removeEventListener(\"error\", this.boundOnError);\r\n            this.ws = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * @event\r\n     * @param {string} e\r\n     */\r\n    Transport.prototype.onError = function (e) {\r\n        this.logger.warn(\"Transport error: \" + e);\r\n        this.emit(\"transportError\");\r\n    };\r\n    /**\r\n     * @event\r\n     * @private\r\n     */\r\n    Transport.prototype.onWebsocketError = function () {\r\n        this.onError(\"The Websocket had an error\");\r\n    };\r\n    /**\r\n     * Reconnection attempt logic.\r\n     */\r\n    Transport.prototype.reconnect = function () {\r\n        var _this = this;\r\n        if (this.reconnectionAttempts > 0) {\r\n            this.logger.log(\"Reconnection attempt \" + this.reconnectionAttempts + \" failed\");\r\n        }\r\n        if (this.noAvailableServers()) {\r\n            this.logger.warn(\"attempted to get next ws server but there are no available ws servers left\");\r\n            this.logger.warn(\"no available ws servers left - going to closed state\");\r\n            this.statusTransition(TransportStatus.STATUS_CLOSED, true);\r\n            this.emit(\"closed\");\r\n            this.resetServerErrorStatus();\r\n            return;\r\n        }\r\n        if (this.isConnected()) {\r\n            this.logger.warn(\"attempted to reconnect while connected - forcing disconnect\");\r\n            this.disconnect({ force: true });\r\n        }\r\n        this.reconnectionAttempts += 1;\r\n        if (this.reconnectionAttempts > this.configuration.maxReconnectionAttempts) {\r\n            this.logger.warn(\"maximum reconnection attempts for WebSocket \" + this.server.wsUri);\r\n            this.logger.log(\"transport \" + this.server.wsUri + \" failed | connection state set to 'error'\");\r\n            this.server.isError = true;\r\n            this.emit(\"transportError\");\r\n            if (!this.noAvailableServers()) {\r\n                this.server = this.getNextWsServer();\r\n            }\r\n            // When there are no available servers, the reconnect function ends on the next recursive call\r\n            // after checking for no available servers again.\r\n            this.reconnectionAttempts = 0;\r\n            this.reconnect();\r\n        }\r\n        else {\r\n            this.logger.log(\"trying to reconnect to WebSocket \" +\r\n                this.server.wsUri + \" (reconnection attempt \" + this.reconnectionAttempts + \")\");\r\n            this.reconnectTimer = setTimeout(function () {\r\n                _this.connect();\r\n                _this.reconnectTimer = undefined;\r\n            }, (this.reconnectionAttempts === 1) ? 0 : this.configuration.reconnectionTimeout * 1000);\r\n        }\r\n    };\r\n    /**\r\n     * Resets the error state of all servers in the configuration\r\n     */\r\n    Transport.prototype.resetServerErrorStatus = function () {\r\n        for (var _i = 0, _a = this.configuration.wsServers; _i < _a.length; _i++) {\r\n            var websocket = _a[_i];\r\n            websocket.isError = false;\r\n        }\r\n    };\r\n    /**\r\n     * Retrieve the next server to which connect.\r\n     * @param {Boolean} force allows bypass of server error status checking\r\n     * @returns {Object} WsServer\r\n     */\r\n    Transport.prototype.getNextWsServer = function (force) {\r\n        if (force === void 0) { force = false; }\r\n        if (this.noAvailableServers()) {\r\n            this.logger.warn(\"attempted to get next ws server but there are no available ws servers left\");\r\n            throw new Error(\"Attempted to get next ws server, but there are no available ws servers left.\");\r\n        }\r\n        // Order servers by weight\r\n        var candidates = [];\r\n        for (var _i = 0, _a = this.configuration.wsServers; _i < _a.length; _i++) {\r\n            var wsServer = _a[_i];\r\n            if (wsServer.isError && !force) {\r\n                continue;\r\n            }\r\n            else if (candidates.length === 0) {\r\n                candidates.push(wsServer);\r\n            }\r\n            else if (wsServer.weight > candidates[0].weight) {\r\n                candidates = [wsServer];\r\n            }\r\n            else if (wsServer.weight === candidates[0].weight) {\r\n                candidates.push(wsServer);\r\n            }\r\n        }\r\n        var idx = Math.floor(Math.random() * candidates.length);\r\n        return candidates[idx];\r\n    };\r\n    /**\r\n     * Checks all configuration servers, returns true if all of them have isError: true and false otherwise\r\n     * @returns {Boolean}\r\n     */\r\n    Transport.prototype.noAvailableServers = function () {\r\n        for (var _i = 0, _a = this.configuration.wsServers; _i < _a.length; _i++) {\r\n            var server = _a[_i];\r\n            if (!server.isError) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    // ==============================\r\n    // KeepAlive Stuff\r\n    // ==============================\r\n    /**\r\n     * Send a keep-alive (a double-CRLF sequence).\r\n     * @returns {Boolean}\r\n     */\r\n    Transport.prototype.sendKeepAlive = function () {\r\n        var _this = this;\r\n        if (this.keepAliveDebounceTimeout) {\r\n            // We already have an outstanding keep alive, do not send another.\r\n            return;\r\n        }\r\n        this.keepAliveDebounceTimeout = setTimeout(function () {\r\n            _this.emit(\"keepAliveDebounceTimeout\");\r\n            _this.clearKeepAliveTimeout();\r\n        }, this.configuration.keepAliveDebounce * 1000);\r\n        return this.send(\"\\r\\n\\r\\n\");\r\n    };\r\n    Transport.prototype.clearKeepAliveTimeout = function () {\r\n        if (this.keepAliveDebounceTimeout) {\r\n            clearTimeout(this.keepAliveDebounceTimeout);\r\n        }\r\n        this.keepAliveDebounceTimeout = undefined;\r\n    };\r\n    /**\r\n     * Start sending keep-alives.\r\n     */\r\n    Transport.prototype.startSendingKeepAlives = function () {\r\n        var _this = this;\r\n        if (this.configuration.keepAliveInterval && !this.keepAliveInterval) {\r\n            this.keepAliveInterval = setInterval(function () {\r\n                _this.sendKeepAlive();\r\n                _this.startSendingKeepAlives();\r\n            }, computeKeepAliveTimeout(this.configuration.keepAliveInterval));\r\n        }\r\n    };\r\n    /**\r\n     * Stop sending keep-alives.\r\n     */\r\n    Transport.prototype.stopSendingKeepAlives = function () {\r\n        if (this.keepAliveInterval) {\r\n            clearInterval(this.keepAliveInterval);\r\n        }\r\n        if (this.keepAliveDebounceTimeout) {\r\n            clearTimeout(this.keepAliveDebounceTimeout);\r\n        }\r\n        this.keepAliveInterval = undefined;\r\n        this.keepAliveDebounceTimeout = undefined;\r\n    };\r\n    // ==============================\r\n    // Status Stuff\r\n    // ==============================\r\n    /**\r\n     * Checks given status against instance current status. Returns true if they match\r\n     * @param {Number} status\r\n     * @param {Boolean} [force]\r\n     * @returns {Boolean}\r\n     */\r\n    Transport.prototype.statusAssert = function (status, force) {\r\n        if (status === this.status) {\r\n            return true;\r\n        }\r\n        else {\r\n            if (force) {\r\n                this.logger.warn(\"Attempted to assert \" +\r\n                    Object.keys(TransportStatus)[this.status] + \" as \" +\r\n                    Object.keys(TransportStatus)[status] + \"- continuing with option: 'force'\");\r\n                return true;\r\n            }\r\n            else {\r\n                this.logger.warn(\"Tried to assert \" +\r\n                    Object.keys(TransportStatus)[status] + \" but is currently \" +\r\n                    Object.keys(TransportStatus)[this.status]);\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Transitions the status. Checks for legal transition via assertion beforehand\r\n     * @param {Number} status\r\n     * @param {Boolean} [force]\r\n     * @returns {Boolean}\r\n     */\r\n    Transport.prototype.statusTransition = function (status, force) {\r\n        if (force === void 0) { force = false; }\r\n        this.logger.log(\"Attempting to transition status from \" +\r\n            Object.keys(TransportStatus)[this.status] + \" to \" +\r\n            Object.keys(TransportStatus)[status]);\r\n        if ((status === TransportStatus.STATUS_CONNECTING && this.statusAssert(TransportStatus.STATUS_CLOSED, force)) ||\r\n            (status === TransportStatus.STATUS_OPEN && this.statusAssert(TransportStatus.STATUS_CONNECTING, force)) ||\r\n            (status === TransportStatus.STATUS_CLOSING && this.statusAssert(TransportStatus.STATUS_OPEN, force)) ||\r\n            (status === TransportStatus.STATUS_CLOSED)) {\r\n            this.status = status;\r\n            return true;\r\n        }\r\n        else {\r\n            this.logger.warn(\"Status transition failed - result: no-op - reason:\" +\r\n                \" either gave an nonexistent status or attempted illegal transition\");\r\n            return false;\r\n        }\r\n    };\r\n    // ==============================\r\n    // Configuration Handling\r\n    // ==============================\r\n    /**\r\n     * Configuration load.\r\n     * returns {Configuration}\r\n     */\r\n    Transport.prototype.loadConfig = function (configuration) {\r\n        var settings = {\r\n            wsServers: [{\r\n                    scheme: \"WSS\",\r\n                    sipUri: \"<sip:edge.sip.onsip.com;transport=ws;lr>\",\r\n                    weight: 0,\r\n                    wsUri: \"wss://edge.sip.onsip.com\",\r\n                    isError: false\r\n                }],\r\n            connectionTimeout: 5,\r\n            maxReconnectionAttempts: 3,\r\n            reconnectionTimeout: 4,\r\n            keepAliveInterval: 0,\r\n            keepAliveDebounce: 10,\r\n            // Logging\r\n            traceSip: false\r\n        };\r\n        var configCheck = this.getConfigurationCheck();\r\n        // Check Mandatory parameters\r\n        for (var parameter in configCheck.mandatory) {\r\n            if (!configuration.hasOwnProperty(parameter)) {\r\n                throw new Exceptions_1.Exceptions.ConfigurationError(parameter);\r\n            }\r\n            else {\r\n                var value = configuration[parameter];\r\n                var checkedValue = configCheck.mandatory[parameter](value);\r\n                if (checkedValue !== undefined) {\r\n                    settings[parameter] = checkedValue;\r\n                }\r\n                else {\r\n                    throw new Exceptions_1.Exceptions.ConfigurationError(parameter, value);\r\n                }\r\n            }\r\n        }\r\n        // Check Optional parameters\r\n        for (var parameter in configCheck.optional) {\r\n            if (configuration.hasOwnProperty(parameter)) {\r\n                var value = configuration[parameter];\r\n                // If the parameter value is an empty array, but shouldn't be, apply its default value.\r\n                // If the parameter value is null, empty string, or undefined then apply its default value.\r\n                // If it's a number with NaN value then also apply its default value.\r\n                // NOTE: JS does not allow \"value === NaN\", the following does the work:\r\n                if ((value instanceof Array && value.length === 0) ||\r\n                    (value === null || value === \"\" || value === undefined) ||\r\n                    (typeof (value) === \"number\" && isNaN(value))) {\r\n                    continue;\r\n                }\r\n                var checkedValue = configCheck.optional[parameter](value);\r\n                if (checkedValue !== undefined) {\r\n                    settings[parameter] = checkedValue;\r\n                }\r\n                else {\r\n                    throw new Exceptions_1.Exceptions.ConfigurationError(parameter, value);\r\n                }\r\n            }\r\n        }\r\n        var skeleton = {}; // Fill the value of the configuration_skeleton\r\n        for (var parameter in settings) {\r\n            if (settings.hasOwnProperty(parameter)) {\r\n                skeleton[parameter] = {\r\n                    value: settings[parameter],\r\n                };\r\n            }\r\n        }\r\n        var returnConfiguration = Object.defineProperties({}, skeleton);\r\n        this.logger.log(\"configuration parameters after validation:\");\r\n        for (var parameter in settings) {\r\n            if (settings.hasOwnProperty(parameter)) {\r\n                this.logger.log(\"· \" + parameter + \": \" + JSON.stringify(settings[parameter]));\r\n            }\r\n        }\r\n        return returnConfiguration;\r\n    };\r\n    /**\r\n     * Configuration checker.\r\n     * @return {Boolean}\r\n     */\r\n    Transport.prototype.getConfigurationCheck = function () {\r\n        return {\r\n            mandatory: {},\r\n            optional: {\r\n                // Note: this function used to call 'this.logger.error' but calling 'this' with anything here is invalid\r\n                wsServers: function (wsServers) {\r\n                    /* Allow defining wsServers parameter as:\r\n                     *  String: \"host\"\r\n                     *  Array of Strings: [\"host1\", \"host2\"]\r\n                     *  Array of Objects: [{wsUri:\"host1\", weight:1}, {wsUri:\"host2\", weight:0}]\r\n                     *  Array of Objects and Strings: [{wsUri:\"host1\"}, \"host2\"]\r\n                     */\r\n                    if (typeof wsServers === \"string\") {\r\n                        wsServers = [{ wsUri: wsServers }];\r\n                    }\r\n                    else if (wsServers instanceof Array) {\r\n                        for (var idx = 0; idx < wsServers.length; idx++) {\r\n                            if (typeof wsServers[idx] === \"string\") {\r\n                                wsServers[idx] = { wsUri: wsServers[idx] };\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        return;\r\n                    }\r\n                    if (wsServers.length === 0) {\r\n                        return false;\r\n                    }\r\n                    for (var _i = 0, wsServers_1 = wsServers; _i < wsServers_1.length; _i++) {\r\n                        var wsServer = wsServers_1[_i];\r\n                        if (!wsServer.wsUri) {\r\n                            return;\r\n                        }\r\n                        if (wsServer.weight && !Number(wsServer.weight)) {\r\n                            return;\r\n                        }\r\n                        var url = core_1.Grammar.parse(wsServer.wsUri, \"absoluteURI\");\r\n                        if (url === -1) {\r\n                            return;\r\n                        }\r\n                        else if ([\"wss\", \"ws\", \"udp\"].indexOf(url.scheme) < 0) {\r\n                            return;\r\n                        }\r\n                        else {\r\n                            wsServer.sipUri = \"<sip:\" + url.host +\r\n                                (url.port ? \":\" + url.port : \"\") + \";transport=\" + url.scheme.replace(/^wss$/i, \"ws\") + \";lr>\";\r\n                            if (!wsServer.weight) {\r\n                                wsServer.weight = 0;\r\n                            }\r\n                            wsServer.isError = false;\r\n                            wsServer.scheme = url.scheme.toUpperCase();\r\n                        }\r\n                    }\r\n                    return wsServers;\r\n                },\r\n                keepAliveInterval: function (keepAliveInterval) {\r\n                    if (Utils_1.Utils.isDecimal(keepAliveInterval)) {\r\n                        var value = Number(keepAliveInterval);\r\n                        if (value > 0) {\r\n                            return value;\r\n                        }\r\n                    }\r\n                },\r\n                keepAliveDebounce: function (keepAliveDebounce) {\r\n                    if (Utils_1.Utils.isDecimal(keepAliveDebounce)) {\r\n                        var value = Number(keepAliveDebounce);\r\n                        if (value > 0) {\r\n                            return value;\r\n                        }\r\n                    }\r\n                },\r\n                traceSip: function (traceSip) {\r\n                    if (typeof traceSip === \"boolean\") {\r\n                        return traceSip;\r\n                    }\r\n                },\r\n                connectionTimeout: function (connectionTimeout) {\r\n                    if (Utils_1.Utils.isDecimal(connectionTimeout)) {\r\n                        var value = Number(connectionTimeout);\r\n                        if (value > 0) {\r\n                            return value;\r\n                        }\r\n                    }\r\n                },\r\n                maxReconnectionAttempts: function (maxReconnectionAttempts) {\r\n                    if (Utils_1.Utils.isDecimal(maxReconnectionAttempts)) {\r\n                        var value = Number(maxReconnectionAttempts);\r\n                        if (value >= 0) {\r\n                            return value;\r\n                        }\r\n                    }\r\n                },\r\n                reconnectionTimeout: function (reconnectionTimeout) {\r\n                    if (Utils_1.Utils.isDecimal(reconnectionTimeout)) {\r\n                        var value = Number(reconnectionTimeout);\r\n                        if (value > 0) {\r\n                            return value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    };\r\n    Transport.C = TransportStatus;\r\n    return Transport;\r\n}(Transport_1.Transport));\r\nexports.Transport = Transport;\r\n\r\n\r\n/***/ }),\r\n/* 113 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar Modifiers = tslib_1.__importStar(__webpack_require__(110));\r\nexports.Modifiers = Modifiers;\r\nvar Simple_1 = __webpack_require__(114);\r\nexports.Simple = Simple_1.Simple;\r\nvar SessionDescriptionHandler_1 = __webpack_require__(95);\r\nexports.SessionDescriptionHandler = SessionDescriptionHandler_1.SessionDescriptionHandler;\r\nvar Transport_1 = __webpack_require__(112);\r\nexports.Transport = Transport_1.Transport;\r\n\r\n\r\n/***/ }),\r\n/* 114 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar events_1 = __webpack_require__(31);\r\nvar UA_1 = __webpack_require__(94);\r\nvar Modifiers = tslib_1.__importStar(__webpack_require__(110));\r\n/* Simple\r\n * @class Simple\r\n */\r\nvar SimpleStatus;\r\n(function (SimpleStatus) {\r\n    SimpleStatus[SimpleStatus[\"STATUS_NULL\"] = 0] = \"STATUS_NULL\";\r\n    SimpleStatus[SimpleStatus[\"STATUS_NEW\"] = 1] = \"STATUS_NEW\";\r\n    SimpleStatus[SimpleStatus[\"STATUS_CONNECTING\"] = 2] = \"STATUS_CONNECTING\";\r\n    SimpleStatus[SimpleStatus[\"STATUS_CONNECTED\"] = 3] = \"STATUS_CONNECTED\";\r\n    SimpleStatus[SimpleStatus[\"STATUS_COMPLETED\"] = 4] = \"STATUS_COMPLETED\";\r\n})(SimpleStatus = exports.SimpleStatus || (exports.SimpleStatus = {}));\r\nvar Simple = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Simple, _super);\r\n    function Simple(options) {\r\n        var _this = _super.call(this) || this;\r\n        /*\r\n        *  {\r\n        *    media: {\r\n        *      remote: {\r\n        *        audio: <DOM element>,\r\n        *        video: <DOM element>\r\n        *      },\r\n        *      local: {\r\n        *        video: <DOM element>\r\n        *      }\r\n        *    },\r\n        *    ua: {\r\n        *       <UA Configuration Options>\r\n        *    }\r\n        *  }\r\n        */\r\n        if (options.media.remote.video) {\r\n            _this.video = true;\r\n        }\r\n        else {\r\n            _this.video = false;\r\n        }\r\n        if (options.media.remote.audio) {\r\n            _this.audio = true;\r\n        }\r\n        else {\r\n            _this.audio = false;\r\n        }\r\n        if (!_this.audio && !_this.video) {\r\n            // Need to do at least audio or video\r\n            // Error\r\n            throw new Error(\"At least one remote audio or video element is required for Simple.\");\r\n        }\r\n        _this.options = options;\r\n        // https://stackoverflow.com/questions/7944460/detect-safari-browser\r\n        var browserUa = navigator.userAgent.toLowerCase();\r\n        var isSafari = false;\r\n        var isFirefox = false;\r\n        if (browserUa.indexOf(\"safari\") > -1 && browserUa.indexOf(\"chrome\") < 0) {\r\n            isSafari = true;\r\n        }\r\n        else if (browserUa.indexOf(\"firefox\") > -1 && browserUa.indexOf(\"chrome\") < 0) {\r\n            isFirefox = true;\r\n        }\r\n        var sessionDescriptionHandlerFactoryOptions = {};\r\n        if (isSafari) {\r\n            sessionDescriptionHandlerFactoryOptions.modifiers = [Modifiers.stripG722];\r\n        }\r\n        if (isFirefox) {\r\n            sessionDescriptionHandlerFactoryOptions.alwaysAcquireMediaFirst = true;\r\n        }\r\n        if (!_this.options.ua.uri) {\r\n            _this.anonymous = true;\r\n        }\r\n        else {\r\n            _this.anonymous = false;\r\n        }\r\n        _this.ua = new UA_1.UA({\r\n            // User Configurable Options\r\n            uri: _this.options.ua.uri,\r\n            authorizationUser: _this.options.ua.authorizationUser,\r\n            password: _this.options.ua.password,\r\n            displayName: _this.options.ua.displayName,\r\n            // Undocumented \"Advanced\" Options\r\n            userAgentString: _this.options.ua.userAgentString,\r\n            // Fixed Options\r\n            register: true,\r\n            sessionDescriptionHandlerFactoryOptions: sessionDescriptionHandlerFactoryOptions,\r\n            transportOptions: {\r\n                traceSip: _this.options.ua.traceSip,\r\n                wsServers: _this.options.ua.wsServers\r\n            }\r\n        });\r\n        _this.state = SimpleStatus.STATUS_NULL;\r\n        _this.logger = _this.ua.getLogger(\"sip.simple\");\r\n        _this.ua.on(\"registered\", function () {\r\n            _this.emit(\"registered\", _this.ua);\r\n        });\r\n        _this.ua.on(\"unregistered\", function () {\r\n            _this.emit(\"unregistered\", _this.ua);\r\n        });\r\n        _this.ua.on(\"registrationFailed\", function () {\r\n            _this.emit(\"unregistered\", _this.ua);\r\n        });\r\n        _this.ua.on(\"invite\", function (session) {\r\n            // If there is already an active session reject the incoming session\r\n            if (_this.state !== SimpleStatus.STATUS_NULL && _this.state !== SimpleStatus.STATUS_COMPLETED) {\r\n                _this.logger.warn(\"Rejecting incoming call. Simple only supports 1 call at a time\");\r\n                session.reject();\r\n                return;\r\n            }\r\n            _this.session = session;\r\n            _this.setupSession();\r\n            _this.emit(\"ringing\", _this.session);\r\n        });\r\n        _this.ua.on(\"message\", function (message) {\r\n            _this.emit(\"message\", message);\r\n        });\r\n        return _this;\r\n    }\r\n    Simple.prototype.call = function (destination) {\r\n        if (!this.ua || !this.checkRegistration()) {\r\n            this.logger.warn(\"A registered UA is required for calling\");\r\n            return;\r\n        }\r\n        if (this.state !== SimpleStatus.STATUS_NULL && this.state !== SimpleStatus.STATUS_COMPLETED) {\r\n            this.logger.warn(\"Cannot make more than a single call with Simple\");\r\n            return;\r\n        }\r\n        // Safari hack, because you cannot call .play() from a non user action\r\n        if (this.options.media.remote.audio) {\r\n            this.options.media.remote.audio.autoplay = true;\r\n        }\r\n        if (this.options.media.remote.video) {\r\n            this.options.media.remote.video.autoplay = true;\r\n        }\r\n        if (this.options.media.local && this.options.media.local.video) {\r\n            this.options.media.local.video.autoplay = true;\r\n            this.options.media.local.video.volume = 0;\r\n        }\r\n        this.session = this.ua.invite(destination, {\r\n            sessionDescriptionHandlerOptions: {\r\n                constraints: {\r\n                    audio: this.audio,\r\n                    video: this.video\r\n                }\r\n            }\r\n        });\r\n        this.setupSession();\r\n        return this.session;\r\n    };\r\n    Simple.prototype.answer = function () {\r\n        if (this.state !== SimpleStatus.STATUS_NEW && this.state !== SimpleStatus.STATUS_CONNECTING) {\r\n            this.logger.warn(\"No call to answer\");\r\n            return;\r\n        }\r\n        // Safari hack, because you cannot call .play() from a non user action\r\n        if (this.options.media.remote.audio) {\r\n            this.options.media.remote.audio.autoplay = true;\r\n        }\r\n        if (this.options.media.remote.video) {\r\n            this.options.media.remote.video.autoplay = true;\r\n        }\r\n        return this.session.accept({\r\n            sessionDescriptionHandlerOptions: {\r\n                constraints: {\r\n                    audio: this.audio,\r\n                    video: this.video\r\n                }\r\n            }\r\n        });\r\n        // emit call is active\r\n    };\r\n    Simple.prototype.reject = function () {\r\n        if (this.state !== SimpleStatus.STATUS_NEW && this.state !== SimpleStatus.STATUS_CONNECTING) {\r\n            this.logger.warn(\"Call is already answered\");\r\n            return;\r\n        }\r\n        return this.session.reject();\r\n    };\r\n    Simple.prototype.hangup = function () {\r\n        if (this.state !== SimpleStatus.STATUS_CONNECTED &&\r\n            this.state !== SimpleStatus.STATUS_CONNECTING &&\r\n            this.state !== SimpleStatus.STATUS_NEW) {\r\n            this.logger.warn(\"No active call to hang up on\");\r\n            return;\r\n        }\r\n        if (this.state !== SimpleStatus.STATUS_CONNECTED) {\r\n            return this.session.cancel();\r\n        }\r\n        else if (this.session) {\r\n            return this.session.bye();\r\n        }\r\n    };\r\n    Simple.prototype.hold = function () {\r\n        if (this.state !== SimpleStatus.STATUS_CONNECTED || !this.session || this.session.localHold) {\r\n            this.logger.warn(\"Cannot put call on hold\");\r\n            return;\r\n        }\r\n        this.mute();\r\n        this.logger.log(\"Placing session on hold\");\r\n        return this.session.hold();\r\n    };\r\n    Simple.prototype.unhold = function () {\r\n        if (this.state !== SimpleStatus.STATUS_CONNECTED || !this.session || !this.session.localHold) {\r\n            this.logger.warn(\"Cannot unhold a call that is not on hold\");\r\n            return;\r\n        }\r\n        this.unmute();\r\n        this.logger.log(\"Placing call off hold\");\r\n        return this.session.unhold();\r\n    };\r\n    Simple.prototype.mute = function () {\r\n        if (this.state !== SimpleStatus.STATUS_CONNECTED) {\r\n            this.logger.warn(\"An acitve call is required to mute audio\");\r\n            return;\r\n        }\r\n        this.logger.log(\"Muting Audio\");\r\n        this.toggleMute(true);\r\n        this.emit(\"mute\", this);\r\n    };\r\n    Simple.prototype.unmute = function () {\r\n        if (this.state !== SimpleStatus.STATUS_CONNECTED) {\r\n            this.logger.warn(\"An active call is required to unmute audio\");\r\n            return;\r\n        }\r\n        this.logger.log(\"Unmuting Audio\");\r\n        this.toggleMute(false);\r\n        this.emit(\"unmute\", this);\r\n    };\r\n    Simple.prototype.sendDTMF = function (tone) {\r\n        if (this.state !== SimpleStatus.STATUS_CONNECTED || !this.session) {\r\n            this.logger.warn(\"An active call is required to send a DTMF tone\");\r\n            return;\r\n        }\r\n        this.logger.log(\"Sending DTMF tone: \" + tone);\r\n        this.session.dtmf(tone);\r\n    };\r\n    Simple.prototype.message = function (destination, message) {\r\n        if (!this.ua || !this.checkRegistration()) {\r\n            this.logger.warn(\"A registered UA is required to send a message\");\r\n            return;\r\n        }\r\n        if (!destination || !message) {\r\n            this.logger.warn(\"A destination and message are required to send a message\");\r\n            return;\r\n        }\r\n        this.ua.message(destination, message);\r\n    };\r\n    // Private Helpers\r\n    Simple.prototype.checkRegistration = function () {\r\n        return (this.anonymous || (this.ua && this.ua.isRegistered()));\r\n    };\r\n    Simple.prototype.setupRemoteMedia = function () {\r\n        var _this = this;\r\n        if (!this.session) {\r\n            this.logger.warn(\"No session to set remote media on\");\r\n            return;\r\n        }\r\n        // If there is a video track, it will attach the video and audio to the same element\r\n        var pc = this.session.sessionDescriptionHandler.peerConnection;\r\n        var remoteStream;\r\n        if (pc.getReceivers) {\r\n            remoteStream = new MediaStream();\r\n            pc.getReceivers().forEach(function (receiver) {\r\n                var track = receiver.track;\r\n                if (track) {\r\n                    remoteStream.addTrack(track);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            remoteStream = pc.getRemoteStreams()[0];\r\n        }\r\n        if (this.video) {\r\n            this.options.media.remote.video.srcObject = remoteStream;\r\n            this.options.media.remote.video.play().catch(function () {\r\n                _this.logger.log(\"play was rejected\");\r\n            });\r\n        }\r\n        else if (this.audio) {\r\n            this.options.media.remote.audio.srcObject = remoteStream;\r\n            this.options.media.remote.audio.play().catch(function () {\r\n                _this.logger.log(\"play was rejected\");\r\n            });\r\n        }\r\n    };\r\n    Simple.prototype.setupLocalMedia = function () {\r\n        if (!this.session) {\r\n            this.logger.warn(\"No session to set local media on\");\r\n            return;\r\n        }\r\n        if (this.video && this.options.media.local && this.options.media.local.video) {\r\n            var pc = this.session.sessionDescriptionHandler.peerConnection;\r\n            var localStream_1;\r\n            if (pc.getSenders) {\r\n                localStream_1 = new MediaStream();\r\n                pc.getSenders().forEach(function (sender) {\r\n                    var track = sender.track;\r\n                    if (track && track.kind === \"video\") {\r\n                        localStream_1.addTrack(track);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                localStream_1 = pc.getLocalStreams()[0];\r\n            }\r\n            this.options.media.local.video.srcObject = localStream_1;\r\n            this.options.media.local.video.volume = 0;\r\n            this.options.media.local.video.play();\r\n        }\r\n    };\r\n    Simple.prototype.cleanupMedia = function () {\r\n        if (this.video) {\r\n            this.options.media.remote.video.srcObject = null;\r\n            this.options.media.remote.video.pause();\r\n            if (this.options.media.local && this.options.media.local.video) {\r\n                this.options.media.local.video.srcObject = null;\r\n                this.options.media.local.video.pause();\r\n            }\r\n        }\r\n        if (this.audio) {\r\n            this.options.media.remote.audio.srcObject = null;\r\n            this.options.media.remote.audio.pause();\r\n        }\r\n    };\r\n    Simple.prototype.setupSession = function () {\r\n        var _this = this;\r\n        if (!this.session) {\r\n            this.logger.warn(\"No session to set up\");\r\n            return;\r\n        }\r\n        this.state = SimpleStatus.STATUS_NEW;\r\n        this.emit(\"new\", this.session);\r\n        this.session.on(\"progress\", function () { return _this.onProgress(); });\r\n        this.session.on(\"accepted\", function () { return _this.onAccepted(); });\r\n        this.session.on(\"rejected\", function () { return _this.onEnded(); });\r\n        this.session.on(\"failed\", function () { return _this.onFailed(); });\r\n        this.session.on(\"terminated\", function () { return _this.onEnded(); });\r\n    };\r\n    Simple.prototype.destroyMedia = function () {\r\n        if (this.session && this.session.sessionDescriptionHandler) {\r\n            this.session.sessionDescriptionHandler.close();\r\n        }\r\n    };\r\n    Simple.prototype.toggleMute = function (mute) {\r\n        if (!this.session) {\r\n            this.logger.warn(\"No session to toggle mute\");\r\n            return;\r\n        }\r\n        var pc = this.session.sessionDescriptionHandler.peerConnection;\r\n        if (pc.getSenders) {\r\n            pc.getSenders().forEach(function (sender) {\r\n                if (sender.track) {\r\n                    sender.track.enabled = !mute;\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            pc.getLocalStreams().forEach(function (stream) {\r\n                stream.getAudioTracks().forEach(function (track) {\r\n                    track.enabled = !mute;\r\n                });\r\n                stream.getVideoTracks().forEach(function (track) {\r\n                    track.enabled = !mute;\r\n                });\r\n            });\r\n        }\r\n    };\r\n    Simple.prototype.onAccepted = function () {\r\n        var _this = this;\r\n        if (!this.session) {\r\n            this.logger.warn(\"No session for accepting\");\r\n            return;\r\n        }\r\n        this.state = SimpleStatus.STATUS_CONNECTED;\r\n        this.emit(\"connected\", this.session);\r\n        this.setupLocalMedia();\r\n        this.setupRemoteMedia();\r\n        if (this.session.sessionDescriptionHandler) {\r\n            this.session.sessionDescriptionHandler.on(\"addTrack\", function () {\r\n                _this.logger.log(\"A track has been added, triggering new remoteMedia setup\");\r\n                _this.setupRemoteMedia();\r\n            });\r\n            this.session.sessionDescriptionHandler.on(\"addStream\", function () {\r\n                _this.logger.log(\"A stream has been added, trigger new remoteMedia setup\");\r\n                _this.setupRemoteMedia();\r\n            });\r\n        }\r\n        this.session.on(\"dtmf\", function (request, dtmf) {\r\n            _this.emit(\"dtmf\", dtmf.tone);\r\n        });\r\n        this.session.on(\"bye\", function () { return _this.onEnded(); });\r\n    };\r\n    Simple.prototype.onProgress = function () {\r\n        this.state = SimpleStatus.STATUS_CONNECTING;\r\n        this.emit(\"connecting\", this.session);\r\n    };\r\n    Simple.prototype.onFailed = function () {\r\n        this.onEnded();\r\n    };\r\n    Simple.prototype.onEnded = function () {\r\n        this.state = SimpleStatus.STATUS_COMPLETED;\r\n        this.emit(\"ended\", this.session);\r\n        this.cleanupMedia();\r\n    };\r\n    Simple.C = SimpleStatus;\r\n    return Simple;\r\n}(events_1.EventEmitter));\r\nexports.Simple = Simple;\r\n\r\n\r\n/***/ })\r\n/******/ ]);\r\n});",{"ruleId":"376","replacedBy":"377"},{"ruleId":"378","replacedBy":"379"},{"ruleId":"380","severity":1,"message":"381","line":25,"column":10,"nodeType":"382","messageId":"383","endLine":25,"endColumn":30},{"ruleId":"384","severity":1,"message":"385","line":44,"column":6,"nodeType":"386","endLine":44,"endColumn":23,"suggestions":"387"},{"ruleId":"380","severity":1,"message":"388","line":120,"column":9,"nodeType":"382","messageId":"383","endLine":120,"endColumn":28},{"ruleId":"380","severity":1,"message":"389","line":128,"column":9,"nodeType":"382","messageId":"383","endLine":128,"endColumn":30},{"ruleId":"380","severity":1,"message":"390","line":167,"column":9,"nodeType":"382","messageId":"383","endLine":167,"endColumn":32},{"ruleId":"391","severity":1,"message":"392","line":452,"column":19,"nodeType":"393","endLine":458,"endColumn":21},{"ruleId":"391","severity":1,"message":"392","line":472,"column":19,"nodeType":"393","endLine":478,"endColumn":21},{"ruleId":"391","severity":1,"message":"392","line":495,"column":19,"nodeType":"393","endLine":501,"endColumn":21},{"ruleId":"394","severity":1,"message":"395","line":656,"column":27,"nodeType":"396","endLine":656,"endColumn":40},{"ruleId":"394","severity":1,"message":"395","line":664,"column":27,"nodeType":"396","endLine":664,"endColumn":40},{"ruleId":"394","severity":1,"message":"395","line":672,"column":27,"nodeType":"396","endLine":672,"endColumn":40},{"ruleId":"394","severity":1,"message":"395","line":680,"column":27,"nodeType":"396","endLine":680,"endColumn":40},{"ruleId":"394","severity":1,"message":"395","line":688,"column":27,"nodeType":"396","endLine":688,"endColumn":40},{"ruleId":"394","severity":1,"message":"395","line":696,"column":27,"nodeType":"396","endLine":696,"endColumn":40},{"ruleId":"380","severity":1,"message":"397","line":9,"column":23,"nodeType":"382","messageId":"383","endLine":9,"endColumn":37},{"ruleId":"380","severity":1,"message":"398","line":14,"column":10,"nodeType":"382","messageId":"383","endLine":14,"endColumn":24},{"ruleId":"380","severity":1,"message":"399","line":38,"column":9,"nodeType":"382","messageId":"383","endLine":38,"endColumn":27},{"ruleId":"400","severity":1,"message":"401","line":120,"column":80,"nodeType":"402","messageId":"403","endLine":120,"endColumn":82},{"ruleId":"400","severity":1,"message":"401","line":120,"column":110,"nodeType":"402","messageId":"403","endLine":120,"endColumn":112},{"ruleId":"400","severity":1,"message":"401","line":123,"column":97,"nodeType":"402","messageId":"403","endLine":123,"endColumn":99},{"ruleId":"391","severity":1,"message":"392","line":128,"column":15,"nodeType":"393","endLine":128,"endColumn":130},{"ruleId":"380","severity":1,"message":"404","line":6,"column":10,"nodeType":"382","messageId":"383","endLine":6,"endColumn":16},{"ruleId":"380","severity":1,"message":"405","line":6,"column":18,"nodeType":"382","messageId":"383","endLine":6,"endColumn":27},{"ruleId":"380","severity":1,"message":"406","line":7,"column":10,"nodeType":"382","messageId":"383","endLine":7,"endColumn":17},{"ruleId":"380","severity":1,"message":"397","line":8,"column":23,"nodeType":"382","messageId":"383","endLine":8,"endColumn":37},{"ruleId":"380","severity":1,"message":"399","line":32,"column":9,"nodeType":"382","messageId":"383","endLine":32,"endColumn":27},{"ruleId":"407","severity":1,"message":"408","line":67,"column":11,"nodeType":"393","endLine":67,"endColumn":157},{"ruleId":"409","severity":1,"message":"410","line":11,"column":1,"nodeType":"411","messageId":"412","endLine":11,"endColumn":14,"fix":"413"},{"ruleId":"380","severity":1,"message":"414","line":40,"column":5,"nodeType":"382","messageId":"383","endLine":40,"endColumn":20},{"ruleId":"415","severity":1,"message":"416","line":76,"column":34,"nodeType":"417","messageId":"403","endLine":76,"endColumn":45},{"ruleId":"415","severity":1,"message":"418","line":93,"column":7,"nodeType":"417","messageId":"403","endLine":93,"endColumn":12},{"ruleId":"400","severity":1,"message":"419","line":114,"column":32,"nodeType":"402","messageId":"403","endLine":114,"endColumn":34},{"ruleId":"400","severity":1,"message":"419","line":120,"column":33,"nodeType":"402","messageId":"403","endLine":120,"endColumn":35},{"ruleId":"400","severity":1,"message":"401","line":120,"column":84,"nodeType":"402","messageId":"403","endLine":120,"endColumn":86},{"ruleId":"400","severity":1,"message":"419","line":126,"column":33,"nodeType":"402","messageId":"403","endLine":126,"endColumn":35},{"ruleId":"400","severity":1,"message":"401","line":126,"column":83,"nodeType":"402","messageId":"403","endLine":126,"endColumn":85},{"ruleId":"400","severity":1,"message":"419","line":148,"column":33,"nodeType":"402","messageId":"403","endLine":148,"endColumn":35},{"ruleId":"400","severity":1,"message":"401","line":148,"column":83,"nodeType":"402","messageId":"403","endLine":148,"endColumn":85},{"ruleId":"400","severity":1,"message":"419","line":154,"column":35,"nodeType":"402","messageId":"403","endLine":154,"endColumn":37},{"ruleId":"400","severity":1,"message":"401","line":154,"column":87,"nodeType":"402","messageId":"403","endLine":154,"endColumn":89},{"ruleId":"420","severity":1,"message":"421","line":162,"column":13,"nodeType":"382","messageId":"422","endLine":162,"endColumn":24},{"ruleId":"400","severity":1,"message":"419","line":183,"column":35,"nodeType":"402","messageId":"403","endLine":183,"endColumn":37},{"ruleId":"400","severity":1,"message":"419","line":192,"column":31,"nodeType":"402","messageId":"403","endLine":192,"endColumn":33},{"ruleId":"400","severity":1,"message":"401","line":192,"column":79,"nodeType":"402","messageId":"403","endLine":192,"endColumn":81},{"ruleId":"400","severity":1,"message":"419","line":196,"column":34,"nodeType":"402","messageId":"403","endLine":196,"endColumn":36},{"ruleId":"400","severity":1,"message":"401","line":196,"column":85,"nodeType":"402","messageId":"403","endLine":196,"endColumn":87},{"ruleId":"400","severity":1,"message":"419","line":200,"column":34,"nodeType":"402","messageId":"403","endLine":200,"endColumn":36},{"ruleId":"400","severity":1,"message":"401","line":200,"column":85,"nodeType":"402","messageId":"403","endLine":200,"endColumn":87},{"ruleId":"400","severity":1,"message":"419","line":204,"column":40,"nodeType":"402","messageId":"403","endLine":204,"endColumn":42},{"ruleId":"400","severity":1,"message":"401","line":204,"column":97,"nodeType":"402","messageId":"403","endLine":204,"endColumn":99},{"ruleId":"400","severity":1,"message":"419","line":215,"column":43,"nodeType":"402","messageId":"403","endLine":215,"endColumn":45},{"ruleId":"400","severity":1,"message":"419","line":219,"column":42,"nodeType":"402","messageId":"403","endLine":219,"endColumn":44},{"ruleId":"400","severity":1,"message":"419","line":224,"column":42,"nodeType":"402","messageId":"403","endLine":224,"endColumn":44},{"ruleId":"400","severity":1,"message":"419","line":229,"column":38,"nodeType":"402","messageId":"403","endLine":229,"endColumn":40},{"ruleId":"400","severity":1,"message":"401","line":229,"column":93,"nodeType":"402","messageId":"403","endLine":229,"endColumn":95},{"ruleId":"380","severity":1,"message":"423","line":474,"column":9,"nodeType":"382","messageId":"383","endLine":474,"endColumn":15},{"ruleId":"424","severity":1,"message":"425","line":605,"column":40,"nodeType":"426","messageId":"427","endLine":609,"endColumn":10},{"ruleId":"380","severity":1,"message":"423","line":655,"column":11,"nodeType":"382","messageId":"383","endLine":655,"endColumn":17},{"ruleId":"400","severity":1,"message":"401","line":709,"column":38,"nodeType":"402","messageId":"403","endLine":709,"endColumn":40},{"ruleId":"400","severity":1,"message":"401","line":712,"column":38,"nodeType":"402","messageId":"403","endLine":712,"endColumn":40},{"ruleId":"400","severity":1,"message":"401","line":728,"column":36,"nodeType":"402","messageId":"403","endLine":728,"endColumn":38},{"ruleId":"400","severity":1,"message":"401","line":735,"column":36,"nodeType":"402","messageId":"403","endLine":735,"endColumn":38},{"ruleId":"380","severity":1,"message":"428","line":785,"column":9,"nodeType":"382","messageId":"383","endLine":785,"endColumn":27},{"ruleId":"400","severity":1,"message":"401","line":794,"column":62,"nodeType":"402","messageId":"403","endLine":794,"endColumn":64},{"ruleId":"400","severity":1,"message":"401","line":829,"column":63,"nodeType":"402","messageId":"403","endLine":829,"endColumn":65},{"ruleId":"400","severity":1,"message":"401","line":918,"column":32,"nodeType":"402","messageId":"403","endLine":918,"endColumn":34},{"ruleId":"400","severity":1,"message":"401","line":919,"column":21,"nodeType":"402","messageId":"403","endLine":919,"endColumn":23},{"ruleId":"400","severity":1,"message":"401","line":919,"column":40,"nodeType":"402","messageId":"403","endLine":919,"endColumn":42},{"ruleId":"400","severity":1,"message":"401","line":924,"column":32,"nodeType":"402","messageId":"403","endLine":924,"endColumn":34},{"ruleId":"400","severity":1,"message":"401","line":925,"column":21,"nodeType":"402","messageId":"403","endLine":925,"endColumn":23},{"ruleId":"400","severity":1,"message":"401","line":925,"column":40,"nodeType":"402","messageId":"403","endLine":925,"endColumn":42},{"ruleId":"400","severity":1,"message":"401","line":936,"column":17,"nodeType":"402","messageId":"403","endLine":936,"endColumn":19},{"ruleId":"400","severity":1,"message":"401","line":936,"column":36,"nodeType":"402","messageId":"403","endLine":936,"endColumn":38},{"ruleId":"400","severity":1,"message":"401","line":942,"column":17,"nodeType":"402","messageId":"403","endLine":942,"endColumn":19},{"ruleId":"400","severity":1,"message":"401","line":942,"column":36,"nodeType":"402","messageId":"403","endLine":942,"endColumn":38},{"ruleId":"400","severity":1,"message":"401","line":978,"column":31,"nodeType":"402","messageId":"403","endLine":978,"endColumn":33},{"ruleId":"420","severity":1,"message":"429","line":984,"column":13,"nodeType":"382","messageId":"422","endLine":984,"endColumn":19},{"ruleId":"400","severity":1,"message":"401","line":985,"column":31,"nodeType":"402","messageId":"403","endLine":985,"endColumn":33},{"ruleId":"430","severity":1,"message":"431","line":1033,"column":27,"nodeType":"432","messageId":"433","endLine":1033,"endColumn":29},{"ruleId":"430","severity":1,"message":"431","line":1033,"column":38,"nodeType":"432","messageId":"433","endLine":1033,"endColumn":40},{"ruleId":"400","severity":1,"message":"401","line":1033,"column":54,"nodeType":"402","messageId":"403","endLine":1033,"endColumn":56},{"ruleId":"430","severity":1,"message":"431","line":1080,"column":27,"nodeType":"432","messageId":"433","endLine":1080,"endColumn":29},{"ruleId":"430","severity":1,"message":"431","line":1080,"column":38,"nodeType":"432","messageId":"433","endLine":1080,"endColumn":40},{"ruleId":"400","severity":1,"message":"401","line":1080,"column":54,"nodeType":"402","messageId":"403","endLine":1080,"endColumn":56},{"ruleId":"380","severity":1,"message":"434","line":1109,"column":9,"nodeType":"382","messageId":"383","endLine":1109,"endColumn":20},{"ruleId":"380","severity":1,"message":"435","line":1277,"column":9,"nodeType":"382","messageId":"383","endLine":1277,"endColumn":16},{"ruleId":"420","severity":1,"message":"436","line":1296,"column":17,"nodeType":"382","messageId":"422","endLine":1296,"endColumn":28},{"ruleId":"400","severity":1,"message":"401","line":1373,"column":75,"nodeType":"402","messageId":"403","endLine":1373,"endColumn":77},{"ruleId":"409","severity":1,"message":"410","line":140,"column":1,"nodeType":"411","messageId":"412","endLine":140,"endColumn":14,"fix":"437"},{"ruleId":"409","severity":1,"message":"410","line":210,"column":1,"nodeType":"411","messageId":"412","endLine":210,"endColumn":14,"fix":"438"},{"ruleId":"420","severity":1,"message":"439","line":246,"column":11,"nodeType":"440","messageId":"441","endLine":246,"endColumn":18},{"ruleId":"420","severity":1,"message":"442","line":246,"column":20,"nodeType":"440","messageId":"441","endLine":246,"endColumn":27},{"ruleId":"420","severity":1,"message":"443","line":277,"column":25,"nodeType":"382","messageId":"422","endLine":277,"endColumn":26},{"ruleId":"444","severity":1,"message":"445","line":287,"column":63,"nodeType":"446","messageId":"447","endLine":287,"endColumn":80},{"ruleId":"448","severity":1,"message":"449","line":288,"column":63,"nodeType":"450","messageId":"451","endLine":288,"endColumn":64},{"ruleId":"448","severity":1,"message":"449","line":310,"column":70,"nodeType":"450","messageId":"451","endLine":310,"endColumn":71},{"ruleId":"448","severity":1,"message":"449","line":315,"column":22,"nodeType":"450","messageId":"451","endLine":315,"endColumn":23},{"ruleId":"448","severity":1,"message":"449","line":316,"column":22,"nodeType":"450","messageId":"451","endLine":316,"endColumn":23},{"ruleId":"420","severity":1,"message":"452","line":376,"column":35,"nodeType":"382","messageId":"422","endLine":376,"endColumn":36},{"ruleId":"448","severity":1,"message":"449","line":389,"column":18,"nodeType":"450","messageId":"451","endLine":389,"endColumn":19},{"ruleId":"448","severity":1,"message":"449","line":395,"column":37,"nodeType":"450","messageId":"451","endLine":395,"endColumn":38},{"ruleId":"448","severity":1,"message":"449","line":400,"column":18,"nodeType":"450","messageId":"451","endLine":400,"endColumn":19},{"ruleId":"444","severity":1,"message":"445","line":401,"column":64,"nodeType":"446","messageId":"447","endLine":401,"endColumn":70},{"ruleId":"448","severity":1,"message":"449","line":408,"column":113,"nodeType":"450","messageId":"451","endLine":408,"endColumn":114},{"ruleId":"409","severity":1,"message":"410","line":434,"column":1,"nodeType":"411","messageId":"412","endLine":434,"endColumn":14,"fix":"453"},{"ruleId":"409","severity":1,"message":"410","line":460,"column":1,"nodeType":"411","messageId":"412","endLine":460,"endColumn":14,"fix":"454"},{"ruleId":"409","severity":1,"message":"410","line":473,"column":1,"nodeType":"411","messageId":"412","endLine":473,"endColumn":14,"fix":"455"},{"ruleId":"409","severity":1,"message":"410","line":1054,"column":1,"nodeType":"411","messageId":"412","endLine":1054,"endColumn":14,"fix":"456"},{"ruleId":"409","severity":1,"message":"410","line":1079,"column":1,"nodeType":"411","messageId":"412","endLine":1079,"endColumn":14,"fix":"457"},{"ruleId":"409","severity":1,"message":"410","line":1090,"column":1,"nodeType":"411","messageId":"412","endLine":1090,"endColumn":14,"fix":"458"},{"ruleId":"380","severity":1,"message":"459","line":1113,"column":4,"nodeType":"382","messageId":"383","endLine":1113,"endColumn":5},{"ruleId":"409","severity":1,"message":"410","line":1120,"column":1,"nodeType":"411","messageId":"412","endLine":1120,"endColumn":14,"fix":"460"},{"ruleId":"420","severity":1,"message":"461","line":1163,"column":17,"nodeType":"382","messageId":"422","endLine":1163,"endColumn":22},{"ruleId":"409","severity":1,"message":"410","line":1247,"column":1,"nodeType":"411","messageId":"412","endLine":1247,"endColumn":14,"fix":"462"},{"ruleId":"409","severity":1,"message":"410","line":1270,"column":1,"nodeType":"411","messageId":"412","endLine":1270,"endColumn":14,"fix":"463"},{"ruleId":"409","severity":1,"message":"410","line":1409,"column":1,"nodeType":"411","messageId":"412","endLine":1409,"endColumn":14,"fix":"464"},{"ruleId":"380","severity":1,"message":"465","line":1456,"column":4,"nodeType":"382","messageId":"383","endLine":1456,"endColumn":11},{"ruleId":"409","severity":1,"message":"410","line":1463,"column":1,"nodeType":"411","messageId":"412","endLine":1463,"endColumn":14,"fix":"466"},{"ruleId":"467","severity":1,"message":"468","line":1521,"column":26,"nodeType":"469","messageId":"403","endLine":1521,"endColumn":40},{"ruleId":"467","severity":1,"message":"470","line":1522,"column":26,"nodeType":"469","messageId":"403","endLine":1522,"endColumn":49},{"ruleId":"467","severity":1,"message":"468","line":1534,"column":26,"nodeType":"469","messageId":"403","endLine":1534,"endColumn":40},{"ruleId":"467","severity":1,"message":"470","line":1535,"column":26,"nodeType":"469","messageId":"403","endLine":1535,"endColumn":49},{"ruleId":"471","severity":1,"message":"472","line":1538,"column":13,"nodeType":"473","messageId":"474","endLine":1554,"endColumn":14},{"ruleId":"467","severity":1,"message":"475","line":1703,"column":9,"nodeType":"469","messageId":"403","endLine":1703,"endColumn":21},{"ruleId":"467","severity":1,"message":"476","line":1705,"column":9,"nodeType":"469","messageId":"403","endLine":1705,"endColumn":23},{"ruleId":"477","severity":1,"message":"478","line":1755,"column":22,"nodeType":"469","messageId":"479","endLine":1755,"endColumn":23,"suggestions":"480"},{"ruleId":"477","severity":1,"message":"478","line":1757,"column":21,"nodeType":"469","messageId":"479","endLine":1757,"endColumn":22,"suggestions":"481"},{"ruleId":"477","severity":1,"message":"482","line":1980,"column":37,"nodeType":"469","messageId":"479","endLine":1980,"endColumn":38,"suggestions":"483"},{"ruleId":"380","severity":1,"message":"484","line":2647,"column":14,"nodeType":"382","messageId":"383","endLine":2647,"endColumn":22},{"ruleId":"380","severity":1,"message":"485","line":2653,"column":14,"nodeType":"382","messageId":"383","endLine":2653,"endColumn":19},{"ruleId":"380","severity":1,"message":"486","line":2665,"column":14,"nodeType":"382","messageId":"383","endLine":2665,"endColumn":32},{"ruleId":"409","severity":1,"message":"410","line":2978,"column":1,"nodeType":"411","messageId":"412","endLine":2978,"endColumn":14,"fix":"487"},{"ruleId":"409","severity":1,"message":"410","line":3041,"column":1,"nodeType":"411","messageId":"412","endLine":3041,"endColumn":14,"fix":"488"},{"ruleId":"409","severity":1,"message":"410","line":3092,"column":1,"nodeType":"411","messageId":"412","endLine":3092,"endColumn":14,"fix":"489"},{"ruleId":"409","severity":1,"message":"410","line":3316,"column":1,"nodeType":"411","messageId":"412","endLine":3316,"endColumn":14,"fix":"490"},{"ruleId":"409","severity":1,"message":"410","line":3468,"column":1,"nodeType":"411","messageId":"412","endLine":3468,"endColumn":14,"fix":"491"},{"ruleId":"409","severity":1,"message":"410","line":3491,"column":1,"nodeType":"411","messageId":"412","endLine":3491,"endColumn":14,"fix":"492"},{"ruleId":"420","severity":1,"message":"493","line":3702,"column":17,"nodeType":"382","messageId":"422","endLine":3702,"endColumn":23},{"ruleId":"409","severity":1,"message":"410","line":3737,"column":1,"nodeType":"411","messageId":"412","endLine":3737,"endColumn":14,"fix":"494"},{"ruleId":"495","severity":1,"message":"496","line":4167,"column":17,"nodeType":"382","messageId":"497","endLine":4167,"endColumn":25},{"ruleId":"498","severity":1,"message":"499","line":4167,"column":46,"nodeType":"382","messageId":"500","endLine":4167,"endColumn":55},{"ruleId":"400","severity":1,"message":"419","line":4342,"column":27,"nodeType":"402","messageId":"403","endLine":4342,"endColumn":29},{"ruleId":"420","severity":1,"message":"452","line":4396,"column":27,"nodeType":"382","messageId":"422","endLine":4396,"endColumn":28},{"ruleId":"420","severity":1,"message":"501","line":4456,"column":22,"nodeType":"382","messageId":"422","endLine":4456,"endColumn":25},{"ruleId":"380","severity":1,"message":"502","line":4769,"column":10,"nodeType":"382","messageId":"383","endLine":4769,"endColumn":16},{"ruleId":"409","severity":1,"message":"410","line":4914,"column":1,"nodeType":"411","messageId":"412","endLine":4914,"endColumn":14,"fix":"503"},{"ruleId":"409","severity":1,"message":"410","line":5050,"column":1,"nodeType":"411","messageId":"412","endLine":5050,"endColumn":14,"fix":"504"},{"ruleId":"380","severity":1,"message":"505","line":5286,"column":4,"nodeType":"382","messageId":"383","endLine":5286,"endColumn":10},{"ruleId":"409","severity":1,"message":"410","line":5293,"column":1,"nodeType":"411","messageId":"412","endLine":5293,"endColumn":14,"fix":"506"},{"ruleId":"507","severity":1,"message":"508","line":5791,"column":17,"nodeType":"509","messageId":"510","endLine":5797,"endColumn":18},{"ruleId":"507","severity":1,"message":"508","line":5805,"column":17,"nodeType":"509","messageId":"510","endLine":5813,"endColumn":18},{"ruleId":"420","severity":1,"message":"511","line":5806,"column":25,"nodeType":"382","messageId":"422","endLine":5806,"endColumn":28},{"ruleId":"507","severity":1,"message":"508","line":5820,"column":17,"nodeType":"509","messageId":"510","endLine":5826,"endColumn":18},{"ruleId":"420","severity":1,"message":"511","line":5821,"column":25,"nodeType":"382","messageId":"422","endLine":5821,"endColumn":28},{"ruleId":"507","severity":1,"message":"508","line":5829,"column":17,"nodeType":"509","messageId":"510","endLine":5834,"endColumn":18},{"ruleId":"420","severity":1,"message":"511","line":5830,"column":25,"nodeType":"382","messageId":"422","endLine":5830,"endColumn":28},{"ruleId":"507","severity":1,"message":"508","line":5838,"column":17,"nodeType":"509","messageId":"510","endLine":5843,"endColumn":18},{"ruleId":"420","severity":1,"message":"511","line":5839,"column":25,"nodeType":"382","messageId":"422","endLine":5839,"endColumn":28},{"ruleId":"507","severity":1,"message":"508","line":5847,"column":17,"nodeType":"509","messageId":"510","endLine":5852,"endColumn":18},{"ruleId":"420","severity":1,"message":"511","line":5848,"column":25,"nodeType":"382","messageId":"422","endLine":5848,"endColumn":28},{"ruleId":"507","severity":1,"message":"508","line":5856,"column":17,"nodeType":"509","messageId":"510","endLine":5861,"endColumn":18},{"ruleId":"420","severity":1,"message":"511","line":5857,"column":25,"nodeType":"382","messageId":"422","endLine":5857,"endColumn":28},{"ruleId":"507","severity":1,"message":"508","line":5864,"column":17,"nodeType":"509","messageId":"510","endLine":5867,"endColumn":18},{"ruleId":"409","severity":1,"message":"410","line":6149,"column":1,"nodeType":"411","messageId":"412","endLine":6149,"endColumn":14,"fix":"512"},{"ruleId":"409","severity":1,"message":"410","line":6160,"column":1,"nodeType":"411","messageId":"412","endLine":6160,"endColumn":14,"fix":"513"},{"ruleId":"380","severity":1,"message":"514","line":6176,"column":4,"nodeType":"382","messageId":"383","endLine":6176,"endColumn":16},{"ruleId":"380","severity":1,"message":"515","line":6202,"column":4,"nodeType":"382","messageId":"383","endLine":6202,"endColumn":18},{"ruleId":"409","severity":1,"message":"410","line":6209,"column":1,"nodeType":"411","messageId":"412","endLine":6209,"endColumn":14,"fix":"516"},{"ruleId":"409","severity":1,"message":"410","line":6241,"column":1,"nodeType":"411","messageId":"412","endLine":6241,"endColumn":14,"fix":"517"},{"ruleId":"409","severity":1,"message":"410","line":6260,"column":1,"nodeType":"411","messageId":"412","endLine":6260,"endColumn":14,"fix":"518"},{"ruleId":"409","severity":1,"message":"410","line":6338,"column":1,"nodeType":"411","messageId":"412","endLine":6338,"endColumn":14,"fix":"519"},{"ruleId":"409","severity":1,"message":"410","line":6469,"column":1,"nodeType":"411","messageId":"412","endLine":6469,"endColumn":14,"fix":"520"},{"ruleId":"521","severity":1,"message":"522","line":6519,"column":10,"nodeType":"402","messageId":"523","endLine":6519,"endColumn":25},{"ruleId":"420","severity":1,"message":"452","line":6625,"column":14,"nodeType":"382","messageId":"422","endLine":6625,"endColumn":15},{"ruleId":"409","severity":1,"message":"410","line":6922,"column":1,"nodeType":"411","messageId":"412","endLine":6922,"endColumn":14,"fix":"524"},{"ruleId":"409","severity":1,"message":"410","line":6935,"column":1,"nodeType":"411","messageId":"412","endLine":6935,"endColumn":14,"fix":"525"},{"ruleId":"409","severity":1,"message":"410","line":6961,"column":1,"nodeType":"411","messageId":"412","endLine":6961,"endColumn":14,"fix":"526"},{"ruleId":"409","severity":1,"message":"410","line":6984,"column":1,"nodeType":"411","messageId":"412","endLine":6984,"endColumn":14,"fix":"527"},{"ruleId":"409","severity":1,"message":"410","line":7007,"column":1,"nodeType":"411","messageId":"412","endLine":7007,"endColumn":14,"fix":"528"},{"ruleId":"409","severity":1,"message":"410","line":7498,"column":1,"nodeType":"411","messageId":"412","endLine":7498,"endColumn":14,"fix":"529"},{"ruleId":"380","severity":1,"message":"530","line":7514,"column":4,"nodeType":"382","messageId":"383","endLine":7514,"endColumn":20},{"ruleId":"409","severity":1,"message":"410","line":7521,"column":1,"nodeType":"411","messageId":"412","endLine":7521,"endColumn":14,"fix":"531"},{"ruleId":"409","severity":1,"message":"410","line":7919,"column":1,"nodeType":"411","messageId":"412","endLine":7919,"endColumn":14,"fix":"532"},{"ruleId":"409","severity":1,"message":"410","line":7960,"column":1,"nodeType":"411","messageId":"412","endLine":7960,"endColumn":14,"fix":"533"},{"ruleId":"534","severity":1,"message":"535","line":8087,"column":13,"nodeType":"536","messageId":"537","endLine":8092,"endColumn":24},{"ruleId":"409","severity":1,"message":"410","line":8213,"column":1,"nodeType":"411","messageId":"412","endLine":8213,"endColumn":14,"fix":"538"},{"ruleId":"409","severity":1,"message":"410","line":8451,"column":1,"nodeType":"411","messageId":"412","endLine":8451,"endColumn":14,"fix":"539"},{"ruleId":"409","severity":1,"message":"410","line":8480,"column":1,"nodeType":"411","messageId":"412","endLine":8480,"endColumn":14,"fix":"540"},{"ruleId":"380","severity":1,"message":"541","line":8589,"column":17,"nodeType":"382","messageId":"383","endLine":8589,"endColumn":20},{"ruleId":"380","severity":1,"message":"541","line":8594,"column":25,"nodeType":"382","messageId":"383","endLine":8594,"endColumn":28},{"ruleId":"409","severity":1,"message":"410","line":8808,"column":1,"nodeType":"411","messageId":"412","endLine":8808,"endColumn":14,"fix":"542"},{"ruleId":"409","severity":1,"message":"410","line":8832,"column":1,"nodeType":"411","messageId":"412","endLine":8832,"endColumn":14,"fix":"543"},{"ruleId":"544","severity":1,"message":"545","line":8917,"column":30,"nodeType":"546","messageId":"547","endLine":8917,"endColumn":41},{"ruleId":"409","severity":1,"message":"410","line":9100,"column":1,"nodeType":"411","messageId":"412","endLine":9100,"endColumn":14,"fix":"548"},{"ruleId":"409","severity":1,"message":"410","line":9128,"column":1,"nodeType":"411","messageId":"412","endLine":9128,"endColumn":14,"fix":"549"},{"ruleId":"409","severity":1,"message":"410","line":9152,"column":1,"nodeType":"411","messageId":"412","endLine":9152,"endColumn":14,"fix":"550"},{"ruleId":"409","severity":1,"message":"410","line":9176,"column":1,"nodeType":"411","messageId":"412","endLine":9176,"endColumn":14,"fix":"551"},{"ruleId":"409","severity":1,"message":"410","line":9200,"column":1,"nodeType":"411","messageId":"412","endLine":9200,"endColumn":14,"fix":"552"},{"ruleId":"409","severity":1,"message":"410","line":9228,"column":1,"nodeType":"411","messageId":"412","endLine":9228,"endColumn":14,"fix":"553"},{"ruleId":"409","severity":1,"message":"410","line":9265,"column":1,"nodeType":"411","messageId":"412","endLine":9265,"endColumn":14,"fix":"554"},{"ruleId":"409","severity":1,"message":"410","line":9294,"column":1,"nodeType":"411","messageId":"412","endLine":9294,"endColumn":14,"fix":"555"},{"ruleId":"409","severity":1,"message":"410","line":9334,"column":1,"nodeType":"411","messageId":"412","endLine":9334,"endColumn":14,"fix":"556"},{"ruleId":"409","severity":1,"message":"410","line":9457,"column":1,"nodeType":"411","messageId":"412","endLine":9457,"endColumn":14,"fix":"557"},{"ruleId":"409","severity":1,"message":"410","line":9560,"column":1,"nodeType":"411","messageId":"412","endLine":9560,"endColumn":14,"fix":"558"},{"ruleId":"409","severity":1,"message":"410","line":9588,"column":1,"nodeType":"411","messageId":"412","endLine":9588,"endColumn":14,"fix":"559"},{"ruleId":"409","severity":1,"message":"410","line":9625,"column":1,"nodeType":"411","messageId":"412","endLine":9625,"endColumn":14,"fix":"560"},{"ruleId":"409","severity":1,"message":"410","line":10126,"column":1,"nodeType":"411","messageId":"412","endLine":10126,"endColumn":14,"fix":"561"},{"ruleId":"409","severity":1,"message":"410","line":10137,"column":1,"nodeType":"411","messageId":"412","endLine":10137,"endColumn":14,"fix":"562"},{"ruleId":"380","severity":1,"message":"563","line":10153,"column":4,"nodeType":"382","messageId":"383","endLine":10153,"endColumn":21},{"ruleId":"409","severity":1,"message":"410","line":10160,"column":1,"nodeType":"411","messageId":"412","endLine":10160,"endColumn":14,"fix":"564"},{"ruleId":"409","severity":1,"message":"410","line":10187,"column":1,"nodeType":"411","messageId":"412","endLine":10187,"endColumn":14,"fix":"565"},{"ruleId":"409","severity":1,"message":"410","line":10267,"column":1,"nodeType":"411","messageId":"412","endLine":10267,"endColumn":14,"fix":"566"},{"ruleId":"409","severity":1,"message":"410","line":10280,"column":1,"nodeType":"411","messageId":"412","endLine":10280,"endColumn":14,"fix":"567"},{"ruleId":"380","severity":1,"message":"568","line":10293,"column":4,"nodeType":"382","messageId":"383","endLine":10293,"endColumn":10},{"ruleId":"409","severity":1,"message":"410","line":10300,"column":1,"nodeType":"411","messageId":"412","endLine":10300,"endColumn":14,"fix":"569"},{"ruleId":"409","severity":1,"message":"410","line":10414,"column":1,"nodeType":"411","messageId":"412","endLine":10414,"endColumn":14,"fix":"570"},{"ruleId":"409","severity":1,"message":"410","line":10444,"column":1,"nodeType":"411","messageId":"412","endLine":10444,"endColumn":14,"fix":"571"},{"ruleId":"409","severity":1,"message":"410","line":10455,"column":1,"nodeType":"411","messageId":"412","endLine":10455,"endColumn":14,"fix":"572"},{"ruleId":"573","severity":1,"message":"574","line":11102,"column":17,"nodeType":"575","messageId":"576","endLine":11102,"endColumn":23},{"ruleId":"507","severity":1,"message":"508","line":11113,"column":17,"nodeType":"509","messageId":"510","endLine":11118,"endColumn":18},{"ruleId":"507","severity":1,"message":"508","line":11126,"column":17,"nodeType":"509","messageId":"510","endLine":11131,"endColumn":18},{"ruleId":"420","severity":1,"message":"511","line":11127,"column":25,"nodeType":"382","messageId":"422","endLine":11127,"endColumn":28},{"ruleId":"507","severity":1,"message":"508","line":11157,"column":17,"nodeType":"509","messageId":"510","endLine":11162,"endColumn":18},{"ruleId":"420","severity":1,"message":"511","line":11158,"column":25,"nodeType":"382","messageId":"422","endLine":11158,"endColumn":28},{"ruleId":"507","severity":1,"message":"508","line":11166,"column":17,"nodeType":"509","messageId":"510","endLine":11173,"endColumn":18},{"ruleId":"507","severity":1,"message":"508","line":11177,"column":17,"nodeType":"509","messageId":"510","endLine":11182,"endColumn":18},{"ruleId":"420","severity":1,"message":"511","line":11178,"column":25,"nodeType":"382","messageId":"422","endLine":11178,"endColumn":28},{"ruleId":"507","severity":1,"message":"508","line":11186,"column":17,"nodeType":"509","messageId":"510","endLine":11191,"endColumn":18},{"ruleId":"420","severity":1,"message":"511","line":11187,"column":25,"nodeType":"382","messageId":"422","endLine":11187,"endColumn":28},{"ruleId":"507","severity":1,"message":"508","line":11195,"column":17,"nodeType":"509","messageId":"510","endLine":11200,"endColumn":18},{"ruleId":"420","severity":1,"message":"511","line":11196,"column":25,"nodeType":"382","messageId":"422","endLine":11196,"endColumn":28},{"ruleId":"409","severity":1,"message":"410","line":11276,"column":1,"nodeType":"411","messageId":"412","endLine":11276,"endColumn":14,"fix":"577"},{"ruleId":"409","severity":1,"message":"410","line":11312,"column":1,"nodeType":"411","messageId":"412","endLine":11312,"endColumn":14,"fix":"578"},{"ruleId":"409","severity":1,"message":"410","line":11336,"column":1,"nodeType":"411","messageId":"412","endLine":11336,"endColumn":14,"fix":"579"},{"ruleId":"507","severity":1,"message":"508","line":11429,"column":17,"nodeType":"509","messageId":"510","endLine":11479,"endColumn":18},{"ruleId":"507","severity":1,"message":"508","line":11494,"column":17,"nodeType":"509","messageId":"510","endLine":11591,"endColumn":18},{"ruleId":"420","severity":1,"message":"580","line":11496,"column":25,"nodeType":"382","messageId":"422","endLine":11496,"endColumn":36},{"ruleId":"420","severity":1,"message":"581","line":11515,"column":33,"nodeType":"382","messageId":"422","endLine":11515,"endColumn":44},{"ruleId":"420","severity":1,"message":"581","line":11541,"column":29,"nodeType":"382","messageId":"422","endLine":11541,"endColumn":40},{"ruleId":"420","severity":1,"message":"582","line":11588,"column":29,"nodeType":"382","messageId":"422","endLine":11588,"endColumn":47},{"ruleId":"573","severity":1,"message":"574","line":11655,"column":9,"nodeType":"583","messageId":"576","endLine":11655,"endColumn":117},{"ruleId":"409","severity":1,"message":"410","line":11666,"column":1,"nodeType":"411","messageId":"412","endLine":11666,"endColumn":14,"fix":"584"},{"ruleId":"409","severity":1,"message":"410","line":11920,"column":1,"nodeType":"411","messageId":"412","endLine":11920,"endColumn":14,"fix":"585"},{"ruleId":"409","severity":1,"message":"410","line":11944,"column":1,"nodeType":"411","messageId":"412","endLine":11944,"endColumn":14,"fix":"586"},{"ruleId":"409","severity":1,"message":"410","line":11968,"column":1,"nodeType":"411","messageId":"412","endLine":11968,"endColumn":14,"fix":"587"},{"ruleId":"409","severity":1,"message":"410","line":11992,"column":1,"nodeType":"411","messageId":"412","endLine":11992,"endColumn":14,"fix":"588"},{"ruleId":"409","severity":1,"message":"410","line":12018,"column":1,"nodeType":"411","messageId":"412","endLine":12018,"endColumn":14,"fix":"589"},{"ruleId":"409","severity":1,"message":"410","line":12322,"column":1,"nodeType":"411","messageId":"412","endLine":12322,"endColumn":14,"fix":"590"},{"ruleId":"409","severity":1,"message":"410","line":12348,"column":1,"nodeType":"411","messageId":"412","endLine":12348,"endColumn":14,"fix":"591"},{"ruleId":"409","severity":1,"message":"410","line":12478,"column":1,"nodeType":"411","messageId":"412","endLine":12478,"endColumn":14,"fix":"592"},{"ruleId":"380","severity":1,"message":"593","line":12518,"column":8,"nodeType":"382","messageId":"383","endLine":12518,"endColumn":14},{"ruleId":"380","severity":1,"message":"594","line":12524,"column":8,"nodeType":"382","messageId":"383","endLine":12524,"endColumn":17},{"ruleId":"380","severity":1,"message":"595","line":12669,"column":8,"nodeType":"382","messageId":"383","endLine":12669,"endColumn":16},{"ruleId":"380","severity":1,"message":"459","line":12670,"column":4,"nodeType":"382","messageId":"383","endLine":12670,"endColumn":5},{"ruleId":"409","severity":1,"message":"410","line":12677,"column":1,"nodeType":"411","messageId":"412","endLine":12677,"endColumn":14,"fix":"596"},{"ruleId":"409","severity":1,"message":"410","line":12687,"column":1,"nodeType":"411","messageId":"412","endLine":12687,"endColumn":14,"fix":"597"},{"ruleId":"380","severity":1,"message":"598","line":12696,"column":4,"nodeType":"382","messageId":"383","endLine":12696,"endColumn":16},{"ruleId":"380","severity":1,"message":"599","line":12713,"column":4,"nodeType":"382","messageId":"383","endLine":12713,"endColumn":17},{"ruleId":"380","severity":1,"message":"600","line":12749,"column":4,"nodeType":"382","messageId":"383","endLine":12749,"endColumn":15},{"ruleId":"380","severity":1,"message":"601","line":12758,"column":4,"nodeType":"382","messageId":"383","endLine":12758,"endColumn":12},{"ruleId":"409","severity":1,"message":"410","line":12765,"column":1,"nodeType":"411","messageId":"412","endLine":12765,"endColumn":14,"fix":"602"},{"ruleId":"477","severity":1,"message":"478","line":12877,"column":20,"nodeType":"469","messageId":"479","endLine":12877,"endColumn":21,"suggestions":"603"},{"ruleId":"477","severity":1,"message":"604","line":12877,"column":22,"nodeType":"469","messageId":"479","endLine":12877,"endColumn":23,"suggestions":"605"},{"ruleId":"477","severity":1,"message":"606","line":12877,"column":24,"nodeType":"469","messageId":"479","endLine":12877,"endColumn":25,"suggestions":"607"},{"ruleId":"477","severity":1,"message":"608","line":12877,"column":26,"nodeType":"469","messageId":"479","endLine":12877,"endColumn":27,"suggestions":"609"},{"ruleId":"477","severity":1,"message":"604","line":12877,"column":39,"nodeType":"469","messageId":"479","endLine":12877,"endColumn":40,"suggestions":"610"},{"ruleId":"477","severity":1,"message":"606","line":12877,"column":41,"nodeType":"469","messageId":"479","endLine":12877,"endColumn":42,"suggestions":"611"},{"ruleId":"477","severity":1,"message":"608","line":12877,"column":43,"nodeType":"469","messageId":"479","endLine":12877,"endColumn":44,"suggestions":"612"},{"ruleId":"477","severity":1,"message":"478","line":12878,"column":51,"nodeType":"469","messageId":"479","endLine":12878,"endColumn":52,"suggestions":"613"},{"ruleId":"477","severity":1,"message":"604","line":12878,"column":53,"nodeType":"469","messageId":"479","endLine":12878,"endColumn":54,"suggestions":"614"},{"ruleId":"477","severity":1,"message":"606","line":12878,"column":55,"nodeType":"469","messageId":"479","endLine":12878,"endColumn":56,"suggestions":"615"},{"ruleId":"477","severity":1,"message":"608","line":12878,"column":57,"nodeType":"469","messageId":"479","endLine":12878,"endColumn":58,"suggestions":"616"},{"ruleId":"430","severity":1,"message":"617","line":12947,"column":18,"nodeType":"432","messageId":"433","endLine":12947,"endColumn":20},{"ruleId":"430","severity":1,"message":"617","line":12947,"column":32,"nodeType":"432","messageId":"433","endLine":12947,"endColumn":34},{"ruleId":"380","severity":1,"message":"618","line":13003,"column":4,"nodeType":"382","messageId":"383","endLine":13003,"endColumn":9},{"ruleId":"409","severity":1,"message":"410","line":13010,"column":1,"nodeType":"411","messageId":"412","endLine":13010,"endColumn":14,"fix":"619"},{"ruleId":"380","severity":1,"message":"620","line":13147,"column":4,"nodeType":"382","messageId":"383","endLine":13147,"endColumn":14},{"ruleId":"409","severity":1,"message":"410","line":13154,"column":1,"nodeType":"411","messageId":"412","endLine":13154,"endColumn":14,"fix":"621"},{"ruleId":"409","severity":1,"message":"410","line":13433,"column":1,"nodeType":"411","messageId":"412","endLine":13433,"endColumn":14,"fix":"622"},{"ruleId":"380","severity":1,"message":"623","line":13772,"column":13,"nodeType":"382","messageId":"383","endLine":13772,"endColumn":16},{"ruleId":"409","severity":1,"message":"410","line":13784,"column":1,"nodeType":"411","messageId":"412","endLine":13784,"endColumn":14,"fix":"624"},{"ruleId":"409","severity":1,"message":"410","line":13910,"column":1,"nodeType":"411","messageId":"412","endLine":13910,"endColumn":14,"fix":"625"},{"ruleId":"420","severity":1,"message":"626","line":13952,"column":14,"nodeType":"382","messageId":"422","endLine":13952,"endColumn":23},{"ruleId":"420","severity":1,"message":"627","line":13954,"column":17,"nodeType":"382","messageId":"422","endLine":13954,"endColumn":22},{"ruleId":"420","severity":1,"message":"628","line":13966,"column":17,"nodeType":"382","messageId":"422","endLine":13966,"endColumn":29},{"ruleId":"409","severity":1,"message":"410","line":14328,"column":1,"nodeType":"411","messageId":"412","endLine":14328,"endColumn":14,"fix":"629"},{"ruleId":"471","severity":1,"message":"472","line":14631,"column":9,"nodeType":"473","messageId":"474","endLine":14713,"endColumn":10},{"ruleId":"409","severity":1,"message":"410","line":16535,"column":1,"nodeType":"411","messageId":"412","endLine":16535,"endColumn":14,"fix":"630"},{"ruleId":"409","severity":1,"message":"410","line":16682,"column":1,"nodeType":"411","messageId":"412","endLine":16682,"endColumn":14,"fix":"631"},{"ruleId":"409","severity":1,"message":"410","line":16720,"column":1,"nodeType":"411","messageId":"412","endLine":16720,"endColumn":14,"fix":"632"},{"ruleId":"471","severity":1,"message":"472","line":16993,"column":25,"nodeType":"473","messageId":"474","endLine":17013,"endColumn":26},{"ruleId":"430","severity":1,"message":"617","line":17057,"column":37,"nodeType":"432","messageId":"433","endLine":17057,"endColumn":39},{"ruleId":"430","severity":1,"message":"617","line":17057,"column":61,"nodeType":"432","messageId":"433","endLine":17057,"endColumn":63},{"ruleId":"409","severity":1,"message":"410","line":17160,"column":1,"nodeType":"411","messageId":"412","endLine":17160,"endColumn":14,"fix":"633"},{"ruleId":"409","severity":1,"message":"410","line":17287,"column":1,"nodeType":"411","messageId":"412","endLine":17287,"endColumn":14,"fix":"634"},{"ruleId":"420","severity":1,"message":"635","line":17870,"column":17,"nodeType":"382","messageId":"422","endLine":17870,"endColumn":20},{"ruleId":"420","severity":1,"message":"636","line":17871,"column":17,"nodeType":"382","messageId":"422","endLine":17871,"endColumn":30},{"ruleId":"420","severity":1,"message":"626","line":17985,"column":18,"nodeType":"382","messageId":"422","endLine":17985,"endColumn":27},{"ruleId":"420","severity":1,"message":"627","line":17987,"column":21,"nodeType":"382","messageId":"422","endLine":17987,"endColumn":26},{"ruleId":"420","severity":1,"message":"628","line":17997,"column":21,"nodeType":"382","messageId":"422","endLine":17997,"endColumn":33},{"ruleId":"420","severity":1,"message":"626","line":18067,"column":18,"nodeType":"382","messageId":"422","endLine":18067,"endColumn":27},{"ruleId":"420","severity":1,"message":"626","line":18074,"column":18,"nodeType":"382","messageId":"422","endLine":18074,"endColumn":27},{"ruleId":"637","severity":1,"message":"638","line":18082,"column":65,"nodeType":"402","messageId":"639","endLine":18082,"endColumn":66},{"ruleId":"380","severity":1,"message":"640","line":18328,"column":8,"nodeType":"382","messageId":"383","endLine":18328,"endColumn":16},{"ruleId":"409","severity":1,"message":"410","line":18400,"column":1,"nodeType":"411","messageId":"412","endLine":18400,"endColumn":14,"fix":"641"},{"ruleId":"471","severity":1,"message":"472","line":18847,"column":13,"nodeType":"473","messageId":"474","endLine":18862,"endColumn":14},{"ruleId":"409","severity":1,"message":"410","line":19051,"column":1,"nodeType":"411","messageId":"412","endLine":19051,"endColumn":14,"fix":"642"},{"ruleId":"420","severity":1,"message":"643","line":19374,"column":25,"nodeType":"382","messageId":"422","endLine":19374,"endColumn":38},{"ruleId":"420","severity":1,"message":"644","line":19696,"column":21,"nodeType":"382","messageId":"422","endLine":19696,"endColumn":33},{"ruleId":"420","severity":1,"message":"644","line":19705,"column":21,"nodeType":"382","messageId":"422","endLine":19705,"endColumn":33},{"ruleId":"420","severity":1,"message":"645","line":19879,"column":17,"nodeType":"382","messageId":"422","endLine":19879,"endColumn":29},{"ruleId":"420","severity":1,"message":"646","line":20083,"column":17,"nodeType":"382","messageId":"422","endLine":20083,"endColumn":18},{"ruleId":"420","severity":1,"message":"646","line":20122,"column":17,"nodeType":"382","messageId":"422","endLine":20122,"endColumn":18},{"ruleId":"409","severity":1,"message":"410","line":20271,"column":1,"nodeType":"411","messageId":"412","endLine":20271,"endColumn":14,"fix":"647"},{"ruleId":"409","severity":1,"message":"410","line":20310,"column":1,"nodeType":"411","messageId":"412","endLine":20310,"endColumn":14,"fix":"648"},{"ruleId":"409","severity":1,"message":"410","line":20352,"column":1,"nodeType":"411","messageId":"412","endLine":20352,"endColumn":14,"fix":"649"},{"ruleId":"409","severity":1,"message":"410","line":20367,"column":1,"nodeType":"411","messageId":"412","endLine":20367,"endColumn":14,"fix":"650"},{"ruleId":"409","severity":1,"message":"410","line":20390,"column":1,"nodeType":"411","messageId":"412","endLine":20390,"endColumn":14,"fix":"651"},{"ruleId":"409","severity":1,"message":"410","line":20414,"column":1,"nodeType":"411","messageId":"412","endLine":20414,"endColumn":14,"fix":"652"},{"ruleId":"409","severity":1,"message":"410","line":20437,"column":1,"nodeType":"411","messageId":"412","endLine":20437,"endColumn":14,"fix":"653"},{"ruleId":"409","severity":1,"message":"410","line":20460,"column":1,"nodeType":"411","messageId":"412","endLine":20460,"endColumn":14,"fix":"654"},{"ruleId":"409","severity":1,"message":"410","line":20483,"column":1,"nodeType":"411","messageId":"412","endLine":20483,"endColumn":14,"fix":"655"},{"ruleId":"409","severity":1,"message":"410","line":20522,"column":1,"nodeType":"411","messageId":"412","endLine":20522,"endColumn":14,"fix":"656"},{"ruleId":"409","severity":1,"message":"410","line":20561,"column":1,"nodeType":"411","messageId":"412","endLine":20561,"endColumn":14,"fix":"657"},{"ruleId":"409","severity":1,"message":"410","line":20600,"column":1,"nodeType":"411","messageId":"412","endLine":20600,"endColumn":14,"fix":"658"},{"ruleId":"409","severity":1,"message":"410","line":20703,"column":1,"nodeType":"411","messageId":"412","endLine":20703,"endColumn":14,"fix":"659"},{"ruleId":"380","severity":1,"message":"514","line":20751,"column":4,"nodeType":"382","messageId":"383","endLine":20751,"endColumn":16},{"ruleId":"409","severity":1,"message":"410","line":20758,"column":1,"nodeType":"411","messageId":"412","endLine":20758,"endColumn":14,"fix":"660"},{"ruleId":"477","severity":1,"message":"661","line":20820,"column":50,"nodeType":"469","messageId":"479","endLine":20820,"endColumn":51,"suggestions":"662"},{"ruleId":"477","severity":1,"message":"661","line":20820,"column":80,"nodeType":"469","messageId":"479","endLine":20820,"endColumn":81,"suggestions":"663"},{"ruleId":"409","severity":1,"message":"410","line":20886,"column":1,"nodeType":"411","messageId":"412","endLine":20886,"endColumn":14,"fix":"664"},{"ruleId":"409","severity":1,"message":"410","line":20923,"column":1,"nodeType":"411","messageId":"412","endLine":20923,"endColumn":14,"fix":"665"},{"ruleId":"420","severity":1,"message":"626","line":21499,"column":18,"nodeType":"382","messageId":"422","endLine":21499,"endColumn":27},{"ruleId":"420","severity":1,"message":"627","line":21501,"column":21,"nodeType":"382","messageId":"422","endLine":21501,"endColumn":26},{"ruleId":"420","severity":1,"message":"628","line":21511,"column":21,"nodeType":"382","messageId":"422","endLine":21511,"endColumn":33},{"ruleId":"420","severity":1,"message":"626","line":21521,"column":18,"nodeType":"382","messageId":"422","endLine":21521,"endColumn":27},{"ruleId":"420","severity":1,"message":"626","line":21530,"column":18,"nodeType":"382","messageId":"422","endLine":21530,"endColumn":27},{"ruleId":"409","severity":1,"message":"410","line":21654,"column":1,"nodeType":"411","messageId":"412","endLine":21654,"endColumn":14,"fix":"666"},{"ruleId":"409","severity":1,"message":"410","line":21672,"column":1,"nodeType":"411","messageId":"412","endLine":21672,"endColumn":14,"fix":"667"},"no-native-reassign",["668"],"no-negated-in-lhs",["669"],"no-unused-vars","'filteredAvailability' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'lookupCustomer'. Either include it or remove the dependency array.","ArrayExpression",["670"],"'handleServiceSelect' is assigned a value but never used.","'handleTransportSelect' is assigned a value but never used.","'handleAppointmentSelect' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/role-has-required-aria-props","Elements with the ARIA role \"option\" must have the following attributes defined: aria-selected","JSXAttribute","'setDestination' is assigned a value but never used.","'showMediaError' is assigned a value but never used.","'handleFetchAccount' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'status' is assigned a value but never used.","'setStatus' is assigned a value but never used.","'loading' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"671","text":"672"},"'recordingStatus' is assigned a value but never used.","no-dupe-keys","Duplicate key 'destination'.","ObjectExpression","Duplicate key 'video'.","Expected '!==' and instead saw '!='.","no-redeclare","'testorstart' is already defined.","redeclared","'parent' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'streamId'.","ArrowFunctionExpression","unsafeRefs","'lastSBytesReceived' is assigned a value but never used.","'sender' is already defined.","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'remoteVideo' is assigned a value but never used.","'session' is assigned a value but never used.","'remoteVideo' is already defined.",{"range":"673","text":"672"},{"range":"674","text":"672"},"'Reflect' is already defined as a built-in global variable.","Block","redeclaredAsBuiltin","'Promise' is already defined as a built-in global variable.","'p' is already defined.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'i' is already defined.",{"range":"675","text":"672"},{"range":"676","text":"672"},{"range":"677","text":"672"},{"range":"678","text":"672"},{"range":"679","text":"672"},{"range":"680","text":"672"},"'C' is assigned a value but never used.",{"range":"681","text":"672"},"'parse' is already defined.",{"range":"682","text":"672"},{"range":"683","text":"672"},{"range":"684","text":"672"},"'Grammar' is assigned a value but never used.",{"range":"685","text":"672"},"no-control-regex","Unexpected control character(s) in regular expression: \\x00, \\x0f.","Literal","Unexpected control character(s) in regular expression: \\x10, \\x1f.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","Unexpected control character(s) in regular expression: \\x0b.","Unexpected control character(s) in regular expression: \\x0e.","no-useless-escape","Unnecessary escape character: \\-.","unnecessaryEscape",["686","687"],["688","689"],"Unnecessary escape character: \\\".",["690","691"],"'expected' is defined but never used.","'error' is defined but never used.","'peg$anyExpectation' is defined but never used.",{"range":"692","text":"672"},{"range":"693","text":"672"},{"range":"694","text":"672"},{"range":"695","text":"672"},{"range":"696","text":"672"},{"range":"697","text":"672"},"'header' is already defined.",{"range":"698","text":"672"},"no-use-before-define","'CryptoJS' was used before it was defined.","usedBeforeDefined","no-shadow-restricted-names","Shadowing of global property 'undefined'.","shadowingRestrictedName","'m_w' is already defined.","'Hasher' is assigned a value but never used.",{"range":"699","text":"672"},{"range":"700","text":"672"},"'Parser' is assigned a value but never used.",{"range":"701","text":"672"},"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'uas' is already defined.",{"range":"702","text":"672"},{"range":"703","text":"672"},"'SessionState' is assigned a value but never used.","'SignalingState' is assigned a value but never used.",{"range":"704","text":"672"},{"range":"705","text":"672"},{"range":"706","text":"672"},{"range":"707","text":"672"},{"range":"708","text":"672"},"no-self-compare","Comparing to itself is potentially pointless.","comparingToSelf",{"range":"709","text":"672"},{"range":"710","text":"672"},{"range":"711","text":"672"},{"range":"712","text":"672"},{"range":"713","text":"672"},{"range":"714","text":"672"},"'TransactionState' is assigned a value but never used.",{"range":"715","text":"672"},{"range":"716","text":"672"},{"range":"717","text":"672"},"no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case",{"range":"718","text":"672"},{"range":"719","text":"672"},{"range":"720","text":"672"},"'uac' is assigned a value but never used.",{"range":"721","text":"672"},{"range":"722","text":"672"},"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral",{"range":"723","text":"672"},{"range":"724","text":"672"},{"range":"725","text":"672"},{"range":"726","text":"672"},{"range":"727","text":"672"},{"range":"728","text":"672"},{"range":"729","text":"672"},{"range":"730","text":"672"},{"range":"731","text":"672"},{"range":"732","text":"672"},{"range":"733","text":"672"},{"range":"734","text":"672"},{"range":"735","text":"672"},{"range":"736","text":"672"},{"range":"737","text":"672"},"'SubscriptionState' is assigned a value but never used.",{"range":"738","text":"672"},{"range":"739","text":"672"},{"range":"740","text":"672"},{"range":"741","text":"672"},"'Levels' is assigned a value but never used.",{"range":"742","text":"672"},{"range":"743","text":"672"},{"range":"744","text":"672"},{"range":"745","text":"672"},"no-unreachable","Unreachable code.","BreakStatement","unreachableCode",{"range":"746","text":"672"},{"range":"747","text":"672"},{"range":"748","text":"672"},"'dialogState' is already defined.","'transaction' is already defined.","'outgoingAckRequest' is already defined.","ThrowStatement",{"range":"749","text":"672"},{"range":"750","text":"672"},{"range":"751","text":"672"},{"range":"752","text":"672"},{"range":"753","text":"672"},{"range":"754","text":"672"},{"range":"755","text":"672"},{"range":"756","text":"672"},{"range":"757","text":"672"},"'causes' is assigned a value but never used.","'supported' is assigned a value but never used.","'dtmfType' is assigned a value but never used.",{"range":"758","text":"672"},{"range":"759","text":"672"},"'DialogStatus' is assigned a value but never used.","'SessionStatus' is assigned a value but never used.","'TypeStrings' is assigned a value but never used.","'UAStatus' is assigned a value but never used.",{"range":"760","text":"672"},["761","762"],"Unnecessary escape character: \\..",["763","764"],"Unnecessary escape character: \\(.",["765","766"],"Unnecessary escape character: \\).",["767","768"],["769","770"],["771","772"],["773","774"],["775","776"],["777","778"],["779","780"],["781","782"],"Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","'Utils' is assigned a value but never used.",{"range":"783","text":"672"},"'Exceptions' is assigned a value but never used.",{"range":"784","text":"672"},{"range":"785","text":"672"},"'nic' is assigned a value but never used.",{"range":"786","text":"672"},{"range":"787","text":"672"},"'parameter' is already defined.","'value' is already defined.","'checkedValue' is already defined.",{"range":"788","text":"672"},{"range":"789","text":"672"},{"range":"790","text":"672"},{"range":"791","text":"672"},{"range":"792","text":"672"},{"range":"793","text":"672"},"'len' is already defined.","'contentLength' is already defined.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'DtmfType' is assigned a value but never used.",{"range":"794","text":"672"},{"range":"795","text":"672"},"'answerOptions' is already defined.","'extraHeaders' is already defined.","'notification' is already defined.","'e' is already defined.",{"range":"796","text":"672"},{"range":"797","text":"672"},{"range":"798","text":"672"},{"range":"799","text":"672"},{"range":"800","text":"672"},{"range":"801","text":"672"},{"range":"802","text":"672"},{"range":"803","text":"672"},{"range":"804","text":"672"},{"range":"805","text":"672"},{"range":"806","text":"672"},{"range":"807","text":"672"},{"range":"808","text":"672"},{"range":"809","text":"672"},"Unnecessary escape character: \\ .",["810","811"],["812","813"],{"range":"814","text":"672"},{"range":"815","text":"672"},{"range":"816","text":"672"},{"range":"817","text":"672"},"no-global-assign","no-unsafe-negation",{"desc":"818","fix":"819"},[275,288],"",[5793,5806],[8778,8791],[20751,20764],[21649,21662],[22022,22035],[51576,51589],[52543,52556],[52802,52815],[53431,53444],[58245,58258],[58899,58912],[63485,63498],[65056,65069],{"messageId":"820","fix":"821","desc":"822"},{"messageId":"823","fix":"824","desc":"825"},{"messageId":"820","fix":"826","desc":"822"},{"messageId":"823","fix":"827","desc":"825"},{"messageId":"820","fix":"828","desc":"822"},{"messageId":"823","fix":"829","desc":"825"},[138314,138327],[140400,140413],[141927,141940],[149574,149587],[153599,153612],[154260,154273],[164199,164212],[203043,203056],[209922,209935],[219489,219502],[265142,265155],[265403,265416],[267157,267170],[267767,267780],[268484,268497],[271775,271788],[277099,277112],[290895,290908],[291270,291283],[292099,292112],[292845,292858],[293481,293494],[319938,319951],[320630,320643],[341764,341777],[343250,343263],[355652,355665],[367888,367901],[368866,368879],[384606,384619],[385377,385390],[398233,398246],[399192,399205],[399970,399983],[400751,400764],[401532,401545],[402507,402520],[403788,403801],[404806,404819],[406270,406283],[412193,412206],[417089,417102],[418056,418069],[419327,419340],[443754,443767],[444015,444028],[444683,444696],[445290,445303],[449407,449420],[449782,449795],[450245,450258],[454047,454060],[455086,455099],[455347,455360],[497956,497969],[499642,499655],[500416,500429],[520495,520508],[534771,534784],[535552,535565],[536380,536393],[537168,537181],[538012,538025],[553901,553914],[554752,554765],[560214,560227],[566994,567007],[567197,567210],[572057,572070],{"messageId":"820","fix":"830","desc":"822"},{"messageId":"823","fix":"831","desc":"825"},{"messageId":"820","fix":"832","desc":"822"},{"messageId":"823","fix":"833","desc":"825"},{"messageId":"820","fix":"834","desc":"822"},{"messageId":"823","fix":"835","desc":"825"},{"messageId":"820","fix":"836","desc":"822"},{"messageId":"823","fix":"837","desc":"825"},{"messageId":"820","fix":"838","desc":"822"},{"messageId":"823","fix":"839","desc":"825"},{"messageId":"820","fix":"840","desc":"822"},{"messageId":"823","fix":"841","desc":"825"},{"messageId":"820","fix":"842","desc":"822"},{"messageId":"823","fix":"843","desc":"825"},{"messageId":"820","fix":"844","desc":"822"},{"messageId":"823","fix":"845","desc":"825"},{"messageId":"820","fix":"846","desc":"822"},{"messageId":"823","fix":"847","desc":"825"},{"messageId":"820","fix":"848","desc":"822"},{"messageId":"823","fix":"849","desc":"825"},{"messageId":"820","fix":"850","desc":"822"},{"messageId":"823","fix":"851","desc":"825"},[581088,581101],[588124,588137],[600624,600637],[617033,617046],[622404,622417],[640725,640738],[756858,756871],[762745,762758],[763987,764000],[782682,782695],[787629,787642],[837225,837238],[867483,867496],[924926,924939],[925982,925995],[927207,927220],[927702,927715],[928459,928472],[929182,929195],[929974,929987],[930679,930692],[931405,931418],[932473,932486],[933578,933591],[934723,934736],[938533,938546],[940971,940984],{"messageId":"820","fix":"852","desc":"822"},{"messageId":"823","fix":"853","desc":"825"},{"messageId":"820","fix":"854","desc":"822"},{"messageId":"823","fix":"855","desc":"825"},[945789,945802],[947061,947074],[978525,978538],[979145,979158],"Update the dependencies array to be: [allowPhoneEntry, lookupCustomer]",{"range":"856","text":"857"},"removeEscape",{"range":"858","text":"672"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"859","text":"860"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"861","text":"672"},{"range":"862","text":"860"},{"range":"863","text":"672"},{"range":"864","text":"860"},{"range":"865","text":"672"},{"range":"866","text":"860"},{"range":"867","text":"672"},{"range":"868","text":"860"},{"range":"869","text":"672"},{"range":"870","text":"860"},{"range":"871","text":"672"},{"range":"872","text":"860"},{"range":"873","text":"672"},{"range":"874","text":"860"},{"range":"875","text":"672"},{"range":"876","text":"860"},{"range":"877","text":"672"},{"range":"878","text":"860"},{"range":"879","text":"672"},{"range":"880","text":"860"},{"range":"881","text":"672"},{"range":"882","text":"860"},{"range":"883","text":"672"},{"range":"884","text":"860"},{"range":"885","text":"672"},{"range":"886","text":"860"},{"range":"887","text":"672"},{"range":"888","text":"860"},{"range":"889","text":"672"},{"range":"890","text":"860"},[1377,1394],"[allowPhoneEntry, lookupCustomer]",[76754,76755],[76754,76754],"\\",[76874,76875],[76874,76874],[85030,85031],[85030,85030],[576340,576341],[576340,576340],[576342,576343],[576342,576342],[576344,576345],[576344,576344],[576346,576347],[576346,576346],[576359,576360],[576359,576359],[576361,576362],[576361,576361],[576363,576364],[576363,576363],[576441,576442],[576441,576441],[576443,576444],[576443,576443],[576445,576446],[576445,576445],[576447,576448],[576447,576447],[943422,943423],[943422,943422],[943452,943453],[943452,943452]]